#include "visualize.h"

#include "dprint.h"

#include <string>

const char* m_X11_Colors[95] =
{
    "LightPink",
    "Pink",
    "Crimson",
    "PaleVioletRed",
    "HotPink",
    "DeepPink",
    "MediumVioletRed",
    "Thistle",
    "Plum",
    "Violet",
    "Fuchsia",
    "Purple",
    "MediumOrchid",
    "DarkViolet",
    "MediumPurple",
    "MediumSlateBlue",
    "DarkSlateBlue",
    "Lavender",
    "RoyalBlue",
    "CornflowerBlue",
    "LightSteelBlue",
    "LightSlateGray",
    "SlateGray",
    "DodgerBlue",
    "SteelBlue",
    "LightSkyBlue",
    "DeepSkyBlue",
    "LightBlue",
    "PowderBlue",
    "CadetBlue",
    "LightCyan",
    "PaleTurquoise",
    "Aqua",
    "Teal",
    "MediumTurquoise",
    "LightSeaGreen",
    "Turquoise",
    "Aquamarine",
    "MediumAquamarine",
    "MediumSpringGreen",
    "SpringGreen",
    "MediumSeaGreen",
    "SeaGreen",
    "LightGreen",
    "PaleGreen",
    "DarkSeaGreen",
    "LimeGreen",
    "Lime",
    "Green",
    "DarkGreen",
    "LawnGreen",
    "GreenYellow",
    "DarkOliveGreen",
    "YellowGreen",
    "OliveDrab",
    "Beige",
    "Yellow",
    "Olive",
    "DarkKhaki",
    "LemonChiffon",
    "PaleGoldenrod",
    "Khaki",
    "Gold",
    "Goldenrod",
    "DarkGoldenrod",
    "Wheat",
    "Moccasin",
    "Orange",
    "NavajoWhite",
    "AntiqueWhite",
    "Tan  ",
    "Peru",
    "PeachPuff",
    "Chocolate",
    "SaddleBrown",
    "Sienna",
    "LightSalmon",
    "Coral",
    "OrangeRed",
    "DarkSalmon",
    "Tomato",
    "MistyRose",
    "Salmon",
    "LightCoral",
    "RosyBrown",
    "IndianRed",
    "Red",
    "Brown",
    "Maroon",
    "Gainsboro",
    "LightGrey",
    "Silver",
    "DarkGray",
    "Gray",
    "DimGray"
};

const char* m_X11_GrayColors[209] =
{
    "gray", "gray0", "gray1", "gray10", "gray100", "gray11", "gray12", "gray13", "gray14",
    "gray15", "gray16", "gray17", "gray18", "gray19", "gray2", "gray20", "gray21", "gray22",
    "gray23", "gray24", "gray25", "gray26", "gray27", "gray28", "gray29", "gray3", "gray30",
    "gray31", "gray32", "gray33", "gray34", "gray35", "gray36", "gray37", "gray38", "gray39",
    "gray4", "gray40", "gray41", "gray42", "gray43", "gray44", "gray45", "gray46", "gray47",
    "gray48", "gray49", "gray5", "gray50", "gray51", "gray52", "gray53", "gray54", "gray55",
    "gray56", "gray57", "gray58", "gray59", "gray6", "gray60", "gray61", "gray62", "gray63",
    "gray64", "gray65", "gray66", "gray67", "gray68", "gray69", "gray7", "gray70", "gray71",
    "gray72", "gray73", "gray74", "gray75", "gray76", "gray77", "gray78", "gray79", "gray8",
    "gray80", "gray81", "gray82", "gray83", "gray84", "gray85", "gray86", "gray87", "gray88",
    "gray89", "gray9", "gray90", "gray91", "gray92", "gray93", "gray94", "gray95", "gray96",
    "gray97", "gray98", "gray99", "grey", "grey0", "grey1", "grey10", "grey100", "grey11", "grey12",
    "grey13", "grey14", "grey15", "grey16", "grey17", "grey18", "grey19", "grey2", "grey20",
    "grey21", "grey22", "grey23", "grey24", "grey25", "grey26", "grey27", "grey28", "grey29",
    "grey3", "grey30", "grey31", "grey32", "grey33", "grey34", "grey35", "grey36", "grey37",
    "grey38", "grey39", "grey4", "grey40", "grey41", "grey42", "grey43", "grey44", "grey45",
    "grey46", "grey47", "grey48", "grey49", "grey5", "grey50", "grey51", "grey52", "grey53",
    "grey54", "grey55", "grey56", "grey57", "grey58", "grey59", "grey6", "grey60", "grey61",
    "grey62", "grey63", "grey64", "grey65", "grey66", "grey67", "grey68", "grey69", "grey7",
    "grey70", "grey71", "grey72", "grey73", "grey74", "grey75", "grey76", "grey77", "grey78",
    "grey79", "grey8", "grey80", "grey81", "grey82", "grey83", "grey84", "grey85", "grey86",
    "grey87", "grey88", "grey89", "grey9", "grey90", "grey91", "grey92", "grey93", "grey94",
    "grey95", "grey96", "grey97", "grey98", "grey99", "snow", "snow1", "snow2", "snow3",
    "snow4"
};

//const char* m_X11_Colors[95] =
//{
//    "AntiqueWhite",
//    "Aqua",
//    "Aquamarine",
//    "Beige",
//    "Brown",
//    "CadetBlue",
//    "Chocolate",
//    "Coral",
//    "CornflowerBlue",
//    "Crimson",
//    "DarkGoldenrod",
//    "DarkGray",
//    "DarkGreen",
//    "DarkKhaki",
//    "DarkOliveGreen",
//    "DarkSalmon",
//    "DarkSeaGreen",
//    "DarkSlateBlue",
//    "DarkViolet",
//    "DeepPink",
//    "DeepSkyBlue",
//    "DimGray",
//    "DodgerBlue",
//    "Fuchsia",
//    "Gainsboro",
//    "Gold",
//    "Goldenrod",
//    "Gray",
//    "Green",
//    "GreenYellow",
//    "HotPink",
//    "IndianRed",
//    "Khaki",
//    "Lavender",
//    "LawnGreen",
//    "LemonChiffon",
//    "LightBlue",
//    "LightCoral",
//    "LightCyan",
//    "LightGreen",
//    "LightGrey",
//    "LightPink",
//    "LightSalmon",
//    "LightSeaGreen",
//    "LightSkyBlue",
//    "LightSlateGray",
//    "LightSteelBlue",
//    "Lime",
//    "LimeGreen",
//    "Maroon",
//    "MediumAquamarine",
//    "MediumOrchid",
//    "MediumPurple",
//    "MediumSeaGreen",
//    "MediumSlateBlue",
//    "MediumSpringGreen",
//    "MediumTurquoise",
//    "MediumVioletRed",
//    "MistyRose",
//    "Moccasin",
//    "NavajoWhite",
//    "Olive",
//    "OliveDrab",
//    "Orange",
//    "OrangeRed",
//    "PaleGoldenrod",
//    "PaleGreen",
//    "PaleTurquoise",
//    "PaleVioletRed",
//    "PeachPuff",
//    "Peru",
//    "Pink",
//    "Plum",
//    "PowderBlue",
//    "Purple",
//    "Red",
//    "RosyBrown",
//    "RoyalBlue",
//    "SaddleBrown",
//    "Salmon",
//    "SeaGreen",
//    "Sienna",
//    "Silver",
//    "SlateGray",
//    "SpringGreen",
//    "SteelBlue",
//    "Tan  ",
//    "Teal",
//    "Thistle",
//    "Tomato",
//    "Turquoise",
//    "Violet",
//    "Wheat",
//    "Yellow",
//    "YellowGreen"
//};

std::string GraphViz_Visualizer::get_color_for_id(uint64_t pID)
{
    auto iter = m_identity_colors.find(pID);
    if (iter != m_identity_colors.end())
    {
        uint64_t lIDColor = iter->second;
        assert(lIDColor < 95);
//        dprint(DT_DEBUG, "Returning color %s for %u.\n", m_X11_Colors[iter->second], pID);
        return m_X11_Colors[iter->second];
    } else {
        m_identity_colors[pID] = m_next_color;
        if (++m_next_color == 95) m_next_color = 0;
//        dprint(DT_DEBUG, "Returning new color %s for %u.\n", m_X11_Colors[m_next_color-1], pID);
        return m_X11_Colors[m_next_color-1];
    }
}
