sp {answer*apply*op*OpNoChange*t11-1
    (state <s2> ^superstate <s1>)
    (<s1> ^nindifferent-test 1)
    (<s1> ^numbers 1)
    (<s1> ^acceptable-test 1)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^numerics <b1>)
    (<b1> ^value 1)
    (<b1> ^referent <c1>)
    (<t1> ^operators { >= 1 <c3> })
    (<t1> ^name <c2>)
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t11-2
    (state <s1> ^nindifferent-test 1)
    (<s1> ^numbers 1)
    (<s1> ^acceptable-test 1)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^numerics <b1>)
    (<b1> ^value 1)
    (<b1> ^referent <c1>)
    (<t1> ^operators { >= 1 <c3> })
    (<t1> ^name <c2>)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t41-1
    (state <s2> ^superstate <s1>)
    (<s1> ^numbers 20)
    (<s1> ^acceptable-test 20)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators { >= 20 <c2> })
    (<t1> ^name <c1>)
    -->
    (<s1> ^result op20 +)
}

sp {answerx2*apply*op*OpNoChange*t41-2
    (state <s1> ^numbers 20)
    (<s1> ^acceptable-test 20)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^operators { >= 20 <c2> })
    (<t1> ^name <c1>)
    -->
    (<s1> ^result op20 +)
}

sp {answerx2*apply*op*OpNoChange*t23-2
    (state <s1> ^require-test 1)
    (<s1> ^numbers 1)
    (<s1> ^acceptable-test 1)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^requires 1)
    (<t1> ^operators { >= 1 <c2> })
    (<t1> ^name <c1>)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t23-1
    (state <s2> ^superstate <s1>)
    (<s1> ^require-test 1)
    (<s1> ^numbers 1)
    (<s1> ^acceptable-test 1)
    (<s1> ^superstate nil)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^requires 1)
    (<t1> ^operators { >= 1 <c2> })
    (<t1> ^name <c1>)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t5-1
    (state <s2> ^superstate <s1>)
    (<s1> ^numbers 4)
    (<s1> ^acceptable-test 4)
    (<s1> ^superstate nil)
    (<s1> ^prohibit-test <c3>)
    (<s1> ^numbers <c3>)
    (<s1> ^acceptable-test <c3>)
    (<s1> ^prohibit-test <c1>)
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    (<s1> ^worst-test <c7>)
    (<s1> ^numbers <c7>)
    (<s1> ^acceptable-test <c7>)
    (<s1> ^reject-test <c5>)
    (<s1> ^numbers <c5>)
    (<s1> ^acceptable-test <c5>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^prohibits <c3>)
    (<t1> ^prohibits <c1>)
    (<t1> ^worsts <c7>)
    (<t1> ^rejects <c5>)
    (<t1> ^operators { >= <c1> <c2> })
    (<t1> ^operators { >= <c3> <c4> })
    (<t1> ^operators { >= <c5> <c6> })
    (<t1> ^operators { >= <c7> <c8> })
    (<t1> ^operators { >= 4 <c10> })
    (<t1> ^name <c9>)
    -->
    (<s1> ^result op4 +)
}

sp {answerx2*apply*op*OpNoChange*t5-2
    (state <s1> ^numbers 4)
    (<s1> ^acceptable-test 4)
    (<s1> ^superstate nil)
    (<s1> ^prohibit-test <c3>)
    (<s1> ^numbers <c3>)
    (<s1> ^acceptable-test <c3>)
    (<s1> ^prohibit-test <c4>)
    (<s1> ^numbers <c4>)
    (<s1> ^acceptable-test <c4>)
    (<s1> ^worst-test <c1>)
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    (<s1> ^reject-test <c2>)
    (<s1> ^numbers <c2>)
    (<s1> ^acceptable-test <c2>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^prohibits <c3>)
    (<t1> ^prohibits <c4>)
    (<t1> ^worsts <c1>)
    (<t1> ^rejects <c2>)
    (<t1> ^operators { >= <c4> <c6> })
    (<t1> ^operators { >= <c3> <c7> })
    (<t1> ^operators { >= <c2> <c8> })
    (<t1> ^operators { >= <c1> <c9> })
    (<t1> ^operators { >= 4 <c10> })
    (<t1> ^name <c5>)
    -->
    (<s1> ^result op4 +)
}

sp {answer*apply*op*OpNoChange*t17-1
    (state <s2> ^superstate <s1>)
    (<s1> ^better-test 1)
    (<s1> ^numbers 1)
    (<s1> ^acceptable-test 1)
    (<s1> ^superstate nil)
    (<s1> ^worse-test <c3>)
    (<s1> ^numbers <c3>)
    (<s1> ^acceptable-test <c3>)
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^betters <b2>)
    (<b2> ^referent <c1>)
    (<b2> ^value 1)
    (<t1> ^worse <b1>)
    (<b1> ^referent 1)
    (<b1> ^value <c3>)
    (<t1> ^operators { >= <c1> <c2> })
    (<t1> ^operators { >= <c3> <c4> })
    (<t1> ^operators { >= 1 <c6> })
    (<t1> ^name <c5>)
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t17-2
    (state <s1> ^better-test 1)
    (<s1> ^numbers 1)
    (<s1> ^acceptable-test 1)
    (<s1> ^superstate nil)
    (<s1> ^worse-test <c2>)
    (<s1> ^numbers <c2>)
    (<s1> ^acceptable-test <c2>)
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^betters <b1>)
    (<b1> ^referent <c1>)
    (<b1> ^value 1)
    (<t1> ^worse <b2>)
    (<b2> ^referent 1)
    (<b2> ^value <c2>)
    (<t1> ^operators { >= <c1> <c4> })
    (<t1> ^operators { >= <c2> <c5> })
    (<t1> ^operators { >= 1 <c6> })
    (<t1> ^name <c3>)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t29-1
    (state <s2> ^superstate <s1>)
    (<s1> ^bindifferent-test 1)
    (<s1> ^nindifferent-test 1)
    (<s1> ^numbers 1)
    (<s1> ^acceptable-test 1)
    (<s1> ^superstate nil)
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^binary-indifferents <b1>)
    (<b1> ^referent <c1>)
    (<b1> ^value 1)
    (<t1> ^numerics <b2>)
    (<b2> ^value 1)
    (<b2> ^referent <c3>)
    (<t1> ^operators { >= <c1> <c2> })
    (<t1> ^operators { >= 1 <c5> })
    (<t1> ^name <c4>)
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t29-2
    (state <s1> ^bindifferent-test 1)
    (<s1> ^nindifferent-test 1)
    (<s1> ^numbers 1)
    (<s1> ^acceptable-test 1)
    (<s1> ^superstate nil)
    (<s1> ^numbers <c2>)
    (<s1> ^acceptable-test <c2>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^binary-indifferents <b2>)
    (<b2> ^referent <c2>)
    (<b2> ^value 1)
    (<t1> ^numerics <b1>)
    (<b1> ^value 1)
    (<b1> ^referent <c1>)
    (<t1> ^operators { >= <c2> <c4> })
    (<t1> ^operators { >= 1 <c5> })
    (<t1> ^name <c3>)
    -->
    (<s1> ^result op1 +)
}

sp {answer*apply*op*OpNoChange*t35-1
    (state <s2> ^superstate <s1>)
    (<s1> ^best-test 2)
    (<s1> ^better-test 2)
    (<s1> ^numbers 2)
    (<s1> ^acceptable-test 2)
    (<s1> ^superstate nil)
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^bests 2)
    (<t1> ^betters <b1>)
    (<b1> ^referent <c1>)
    (<b1> ^value 2)
    (<t1> ^operators { >= <c1> <c2> })
    (<t1> ^operators { >= 2 <c4> })
    (<t1> ^name <c3>)
    -->
    (<s1> ^result op2 +)
}

sp {answerx2*apply*op*OpNoChange*t35-2
    (state <s1> ^best-test 2)
    (<s1> ^better-test 2)
    (<s1> ^numbers 2)
    (<s1> ^acceptable-test 2)
    (<s1> ^superstate nil)
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^bests 2)
    (<t1> ^betters <b1>)
    (<b1> ^referent <c1>)
    (<b1> ^value 2)
    (<t1> ^operators { >= <c1> <c3> })
    (<t1> ^operators { >= 2 <c4> })
    (<t1> ^name <c2>)
    -->
    (<s1> ^result op2 +)
}

sp {answer*apply*op*OpNoChange*t47-1
    (state <s2> ^superstate <s1>)
    (<s1> ^numbers 4)
    (<s1> ^acceptable-test 4)
    (<s1> ^superstate nil)
    (<s1> ^prohibit-test <c1>)
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    (<s1> ^worst-test <c5>)
    (<s1> ^numbers <c5>)
    (<s1> ^acceptable-test <c5>)
    (<s1> ^worst-test <c3>)
    (<s1> ^numbers <c3>)
    (<s1> ^acceptable-test <c3>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^prohibits <c1>)
    (<t1> ^worsts <c5>)
    (<t1> ^worsts <c3>)
    (<t1> ^operators { >= <c1> <c2> })
    (<t1> ^operators { >= <c3> <c4> })
    (<t1> ^operators { >= <c5> <c6> })
    (<t1> ^operators { >= 4 <c8> })
    (<t1> ^name <c7>)
    -->
    (<s1> ^result op4 +)
}

sp {answerx2*apply*op*OpNoChange*t47-2
    (state <s1> ^numbers 4)
    (<s1> ^acceptable-test 4)
    (<s1> ^superstate nil)
    (<s1> ^prohibit-test <c3>)
    (<s1> ^numbers <c3>)
    (<s1> ^acceptable-test <c3>)
    (<s1> ^worst-test <c1>)
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    (<s1> ^worst-test <c2>)
    (<s1> ^numbers <c2>)
    (<s1> ^acceptable-test <c2>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^prohibits <c3>)
    (<t1> ^worsts <c1>)
    (<t1> ^worsts <c2>)
    (<t1> ^operators { >= <c3> <c5> })
    (<t1> ^operators { >= <c2> <c6> })
    (<t1> ^operators { >= <c1> <c7> })
    (<t1> ^operators { >= 4 <c8> })
    (<t1> ^name <c4>)
    -->
    (<s1> ^result op4 +)
}

sp {answer*apply*op*OpNoChange*t53-1
    (state <s2> ^superstate <s1>)
    (<s1> ^bindifferent-test 1)
    (<s1> ^nindifferent-test 1)
    (<s1> ^numbers 1)
    (<s1> ^acceptable-test 1)
    (<s1> ^superstate nil)
    (<s1> ^bindifferent-test <c5>)
    (<s1> ^numbers <c5>)
    (<s1> ^acceptable-test <c5>)
    (<s1> ^bindifferent-test <c3>)
    (<s1> ^numbers <c3>)
    (<s1> ^acceptable-test <c3>)
    (<s1> ^bindifferent-test <c1>)
    (<s1> ^numbers <c1>)
    (<s1> ^acceptable-test <c1>)
    (<s1> ^numbers <c11>)
    (<s1> ^acceptable-test <c11>)
    (<s1> ^numbers <c9>)
    (<s1> ^acceptable-test <c9>)
    (<s1> ^numbers <c7>)
    (<s1> ^acceptable-test <c7>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^binary-indifferents <b1>)
    (<b1> ^referent <c11>)
    (<b1> ^value 1)
    (<t1> ^binary-indifferents <b2>)
    (<b2> ^referent <c9>)
    (<b2> ^value 1)
    (<t1> ^binary-indifferents <b3>)
    (<b3> ^referent <c7>)
    (<b3> ^value 1)
    (<t1> ^binary-indifferents <b4>)
    (<b4> ^referent 1)
    (<b4> ^value <c5>)
    (<t1> ^binary-indifferents <b5>)
    (<b5> ^referent 1)
    (<b5> ^value <c3>)
    (<t1> ^binary-indifferents <b6>)
    (<b6> ^referent 1)
    (<b6> ^value <c1>)
    (<t1> ^numerics <b7>)
    (<b7> ^value 1)
    (<b7> ^referent <c13>)
    (<t1> ^operators { >= <c1> <c2> })
    (<t1> ^operators { >= <c3> <c4> })
    (<t1> ^operators { >= <c5> <c6> })
    (<t1> ^operators { >= <c7> <c8> })
    (<t1> ^operators { >= <c9> <c10> })
    (<t1> ^operators { >= <c11> <c12> })
    (<t1> ^operators { >= 1 <c15> })
    (<t1> ^name <c14>)
    -->
    (<s1> ^result op1 +)
}

sp {answerx2*apply*op*OpNoChange*t53-2
    (state <s1> ^bindifferent-test 1)
    (<s1> ^nindifferent-test 1)
    (<s1> ^numbers 1)
    (<s1> ^acceptable-test 1)
    (<s1> ^superstate nil)
    (<s1> ^bindifferent-test <c5>)
    (<s1> ^numbers <c5>)
    (<s1> ^acceptable-test <c5>)
    (<s1> ^bindifferent-test <c6>)
    (<s1> ^numbers <c6>)
    (<s1> ^acceptable-test <c6>)
    (<s1> ^bindifferent-test <c7>)
    (<s1> ^numbers <c7>)
    (<s1> ^acceptable-test <c7>)
    (<s1> ^numbers <c2>)
    (<s1> ^acceptable-test <c2>)
    (<s1> ^numbers <c3>)
    (<s1> ^acceptable-test <c3>)
    (<s1> ^numbers <c4>)
    (<s1> ^acceptable-test <c4>)
    (<s1> ^operator <o1>)
    (<o1> ^name do-test)
    (<o1> ^test <t1>)
    (<t1> ^binary-indifferents <b2>)
    (<b2> ^referent <c2>)
    (<b2> ^value 1)
    (<t1> ^binary-indifferents <b3>)
    (<b3> ^referent <c3>)
    (<b3> ^value 1)
    (<t1> ^binary-indifferents <b4>)
    (<b4> ^referent <c4>)
    (<b4> ^value 1)
    (<t1> ^binary-indifferents <b5>)
    (<b5> ^referent 1)
    (<b5> ^value <c5>)
    (<t1> ^binary-indifferents <b6>)
    (<b6> ^referent 1)
    (<b6> ^value <c6>)
    (<t1> ^binary-indifferents <b7>)
    (<b7> ^referent 1)
    (<b7> ^value <c7>)
    (<t1> ^numerics <b1>)
    (<b1> ^value 1)
    (<b1> ^referent <c1>)
    (<t1> ^operators { >= <c7> <c9> })
    (<t1> ^operators { >= <c6> <c10> })
    (<t1> ^operators { >= <c5> <c11> })
    (<t1> ^operators { >= <c4> <c12> })
    (<t1> ^operators { >= <c3> <c13> })
    (<t1> ^operators { >= <c2> <c14> })
    (<t1> ^operators { >= 1 <c15> })
    (<t1> ^name <c8>)
    -->
    (<s1> ^result op1 +)
}
