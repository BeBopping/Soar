sp {answer*apply*props*fail*search*prohibit*StateNoChange*t357-1
    (state <s2> ^rootstate <s1>)
   -{ (<s1> ^operator <o*1>)
      (<o*1> ^name remove-cheese)}
    (<s1> ^name ets ^cheese <c1>)
    -->
    (<s2> ^props-blink true +)
}

sp {answerx2*apply*props*result*affirm*success*lhs*StateNoChange*t355-3
    (state <s1> ^rootstate <s3> ^evalstate <s2>)
    (<s3> ^name ets ^cheese <c1>)
    -->
    (<s2> ^props-blink true + ^props-flag reset-prohibits +)
}

sp {answer*apply*props*result*affirm*success*lhs*StateNoChange*t355-2
    (state <s1> ^name props-eval ^evalstate <s3> ^props-instructions <l2>
          ^props-can-evaluate <c5> ^rootstate <s2> ^const <l1>
          ^name { << props-eval instruction >> <c1> })
   -{ (<s1> ^impasse no-change ^attribute operator ^superstate <s3>)}
    (<l2> ^prop-type instruction-lhs ^lti-name <c5>
          ^{ << condition action >> <c2> } _P102
          ^{ << condition action >> <c6> } <c7>
          -^{ << condition action >> <a*2> } { <> <c7> <v*1> })
    (<s2> ^cheese <c4> ^name <c3>)
    (<l1> ^1 <c3>)
    -->
    (<l2> ^props-result success +)
    (<s3> ^props-blink true + ^props-flag reset-prohibits +)
}

sp {answer*apply*props*result*affirm*success*lhs*StateNoChange*t355-1
    (state <s1> ^name props-eval ^props-instructions <l2>
          ^props-can-evaluate <c5> ^rootstate <s2> ^const <l1>
          ^name { << props-eval instruction >> <c1> })
   -{ (<s1> ^impasse no-change ^attribute operator ^superstate <s1>)}
    (<l2> ^prop-type instruction-lhs ^lti-name <c5>
          ^{ << condition action >> <c2> } _P102
          ^{ << condition action >> <c6> } <c7>
          -^{ << condition action >> <a*2> } { <> <c7> <v*1> })
    (<s2> ^cheese <c4> ^name <c3>)
    (<l1> ^1 <c3>)
    -->
    (<l2> ^props-result success +)
    (<s1> ^props-blink true + ^props-flag reset-prohibits +)
}

sp {answer*apply*props*symbol*success*OpNoChange*t354-1
    (state <s2> ^operator <o1> ^props-instructions <l1> ^evals <e1>
          ^rootstate <s1> ^const <l2>
          ^name { << props-eval instruction >> <c5> })
    (<o1> ^name instruction ^symbol <l1>)
    (<l1> ^lti-name <c11> ^{ << condition action >> <c2> } _P10
          ^{ << condition action >> <c4> } |_P1|
          ^{ << condition action >> <c8> } <c9>
          ^{ << condition action >> <c6> } <c7>)
    (<e1> -^evaluated <c11> ^passed <c10>)
    (<s1> ^cheese <c1> ^name <c3>)
    (<l2> ^1 <c3>)
    -->
    (<e1> ^evaluated <c11> + ^passed <c10> - ^passed (+ 1 <c10>) +)
}

sp {answer*apply*props*combine*search*merge*pair*OpNoChange*t331-1
    (state <s1> ^props-instructions <l2> ^operator <o1> ^smem <l1>)
    (<l2> ^condition _P10 ^condition |_P1|)
    (<o1> ^name props-combine-search ^lti-name <c1>)
    (<l1> ^command <c2>)
    -->
    (<s1> ^props-to-combine <c3> +)
    (<c3> ^attr condition + ^sym1 |_P1| + ^sym2 _P10 + ^newname _P102 +)
}

sp {answer*apply*props*success*end*StateNoChange*t291-5
    (state <s1> ^rootstate <s2>)
    (<s2> ^name ets ^operator <o1>)
    (<o1> ^name add-cheddar)
    -->
    (<s2> ^props-blink true +)
}

sp {answer*apply*props*success*action*add*new*OpNoChange*t291-3
    (state <s1> ^rootstate <s2>)
    (<s2> ^name ets ^operator <o1>)
    (<o1> ^name add-cheddar)
    -->
    (<s2> ^cheese cheddar +)
}

sp {answer*apply*props*success*action*add*new*OpNoChange*t291-1
    (state <s1> ^rootstate <s2>)
    (<s2> ^name ets ^operator <o1>)
    (<o1> ^name add-cheddar)
    -->
    (<s2> ^hasmade cheddar +)
}

sp {answer*apply*props*result*affirm*success*lhs*StateNoChange*t262-1
    (state <s1> ^name props-eval ^props-instructions <l2>
          ^props-can-evaluate <c5> ^rootstate <s2> ^const <l1>
          ^name { << props-eval instruction >> <c1> })
   -{ (<s1> ^impasse no-change ^attribute operator ^superstate <s1>)}
    (<l2> ^prop-type instruction-lhs ^lti-name <c5>
          ^{ << condition action >> <c2> } _P71
          ^{ << condition action >> <c6> } <c7>
          -^{ << condition action >> <a*2> } { <> <c7> <v*1> })
    (<l1> ^1 <c4> ^2 <c3>)
    (<s2> ^name <c4> ^operator <o1>)
    (<o1> ^name <c3>)
    -->
    (<l2> ^props-result success +)
    (<s1> ^props-blink true + ^props-flag reset-prohibits +)
}

sp {answer*apply*props*symbol*success*OpNoChange*t261-1
    (state <s2> ^operator <o2> ^props-instructions <l2> ^evals <e1>
          ^rootstate <s1> ^const <l1>
          ^name { << props-eval instruction >> <c5> })
    (<o2> ^name instruction ^symbol <l2>)
    (<l2> ^lti-name <c11> ^{ << condition action >> <c2> } |_P7|
          ^{ << condition action >> <c4> } |_P1|
          ^{ << condition action >> <c8> } <c9>
          ^{ << condition action >> <c6> } <c7>)
    (<e1> -^evaluated <c11> ^passed <c10>)
    (<l1> ^1 <c3> ^2 <c1>)
    (<s1> ^name <c3> ^operator <o1>)
    (<o1> ^name <c1>)
    -->
    (<e1> ^evaluated <c11> + ^passed <c10> - ^passed (+ 1 <c10>) +)
}

sp {answer*apply*props*success*action*indifferent*t215-3
    (state <s1> ^rootstate <s2>)
    (<s2> -^cheese <val> ^name ets)
    -->
    (<s2> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*add*cheese +)
    (<o1> ^name add-brie +)
}

sp {answer*apply*props*success*action*indifferent*t215-1
    (state <s1> ^rootstate <s2>)
    (<s2> -^cheese <val> ^name ets)
    -->
    (<s2> ^operator <o1> + ^operator <o1> =
           ^props-active-rule propose*add*cheese +)
    (<o1> ^name add-cheddar +)
}

sp {answer*apply*props*result*affirm*success*lhs*StateNoChange*t149-1
    (state <s1> ^name props-eval ^rootstate <s2> ^props-instructions <l1>
          ^props-can-evaluate <c5> ^const <l2>
          ^name { << props-eval instruction >> <c4> })
   -{ (<s1> ^impasse no-change ^attribute operator ^superstate <s1>)}
    (<s2> -^cheese <val> ^name <c2>)
    (<l1> ^prop-type instruction-lhs ^lti-name <c5>
          ^{ << condition action >> <c1> } |_P2|
          ^{ << condition action >> <c3> } |_P1|
          ^{ << condition action >> <c8> } <c9>
          ^{ << condition action >> <c6> } <c7>)
    (<l2> ^1 <c2>)
    -->
    (<l1> ^props-result success +)
    (<s1> ^props-blink true + ^props-flag reset-prohibits +)
}

sp {answer*set*props*symbol*status*response*propagate*fail*StateNoChange*t107-2
    (state <s1> ^props-can-evaluate <c4> ^props-instructions <l2>
          ^rootstate <s2> ^const <l1>
          ^name { << props-eval instruction >> <c1> })
    (<l2> ^lti-name <c4> ^{ << condition action >> <c2> } _P71)
    (<l1> ^2 <c3>)
   -{ (<s2> ^operator <o*1>)
      (<o*1> ^name <c3>)}
    -->
    (<l2> ^status fail +)
}

sp {answer*set*props*symbol*status*response*propagate*fail*OpNoChange*t107-1
    (state <s1> ^operator <o1> ^props-instructions <l2> ^rootstate <s2>
          ^const <l1> ^name { << props-eval instruction >> <c1> })
    (<o1> ^name instruction ^symbol <l2>)
    (<l1> ^2 <c3>)
   -{ (<s2> ^operator <o*1>)
      (<o*1> ^name <c3>)}
    (<l2> ^{ << condition action >> <c2> } |_P7|)
    -->
    (<l2> ^status fail +)
}

sp {answer*apply*props*combine*search*merge*pair*OpNoChange*t82-1
    (state <s1> ^props-instructions <l2> ^operator <o1> ^smem <l1>)
    (<l2> ^condition |_P7| ^condition |_P1|)
    (<o1> ^name props-combine-search ^lti-name <c1>)
    (<l1> ^command <c2>)
    -->
    (<s1> ^props-to-combine <c3> +)
    (<c3> ^attr condition + ^sym1 |_P1| + ^sym2 |_P7| + ^newname _P71 +)
}

sp {answer*set*props*symbol*status*response*propagate*fail*StateNoChange*t58-1
    (state <s1> ^rootstate <s2> ^props-can-evaluate <c2>
          ^props-instructions <l1>)
    (<s2> -^cheese <val>)
    (<l1> ^lti-name <c2> ^{ << condition action >> <c1> } _P10)
    -->
    (<l1> ^status fail +)
}

sp {answer*set*props*symbol*status*response*propagate*fail*StateNoChange*t30-1
    (state <s1> ^props-can-evaluate <c4> ^props-instructions <l2>
          ^rootstate <s2> ^const <l1>
          ^name { << props-eval instruction >> <c1> })
    (<l2> ^lti-name <c4> ^{ << condition action >> <c2> } |_P7|)
    (<l1> ^2 <c3>)
   -{ (<s2> ^operator <o*1>)
      (<o*1> ^name <c3>)}
    -->
    (<l2> ^status fail +)
}



