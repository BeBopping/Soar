max-chunks 1000
max-elaborations 500
watch 1
smem --set learning on
smem --set initial-variable-id 999000
alias mem production memory-usage
alias pfc print -fc
max-goal-depth 100
alias stcyc stats --cycle
alias statsm stats -M

epmem --off
decide indifferent-selection -x
multi-attributes object 20
multi-attributes preposition 10
multi-attributes property 9
multi-attributes relation 8
chunk only

sp {evaluate-operator*elaborate*state*look-ahead-operator*merge*copy
    :default
    (state <s> ^name evaluate-operator)
    (<s> ^id-mapping <im>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^superoperator <o>)
    (<o> ^name merge)
    (<o> ^assigner <assigner>)
    (<o> ^receiver <receiver>)
    (<im> ^<receiver> <ri>)
    (<im> ^<assigner> <ni>)
    -->
    (<s> ^look-ahead-operator <copy-o> +)
    (<s> ^untried-tied-operator <copy-o> +)
    (<copy-o> ^name merge +)
    (<copy-o> ^receiver <ri> +)
    (<copy-o> ^assigner <ni> +)
}

sp {selection*elaborate*comprehend
    :default
    (state <s> ^choices multiple)
    (<s> ^superstate <ss>)
    (<ss> ^name comprehension)
    -->
    (<s> ^problem-space <p*1> +)
    (<p*1> ^use-selection-space true +)
}

sp {selection*elaborate*name
    :default
    (state <s> ^choices multiple)
    (<s> ^problem-space <p*1>)
    (<p*1> ^use-selection-space true)
    -->
    (<s> ^name selection +)
}

sp {evaluate-operator*elaborate*symbolic-evaluation*from-subgoal
    :default
    (state <ss> ^superstate <s>)
    (<s> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^evaluation <e>)
    (<s> ^evaluation <e>)
    (<so> ^evaluation <e*1>)
    (<e*1> ^desired <eb>)
    (<ss>
          ^{ << required-success success partial-success indifferent partial-failure failure prohibit-failure >> <svalue> } <eb>)
    -->
    (<e> ^symbolic-value <svalue> +)
}

sp {evaluate-operator*elaborate*symbolic-evaluation*from-subgoal*depth-exceeded*duplicate-desired
    :default
    (state <ss> ^depth-exceeded <eb>)
    (<eb> ^duplicate-of <des>)
    (<ss> ^superstate <s>)
    (<s> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^evaluation <e*1>)
    (<e*1> ^desired <des>)
    (<so> ^evaluation <e>)
    (<s> ^evaluation <e>)
    -->
    (<e> ^symbolic-value depth-exceeded +)
}

sp {evaluate-operator*elaborate*symbolic-evaluation*from-subgoal*depth-exceeded
    :default
    (state <ss> ^depth-exceeded <eb>)
    (<ss> ^superstate <s>)
    (<s> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^evaluation <e*1>)
    (<e*1> ^desired <eb>)
    (<so> ^evaluation <e>)
    (<s> ^evaluation <e>)
    -->
    (<e> ^symbolic-value depth-exceeded +)
}

sp {selection*elaborate*evaluate-operator*remaining-operators*current-evaluation-depth
    :default
    (state <s> ^name selection)
    (<s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<s> ^evaluation <e>)
    (<s> ^remaining-operators <ro>)
    (<s> ^current-evaluation-depth <ced>)
    -->
    (<e> ^remaining-operators <ro> +)
    (<e> ^current-evaluation-depth <ced> +)
}

sp {selection*apply*evaluate-operator*depth
    :default
    (state <s> ^operator <o> +)
    (<o> ^name evaluate-operator)
    (<s> ^current-evaluation-depth <ced>)
    (<o> ^superoperator <i>)
   -{ (state <s> ^evaluation <e>)
      (<e> ^current-evaluation-depth <ced>)
      (<e> ^superoperator <i>)
      (<e> ^value true)}
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^learning <l*1>)
    (<l*1> ^type exploration)
    -->
    (<o> ^current-evaluation-depth <ced> +)
}

sp {selection*propose*evaluate-operator
    :default
    (state <s> ^name selection)
    (<s> ^item <i>)
   -{ (state <s> ^evaluation <e>)
      (<e> ^superoperator <i>)
      (<e> ^value true)}
    -->
    (<s> ^operator <o> +)
    (<o> ^name evaluate-operator +)
    (<o> ^superoperator <i> +)
}

sp {selection*select*failure-evaluation-becomes-reject-preference
    :default
    (state <s> ^name selection)
    (<s> ^quiescence t)
    (<s> ^evaluation <e1>)
    (<e1> ^symbolic-value { << lose failure >> <s*1> })
    (<e1> ^superoperator <o1>)
    (<e1> ^desired <e>)
    (<s> ^superstate <ss>)
    (<ss> ^desired <e>)
    -->
    (<ss> ^operator <o1> <)
    (<ss> ^operator <o1> = -1.000000)
}

sp {evaluate-operator*failure
    :default
    (state <s> ^quiescence t)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<ss> ^name evaluate-operator)
    (<ss> ^desired <d>)
    -->
    (<ss> ^exhaustion-failure <d> +)
    (<ss> ^failure <d> +)
}

sp {evaluate-operator*elaborate*return*current-waypoint
    :default
    (state <s> ^name evaluate-operator)
    (<s> ^tried-tied-operator <t*1>)
    (<s> ^current-waypoint <wp>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^current-waypoint <c*1>)
    -->
    (<e> ^current-waypoint <wp> +)
}

sp {evaluate-operator*elaborate*return*visited
    :default
    :o-support
    (state <s> ^name evaluate-operator)
    (<s> ^tried-tied-operator <t*1>)
    (<s> ^current-waypoint <wp>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    -->
    (<s> ^visited <wp> +)
}

sp {selection*apply*state*evaluation*path-current
    :default
    (state <s> ^name selection)
    (<s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
   -{ (<e> ^path-cost <p*1>)
      (<e> ^current-waypoint <c*1>)}
    (<s> ^path-cost <pc>)
    (<s> ^current-waypoint <wp>)
    -->
    (<e> ^path-cost <pc> +)
    (<e> ^current-waypoint <wp> +)
}

sp {selection*apply*state*evaluation
    :default
    (state <s> ^name selection)
    (<s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^superoperator <ob>)
   -{ (<s> ^evaluation <e*1>)
      (<e*1> ^superoperator <ob>)}
    -->
    (<s> ^evaluation <e> +)
    (<e> ^superoperator <ob> +)
}

sp {apply*compute-best-total-estimate*pass-back-super
    :default
    (state <s> ^operator <op>)
    (<op> ^name compute-best-total-estimate)
    (<s> ^evaluation <e>)
    (<e> ^total-estimated-cost <tes>)
   -{ (<s> ^evaluation <e*1>)
      (<e*1> ^total-estimated-cost { < <tes> <t*1> })}
    (<e> ^superoperator <so>)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^evaluation <se>)
    (<se> ^estimated-cost { < <tes> <sec> })
    -->
    (<se> ^estimated-cost <sec> -)
    (<se> ^estimated-cost <tes> +)
    (<se> ^updated-estimate true +)
}

sp {apply*compute-best-total-estimate*remove-old
    :default
    (state <s> ^operator <op>)
    (<op> ^name compute-best-total-estimate)
    (<s> ^best-total-estimate <bte>)
    (<s> ^evaluation <e>)
    (<e> ^total-estimated-cost { <> <bte> <tes> })
   -{ (<s> ^evaluation <e*1>)
      (<e*1> ^total-estimated-cost { < <tes> <t*1> })}
    -->
    (<s> ^best-total-estimate <bte> -)
}

sp {apply*compute-best-total-estimate
    :default
    (state <s> ^operator <op>)
    (<op> ^name compute-best-total-estimate)
    (<s> ^evaluation <e>)
    (<e> ^total-estimated-cost <tes>)
   -{ (<s> ^evaluation <e*1>)
      (<e*1> ^total-estimated-cost { < <tes> <t*1> })}
    -->
    (<s> ^best-total-estimate <tes> +)
}

sp {selection*propose*compute-best-total-estimate2
    :default
    (state <s> ^name selection)
    (<s> -^not-all-operators-total-estimated-cost true)
    (<s> ^best-total-estimate <bte>)
   -{ (<s> ^evaluation <e*2>)
      (<e*2> ^total-estimated-cost { <= <bte> <t*1> })}
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^evaluation <e*1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name compute-best-total-estimate +)
}

sp {selection*propose*compute-best-total-estimate
    :default
    (state <s> ^name selection)
    (<s> -^best-total-estimate <bte>)
    (<s> -^not-all-operators-total-estimated-cost true)
   -{ (<s> ^problem-space <p*1>)
      (<p*1> ^learning <l*1>)
      (<l*1> ^type exploration)}
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^evaluation <e*1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name compute-best-total-estimate +)
}

sp {Impasse__Operator_Tie*compare*selection*equal*estimated-cost
    :default
    (state <s> ^name selection)
    (<s> ^operator <op2> +)
    (<op2> ^name evaluate-operator)
    (<s> ^operator { <> <op2> <op1> } +)
    (<op1> ^name evaluate-operator)
    (<op2> ^evaluation <e*2>)
    (<e*2> ^total-estimated-cost <ec>)
    (<op1> ^evaluation <e*1>)
    (<e*1> ^total-estimated-cost <ec>)
    -->
    (<s> ^operator <op1> = <op2>)
}

sp {Impasse__Operator_Tie*compare*selection*prefer*lower*estimated-cost
    :default
    (state <s> ^name selection)
    (<s> ^operator <op2> +)
    (<op2> ^name evaluate-operator)
    (<s> ^operator <op1> +)
    (<op1> ^name evaluate-operator)
    (<s> ^evaluation <e2>)
    (<e2> ^superoperator <sop2>)
    (<op2> ^superoperator <sop2>)
    (<e2> ^total-estimated-cost <t*1>)
    (<s> ^evaluation <e1>)
    (<e1> ^superoperator <sop1>)
    (<op1> ^superoperator <sop1>)
    (<e1> ^total-estimated-cost { < <t*1> <ec> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {Impasse__Operator_Tie*compare*selection*prefer*no*estimated-cost
    :default
    (state <s> ^name selection)
    (<s> ^operator <op2> +)
    (<op2> ^name evaluate-operator)
    (<s> ^operator <op1> +)
    (<op1> ^name evaluate-operator)
    (<op1> ^superoperator <sop>)
   -{ (<s> ^evaluation <e>)
      (<e> ^superoperator <sop>)
      (<e> ^path-cost <p*1>)
      (<e> ^estimated-cost <e*1>)}
    (<s> ^evaluation <e2>)
    (<e2> ^superoperator <sop2>)
    (<op2> ^superoperator <sop2>)
    (<e2> ^estimated-cost <e*2>)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {selection*elaborate*superstate*preferences*indifferent*better*final-cost
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e2>)
    (<e2> ^symbolic-value indifferent)
    (<s> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-cost <fc>)
    (<e2> ^superoperator <so2>)
    (<e1> ^superoperator <so1>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
}

sp {selection*elaborate*superstate*preferences*final-cost*equal
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e2>)
    (<e2> ^final-cost <fc>)
    (<s> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-cost <fc>)
    (<e2> ^superoperator <so2>)
    (<e1> ^superoperator <so1>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> = <so2>)
}

sp {selection*elaborate*evaluation*final-cost
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e>)
    (<e> ^estimated-cost 0)
    (<e> ^path-cost <pc>)
    -->
    (<e> ^final-cost <pc> +)
    (<e> ^value true +)
}

sp {selection*elaborate*evaluation*total-estimated-cost
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e>)
    (<e> ^path-cost <pc>)
    (<e> ^estimated-cost { <> 0 <ec> })
    -->
    (<e> ^total-estimated-cost (+ <ec> <pc>) +)
}

sp {selection*elaborate*evaluation*estimated-cost
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e>)
    (<e> -^updated-estimate true)
    (<e> ^current-waypoint <cur-wp>)
    (<s> -^current-waypoint <cur-wp>)
    (<s> ^desired-waypoint <des-wp>)
    (<des-wp> ^y <dy>)
    (<cur-wp> ^y <cy>)
    (<des-wp> ^x <dx>)
    (<cur-wp> ^x <cx>)
    -->
    (<e> ^estimated-cost (compute-range <cx> <cy> <dx> <dy>) +)
}

sp {selection*elaborate*state*all-objects-total-estimated-cost
    :default
    (state <s> ^name selection)
    (<s> ^operator <o> +)
   -{ (<o> ^evaluation <e*1>)
      (<e*1> ^total-estimated-cost <t*1>)}
    (<o> ^name evaluate-operator)
    -->
    (<s> ^not-all-operators-total-estimated-cost true +)
}

sp {evaluate-operator*elaborate*visited*current-location
    :default
    (state <s> ^name selection)
    (<s> ^operator <op>)
    (<op> ^name evaluate-operator)
    (<op> ^evaluation <e>)
    (<s> ^current-waypoint <wp>)
    -->
    (<e> ^visited <wp> +)
}

sp {evaluate-operator*elaborate*forward*visited
    :default
    (state <s> ^name selection)
    (<s> ^operator <op>)
    (<op> ^name evaluate-operator)
    (<op> ^evaluation <e>)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^evaluation <e*1>)
    (<e*1> ^visited <ewp>)
    -->
    (<e> ^visited <ewp> +)
}

sp {elaborate*state*top-state
    :default
    (state <s> ^superstate <s*1>)
    (<s> -^name evaluate-operator)
    (<s*1> ^top-state <ts>)
    -->
    (<s> ^top-state <ts> +)
}

sp {default*select*reject*conflict
    "Reject an object if it leads to a conflict that can not be resolved."
    :default
    (state <s3> ^quiescence t)
    (<s3> ^choices none)
    (<s3> ^attribute state)
    (<s3> ^superstate <s2>)
    (<s2> ^quiescence t)
    (<s2> ^impasse conflict)
    (<s2> ^attribute operator)
    (<s2> ^item <o>)
    (<s2> ^superstate <s1>)
    (<s1> ^operator <o> +)
    -->
    (<s1> ^operator <o> -)
}

sp {default*select*indifferent-and-worst*tied
    "Indifferent an object if it leads to a tie that can not be resolved."
    :default
    (state <s3> ^quiescence t)
    (<s3> ^choices none)
    (<s3> ^attribute state)
    (<s3> ^superstate <s2>)
    (<s2> ^quiescence t)
    (<s2> ^superstate <s1>)
    (<s1> -^ntype heuristic)
    (<s2> ^item <o>)
    (<s1> ^operator <o> +)
    -->
    (<s1> ^operator <o> =)
    (<s1> ^operator <o> <)
}

sp {default*top-goal*halt*operator*failure
    "Halt if no operator can be selected for the top goal."
    :default
    (state <ss> ^impasse constraint-failure)
    (<ss> ^superstate <s>)
    (<s> ^superstate nil)
    -->
    (interrupt)
}

sp {top-ps*propose*wait
    "Propose wait if there is a state no-change."
    :default
    (state <s> ^quiescence t)
   -{ (<s> ^operator <o*1>)
      (<o*1> ^name wait)}
    (<s> ^choices none)
    (<s> ^attribute state)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name wait +)
}

sp {evaluate-operator*elaborate*state*remove*untried-tied-operator2
    :default
    (state <s> ^untried-tied-operator <o>)
    (<o> -^action-type <a*1>)
    (<s> ^look-ahead-operator <o>)
    (<s> ^operator <o>)
    -->
    (<s> ^untried-tied-operator <o> -)
}

sp {evaluate-operator*elaborate*state*tried-tied-operator
    :default
    (state <s> ^look-ahead-operator <o>)
    (<o> -^action-type composite)
    (<o> -^action-type primitive)
    (<s> ^operator <o>)
    -->
    (<s> ^tried-tied-operator <o> +)
}

sp {evaluate-operator*elaborate*state*remove*untried-tied-operator*composite-action
    :default
    (state <s> ^desired <d>)
    (<s> ^success <d>)
    (<s> ^superstate <ss>)
    (<ss> ^untried-tied-operator <o>)
    (<ss> ^look-ahead-operator <o>)
    (<o> ^action-type composite)
    (<ss> ^operator <o>)
    -->
    (<ss> ^untried-tied-operator <o> -)
}

sp {evaluate-operator*elaborate*state*remove*untried-tied-operator
    :default
    (state <s> ^untried-tied-operator <o>)
    (<s> ^look-ahead-operator <o>)
    (<o> ^action-type primitive)
    (<s> ^operator <o>)
    -->
    (<s> ^untried-tied-operator <o> -)
}

sp {evaluate-operator*elaborate*state*tried-tied-operator*composite-action
    :default
    (state <s> ^desired <d>)
    (<s> ^success <d>)
    (<s> ^superstate <ss>)
    (<ss> ^look-ahead-operator <o>)
    (<o> -^action-type primitive)
    (<ss> ^operator <o>)
    -->
    (<ss> ^tried-tied-operator <o> +)
}

sp {evaluate-operator*elaborate*state*tried-tied-operator*primitive-action
    :default
    (state <s> ^look-ahead-operator <o>)
    (<o> ^action-type primitive)
    (<s> ^operator <o>)
    -->
    (<s> ^tried-tied-operator <o> +)
}

sp {evaluate-operator*propose*look-ahead*reject-all-others
    :default
    (state <s> ^untried-tied-operator <o>)
    (<s> ^look-ahead-operator <o>)
    (<s> ^operator { <> <o> <o1> } +)
    -->
    (<s> ^operator <o1> -)
}

sp {evaluate-operator*propose*look-ahead
    :default
    (state <s> ^untried-tied-operator <o>)
    (<s> ^look-ahead-operator <o>)
    -->
    (<s> ^operator <o> +)
}

sp {evaluate-operator*elaborate*evaluation*failure*no-operators
    :default
    (state <goal-nc> ^quiescence t)
    (<goal-nc> ^impasse no-change)
    (<goal-nc> ^attribute state)
    (<goal-nc> ^superstate <state-nc>)
    (<state-nc> ^quiescence t)
    (<state-nc> ^impasse no-change)
    (<state-nc> ^attribute state)
    (<state-nc> ^superstate <eval-g>)
    (<eval-g> ^quiescence t)
    (<eval-g> ^superstate <select-g>)
    (<select-g> ^operator <o2>)
    (<o2> ^name evaluate-operator)
    (<o2> ^evaluation <e2>)
    (<select-g> ^evaluation <e2>)
    -->
    (<e2> ^symbolic-value failure +)
}

sp {selection*elaborate*evaluate-operator*all-operators-novalue
    :default
    (state <s> ^quiescence t)
    (<s> -^found-value <f*1>)
    (<s> -^not-all-operators-evaluated <n*1>)
    (<s> ^choices multiple)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <sss>)
    (<sss> ^name selection)
    (<sss> ^operator <sso>)
    (<sso> ^name evaluate-operator)
    (<sso> ^evaluation <e>)
    (<s> ^operator <o>)
    -->
    (<e> ^numeric-value novalue +)
}

sp {selection*pass-back-success
    :default
    (state <s> ^evaluation <e*1>)
    (<e*1> ^symbolic-value { << required-success >> <s*3> })
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^operator <sso>)
    (<sso> ^name evaluate-operator)
    (<sso> ^evaluation <e2>)
    (<sso> ^superoperator <s*4>)
    (<s*4> ^name <n*1>)
    -->
    (<e2> ^symbolic-value partial-success +)
}

sp {evaluate-operator*elaborate*evaluation*failure*constraint-failure
    :default
    (state <rej-state-imp> ^impasse constraint-failure)
    (<rej-state-imp> ^attribute operator)
    (<rej-state-imp> ^superstate <eval-g>)
    (<eval-g> ^superstate <select-g>)
    (<select-g> ^operator <o2>)
    (<o2> ^name evaluate-operator)
    (<o2> ^evaluation <e2>)
    (<select-g> ^evaluation <e2>)
    -->
    (<e2> ^symbolic-value failure +)
}

sp {evaluate-operator*elaborate*operator*add-attribute-to-duplicate-operator*nln
    :default
    (state <s> ^look-ahead-operator <o-copy>)
    (<o-copy> ^duplicate-of <o>)
    (<s> ^problem-space <p>)
    (<p> ^no-local-negations <nln>)
    (<o> ^{ <> duplicate-of <att> } <val>)
    -->
    (<o-copy> ^<att> <val> +)
}

sp {evaluate-operator*elaborate*operator*add-duplicated-attribute-to-duplicate-operator
    :default
    (state <s> ^problem-space <p>)
    (<p> -^no-local-negations <nln>)
    (<s> ^duplicates <d>)
    (<s> ^look-ahead-operator <o-copy>)
    (<o-copy> ^duplicate-of <o>)
    (<o> ^{ <> duplicate-of <att> } <id>)
    (<p> -^dont-copy <att>)
    (<d> ^<id> <copy-id>)
    -->
    (<o-copy> ^<att> <copy-id> +)
}

sp {evaluate-operator*elaborate*operator*add-attribute-to-duplicate-operator
    :default
    (state <s> ^problem-space <p>)
    (<p> -^no-local-negations <nln>)
    (<s> ^duplicates <d>)
    (<s> ^look-ahead-operator <o-copy>)
    (<o-copy> ^duplicate-of <o>)
    (<o> ^{ <> duplicate-of <> desired <att> } <val>)
    (<d> -^<val> <v*1>)
    (<p> -^dont-copy <att>)
    -->
    (<o-copy> ^<att> <val> +)
}

sp {evaluate-operator*elaborate*state*create-duplicates-table-for-operator-only
    :default
    (state <s> ^default-operator-copy yes)
    (<s> -^default-state-copy yes)
    (<s> ^impasse no-change)
    (<s> ^attribute operator)
    -->
    (<s> ^duplicates <d> +)
}

sp {evaluate-operator*elaborate*operator*copy-default-operator-copy-from-problem-space
    :default
    (state <s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name evaluate-operator)
    (<s> ^problem-space <p*1>)
    (<p*1> ^default-operator-copy <yes-or-no>)
    -->
    (<s> ^default-operator-copy <yes-or-no> +)
}

sp {evaluate-operator*elaborate*operator*default-operator-copy-is-yes
    :default
    (state <s> ^problem-space <ps>)
    (<ps> -^default-operator-copy no)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name evaluate-operator)
    -->
    (<s> ^default-operator-copy yes +)
}

sp {duplicate-desired*replace-old-value
    :default
    (state <s> ^duplicates <d*1>)
    (<s> ^desired <o-copy>)
    (<o-copy> ^duplicate-of <o>)
    (<s> ^problem-space <p>)
    (<o> ^{ <> duplicate-of <att> } <id>)
    (<p> -^dont-copy <att>)
    (<d*1> ^<id> <copy-id>)
    -->
    (<o-copy> ^<att> <copy-id> +)
}

sp {duplicate-desired*copy-old-value
    :default
    (state <s> ^duplicates <d>)
    (<s> ^desired <o-copy>)
    (<o-copy> ^duplicate-of <o>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^evaluation <e*1>)
    (<e*1> ^desired <o>)
    (<s> ^problem-space <p>)
    (<o> ^{ <> duplicate-of <att> } <val>)
    (<d> -^<val> <v*1>)
    (<p> -^dont-copy <att>)
    -->
    (<o-copy> ^<att> <val> +)
}

sp {evaluate-operator*elaborate*state*eval*desired
    :default
    (state <s> ^superstate <ss>)
    (<ss> ^operator <so>)
    (<so> ^default-desired-copy yes)
    (<so> ^name evaluate-operator)
    (<so> ^evaluation <e*1>)
    (<e*1> ^desired <d>)
    -->
    (<s> ^desired <d-copy> +)
    (<d-copy> ^duplicate-of <d> +)
}

sp {evaluate-operator*elaborate*state*add-duplicates-for-all-attributes
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^problem-space <p>)
    (<p> -^dont-copy-anything <d*3>)
    (<p> ^all-attributes-at-level two)
    (<s> ^duplicates <d*1>)
    (<s> ^duplicate-of <d*2>)
    (<d*2> ^{ <> tried-tied-operator <att> } <id>)
    (<p> -^one-level-attributes <att>)
    (<p> -^dont-copy <att>)
    (<d*1> ^<id> <new-id>)
    -->
    (<s> ^<att> <new-id> +)
}

sp {evaluate-operator*elaborate*state*add-duplicate-to-state
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^duplicates <d*1>)
    (<s> ^duplicate-of <d*2>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^two-level-attributes <att>)
    (<d*2> ^<att> <id>)
    (<d*1> ^<id> <new-id>)
    -->
    (<s> ^<att> <new-id> +)
}

sp {evaluate-operator*elaborate*add-duplicated-attribute-to-duplicate
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^duplicates <d>)
    (<d> ^<id> <new-id>)
    (<id> ^{ <> tried-tied-operator <sub-att> } <sub-val>)
    (<d> ^<sub-val> <new-val>)
    -->
    (<new-id> ^<sub-att> <new-val> +)
}

sp {evaluate-operator*elaborate*add-attribute-to-duplicate*nln
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^duplicates <d>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^no-local-negations <nln>)
    (<d> ^<id> <new-id>)
    (<id> ^{ <> tried-tied-operator <sub-att> } <sub-val>)
    -->
    (<new-id> ^<sub-att> <sub-val> +)
}

sp {evaluate-operator*elaborate*add-attribute-to-duplicate
    :default
    (state <s> ^default-state-copy yes)
   -{ (<s> ^problem-space <p*1>)
      (<p*1> ^no-local-negations <nln>)}
    (<s> ^duplicates <d>)
    (<d> ^<id> <new-id>)
    (<id> ^{ <> tried-tied-operator <sub-att> } <sub-val>)
    (<d> -^<sub-val> <s*1>)
   -{ (<s> ^problem-space <p*2>)
      (<p*2> ^dont-copy <sub-att>)}
    -->
    (<new-id> ^<sub-att> <sub-val> +)
}

sp {evaluate-operator*elaborate*state*duplicate-id-for-all-attributes
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^problem-space <p>)
    (<p> -^dont-copy-anything <d*1>)
    (<p> ^all-attributes-at-level two)
    (<s> ^duplicates <d>)
    (<s> ^duplicate-of <ss>)
    (<ss>
          ^{ <> duplicate-of <> tried-tied-operator <> problem-space <> impasse <> attribute <> choices <> quiescence <> operator <> superstate <att> } <id>)
    (<p> -^one-level-attributes <att>)
    (<p> -^dont-copy <att>)
    -->
    (<d> ^<id> <new-id> +)
}

sp {evaluate-operator*elaborate*state*duplicate-id-for-attribute
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^duplicates <d>)
    (<s> ^duplicate-of <d*1>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^two-level-attributes <att>)
    (<d*1> ^<att> <id>)
    -->
    (<d> ^<id> <new-id> +)
}

sp {evaluate-operator*elaborate*state*change-all-attributes-at-level-one-to-duplicate
    :default
    (state <s> ^all-attributes-at-level one)
    (<s> ^default-state-copy yes)
    (<s> ^duplicates <d*1>)
    (<s> ^duplicate-of <d*2>)
    (<d*2> ^{ <> tried-tied-operator <att> } <id>)
   -{ (<s> ^problem-space <p*1>)
      (<p*1> ^dont-copy <att>)}
    (<d*1> ^<id> <new-id>)
    -->
    (<s> ^<att> <id> -)
    (<s> ^<att> <new-id> +)
}

sp {evaluate-operator*elaborate*state*change-one-level-attribute-to-duplicate
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^duplicates <d*1>)
    (<s> ^duplicate-of <d*2>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^one-level-attributes <att>)
    (<d*2> ^<att> <id>)
    (<d*1> ^<id> <new-id>)
    -->
    (<s> ^<att> <id> -)
    (<s> ^<att> <new-id> +)
}

sp {evaluate-operator*elaborate*state*add-all-attributes-at-level-one
    :default
    (state <s> ^all-attributes-at-level one)
    (<s> ^default-state-copy yes)
    (<s> ^problem-space <p>)
    (<p> -^dont-copy-anything <d*1>)
    (<s> ^duplicate-of <ss>)
    (<ss>
          ^{ <> duplicate-of <> tried-tied-operator <> problem-space <> impasse <> attribute <> choices <> quiescence <> operator <> superstate <> type <> name <> look-ahead-operator <> smem <> epmem <> svs <> reward-link <att> } <val>)
    (<p> -^dont-copy <att>)
    -->
    (<s> ^<att> <val> +)
}

sp {evaluate-operator*elaborate*state*add-one-level-attributes
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^duplicate-of <d*1>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^one-level-attributes <att>)
    (<d*1> ^<att> <val>)
    -->
    (<s> ^<att> <val> +)
}

sp {evaluate-operator*elaborate*state*create-duplicates-table
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^impasse no-change)
    (<s> ^attribute operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name evaluate-operator)
    -->
    (<s> ^duplicates <d> +)
}

sp {evaluate-operator*elaborate*state*copy-all-attributes-at-level-one-from-problem-space
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^problem-space <p*1>)
    (<p*1> ^all-attributes-at-level one)
    -->
    (<s> ^all-attributes-at-level one +)
}

sp {evaluate-operator*elaborate*state*default-copy-is-all-attributes-at-level-one*no-problem-space
    :default
    (state <s> ^impasse no-change)
    (<s> -^problem-space <p*1>)
    (<s> ^attribute operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> -^superproblem-space <p>)
    (<so> ^name evaluate-operator)
    -->
    (<s> ^all-attributes-at-level one +)
}

sp {evaluate-operator*elaborate*state*default-copy-is-all-attributes-at-level-one
    :default
    (state <s> ^impasse no-change)
    (<s> ^attribute operator)
    (<s> ^problem-space <p>)
    (<p> -^dont-copy-anything <d*2>)
    (<p> -^dont-copy <d*1>)
    (<p> -^two-level-attributes <t*1>)
    (<p> -^one-level-attributes <o*2>)
    (<p> -^all-attributes-at-level two)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name evaluate-operator)
    -->
    (<s> ^all-attributes-at-level one +)
}

sp {evaluate-operator*elaborate*default-state-copy-from-problem-space
    :default
    (state <s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name evaluate-operator)
    (<s> ^problem-space <p*1>)
    (<p*1> ^default-state-copy <yes-or-no>)
    -->
    (<s> ^default-state-copy <yes-or-no> +)
}

sp {evaluate-operator*elaborate*default-for-default-state-copy-is-yes
    :default
    (state <s> ^problem-space <p>)
    (<p> -^default-state-copy no)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name evaluate-operator)
    -->
    (<s> ^default-state-copy yes +)
}

sp {evaluate-operator*elaborate*numeric-evaluation*from-subgoal
    :default
    (state <ss> ^numeric-value <v>)
    (<ss> ^desired <eb>)
    (<ss> ^superstate <s>)
    (<s> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^evaluation <e*1>)
    (<e*1> ^desired <eb>)
    (<so> ^evaluation <e>)
    (<s> ^evaluation <e>)
    -->
    (<e> ^numeric-value <v> +)
}

sp {evaluate-operator*elaborate*evaluation*from-subgoal*duplicate-desired
    :default
    (state <s> ^superstate <ss>)
    (<ss> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^evaluation <e>)
    (<ss> ^evaluation <e>)
    (<so> ^evaluation <e*1>)
    (<e*1> ^desired <eb>)
    (<s>
          ^{ << required-success success partial-success indifferent partial-failure failure prohibit-failure >> <svalue> } <deb>)
    (<deb> ^duplicate-of <eb>)
    -->
    (<e> ^symbolic-value <svalue> +)
}

sp {evaluate-operator*elaborate*state*look-ahead-operator*copy
    :default
    (state <s> ^default-operator-copy yes)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^superproblem-space <s*2>)
    (<so> ^superoperator <o>)
    (<s*2> ^name <n>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name <n>)
    -->
    (<s> ^look-ahead-operator <copy-o> +)
    (<s> ^untried-tied-operator <copy-o> +)
    (<copy-o> ^duplicate-of <o> +)
}

sp {evaluate-operator*elaborate*state*duplicate-of
    :default
    (state <s> ^default-state-copy yes)
    (<s> ^superstate <ss>)
    (<ss> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^superstate <sss>)
    -->
    (<s> ^duplicate-of <sss> +)
}

sp {evaluate-operator*elaborate*state*name
    :default
    (state <s> ^impasse no-change)
    (<s> ^attribute operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^superstate <s*2>)
    (<s*2> ^name { <> evaluate-operator <name> })
    -->
    (<s> ^name <name> +)
}

sp {evaluate-operator*elaborate*state*desired*nln
    :default
    (state <s> ^impasse no-change)
    (<s> ^attribute operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^name evaluate-operator)
    (<so> ^evaluation <e*1>)
    (<e*1> ^desired <d>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^no-local-negations <nln>)
    -->
    (<s> ^desired <d> +)
}

sp {evaluate-operator*elaborate*state*desired
    :default
    (state <s> ^impasse no-change)
   -{ (<s> ^problem-space <p*1>)
      (<p*1> ^no-local-negations <nln>)}
    (<s> ^attribute operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> -^default-desired-copy yes)
    (<so> ^name evaluate-operator)
    (<so> ^evaluation <e*1>)
    (<e*1> ^desired <d>)
    -->
    (<s> ^desired <d> +)
}

sp {selection*elaborate*evaluate-operator*superstate
    :default
    (state <s> ^name selection)
    (<s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<s> ^superstate <ss>)
    -->
    (<o> ^superstate <ss> +)
}

sp {selection*elaborate*evaluate-operator*superproblem-space
    :default
    (state <s> ^name selection)
    (<s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p2>)
    -->
    (<o> ^superproblem-space <p2> +)
}

sp {selection*elaborate*evaluate-operator*evaluation
    :default
    (state <s> ^name selection)
    (<s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<s> ^evaluation <e>)
    (<e> ^superoperator <ob>)
    (<o> ^superoperator <ob>)
    -->
    (<o> ^evaluation <e> +)
}

sp {selection*select*evaluate-operator*indifferent
    :default
    (state <s> ^name selection)
    (<s> -^operator-selection not-indifferent)
    (<s> ^operator <o> +)
    (<o> ^name evaluate-operator)
    -->
    (<s> ^operator <o> =)
}

sp {selection*compare*novalue-evaluation-always-worse
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e1>)
    (<e1> ^numeric-value novalue)
    (<s> ^evaluation { <> <e1> <e2> })
    (<e2> ^desired <d>)
    (<e1> ^desired <d>)
    (<s> ^superstate <ss>)
    (<ss> ^desired <d>)
    (<e2> ^numeric-value { <> novalue <n*1> })
    (<e2> ^superoperator <o2>)
    (<e1> ^superoperator <o1>)
    -->
    (<ss> ^operator <o2> > <o1>)
}

sp {selection*elaborate*state*found-value-true
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e>)
    (<e> ^{ << numeric-value symbolic-value >> <a*1> } { <> novalue <v*1> })
    -->
    (<s> ^found-value true +)
}

sp {selection*elaborate*state*all-objects-evaluated
    :default
    (state <s> ^name selection)
    (<s> ^operator <o> +)
   -{ (<o> ^name evaluate-operator)
      (<o> ^evaluation <e*1>)
      (<e*1> ^value true)}
    -->
    (<s> ^not-all-operators-evaluated true +)
}

sp {selection*select*partial-failure-evaluation-becomes-worst-preference
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e1>)
    (<e1> ^symbolic-value partial-failure)
    (<e1> ^superoperator <o1>)
    (<e1> ^desired <e>)
    (<s> ^superstate <ss>)
    (<ss> ^desired <e>)
    -->
    (<ss> ^operator <o1> <)
}

sp {selection*select*prohibit-failure-evaluation-becomes-prohibit-preference
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e1>)
    (<e1> ^symbolic-value prohibit-failure)
    (<e1> ^superoperator <o1>)
    (<e1> ^desired <e>)
    (<s> ^superstate <ss>)
    (<ss> ^desired <e>)
    -->
    (<ss> ^operator <o1> ~)
}

sp {selection*select*success-evaluation-becomes-best-preference
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e1>)
    (<e1> ^symbolic-value { << partial-success success >> <s*1> })
    (<e1> ^superoperator <o1>)
    (<e1> ^desired <eb>)
    (<s> ^superstate <ss>)
    (<ss> ^desired <eb>)
    -->
    (<ss> ^operator <o1> >)
    (<ss> ^operator <o1> = 0.900000)
}

sp {selection*select*required-success-evaluation-becomes-required-preference
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e1>)
    (<e1> ^symbolic-value required-success)
    (<e1> ^superoperator <o1>)
    (<e1> ^desired <eb>)
    (<s> ^superstate <ss>)
    (<ss> ^desired <eb>)
    -->
    (<ss> ^operator <o1> !)
}

sp {selection*compare*partial-failure-evaluation-better-than-failure
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e2>)
    (<e2> ^symbolic-value failure)
    (<s> ^evaluation { <> <e2> <e1> })
    (<e1> ^symbolic-value partial-failure)
    (<e2> ^desired <d>)
    (<e1> ^desired <d>)
    (<s> ^superstate <ss>)
    (<ss> ^desired <d>)
    (<e2> ^superoperator <y>)
    (<e1> ^superoperator { <> <y> <x> })
    -->
    (<ss> ^operator <x> > <y>)
}

sp {selection*compare*success-evaluation-better-than-partial-success
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e2>)
    (<e2> ^symbolic-value partial-success)
    (<s> ^evaluation { <> <e2> <e1> })
    (<e1> ^symbolic-value success)
    (<e2> ^desired <d>)
    (<e1> ^desired <d>)
    (<s> ^superstate <ss>)
    (<ss> ^desired <d>)
    (<e2> ^superoperator <y>)
    (<e1> ^superoperator { <> <y> <x> })
    -->
    (<ss> ^operator <x> > <y>)
}

sp {selection*compare*prefer-lower-evaluation
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e2>)
    (<e2> ^desired <d>)
    (<d> ^better lower)
    (<s> ^evaluation { <> <e2> <e1> })
    (<e1> ^desired <d>)
    (<s> ^superstate <ss>)
    (<ss> ^desired <d>)
    (<e2> ^numeric-value <n*1>)
    (<e1> ^numeric-value { < <n*1> <v> })
    (<e2> ^superoperator <o2>)
    (<e1> ^superoperator <o1>)
    (<ss> ^problem-space <p2>)
    -->
    (<ss> ^operator <o2> < <o1>)
}

sp {selection*compare*higher-evaluation-better
    :default
    (state <s> ^name selection)
    (<s> ^evaluation <e2>)
    (<e2> ^desired <d>)
    (<d> ^better higher)
    (<s> ^evaluation { <> <e2> <e1> })
    (<e1> ^desired <d>)
    (<s> ^superstate <ss>)
    (<ss> ^desired <d>)
    (<e2> ^numeric-value <n*1>)
    (<e1> ^numeric-value { > <n*1> <v> })
    (<e2> ^superoperator <o2>)
    (<e1> ^superoperator <o1>)
    (<ss> ^problem-space <p2>)
    -->
    (<ss> ^operator <o2> < <o1>)
}

sp {selection*elaborate*evaluation*desired
    :default
    (state <s> ^evaluation <e>)
    (<s> ^superstate <s*1>)
    (<s*1> ^desired <d>)
    -->
    (<e> ^desired <d> +)
}

sp {selection*elaborate*evaluation*value
    :default
    (state <s> ^evaluation <e>)
    (<e> ^{ << numeric-value symbolic-value >> <a*1> } <v*1>)
    -->
    (<e> ^value true +)
}

sp {selection*elaborate*name*selection*action
    :default
    (state <s> ^choices multiple)
   -{ (<s> ^operator <o> +)
      (<o> ^name learn-action-result)}
    (<s> -^io <i*1>)
    (<s> ^problemspace <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^name selection +)
}

sp {selection*elaborate*name*selection*game-heuristics
    :default
    (state <s> ^problemspace game-heuristics)
   -{ (<s> ^operator <o> +)
      (<o> ^name learn-action-result)}
    (<s> ^choices multiple)
    -->
    (<s> ^name selection +)
}

sp {selection*elaborate*name*selection
    :default
    (state <s> ^problemspace games)
   -{ (<s> ^operator <o> +)
      (<o> ^name learn-action-result)}
    (<s> ^choices multiple)
    -->
    (<s> ^name selection +)
}

sp {action*elaborate*primitive*action*until-clause*satisfied
    (state <s> ^operator <o> +)
    (<o> ^action-type primitive)
    (<o> ^until-clause <until>)
   -{ (<until> ^predicate <pred>)
      (<pred> -^satisfied <s*1>)}
    (<until> ^predicate <p*2>)
    (<p*2> ^satisfied true)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<until> ^satisfied true +)
}

sp {action*elaborate*primitive*action*until-clause*satisfied*relation*predicate
    (state <s> ^operator <o> +)
    (<o> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^until-clause <until>)
    (<until> ^predicate <p1>)
    (<p1> ^type relation)
    (<p1> ^2 <obj2>)
    (<p1> ^handle <pred-handle>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <p*2>)
    (<p*2> ^predicate <pred>)
    (<pred> ^handle <pred-handle>)
    (<pred> ^instance <i>)
    (<i> ^2 <obj2>)
    (<i> ^1 <obj1>)
    (<p1> ^1 <obj1>)
    -->
    (<p1> ^satisfied true +)
}

sp {action*elaborate*primitive*action*until-clause*satisfied*state*predicate
    (state <s> ^operator <o> +)
    (<o> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^until-clause <until>)
    (<until> ^predicate <p1>)
    (<p1> ^type state)
    (<p1> ^handle <pred-handle>)
    (<p1> ^1 <v*1>)
    (<v*1> ^predicates <p*2>)
    (<p*2> ^<pred-name> <pred-handle>)
    -->
    (<p1> ^satisfied true +)
}

sp {action*elaborate*follow-wall*arg1*from*action-to-match
    (state <s> ^action-to-match <atm>)
    (<atm> ^action-handle follow-wall1)
    (<s> ^operator <o> +)
    (<o> ^action-handle follow-wall1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<atm> ^arg1 <arg1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    -->
    (<o> ^arg1 <arg1> +)
}

sp {action*elaborate*put-down*relation*from*desired
    (state <s> ^operator <o> +)
    (<o> ^name initiate-put-down1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d*1>)
    (<d*1> ^predicate <rel-pred>)
    (<rel-pred> ^type relation)
    (<rel-pred> ^2 <obj2>)
    (<o> ^arg2 <arg2>)
    (<arg2> ^2 <obj2>)
    (<o> ^arg1 <a*2>)
    (<rel-pred> ^1 <obj1>)
    (<a*2> ^id <obj1>)
    (<rel-pred> ^handle <rel-handle>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type <any>)
    -->
    (<arg2> ^handle <rel-handle> +)
}

sp {action*elaborate*put-down*relation*from*action-context
    (state <s> ^operator <o> +)
    (<o> ^name initiate-put-down1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^action-to-match <a*2>)
    (<o> ^arg2 <arg2>)
    (<a*2> ^arg2 <a*3>)
    (<a*3> ^handle <rel-handle>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type <any>)
    -->
    (<arg2> ^handle <rel-handle> +)
}

sp {action*composite-action*reject*actions*if*missing-desired
    (state <s> ^missing-desired true)
    (<s> ^problem-space <ps>)
    (<ps> ^action-type composite)
    (<ps> ^name action)
    (<s> ^operator <o> +)
    -->
    (<s> ^operator <o> -)
}

sp {action*composite-action*elaborate*missing-desired
    (state <s> ^action-id <a*1>)
    (<s> -^desired <d*1>)
    (<s> ^problem-space <ps>)
    (<ps> ^action-type composite)
    (<ps> ^name action)
    (<a*1> ^goal <goal>)
    -->
    (<s> ^missing-desired true +)
}

sp {action*composite-action*elaborate*action-id*from*query*result
    :o-support
    (state <s> ^action-context <a*1>)
    (<a*1> ^action-handle <action-handle>)
    (<s> ^smem-query <query>)
    (<query> ^cue <c*1>)
    (<c*1> ^handle <action-handle>)
    (<query> ^result <id>)
    (<s> ^problem-space <ps>)
    -->
    (<s> ^action-id <id> +)
}

sp {action*composite-action*elaborate*smem-query
    (state <s> ^action-context <a*1>)
    (<s> -^action-id <a*2>)
    (<s> ^problem-space <ps>)
    (<ps> ^action-type composite)
    (<ps> ^name action)
    (<a*1> ^action-handle <action-handle>)
    -->
    (<s> ^smem-query <query> +)
    (<query> ^cue <cue> +)
    (<query> ^depth 8 +)
    (<cue> ^handle <action-handle> +)
}

sp {action*composite-action*problem-space*elaborate*propose-action-operators
    (state <s> ^problem-space <ps>)
    (<s> -^missing-desired true)
    (<ps> ^action-type composite)
    (<ps> ^name action)
    (<ps> ^action <action>)
    -->
    (<action> ^propose-action-operators true +)
}

sp {action*composite-action*elaborate*problem-space*action*type*superstate
    (state <s> ^problem-space <ps>)
    (<ps> ^action-type composite)
    (<ps> ^name action)
    (<ps> ^action <action>)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^action <a*1>)
    (<a*1> ^type <type>)
    -->
    (<action> ^type <type> +)
}

sp {action*composite-action*problem-space
    (state <s> ^superstate <s*2>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^action-type composite)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^name action +)
    (<ps> ^action-type composite +)
    (<ps> ^action <action> +)
    (<ps> ^world <world> +)
    (<ps> ^learning <learn> +)
    (<world> ^copy-type shallow +)
}

sp {action*state*no-change*elaborate*world
    (state <s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <s*2>)
    (<s*2> ^world <w>)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^world <w> +)
}

sp {action*apply*clear-state-no-change
    (state <s> ^operator <o>)
    (<o> ^name clear-state-no-change)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^operator <o> -)
}

sp {action*state*no-change*propose*clear-state-no-change
    (state <s> ^clear-state-no-change true)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<ss> ^operator <o> +)
    (<ss> ^operator <o> >)
    (<o> ^name clear-state-no-change +)
}

sp {action*state*no-change*better*preferences*for*learn-task-subaction
    (state <s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^operator <o1> +)
    (<o1> ^name learn-task-subaction)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator <o2> +)
    (<o2>
          ^name { << learn-subaction-proposal no-proposed-action locate-non-visible-object >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {action*state*no-change*better*preferences*for*learn-desired-elaboration-rule
    (state <s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^operator <o1> +)
    (<o1> ^name learn-desired-elaboration-rule)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator <o2> +)
    (<o2>
          ^name { << learn-task-subaction learn-subaction-proposal no-proposed-action locate-non-visible-object >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {action*state*no-change*propose*learn-subaction-proposal
    (state <s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <s*3>)
    (<s*3> ^action-context <action>)
    (<s> ^superstate <s*2>)
    (<s*2> ^action-id <a*1>)
    (<a*1> ^procedural <proc>)
    (<proc> ^subaction <sub>)
   -{ (<s> ^superstate <s*4>)
      (<s*4> ^proposed-subaction <sub>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name learn-subaction-proposal +)
    (<o> ^subaction-id <sub> +)
    (<o> ^procedural-id <proc> +)
    (<o> ^action-context <action> +)
}

sp {action*state*no-change*propose*learn-task-subaction
    (state <s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <s*4>)
    (<s*4> ^action-id <action-id>)
    (<s> ^superstate <s*3>)
    (<s*3> ^action-context <action>)
    (<s> ^superstate <s*2>)
    (<s*2> ^action-to-match <atm>)
   -{ (<s> ^superstate <s*5>)
      (<s*5> ^stored <atm>)}
    (<atm> ^action-handle { << remember1 wait1 >> <a*1> })
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-task-subaction +)
    (<o> ^subaction <atm> +)
    (<o> ^action-context <action> +)
    (<o> ^action-id <action-id> +)
}

sp {action*state*no-change*propose*learn-desired-elaboration-rule
    (state <s> ^impasse no-change)
   -{ (<s> ^superstate <s*4>)
      (<s*4> ^desired <d*1>)}
    (<s> ^attribute state)
    (<s> ^superstate <s*3>)
    (<s*3> ^action-id <action-id>)
    (<s> ^superstate <s*2>)
    (<s*2> ^action-context <action>)
    (<action> ^action-type composite)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-desired-elaboration-rule +)
    (<o> ^action-context <action> +)
    (<o> ^action-id <action-id> +)
}

sp {action*state*no-change*propose*no-proposed-action
    (state <s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name no-proposed-action +)
}

sp {learn-task-subaction*elaborate*generalize-argument*generalized-rep*relation*until-predicate
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> ^arg-type until-predicate)
    (<arg> ^instance <i*1>)
    (<i*1> ^type relation)
    (<arg> ^2 <v*2>)
    (<v*2> ^generalized-rep <obj2-rep>)
    (<arg> ^1 <v*1>)
    (<v*1> ^generalized-rep <obj1-rep>)
    (<arg> ^id <i*2>)
    (<i*2> ^generalized-rep <id-rep>)
    -->
    (<arg> ^generalized-rep <gen> +)
    (<gen> ^type relation +)
    (<gen> ^id <id-rep> +)
    (<gen> ^1 <obj1-rep> +)
    (<gen> ^2 <obj2-rep> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*generalized-rep*state*until-predicate
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> ^arg-type until-predicate)
    (<arg> ^instance <i*1>)
    (<i*1> ^type state)
    (<arg> ^1 <v*1>)
    (<v*1> ^generalized-rep <obj1-rep>)
    (<arg> ^id <i*2>)
    (<i*2> ^generalized-rep <id-rep>)
    -->
    (<arg> ^generalized-rep <gen> +)
    (<gen> ^type state +)
    (<gen> ^id <id-rep> +)
    (<gen> ^1 <obj1-rep> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*generalized-rep*default
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> -^imagined true)
    (<arg> -^procedural-slot <p*1>)
    (<arg> ^default-rep <def>)
    -->
    (<arg> ^generalized-rep <gen> +)
    (<gen> ^default <def> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*generalized-rep*imagined
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> -^procedural-slot <p*1>)
    (<arg> ^imagined true)
    (<arg> ^default-rep <def>)
    -->
    (<arg> ^generalized-rep <gen> +)
    (<gen> ^imagined <def> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*generalized-rep*procedural-slot
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> ^procedural-slot <slot>)
    -->
    (<arg> ^generalized-rep <slot> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*predicate*procedural-slot
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> ^arg-type predicate)
    (<s> ^procedural-id <p*1>)
    (<arg> ^instance <pred>)
    (<s> ^action-context <a*1>)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^handle <pred>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-type predicate)
    (<parg> ^id <pred-slot>)
    -->
    (<arg> ^procedural-slot <pred-slot> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*concept*procedural-slot
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> ^arg-type concept)
    (<s> ^procedural-id <p*1>)
    (<arg> ^instance <concept>)
    (<s> ^action-context <a*1>)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^handle <concept>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-type concept)
    (<parg> ^id <conc-slot>)
    -->
    (<arg> ^procedural-slot <conc-slot> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*object*procedural-slot*depth*2
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<s> ^procedural-id <p*1>)
    (<arg> ^instance <obj>)
    (<arg> ^arg-type { << object location >> <a*3> })
    (<s> ^action-context <a*1>)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^2 <obj>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-type predicate)
    (<parg> ^2 <obj-slot>)
    -->
    (<arg> ^procedural-slot <obj-slot> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*object*procedural-slot*depth*1
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<s> ^procedural-id <p*1>)
    (<arg> ^instance <obj>)
    (<arg> ^arg-type { << object location >> <a*3> })
    (<s> ^action-context <a*1>)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^id <obj>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-type { << object location >> <a*4> })
    (<parg> ^id <obj-slot>)
    -->
    (<arg> ^procedural-slot <obj-slot> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*predicate*default-rep*predicate-handle
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^default-rep <def>)
    (<arg> ^instance <predicate-handle>)
    -->
    (<def> ^predicate-handle <predicate-handle> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*concept*default-rep*predicate-handle
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> ^arg-type concept)
    (<arg> ^default-rep <def>)
    (<arg> ^instance <concept-handle>)
    -->
    (<def> ^predicate-handle <concept-handle> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*object*default-rep*predicates
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> ^default-rep <def>)
    (<arg> ^instance <i*1>)
    (<arg> ^arg-type { << object location >> <a*1> })
    (<i*1> ^predicates <preds>)
    (<preds>
          ^{ << color shape size category property >> <prop-handle> } <pred-handle>)
    -->
    (<def> ^<prop-handle> <pred-handle> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*default-rep
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> -^arg-type until-predicate)
    -->
    (<arg> ^default-rep <def> +)
}

sp {learn-task-subaction*elaborate*generalize-argument*until-predicate*expand*relation*predicate
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> ^arg-type until-predicate)
    (<arg> ^instance <until-pred>)
    (<until-pred> ^type relation)
    (<until-pred> ^2 <obj2>)
    (<until-pred> ^handle <pred>)
    (<until-pred> ^1 <obj1>)
    -->
    (<arg> ^id <gen-pred> +)
    (<arg> ^1 <gen-obj1> +)
    (<arg> ^2 <gen-obj2> +)
    (<s> ^generalize-argument <gen-pred> +)
    (<s> ^generalize-argument <gen-obj1> +)
    (<s> ^generalize-argument <gen-obj2> +)
    (<gen-pred> ^instance <pred> +)
    (<gen-pred> ^arg-type predicate +)
    (<gen-obj1> ^instance <obj1> +)
    (<gen-obj1> ^arg-type object +)
    (<gen-obj2> ^instance <obj2> +)
    (<gen-obj2> ^arg-type object +)
}

sp {learn-task-subaction*elaborate*generalize-argument*until-predicate*expand*state*predicate
    (state <s> ^name learn-task-subaction)
    (<s> ^generalize-argument <arg>)
    (<arg> ^arg-type until-predicate)
    (<arg> ^instance <until-pred>)
    (<until-pred> ^type state)
    (<until-pred> ^handle <pred>)
    (<until-pred> ^1 <obj>)
    -->
    (<arg> ^id <gen-pred> +)
    (<arg> ^1 <gen-obj> +)
    (<s> ^generalize-argument <gen-pred> +)
    (<s> ^generalize-argument <gen-obj> +)
    (<gen-pred> ^instance <pred> +)
    (<gen-pred> ^arg-type concept +)
    (<gen-obj> ^instance <obj> +)
    (<gen-obj> ^arg-type object +)
}

sp {learn-task-subaction*apply*mark-subaction-stored*clear-state-no-change
    (state <s> ^name learn-task-subaction)
    (<s> ^operator <o*1>)
    (<o*1> ^name mark-subaction-stored)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^clear-state-no-change true +)
}

sp {learn-task-subaction*apply*mark-subaction-stored
    (state <s> ^name learn-task-subaction)
    (<s> ^operator <o>)
    (<o> ^name mark-subaction-stored)
    (<o> ^subaction <sub>)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <ss>)
    -->
    (<ss> ^stored <sub> +)
}

sp {learn-task-subaction*propose*mark-subaction-stored
    (state <s> ^name learn-task-subaction)
    (<s> ^subaction <sub>)
    (<s> ^stored <new-sub>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name mark-subaction-stored +)
    (<o> ^subaction <sub> +)
}

sp {learn-task-subaction*elaborate*argument-info*onto*subaction-structure
    (state <s> ^name learn-task-subaction)
    (<s> ^subaction-structure <struct>)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^generalized-rep <gen>)
    (<arg-info> ^arg-name <arg-name>)
    -->
    (<struct> ^<arg-name> <gen> +)
}

sp {learn-task-subaction*elaborate*action-type*onto*subaction-structure
    (state <s> ^name learn-task-subaction)
    (<s> ^subaction-structure <struct>)
    (<s> ^subaction <s*1>)
    (<s*1> ^action-type <type>)
    -->
    (<struct> ^action-type <type> +)
}

sp {learn-task-subaction*elaborate*action-handle*onto*subaction-structure
    (state <s> ^name learn-task-subaction)
    (<s> ^subaction-structure <struct>)
    (<s> ^subaction <s*1>)
    (<s*1> ^action-handle <action>)
    -->
    (<struct> ^action-handle <action> +)
}

sp {learn-task-subaction*elaborate*op_name*onto*subaction-structure
    (state <s> ^name learn-task-subaction)
    (<s> ^subaction-structure <struct>)
    (<s> ^subaction <s*1>)
    (<s*1> ^name <op-name>)
    -->
    (<struct> ^op_name <op-name> +)
}

sp {learn-task-subaction*elaborate*subaction-structure
    (state <s> ^name learn-task-subaction)
    -->
    (<s> ^subaction-structure <struct> +)
}

sp {learn-task-subaction*apply*store-subaction*predicate*arg*predicate*default
    (state <s> ^name learn-task-subaction)
    (<s> ^operator <o>)
    (<o> ^name store-subaction)
    (<o> ^subaction <s*2>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<s*2> ^<arg-name> <a*1>)
    (<a*1> ^predicate <p*1>)
    (<p*1> ^{ << id 1 2 3 4 5 >> <a*2> } <v*1>)
    (<v*1> ^{ << default imagined >> <a*3> } <def>)
    -->
    (<cmd> ^store <def> +)
}

sp {learn-task-subaction*apply*store-subaction*arg*predicate*slot
    (state <s> ^name learn-task-subaction)
    (<s> ^operator <o>)
    (<o> ^name store-subaction)
    (<o> ^subaction <s*2>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<s*2> ^<arg-name> <a*1>)
    (<a*1> ^predicate <p*1>)
    (<p*1> ^{ << id 1 2 3 4 5 >> <a*2> } <slot>)
    -->
    (<cmd> ^store <slot> +)
}

sp {learn-task-subaction*apply*store-subaction*predicate*arg*default
    (state <s> ^name learn-task-subaction)
    (<s> ^operator <o>)
    (<o> ^name store-subaction)
    (<o> ^subaction <s*2>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<s*2> ^<arg-name> <a*1>)
    (<a*1> ^{ << id 1 2 3 4 5 >> <a*2> } <v*1>)
    (<v*1> ^{ << default imagined >> <a*3> } <def>)
    -->
    (<cmd> ^store <def> +)
}

sp {learn-task-subaction*apply*store-subaction*arg*slots
    (state <s> ^name learn-task-subaction)
    (<s> ^operator <o>)
    (<o> ^name store-subaction)
    (<o> ^subaction <s*2>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<s*2> ^<arg-name> <a*1>)
    (<a*1> ^{ << id 1 2 3 4 5 predicate >> <a*2> } <slot>)
    -->
    (<cmd> ^store <slot> +)
}

sp {learn-task-subaction*apply*store-subaction*argument
    (state <s> ^name learn-task-subaction)
    (<s> ^operator <o>)
    (<o> ^name store-subaction)
    (<o> ^subaction <s*2>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<s*2> ^<arg-name> <arg>)
    (<arg> ^arg-type <any>)
    -->
    (<cmd> ^store <arg> +)
}

sp {learn-task-subaction*apply*store-subaction
    (state <s> ^name learn-task-subaction)
    (<s> ^operator <o>)
    (<o> ^name store-subaction)
    (<o> ^subaction <sub>)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <proc>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<s> ^superstate <ss>)
    -->
    (<proc> ^subaction <sub> +)
    (<cmd> ^store <sub> +)
    (<cmd> ^store <proc> +)
    (<s> ^stored <sub> +)
}

sp {learn-task-subaction*propose*store-subaction
    (state <s> ^name learn-task-subaction)
    (<s> ^subaction-structure <sub>)
    (<s> -^stored <sub>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name store-subaction +)
    (<o> ^subaction <sub> +)
}

sp {learn-task-subaction*elaborate*argument-info*generalized-rep*until-clause*predicate
    (state <s> ^name learn-task-subaction)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^arg-type until-clause)
    (<arg-info> ^generalized-rep <gen-rep>)
    (<arg-info> ^predicate <p*1>)
    (<p*1> ^generalized-rep <pred-rep>)
    -->
    (<gen-rep> ^predicate <pred-rep> +)
}

sp {learn-task-subaction*elaborate*argument-info*generalized-rep*until-clause
    (state <s> ^name learn-task-subaction)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^arg-type until-clause)
    -->
    (<arg-info> ^generalized-rep <gen-rep> +)
    (<gen-rep> ^arg-type until-clause +)
}

sp {learn-task-subaction*elaborate*argument-info*generalized-rep*predicate
    (state <s> ^name learn-task-subaction)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^arg-type predicate)
    (<arg-info> ^2 <v*1>)
    (<v*1> ^generalized-rep <obj2-gen>)
    (<arg-info> ^id <i*1>)
    (<i*1> ^generalized-rep <pred-gen>)
    -->
    (<arg-info> ^generalized-rep <gen-rep> +)
    (<gen-rep> ^arg-type predicate +)
    (<gen-rep> ^id <pred-gen> +)
    (<gen-rep> ^2 <obj2-gen> +)
}

sp {learn-task-subaction*elaborate*argument-info*generalized-rep*concept
    (state <s> ^name learn-task-subaction)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^arg-type concept)
    (<arg-info> ^id <i*1>)
    (<i*1> ^generalized-rep <conc-gen>)
    -->
    (<arg-info> ^generalized-rep <gen-rep> +)
    (<gen-rep> ^arg-type concept +)
    (<gen-rep> ^id <conc-gen> +)
}

sp {learn-task-subaction*elaborate*argument-info*generalized-rep*object
    (state <s> ^name learn-task-subaction)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^arg-type { << object location >> <arg-type> })
    (<arg-info> ^id <i*1>)
    (<i*1> ^generalized-rep <obj-gen>)
    -->
    (<arg-info> ^generalized-rep <gen-rep> +)
    (<gen-rep> ^arg-type <arg-type> +)
    (<gen-rep> ^id <obj-gen> +)
}

sp {learn-task-subaction*elaborate*argument-info*until*predicate
    (state <s> ^name learn-task-subaction)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^arg-type until-clause)
    (<arg-info> ^instance <i*1>)
    (<i*1> ^predicate <until-pred>)
    -->
    (<arg-info> ^predicate <gen> +)
    (<s> ^generalize-argument <gen> +)
    (<gen> ^arg-type until-predicate +)
    (<gen> ^instance <until-pred> +)
}

sp {learn-task-subaction*elaborate*argument-info*until
    (state <s> ^name learn-task-subaction)
    (<s> ^subaction <s*1>)
    (<s*1> ^<arg-name> <arg>)
    (<arg> ^arg-type until-clause)
    -->
    (<s> ^argument-info <arg-info> +)
    (<arg-info> ^arg-name <arg-name> +)
    (<arg-info> ^arg-type until-clause +)
    (<arg-info> ^instance <arg> +)
}

sp {learn-task-subaction*elaborate*argument-info*predicate
    (state <s> ^name learn-task-subaction)
    (<s> ^subaction <s*1>)
    (<s*1> ^<arg-name> <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^2 <obj>)
    (<arg> ^id <pred>)
    -->
    (<s> ^argument-info <arg-info> +)
    (<arg-info> ^arg-name <arg-name> +)
    (<arg-info> ^arg-type predicate +)
    (<arg-info> ^instance <arg> +)
    (<arg-info> ^id <gen-pred> +)
    (<arg-info> ^2 <gen-obj> +)
    (<s> ^generalize-argument <gen-pred> +)
    (<s> ^generalize-argument <gen-obj> +)
    (<gen-pred> ^arg-type predicate +)
    (<gen-pred> ^instance <pred> +)
    (<gen-obj> ^arg-type object +)
    (<gen-obj> ^instance <obj> +)
}

sp {learn-task-subaction*elaborate*argument-info*concept
    (state <s> ^name learn-task-subaction)
    (<s> ^subaction <s*1>)
    (<s*1> ^<arg-name> <arg>)
    (<arg> ^arg-type concept)
    (<arg> ^id <concept>)
    -->
    (<s> ^argument-info <arg-info> +)
    (<arg-info> ^arg-name <arg-name> +)
    (<arg-info> ^arg-type concept +)
    (<arg-info> ^instance <arg> +)
    (<arg-info> ^id <gen> +)
    (<s> ^generalize-argument <gen> +)
    (<gen> ^arg-type concept +)
    (<gen> ^instance <concept> +)
}

sp {learn-task-subaction*elaborate*argument-info*object*imagined
    (state <s> ^name learn-task-subaction)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^instance <i*1>)
    (<i*1> ^imagined true)
    (<arg-info> ^arg-type { << object location >> <a*1> })
    (<arg-info> ^id <gen>)
    -->
    (<gen> ^imagined true +)
}

sp {learn-task-subaction*elaborate*argument-info*object
    (state <s> ^name learn-task-subaction)
    (<s> ^subaction <s*1>)
    (<s*1> ^<arg-name> <arg>)
    (<arg> ^arg-type { << object location >> <arg-type> })
    (<arg> ^id <obj>)
    -->
    (<s> ^argument-info <arg-info> +)
    (<arg-info> ^arg-name <arg-name> +)
    (<arg-info> ^arg-type <arg-type> +)
    (<arg-info> ^instance <arg> +)
    (<arg-info> ^id <gen> +)
    (<s> ^generalize-argument <gen> +)
    (<gen> ^arg-type object +)
    (<gen> ^instance <obj> +)
}

sp {learn-task-subaction*elaborate*subaction
    (state <s> ^name learn-task-subaction)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^subaction <sub>)
    -->
    (<s> ^subaction <sub> +)
}

sp {learn-task-subaction*elaborate*procedural-id
    (state <s> ^name learn-task-subaction)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <proc>)
    -->
    (<s> ^procedural-id <proc> +)
}

sp {learn-task-subaction*elaborate*action-id
    (state <s> ^name learn-task-subaction)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^action-id <id>)
    -->
    (<s> ^action-id <id> +)
}

sp {learn-task-subaction*elaborate*action
    (state <s> ^name learn-task-subaction)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^action-context <action>)
    -->
    (<s> ^action-context <action> +)
}

sp {learn-desired-elaboration-rule*all-predicates-grounded*turn*on*learning
    (state <s> ^all-predicates-grounded true)
    (<s> ^name learn-desired-elaboration-rule)
    (<s> ^superstate <ss>)
    -->
    (force-learn <ss>)
}

sp {learn-desired-elaboration-rule*elaborate*problem-space
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^goal-id <goal>)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^world <w*1> +)
    (<w*1> ^copy-type shallow +)
}

sp {learn-desired-elaboration-rule*apply*complete-learn-desired-elaboration-rule
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-learn-desired-elaboration-rule)
    (<s> ^desired <des>)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <sss>)
    -->
    (<sss> ^desired <des> +)
}

sp {learn-desired-elaboration-rule*propose*complete-learn-desired-elaboration-rule
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^desired <des>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-learn-desired-elaboration-rule +)
}

sp {learn-desired-elaboration-rule*propose*generate-grounded-predicate
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^predicate <pred>)
    (<pred> -^grounding-failure <g*2>)
    (<pred> -^grounded-rep <g*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name generate-grounded-predicate +)
    (<o> ^predicate <pred> +)
}

sp {generate-grounded-predicate*elaborate*problem-space
    (state <s> ^name generate-grounded-predicate)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^world <w*1> +)
    (<w*1> ^copy-type shallow +)
}

sp {generate-grounded-predicate*apply*copy-grounding*args
    (state <s> ^name generate-grounded-predicate)
    (<s> ^operator <o>)
    (<o> ^name copy-grounding)
    (<o> ^grounding <g>)
    (<s> ^grounded-rep <rep>)
    (<o> ^attribute { <> id <att> })
    -->
    (<rep> ^<att> <g> +)
}

sp {generate-grounded-predicate*apply*copy-grounding*id
    (state <s> ^name generate-grounded-predicate)
    (<s> ^operator <o>)
    (<o> ^name copy-grounding)
    (<o> ^attribute id)
    (<o> ^grounding <g>)
    (<s> ^grounded-rep <rep>)
    -->
    (<rep> ^handle <g> +)
}

sp {generate-grounded-predicate*prefer*copy-grounding*exact
    (state <s> ^name generate-grounded-predicate)
    (<s> ^operator <o2> +)
    (<o2> ^match-type default)
    (<o2> ^name copy-grounding)
    (<s> ^operator <o1> +)
    (<o1> ^match-type exact)
    (<o1> ^name copy-grounding)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {generate-grounded-predicate*propose*copy-grounding*default-match
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<s> ^grounded-rep <rep>)
    (<info> ^matches-default <g>)
    (<rep> -^<any> <g>)
    (<info> ^attribute <att>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-grounding +)
    (<o> ^match-type default +)
    (<o> ^grounding <g> +)
    (<o> ^attribute <att> +)
}

sp {generate-grounded-predicate*propose*copy-grounding*match
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<s> ^grounded-rep <rep>)
    (<info> ^matches <g>)
    (<rep> -^<any> <g>)
    (<info> ^attribute <att>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-grounding +)
    (<o> ^match-type exact +)
    (<o> ^grounding <g> +)
    (<o> ^attribute <att> +)
}

sp {generate-grounded-predicate*elaborate*default-match-info*matches*object*4*predicate
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> ^ground-default <def>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<def> ^<prop4> <pred4>)
    (<def> ^{ < <prop4> <prop3> } <pred3>)
    (<def> ^{ < <prop3> <prop2> } <pred2>)
    (<def> ^{ < <prop2> <prop1> } <pred1>)
    (<def> -^{ <> <prop1> <> <prop2> <> <prop3> <> <prop4> <prop5> } <p*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^<prop4> <pred4>)
    (<preds> ^<prop3> <pred3>)
    (<preds> ^<prop2> <pred2>)
    (<preds> ^<prop1> <pred1>)
    -->
    (<info> ^matches-default <obj> +)
}

sp {generate-grounded-predicate*elaborate*default-match-info*matches*object*3*predicate
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> ^ground-default <def>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<def> ^<prop3> <pred3>)
    (<def> ^{ < <prop3> <prop2> } <pred2>)
    (<def> ^{ < <prop2> <prop1> } <pred1>)
    (<def> -^{ <> <prop1> <> <prop2> <> <prop3> <prop4> } <p*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^<prop3> <pred3>)
    (<preds> ^<prop2> <pred2>)
    (<preds> ^<prop1> <pred1>)
    -->
    (<info> ^matches-default <obj> +)
}

sp {generate-grounded-predicate*elaborate*default-match-info*matches*object*2*predicate
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> ^ground-default <def>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<def> ^<prop2> <pred2>)
    (<def> ^{ < <prop2> <prop1> } <pred1>)
    (<def> -^{ <> <prop1> <> <prop2> <prop3> } <p*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^<prop2> <pred2>)
    (<preds> ^<prop1> <pred1>)
    -->
    (<info> ^matches-default <obj> +)
}

sp {generate-grounded-predicate*elaborate*default-match-info*matches*object*1*predicate
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> ^ground-default <def>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<def> ^<prop1> <pred1>)
    (<def> -^{ <> <prop1> <prop2> } <p*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^<prop1> <pred1>)
    -->
    (<info> ^matches-default <obj> +)
}

sp {generate-grounded-predicate*elaborate*matches-default*id
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> ^attribute id)
    (<info> ^ground-default <g*1>)
    (<g*1> ^predicate-handle <def-handle>)
    -->
    (<info> ^matches-default <def-handle> +)
}

sp {generate-grounded-predicate*elaborate*ground-default*no*matches
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> -^matches <m*1>)
    (<info> ^slot <s*1>)
    (<s*1> ^{ << default imagined >> <a*1> } <def>)
    -->
    (<info> ^ground-default <def> +)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*object*in*predicate
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> ^slot <parg>)
    (<info> ^slot <obj-slot>)
    (<s> ^argument-to-match <atm>)
    (<atm> ^argument <arg>)
    (<arg> ^arg-type predicate)
    (<s> ^procedural-id <proc>)
    (<arg> ^2 <obj>)
    (<atm> ^name <arg-name>)
    (<proc> ^<arg-name> <proc-arg>)
    (<proc-arg> ^arg-type predicate)
    (<proc-arg> ^2 <obj-slot>)
    (<info> ^attribute { << 1 2 >> <a*1> })
    -->
    (<info> ^matches <obj> +)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*object
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> ^slot <obj-slot>)
    (<s> ^argument-to-match <atm>)
    (<atm> ^argument <arg>)
    (<arg> ^arg-type object)
    (<s> ^procedural-id <proc>)
    (<arg> ^id <obj>)
    (<atm> ^name <arg-name>)
    (<proc> ^<arg-name> <proc-arg>)
    (<proc-arg> ^arg-type object)
    (<proc-arg> ^id <obj-slot>)
    (<info> ^attribute { << 1 2 >> <a*1> })
    -->
    (<info> ^matches <obj> +)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*relation*id
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> ^type relation)
    (<info> ^attribute id)
    (<info> ^slot <pred-slot>)
    (<s> ^argument-to-match <atm>)
    (<atm> ^argument <arg>)
    (<arg> ^arg-type predicate)
    (<s> ^procedural-id <proc>)
    (<arg> ^handle <rel-handle>)
    (<atm> ^name <arg-name>)
    (<proc> ^<arg-name> <proc-arg>)
    (<proc-arg> ^arg-type predicate)
    (<proc-arg> ^id <pred-slot>)
    -->
    (<info> ^matches <rel-handle> +)
}

sp {generate-grounded-predicate*elaborate*grounding-info*matches*state*id
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> ^type state)
    (<info> ^attribute id)
    (<info> ^slot <concept-slot>)
    (<s> ^argument-to-match <atm>)
    (<atm> ^argument <arg>)
    (<arg> ^arg-type concept)
    (<s> ^procedural-id <proc>)
    (<arg> ^handle <concept-handle>)
    (<atm> ^name <arg-name>)
    (<proc> ^<arg-name> <proc-arg>)
    (<proc-arg> ^arg-type concept)
    (<proc-arg> ^id <concept-slot>)
    -->
    (<info> ^matches <concept-handle> +)
}

sp {generate-grounded-predicate*elaborate*grounding-info*predicate*type
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounding-info <info>)
    (<info> ^attribute id)
    (<s> ^predicate <p*1>)
    (<p*1> ^smem-rep <s*1>)
    (<s*1> ^type <type>)
    -->
    (<info> ^type <type> +)
}

sp {generate-grounded-predicate*elaborate*grounding-info
    (state <s> ^name generate-grounded-predicate)
    (<s> ^predicate <p*1>)
    (<p*1> ^smem-rep <goal-pred>)
    (<goal-pred> ^{ << id 1 2 >> <att> } <arg>)
    -->
    (<s> ^grounding-info <info> +)
    (<info> ^attribute <att> +)
    (<info> ^slot <arg> +)
}

sp {generate-grounded-predicate*apply*create-grounded-rep
    (state <s> ^name generate-grounded-predicate)
    (<s> ^operator <o>)
    (<o> ^name create-grounded-rep)
    (<o> ^predicate <p*1>)
    (<p*1> ^smem-rep <s*1>)
    (<s*1> ^type <pred-type>)
    -->
    (<s> ^grounded-rep <rep> +)
    (<rep> ^type <pred-type> +)
}

sp {generate-grounded-predicate*propose*create-grounded-rep
    (state <s> ^name generate-grounded-predicate)
    (<s> -^grounded-rep <g*1>)
    (<s> ^predicate <pred>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-grounded-rep +)
    (<o> ^predicate <pred> +)
}

sp {generate-grounded-predicate*apply*complete-generate-grounded-predicate*grounding-failure
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounded-rep <rep>)
    (<s> -^complete <rep>)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-generate-grounded-predicate)
    (<s> ^predicate <pred>)
    -->
    (<pred> ^grounding-failure true +)
}

sp {generate-grounded-predicate*apply*complete-generate-grounded-predicate
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounded-rep <rep>)
    (<s> ^complete <rep>)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-generate-grounded-predicate)
    (<s> ^predicate <pred>)
    (<s> ^superstate <s*1>)
    (<s*1> ^desired <des>)
    -->
    (<pred> ^grounded-rep <rep> +)
    (<des> ^predicate <rep> +)
}

sp {generate-grounded-predicate*propose*complete-generate-grounded-predicate
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounded-rep <rep>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-generate-grounded-predicate +)
}

sp {generate-grounded-predicate*elaborate*grounding-rep*relation*complete*true
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounded-rep <rep>)
    (<rep> ^type relation)
    (<rep> ^2 <arg2>)
    (<rep> ^handle <handle>)
    (<rep> ^1 <arg1>)
    -->
    (<s> ^complete <rep> +)
}

sp {generate-grounded-predicate*elaborate*grounding-rep*state*complete*true
    (state <s> ^name generate-grounded-predicate)
    (<s> ^grounded-rep <rep>)
    (<rep> ^type state)
    (<rep> ^handle <handle>)
    (<rep> ^1 <arg1>)
    -->
    (<s> ^complete <rep> +)
}

sp {generate-grounded-predicate*elaborate*predicate*from*superoperator
    (state <s> ^name generate-grounded-predicate)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^predicate <pred>)
    -->
    (<s> ^predicate <pred> +)
}

sp {generate-grounded-predicate*elaborate*procedural-id*from*superstate
    (state <s> ^name generate-grounded-predicate)
    (<s> ^superstate <s*1>)
    (<s*1> ^procedural-id <proc>)
    -->
    (<s> ^procedural-id <proc> +)
}

sp {generate-grounded-predicate*elaborate*argument-to-match*from*superstate*4*args
    (state <s> ^name generate-grounded-predicate)
    (<s> ^procedural-id <proc>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <action>)
    (<proc> ^<arg4-name> <a*4>)
    (<action> ^<arg4-name> <arg4>)
    (<proc> ^{ < <arg4-name> <arg3-name> } <a*3>)
    (<action> ^<arg3-name> <arg3>)
    (<proc> ^{ < <arg3-name> <arg2-name> } <a*2>)
    (<action> ^<arg2-name> <arg2>)
    (<proc> ^{ < <arg2-name> <arg1-name> } <a*1>)
   -{ (<proc>
            ^{ <> <arg1-name> <> <arg2-name> <> <arg3-name> <> <arg4-name> <arg5-name> } <parg5>)
      (<action> ^<arg5-name> <arg5>)}
    (<action> ^<arg1-name> <arg1>)
    -->
    (<s> ^argument-to-match <atm1> +)
    (<s> ^argument-to-match <atm2> +)
    (<s> ^argument-to-match <atm3> +)
    (<s> ^argument-to-match <atm4> +)
    (<atm1> ^name <arg1-name> +)
    (<atm1> ^argument <arg1> +)
    (<atm2> ^name <arg2-name> +)
    (<atm2> ^argument <arg2> +)
    (<atm3> ^name <arg3-name> +)
    (<atm3> ^argument <arg3> +)
    (<atm4> ^name <arg4-name> +)
    (<atm4> ^argument <arg4> +)
}

sp {generate-grounded-predicate*elaborate*argument-to-match*from*superstate*3*args
    (state <s> ^name generate-grounded-predicate)
    (<s> ^procedural-id <proc>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <action>)
    (<proc> ^<arg3-name> <a*3>)
    (<action> ^<arg3-name> <arg3>)
    (<proc> ^{ < <arg3-name> <arg2-name> } <a*2>)
    (<action> ^<arg2-name> <arg2>)
    (<proc> ^{ < <arg2-name> <arg1-name> } <a*1>)
   -{ (<proc>
            ^{ <> <arg1-name> <> <arg2-name> <> <arg3-name> <arg4-name> } <parg4>)
      (<action> ^<arg4-name> <arg4>)}
    (<action> ^<arg1-name> <arg1>)
    -->
    (<s> ^argument-to-match <atm1> +)
    (<s> ^argument-to-match <atm2> +)
    (<s> ^argument-to-match <atm3> +)
    (<atm1> ^name <arg1-name> +)
    (<atm1> ^argument <arg1> +)
    (<atm2> ^name <arg2-name> +)
    (<atm2> ^argument <arg2> +)
    (<atm3> ^name <arg3-name> +)
    (<atm3> ^argument <arg3> +)
}

sp {generate-grounded-predicate*elaborate*argument-to-match*from*superstate*2*args
    (state <s> ^name generate-grounded-predicate)
    (<s> ^procedural-id <proc>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <action>)
    (<proc> ^<arg2-name> <a*2>)
    (<action> ^<arg2-name> <arg2>)
    (<proc> ^{ < <arg2-name> <arg1-name> } <a*1>)
   -{ (<proc> ^{ <> <arg1-name> <> <arg2-name> <arg3-name> } <parg3>)
      (<action> ^<arg3-name> <arg3>)}
    (<action> ^<arg1-name> <arg1>)
    -->
    (<s> ^argument-to-match <atm1> +)
    (<s> ^argument-to-match <atm2> +)
    (<atm1> ^name <arg1-name> +)
    (<atm1> ^argument <arg1> +)
    (<atm2> ^name <arg2-name> +)
    (<atm2> ^argument <arg2> +)
}

sp {generate-grounded-predicate*elaborate*argument-to-match*from*superstate*1*args
    (state <s> ^name generate-grounded-predicate)
    (<s> ^procedural-id <proc>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <action>)
    (<proc> ^<arg1-name> <a*1>)
   -{ (<proc> ^{ <> <arg1-name> <arg2-name> } <parg2>)
      (<action> ^<arg2-name> <arg2>)}
    (<action> ^<arg1-name> <arg1>)
    -->
    (<s> ^argument-to-match <atm1> +)
    (<atm1> ^name <arg1-name> +)
    (<atm1> ^argument <arg1> +)
}

sp {learn-desired-elaboration-rule*apply*report-unknown-goal-failure
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-unknown-goal-failure)
    (<s> ^action-context <action>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^failure <f> +)
    (<f> ^type unknown-goal +)
    (<f> ^action <action> +)
}

sp {learn-desired-elaboration-rule*propose*report-unknown-goal-failure*no*goal
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> -^goal-id <goal>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name report-unknown-goal-failure +)
}

sp {learn-desired-elaborate-rule*elaborate*all-predicates-grounded*true
    (state <s> ^name learn-desired-elaboration-rule)
   -{ (<s> ^predicate <pred>)
      (<pred> -^grounded-rep <g*1>)}
    (<s> ^predicate <p>)
    -->
    (<s> ^all-predicates-grounded true +)
}

sp {learn-desired-elaboration-rule*elaborate*desired
    (state <s> ^name learn-desired-elaboration-rule)
    -->
    (<s> ^desired <desired> +)
}

sp {learn-desired-elaboration-rule*elaborate*6*predicates
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^goal-id <goal>)
    (<goal> ^predicate <pred6>)
    (<goal> ^predicate { < <pred6> <pred5> })
    (<goal> ^predicate { < <pred5> <pred4> })
    (<goal> ^predicate { < <pred4> <pred3> })
    (<goal> ^predicate { < <pred3> <pred2> })
    (<goal> ^predicate { < <pred2> <pred1> })
    (<goal>
          -^predicate { <> <pred1> <> <pred2> <> <pred3> <> <pred4> <> <pred5> <> <pred6> <pred7> })
    -->
    (<s> ^predicate <p*1> +)
    (<p*1> ^smem-rep <pred1> +)
    (<s> ^predicate <p*2> +)
    (<p*2> ^smem-rep <pred2> +)
    (<s> ^predicate <p*3> +)
    (<p*3> ^smem-rep <pred3> +)
    (<s> ^predicate <p*4> +)
    (<p*4> ^smem-rep <pred4> +)
    (<s> ^predicate <p*5> +)
    (<p*5> ^smem-rep <pred5> +)
    (<s> ^predicate <p*6> +)
    (<p*6> ^smem-rep <pred6> +)
}

sp {learn-desired-elaboration-rule*elaborate*5*predicates
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^goal-id <goal>)
    (<goal> ^predicate <pred5>)
    (<goal> ^predicate { < <pred5> <pred4> })
    (<goal> ^predicate { < <pred4> <pred3> })
    (<goal> ^predicate { < <pred3> <pred2> })
    (<goal> ^predicate { < <pred2> <pred1> })
    (<goal>
          -^predicate { <> <pred1> <> <pred2> <> <pred3> <> <pred4> <> <pred5> <pred6> })
    -->
    (<s> ^predicate <p*1> +)
    (<p*1> ^smem-rep <pred1> +)
    (<s> ^predicate <p*2> +)
    (<p*2> ^smem-rep <pred2> +)
    (<s> ^predicate <p*3> +)
    (<p*3> ^smem-rep <pred3> +)
    (<s> ^predicate <p*4> +)
    (<p*4> ^smem-rep <pred4> +)
    (<s> ^predicate <p*5> +)
    (<p*5> ^smem-rep <pred5> +)
}

sp {learn-desired-elaboration-rule*elaborate*4*predicates
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^goal-id <goal>)
    (<goal> ^predicate <pred4>)
    (<goal> ^predicate { < <pred4> <pred3> })
    (<goal> ^predicate { < <pred3> <pred2> })
    (<goal> ^predicate { < <pred2> <pred1> })
    (<goal>
          -^predicate { <> <pred1> <> <pred2> <> <pred3> <> <pred4> <pred5> })
    -->
    (<s> ^predicate <p*1> +)
    (<p*1> ^smem-rep <pred1> +)
    (<s> ^predicate <p*2> +)
    (<p*2> ^smem-rep <pred2> +)
    (<s> ^predicate <p*3> +)
    (<p*3> ^smem-rep <pred3> +)
    (<s> ^predicate <p*4> +)
    (<p*4> ^smem-rep <pred4> +)
}

sp {learn-desired-elaboration-rule*elaborate*3*predicates
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^goal-id <goal>)
    (<goal> ^predicate <pred3>)
    (<goal> ^predicate { < <pred3> <pred2> })
    (<goal> ^predicate { < <pred2> <pred1> })
    (<goal> -^predicate { <> <pred1> <> <pred2> <> <pred3> <pred4> })
    -->
    (<s> ^predicate <p*1> +)
    (<p*1> ^smem-rep <pred1> +)
    (<s> ^predicate <p*2> +)
    (<p*2> ^smem-rep <pred2> +)
    (<s> ^predicate <p*3> +)
    (<p*3> ^smem-rep <pred3> +)
}

sp {learn-desired-elaboration-rule*elaborate*2*predicates
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^goal-id <goal>)
    (<goal> ^predicate <pred2>)
    (<goal> ^predicate { < <pred2> <pred1> })
    (<goal> -^predicate { <> <pred1> <> <pred2> <pred3> })
    -->
    (<s> ^predicate <p*1> +)
    (<p*1> ^smem-rep <pred1> +)
    (<s> ^predicate <p*2> +)
    (<p*2> ^smem-rep <pred2> +)
}

sp {learn-desired-elaboration-rule*elaborate*1*predicate
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^goal-id <goal>)
    (<goal> ^predicate <pred1>)
    (<goal> -^predicate { <> <pred1> <pred2> })
    -->
    (<s> ^predicate <p*1> +)
    (<p*1> ^smem-rep <pred1> +)
}

sp {learn-desired-elaboration-rule*elaborate*smem-info
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^action-id <action-id>)
    (<action-id> ^procedural <proc>)
    (<action-id> ^goal <goal>)
    -->
    (<s> ^goal-id <goal> +)
    (<s> ^procedural-id <proc> +)
}

sp {learn-desired-elaboration-rule*elaborate*action-context*from*superstate
    (state <s> ^name learn-desired-elaboration-rule)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^action-context <action>)
    -->
    (<s> ^action-context <action> +)
}

sp {no-proposed-action*apply*report-failure
    (state <s> ^name no-proposed-action)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-failure)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<s> ^superstate <ss>)
    -->
    (<status> ^failure <f*1> +)
    (<f*1> ^type no-proposed-action +)
}

sp {no-proposed-action*propose*report-failure
    (state <s> ^name no-proposed-action)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-failure +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*instance*relation*until-predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^arg-type until-predicate)
    (<arg> ^generalized-rep <g*1>)
    (<g*1> ^type relation)
    (<arg> ^2 <v*2>)
    (<v*2> ^instance <obj2>)
    (<arg> ^1 <v*1>)
    (<v*1> ^instance <obj1>)
    (<arg> ^id <i*1>)
    (<i*1> ^instance <handle>)
    -->
    (<arg> ^instance <instance> +)
    (<instance> ^type relation +)
    (<instance> ^handle <handle> +)
    (<instance> ^1 <obj1> +)
    (<instance> ^2 <obj2> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*instance*state*until-predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^arg-type until-predicate)
    (<arg> ^generalized-rep <g*1>)
    (<g*1> ^type state)
    (<arg> ^1 <v*1>)
    (<v*1> ^instance <obj1>)
    (<arg> ^id <i*1>)
    (<i*1> ^instance <handle>)
    -->
    (<arg> ^instance <instance> +)
    (<instance> ^type state +)
    (<instance> ^handle <handle> +)
    (<instance> ^1 <obj1> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*instance*default
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> -^matches-imagined <m*2>)
    (<arg> -^matches <m*1>)
    (<arg> ^matches-default <instance>)
    -->
    (<arg> ^instance <instance> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*instance*imagined
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> -^matches <m*1>)
    (<arg> ^matches-imagined <instance>)
    -->
    (<arg> ^instance <instance> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*instance*matches
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^matches <instance>)
    -->
    (<arg> ^instance <instance> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches-default*matches*object*5*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^generalized-rep <g*1>)
    (<g*1> ^default <def>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<def> ^<prop5> <pred5>)
    (<def> ^{ < <prop5> <prop4> } <pred4>)
    (<def> ^{ < <prop4> <prop3> } <pred3>)
    (<def> ^{ < <prop3> <prop2> } <pred2>)
    (<def> ^{ < <prop2> <prop1> } <pred1>)
    (<def>
          -^{ <prop5> <> <prop1> <> <prop2> <> <prop3> <> <prop4> <> <prop5> } <p*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^<prop5> <pred5>)
    (<preds> ^<prop4> <pred4>)
    (<preds> ^<prop3> <pred3>)
    (<preds> ^<prop2> <pred2>)
    (<preds> ^<prop1> <pred1>)
    -->
    (<arg> ^matches-default <obj> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches-default*matches*object*4*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^generalized-rep <g*1>)
    (<g*1> ^default <def>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<def> ^<prop4> <pred4>)
    (<def> ^{ < <prop4> <prop3> } <pred3>)
    (<def> ^{ < <prop3> <prop2> } <pred2>)
    (<def> ^{ < <prop2> <prop1> } <pred1>)
    (<def> -^{ <> <prop1> <> <prop2> <> <prop3> <> <prop4> <prop5> } <p*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^<prop4> <pred4>)
    (<preds> ^<prop3> <pred3>)
    (<preds> ^<prop2> <pred2>)
    (<preds> ^<prop1> <pred1>)
    -->
    (<arg> ^matches-default <obj> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches-default*matches*object*3*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^generalized-rep <g*1>)
    (<g*1> ^default <def>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<def> ^<prop3> <pred3>)
    (<def> ^{ < <prop3> <prop2> } <pred2>)
    (<def> ^{ < <prop2> <prop1> } <pred1>)
    (<def> -^{ <> <prop1> <> <prop2> <> <prop3> <prop4> } <p*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^<prop3> <pred3>)
    (<preds> ^<prop2> <pred2>)
    (<preds> ^<prop1> <pred1>)
    -->
    (<arg> ^matches-default <obj> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches-default*matches*object*2*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^generalized-rep <g*1>)
    (<g*1> ^default <def>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<def> ^<prop2> <pred2>)
    (<def> ^{ < <prop2> <prop1> } <pred1>)
    (<def> -^{ <> <prop1> <> <prop2> <prop3> } <p*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^<prop2> <pred2>)
    (<preds> ^<prop1> <pred1>)
    -->
    (<arg> ^matches-default <obj> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches-default*matches*object*1*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^generalized-rep <g*1>)
    (<g*1> ^default <def>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<def> ^<prop1> <pred1>)
    (<def> -^{ <> <prop1> <prop2> } <p*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^<prop1> <pred1>)
    -->
    (<arg> ^matches-default <obj> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches-default*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^generalized-rep <g*1>)
    (<g*1> ^default <d*1>)
    (<d*1> ^predicate-handle <handle>)
    -->
    (<arg> ^matches-default <handle> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches-default*concept
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^arg-type concept)
    (<arg> ^generalized-rep <g*1>)
    (<g*1> ^default <d*1>)
    (<d*1> ^predicate-handle <handle>)
    -->
    (<arg> ^matches-default <handle> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^generalized-rep <pred-slot>)
    (<s> ^procedural-id <p*1>)
    (<s> ^action-context <a*1>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-type predicate)
    (<parg> ^id <pred-slot>)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^handle <pred-handle>)
    -->
    (<arg> ^matches <pred-handle> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches*concept
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^arg-type concept)
    (<arg> ^generalized-rep <conc-slot>)
    (<s> ^procedural-id <p*1>)
    (<s> ^action-context <a*1>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-type concept)
    (<parg> ^id <conc-slot>)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^handle <concept-handle>)
    -->
    (<arg> ^matches <conc-handle> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches*object*depth*2
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^generalized-rep <obj-slot>)
    (<s> ^procedural-id <p*1>)
    (<arg> ^arg-type { << object location >> <a*3> })
    (<s> ^action-context <a*1>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-type predicate)
    (<parg> ^2 <obj-slot>)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^2 <obj>)
    -->
    (<arg> ^matches <obj> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*matches*object*depth*1
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^generalized-rep <obj-slot>)
    (<s> ^procedural-id <p*1>)
    (<arg> ^arg-type { << object location >> <a*3> })
    (<s> ^action-context <a*1>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^id <obj-slot>)
    (<parg> ^arg-type { << object location >> <a*4> })
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^id <obj>)
    -->
    (<arg> ^matches <obj> +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*until-predicate*expand*relation*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^arg-type until-predicate)
    (<arg> ^generalized-rep <until-pred>)
    (<until-pred> ^type relation)
    (<until-pred> ^2 <obj2-rep>)
    (<until-pred> ^1 <obj1-rep>)
    (<until-pred> ^id <pred-rep>)
    -->
    (<arg> ^id <ground-pred> +)
    (<arg> ^1 <ground-obj1> +)
    (<arg> ^2 <ground-obj2> +)
    (<s> ^ground-argument <ground-pred> +)
    (<s> ^ground-argument <ground-obj1> +)
    (<s> ^ground-argument <ground-obj2> +)
    (<ground-pred> ^generalized-rep <pred-rep> +)
    (<ground-pred> ^arg-type predicate +)
    (<ground-obj1> ^generalized-rep <obj1-rep> +)
    (<ground-obj1> ^arg-type object +)
    (<ground-obj2> ^generalized-rep <obj2-rep> +)
    (<ground-obj2> ^arg-type object +)
}

sp {learn-subaction-proposal*elaborate*ground-argument*until-predicate*expand*state*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> ^arg-type until-predicate)
    (<arg> ^generalized-rep <until-pred>)
    (<until-pred> ^type state)
    (<until-pred> ^1 <obj-rep>)
    (<until-pred> ^id <pred-rep>)
    -->
    (<arg> ^id <ground-pred> +)
    (<arg> ^1 <ground-obj> +)
    (<s> ^ground-argument <ground-pred> +)
    (<s> ^ground-argument <ground-obj> +)
    (<ground-pred> ^generalized-rep <pred-rep> +)
    (<ground-pred> ^arg-type concept +)
    (<ground-obj> ^generalized-rep <obj-rep> +)
    (<ground-obj> ^arg-type object +)
}

sp {learn-subaction-proposal*apply*complete-learn-subaction-proposal
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-learn-subaction-proposal)
    (<s> ^subaction-operator <op>)
    (<s> ^subaction-id <sub-id>)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <ss>)
    -->
    (<ss> ^operator <op> +)
    (<ss> ^proposed-subaction <sub-id> +)
}

sp {learn-subaction-proposal*propose*complete-learn-subaction-proposal
    (state <s> ^all-arguments-created true)
    (<s> ^name learn-subaction-proposal)
    (<s> ^subaction-operator <op>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-learn-subaction-proposal +)
}

sp {learn-subaction-proposal*turn*learning*on*superstate
    (state <s> ^all-arguments-created true)
    (<s> ^name learn-subaction-proposal)
    (<s> ^superstate <ss>)
    -->
    (force-learn <ss>)
}

sp {learn-subaction-proposal*prefer*create*others*over*create-op-arg
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o2> +)
    (<o2> ^name { << create-operator-argument >> <n*2> })
    (<s> ^operator <o1> +)
    (<o1> ^name { << create-imagined-object create-operator >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-subaction-proposal*apply*create-operator-argument*until-clause*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-operator-argument)
    (<o> ^argument-info <arg-info>)
    (<arg-info> ^arg-type until-clause)
    (<s> ^subaction-operator <s*1>)
    (<arg-info> ^arg-name <arg-name>)
    (<arg-info> ^predicate <p*1>)
    (<p*1> ^instance <pred>)
    (<s*1> ^<arg-name> <sub-arg>)
    -->
    (<sub-arg> ^predicate <pred> +)
    (<arg-info> ^created true +)
}

sp {learn-subaction-proposal*apply*create-operator-argument*until-clause
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-operator-argument)
    (<o> ^argument-info <arg-info>)
    (<arg-info> ^arg-type until-clause)
    (<s> ^subaction-operator <sub-op>)
    (<arg-info> ^arg-name <arg-name>)
    -->
    (<sub-op> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type until-clause +)
}

sp {learn-subaction-proposal*apply*create-operator-argument*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-operator-argument)
    (<o> ^argument-info <arg-info>)
    (<arg-info> ^arg-type predicate)
    (<s> ^subaction-operator <sub-op>)
    (<arg-info> ^arg-name <arg-name>)
    (<arg-info> ^2 <v*1>)
    (<v*1> ^instance <obj2>)
    (<arg-info> ^id <i*1>)
    (<i*1> ^instance <pred>)
    -->
    (<sub-op> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type predicate +)
    (<new-arg> ^id <pred> +)
    (<new-arg> ^2 <obj2> +)
    (<arg-info> ^created true +)
}

sp {learn-subaction-proposal*apply*create-operator-argument*concept
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-operator-argument)
    (<o> ^argument-info <arg-info>)
    (<arg-info> ^arg-type concept)
    (<s> ^subaction-operator <sub-op>)
    (<arg-info> ^arg-name <arg-name>)
    (<arg-info> ^id <i*1>)
    (<i*1> ^instance <concept>)
    -->
    (<sub-op> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type concept +)
    (<new-arg> ^id <concept> +)
    (<arg-info> ^created true +)
}

sp {learn-subaction-proposal*apply*create-operator-argument*object
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-operator-argument)
    (<s> ^subaction-operator <sub-op>)
    (<o> ^argument-info <arg-info>)
    (<arg-info> ^arg-name <arg-name>)
    (<arg-info> ^arg-type { << object location >> <arg-type> })
    (<arg-info> ^id <i*1>)
    (<i*1> ^instance <obj>)
    -->
    (<sub-op> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type <arg-type> +)
    (<new-arg> ^id <obj> +)
    (<arg-info> ^created true +)
}

sp {learn-subaction-proposal*propose*create-operator-argument
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-info <arg-info>)
    (<arg-info> -^created true)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name create-operator-argument +)
    (<o> ^argument-info <arg-info> +)
}

sp {learn-subaction-proposal*apply*create-imagined-object*create*object*5*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-imagined-object)
    (<o> ^ground-info <info>)
    (<o> ^imagined <img>)
    (<img> ^<prop5> <pred5>)
    (<img> ^{ < <prop5> <prop4> } <pred4>)
    (<img> ^{ < <prop4> <prop3> } <pred3>)
    (<img> ^{ < <prop3> <prop2> } <pred2>)
    (<img> ^{ < <prop2> <prop1> } <pred1>)
    (<img>
          -^{ <prop5> <> <prop1> <> <prop2> <> <prop3> <> <prop4> <> <prop5> } <p*1>)
    -->
    (<info> ^matches-imagined <obj> +)
    (<obj> ^predicates <preds> +)
    (<preds> ^<prop1> <pred1> +)
    (<preds> ^<prop2> <pred2> +)
    (<preds> ^<prop3> <pred3> +)
    (<preds> ^<prop4> <pred4> +)
    (<preds> ^<prop5> <pred5> +)
}

sp {learn-subaction-proposal*apply*create-imagined-object*create*object*4*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-imagined-object)
    (<o> ^ground-info <info>)
    (<o> ^imagined <img>)
    (<img> ^<prop4> <pred4>)
    (<img> ^{ < <prop4> <prop3> } <pred3>)
    (<img> ^{ < <prop3> <prop2> } <pred2>)
    (<img> ^{ < <prop2> <prop1> } <pred1>)
    (<img> -^{ <> <prop1> <> <prop2> <> <prop3> <> <prop4> <prop5> } <p*1>)
    -->
    (<info> ^matches-imagined <obj> +)
    (<obj> ^predicates <preds> +)
    (<preds> ^<prop1> <pred1> +)
    (<preds> ^<prop2> <pred2> +)
    (<preds> ^<prop3> <pred3> +)
    (<preds> ^<prop4> <pred4> +)
}

sp {learn-subaction-proposal*apply*create-imagined-object*create*object*3*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-imagined-object)
    (<o> ^ground-info <info>)
    (<o> ^imagined <img>)
    (<img> ^<prop3> <pred3>)
    (<img> ^{ < <prop3> <prop2> } <pred2>)
    (<img> ^{ < <prop2> <prop1> } <pred1>)
    (<img> -^{ <> <prop1> <> <prop2> <> <prop3> <prop4> } <p*1>)
    -->
    (<info> ^matches-imagined <obj> +)
    (<obj> ^predicates <preds> +)
    (<preds> ^<prop1> <pred1> +)
    (<preds> ^<prop2> <pred2> +)
    (<preds> ^<prop3> <pred3> +)
}

sp {learn-subaction-proposal*apply*create-imagined-object*create*object*2*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-imagined-object)
    (<o> ^ground-info <info>)
    (<o> ^imagined <img>)
    (<img> ^<prop2> <pred2>)
    (<img> ^{ < <prop2> <prop1> } <pred1>)
    (<img> -^{ <> <prop1> <> <prop2> <prop3> } <p*1>)
    -->
    (<info> ^matches-imagined <obj> +)
    (<obj> ^predicates <preds> +)
    (<preds> ^<prop1> <pred1> +)
    (<preds> ^<prop2> <pred2> +)
}

sp {learn-subaction-proposal*apply*create-imagined-object*create*object*1*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-imagined-object)
    (<o> ^ground-info <info>)
    (<o> ^imagined <img>)
    (<img> ^<prop1> <pred1>)
    (<img> -^{ <> <prop1> <prop2> } <p*1>)
    -->
    (<info> ^matches-imagined <obj> +)
    (<obj> ^predicates <preds> +)
    (<preds> ^<prop1> <pred1> +)
}

sp {learn-subaction-proposal*propose*create-imagined-object
    (state <s> ^name learn-subaction-proposal)
    (<s> ^ground-argument <arg>)
    (<arg> -^matches-imagined <m*1>)
    (<arg> -^matches <any>)
    (<arg> ^generalized-rep <g*1>)
    (<g*1> ^imagined <img>)
    (<arg> ^arg-type { << object location >> <a*1> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name create-imagined-object +)
    (<o> ^imagined <img> +)
    (<o> ^ground-info <arg> +)
}

sp {learn-subaction-proposal*elaborate*argument-info*until*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^arg-type until-clause)
    (<arg-info> ^generalized-rep <arg-rep>)
    (<arg-rep> ^predicate <until-pred>)
    -->
    (<arg-info> ^predicate <ground-pred> +)
    (<s> ^ground-argument <ground-pred> +)
    (<ground-pred> ^arg-type until-predicate +)
    (<ground-pred> ^generalized-rep <until-pred> +)
}

sp {learn-subaction-proposal*elaborate*argument-info*predicate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^type predicate)
    (<arg-info> ^generalized-rep <arg-rep>)
    (<arg-rep> ^2 <obj-rep>)
    (<arg-rep> ^id <pred-rep>)
    -->
    (<arg-info> ^id <ground-pred> +)
    (<arg-info> ^2 <ground-obj> +)
    (<s> ^ground-argument <ground-pred> +)
    (<s> ^ground-argument <ground-obj> +)
    (<ground-pred> ^arg-type predicate +)
    (<ground-pred> ^generalized-rep <pred-rep> +)
    (<ground-obj> ^arg-type object +)
    (<ground-obj> ^generalized-rep <obj-rep> +)
}

sp {learn-subaction-proposal*elaborate*argument-info*concept
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^arg-type concept)
    (<arg-info> ^generalized-rep <arg-rep>)
    (<arg-rep> ^id <concept-rep>)
    -->
    (<arg-info> ^id <ground-conc> +)
    (<s> ^ground-argument <ground-conc> +)
    (<ground-conc> ^arg-type concept +)
    (<ground-conc> ^generalized-rep <concept-rep> +)
}

sp {learn-subaction-proposal*elaborate*argument-info*object
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-info <arg-info>)
    (<arg-info> ^generalized-rep <arg-rep>)
    (<arg-info> ^arg-type { << object location >> <a*1> })
    (<arg-rep> ^id <obj-rep>)
    -->
    (<arg-info> ^id <ground-obj> +)
    (<s> ^ground-argument <ground-obj> +)
    (<ground-obj> ^arg-type object +)
    (<ground-obj> ^generalized-rep <obj-rep> +)
}

sp {learn-subaction-proposal*elaborate*argument-info*info
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-info <info>)
    (<info> ^generalized-rep <g*1>)
    (<g*1> ^arg-type <arg-type>)
    -->
    (<info> ^arg-type <arg-type> +)
}

sp {learn-subaction-proposal*elaborate*argument-info*4*arguments
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-map <map>)
    (<map> ^<arg4-name> <arg4>)
    (<map> ^{ < <arg4-name> <arg3-name> } <arg3>)
    (<map> ^{ < <arg3-name> <arg2-name> } <arg2>)
    (<map> ^{ < <arg2-name> <arg1-name> } <arg1>)
    (<map>
          -^{ <> <arg1-name> <> <arg2-name> <> <arg3-name> <> <arg4-name> <arg5-name> } <arg5>)
    -->
    (<s> ^argument-info <info1> +)
    (<s> ^argument-info <info2> +)
    (<s> ^argument-info <info3> +)
    (<s> ^argument-info <info4> +)
    (<info1> ^arg-name <arg1-name> +)
    (<info1> ^generalized-rep <arg1> +)
    (<info2> ^arg-name <arg2-name> +)
    (<info2> ^generalized-rep <arg2> +)
    (<info3> ^arg-name <arg3-name> +)
    (<info3> ^generalized-rep <arg3> +)
    (<info4> ^arg-name <arg4-name> +)
    (<info4> ^generalized-rep <arg4> +)
}

sp {learn-subaction-proposal*elaborate*argument-info*3*arguments
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-map <map>)
    (<map> ^<arg3-name> <arg3>)
    (<map> ^{ < <arg3-name> <arg2-name> } <arg2>)
    (<map> ^{ < <arg2-name> <arg1-name> } <arg1>)
    (<map>
          -^{ <> <arg1-name> <> <arg2-name> <> <arg3-name> <arg4-name> } <arg4>)
    -->
    (<s> ^argument-info <info1> +)
    (<s> ^argument-info <info2> +)
    (<s> ^argument-info <info3> +)
    (<info1> ^arg-name <arg1-name> +)
    (<info1> ^generalized-rep <arg1> +)
    (<info2> ^arg-name <arg2-name> +)
    (<info2> ^generalized-rep <arg2> +)
    (<info3> ^arg-name <arg3-name> +)
    (<info3> ^generalized-rep <arg3> +)
}

sp {learn-subaction-proposal*elaborate*argument-info*2*arguments
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-map <map>)
    (<map> ^<arg2-name> <arg2>)
    (<map> ^{ < <arg2-name> <arg1-name> } <arg1>)
    (<map> -^{ <> <arg1-name> <> <arg2-name> <arg3-name> } <arg3>)
    -->
    (<s> ^argument-info <info1> +)
    (<s> ^argument-info <info2> +)
    (<info1> ^arg-name <arg1-name> +)
    (<info1> ^generalized-rep <arg1> +)
    (<info2> ^arg-name <arg2-name> +)
    (<info2> ^generalized-rep <arg2> +)
}

sp {learn-subaction-proposal*elaborate*argument-info*1*argument
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-map <map>)
    (<map> ^<arg1-name> <arg1>)
    (<map> -^{ <> <arg1-name> <arg2-name> } <arg2>)
    -->
    (<s> ^argument-info <info1> +)
    (<info1> ^arg-name <arg1-name> +)
    (<info1> ^generalized-rep <arg1> +)
}

sp {learn-subaction-proposal*apply*create-operator
    (state <s> ^name learn-subaction-proposal)
    (<s> ^operator <o>)
    (<o> ^name create-operator)
    (<o> ^subaction <sub>)
    (<sub> ^action-type <type>)
    (<sub> ^op_name <name>)
    (<sub> ^action-handle <handle>)
    -->
    (<s> ^subaction-operator <op> +)
    (<op> ^name <name> +)
    (<op> ^action-handle <handle> +)
    (<op> ^action-type <type> +)
}

sp {learn-subaction-proposal*propose*create-operator
    (state <s> ^name learn-subaction-proposal)
    (<s> -^subaction-operator <s*1>)
    (<s> ^subaction-id <sub>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name create-operator +)
    (<o> ^subaction <sub> +)
}

sp {learn-subaction-proposal*elaborate*all-arguments-created*true
    (state <s> ^name learn-subaction-proposal)
   -{ (<s> ^argument-info <info>)
      (<info> -^created true)}
    -->
    (<s> ^all-arguments-created true +)
}

sp {learn-subaction-proposal*elaborate*argument-map*entry
    (state <s> ^name learn-subaction-proposal)
    (<s> ^argument-map <map>)
    (<s> ^subaction-id <s*1>)
    (<s*1> ^<arg-name> <arg>)
    (<arg> ^arg-type <any>)
    -->
    (<map> ^<arg-name> <arg> +)
}

sp {learn-subaction-proposal*elaborate*argument-map
    (state <s> ^name learn-subaction-proposal)
    -->
    (<s> ^argument-map <map> +)
}

sp {learn-subaction-proposal*elaborate*world*superstate
    (state <s> ^name learn-subaction-proposal)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^world <world>)
    -->
    (<s> ^world <world> +)
}

sp {learn-subaction-proposal*elaborate*subaction-id
    (state <s> ^name learn-subaction-proposal)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^subaction-id <sub>)
    -->
    (<s> ^subaction-id <sub> +)
}

sp {learn-subaction-proposal*elaborate*action-context
    (state <s> ^name learn-subaction-proposal)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^action-context <action>)
    -->
    (<s> ^action-context <action> +)
}

sp {learn-subaction-proposal*elaborate*procedural-id
    (state <s> ^name learn-subaction-proposal)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^procedural-id <proc>)
    -->
    (<s> ^procedural-id <proc> +)
}

sp {locate-non-visible-object*apply*merge-objects*mark*composite-action-context*merged
    (state <s> ^name locate-non-visible-object)
    (<s> ^operator <o>)
    (<o> ^name merge-objects)
    (<s> ^composite-action-context <action>)
    (<o> ^object2 <obj2>)
    (<o> ^object1 <obj1>)
    -->
    (<action> ^merged <m> +)
    (<m> ^object1 <obj1> +)
    (<m> ^object2 <obj2> +)
}

sp {locate-non-visible-object*apply*merge-objects*replace*object2*on*primitive-action*depth*2
    (state <s> ^name locate-non-visible-object)
    (<s> ^operator <o>)
    (<o> ^name merge-objects)
    (<s> ^primitive-action <action>)
    (<o> ^object2 <obj2>)
    (<o> ^object1 <obj1>)
    (<action> ^<arg-name> <a*1>)
    (<a*1> ^<num> <arg>)
    (<arg> ^id <obj2>)
    -->
    (<arg> ^id <obj2> -)
    (<arg> ^id <obj1> +)
}

sp {locate-non-visible-object*apply*merge-objects*replace*object2*on*primitive-action*depth*1
    (state <s> ^name locate-non-visible-object)
    (<s> ^operator <o>)
    (<o> ^name merge-objects)
    (<s> ^primitive-action <action>)
    (<o> ^object2 <obj2>)
    (<o> ^object1 <obj1>)
    (<action> ^<arg-name> <arg>)
    (<arg> ^id <obj2>)
    -->
    (<arg> ^id <obj2> -)
    (<arg> ^id <obj1> +)
}

sp {locate-non-visible-object*apply*merge-objects*remove*object2*from*world
    (state <s> ^name locate-non-visible-object)
    (<s> ^operator <o>)
    (<o> ^name merge-objects)
    (<o> ^object2 <obj2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <objs>)
    (<objs> ^object <obj2>)
    -->
    (<objs> ^object <obj2> -)
}

sp {locate-non-visible-object*apply*merge-objects*copy*predicates
    (state <s> ^name locate-non-visible-object)
    (<s> ^operator <o>)
    (<o> ^name merge-objects)
    (<o> ^object2 <o*1>)
    (<o> ^object1 <o*2>)
    (<o*2> ^predicates <preds>)
    (<o*1> ^predicates <p*1>)
    (<p*1> ^{ << property category >> <att> } <val>)
    -->
    (<preds> ^<att> <val> +)
}

sp {locate-non-visible-object*apply*merge-objects*mark*source
    (state <s> ^name locate-non-visible-object)
    (<s> ^operator <o>)
    (<o> ^name merge-objects)
    (<o> ^object2 <obj2>)
    (<o> ^object1 <obj1>)
    -->
    (<obj2> ^source <obj1> +)
}

sp {locate-non-visible-object*propose*merge-objects
    (state <s> ^name locate-non-visible-object)
    (<s> ^match-info <info>)
    (<info> ^matches <obj1>)
    (<info> ^object <obj2>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name merge-objects +)
    (<o> ^object1 <obj1> +)
    (<o> ^object2 <obj2> +)
}

sp {locate-non-visible-object*match-info*elaborate*matches*world*object
    (state <s> ^name locate-non-visible-object)
    (<s> ^match-info <info>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<info> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<o*1> ^object { <> <obj> <cand> })
    (<cand> ^predicates <cand-preds>)
   -{ (<preds> ^{ << shape color size property category >> <att> } <val>)
      (<cand-preds> -^<att> <val>)}
    -->
    (<info> ^matches <cand> +)
}

sp {locate-non-visible-object*elaborate*match-info
    (state <s> ^name locate-non-visible-object)
    (<s> ^non-visible-object <obj>)
    -->
    (<s> ^match-info <info> +)
    (<info> ^object <obj> +)
}

sp {locate-non-visible-object*elaborate*non-visible-object*depth*2
    (state <s> ^name locate-non-visible-object)
    (<s> ^primitive-action <p*1>)
    (<p*1> ^<arg-name> <a*1>)
    (<a*1> ^<num> <arg>)
    (<arg> ^arg-type object)
    (<arg> ^id <obj>)
   -{ (<obj> ^predicates <p*2>)
      (<p*2> ^visible true)}
    -->
    (<s> ^non-visible-object <obj> +)
}

sp {locate-non-visible-object*elaborate*non-visible-object*depth*1
    (state <s> ^name locate-non-visible-object)
    (<s> ^primitive-action <p*1>)
    (<p*1> ^<arg-name> <arg>)
    (<arg> ^arg-type object)
    (<arg> ^id <obj>)
   -{ (<obj> ^predicates <p*2>)
      (<p*2> ^visible true)}
    -->
    (<s> ^non-visible-object <obj> +)
}

sp {locate-non-visible-object*elaborate*world*superstate
    (state <s> ^name locate-non-visible-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <world>)
    -->
    (<s> ^world <world> +)
}

sp {locate-non-visible-object*elaborate*composite-action-context*from*interaction-stack
    (state <s> ^name locate-non-visible-object)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^next <n*1>)
    (<n*1> ^purpose <p*1>)
    (<p*1> ^parameters <params>)
    (<params> ^action-operator <action>)
    (<action> ^action-type composite)
    -->
    (<s> ^composite-action-context <action> +)
}

sp {locate-non-visible-object*elaborate*primitive-action*superstate
    (state <s> ^name locate-non-visible-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-to-match <atm>)
    (<atm> ^action-type primitive)
    -->
    (<s> ^primitive-action <atm> +)
}

sp {action*selection*apply*report-policy-learning-needed*mark*needed
    (state <s> ^name selection)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-policy-learning-needed)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose <p*1>)
    (<p*1> ^parameters <p*2>)
    (<p*2> ^action-operator <a>)
    -->
    (<a> ^policy-learning-needed true +)
}

sp {action*selection*propose*report-policy-learning-needed*top-selection
    (state <s> ^name selection)
    (<s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*3>)
    (<s*3> ^segment <s*4>)
    (<s*4> ^purpose <p*3>)
    (<p*3> ^parameters <p*4>)
    (<p*4> ^action-operator <a>)
    (<a> -^policy-learning-needed <p*5>)
    (<s> ^superstate <s*2>)
    (<s*2> ^problem-space <p*2>)
    (<p*2> ^action-type composite)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
    (<o> ^name report-policy-learning-needed +)
}

sp {action*selection*apply*achieved-max-depth*mark*policy-learning-needed
    (state <s> ^name selection)
    (<s> ^operator <o*1>)
    (<o*1> ^name achieved-max-depth)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose <p*2>)
    (<p*2> ^parameters <p*3>)
    (<p*3> ^action-operator <a>)
    -->
    (<a> ^policy-learning-needed true +)
}

sp {action*selection*apply*achieved-max-depth*report-no-action-selection-knowledge
    (state <s> ^name selection)
    (<s> ^operator <o*1>)
    (<o*1> ^name achieved-max-depth)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^failure <f*1> +)
    (<f*1> ^type no-action-selection-knowledge +)
}

sp {action*selection*apply*init-current-evaluation-depth*zero*no*goal
    (state <s> ^top-selection true)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^desired <d*1>)}
    (<s> ^operator <o>)
    (<o> ^name init-current-evaluation-depth)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^max-evaluation-depth 0 +)
}

sp {action*selection*apply*init-current-evaluation-depth*max
    (state <s> ^top-selection true)
    (<s> ^operator <o>)
    (<o> ^name init-current-evaluation-depth)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^action-search-depth <d>)
    (<s> ^superstate <s*1>)
    (<s*1> ^desired <des>)
    -->
    (<s> ^max-evaluation-depth <d> +)
}

sp {games*selection*elaborate*evaluate-operator*default-desired-copy
    (state <s> ^problemspace games)
    (<s> ^operator <o> +)
    (<o> ^name evaluate-operator)
    -->
    (<o> ^default-desired-copy yes +)
    (<o> ^default-operator-copy yes +)
}

sp {action*selection*elaborate*evaluate-operator*default-desired-copy
    (state <s> ^operator <o> +)
    (<o> ^name evaluate-operator)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<o> ^default-desired-copy yes +)
    (<o> ^default-operator-copy yes +)
}

sp {action*operator-tie*elaborate*selection*problem-space
    (state <s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^superstate <s*2>)
    (<s*2> ^problem-space <p*2>)
    (<p*2> ^action-type composite)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^name action +)
    (<ps> ^default-state-copy no +)
    (<ps> ^action <action> +)
    (<ps> ^world <world> +)
    (<ps> ^learning <learn> +)
    (<action> ^type simulate +)
    (<world> ^copy-type shallow +)
}

sp {action*selection*evaluate-operator*elaborate*problem-space
    (state <s> ^name evaluate-operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^name action +)
    (<ps> ^action-type composite +)
    (<ps> ^default-state-copy no +)
    (<ps> ^default-operator-copy yes +)
    (<ps> ^default-desired-copy yes +)
    (<ps> ^action <action> +)
    (<ps> ^world <world> +)
    (<ps> ^learning <learn> +)
    (<action> ^type simulate +)
    (<action> ^propose-action-operators true +)
    (<world> ^copy-type deep +)
}

sp {action*selection*evaluate-operator*elaborate*desired*success
    (state <s> ^name evaluate-operator)
    (<s> ^desired <d>)
    (<d> ^satisfied true)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^success <d> +)
}

sp {multiple-argument-instantiations*apply*report-multiple-arguments
    (state <s> ^name multiple-argument-instantiations)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-multiple-arguments)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^failure <f*1> +)
    (<f*1> ^type multiple-arguments +)
}

sp {multiple-argument-instantiations*propose*report-multiple-arguments
    (state <s> ^name multiple-argument-instantiations)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-multiple-arguments +)
}

sp {multiple-argument-instantiations*elaborate*arguments
    (state <s> ^name multiple-argument-instantiations)
    (<s> ^action-context <cmd>)
    (<cmd> ^action-id <a*1>)
    (<a*1> ^procedural <p*1>)
    (<p*1> ^arg-name <arg-name>)
    (<cmd> ^<arg-name> <arg2>)
    (<cmd> ^<arg-name> { <> <arg2> <arg1> })
    -->
    (<s> ^multiple-instantiations-of <arg-name> +)
}

sp {multiple-argument-instantiations*elaborate*action-context
    (state <s> ^name multiple-argument-instantiations)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <cmd>)
    -->
    (<s> ^action-context <cmd> +)
}

sp {action*operator-tie*elaborate*state*name*selection
    (state <s> ^impasse tie)
   -{ (<s> ^item <i*1>)
      (<i*1> ^op-matched yes)}
    (<s> ^attribute operator)
    (<s> ^superstate <s*2>)
    (<s*2> ^problem-space <p*2>)
    (<p*2> ^action-type composite)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^name selection +)
}

sp {action*operator-tie*elaborate*state*name*multiple-argument-instantiations
    (state <s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^item <i*1>)
    (<i*1> ^op-matched yes)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^name multiple-argument-instantiations +)
}

sp {action*apply*report-performed-action*push*learning*segment
    (state <s> ^action-context <a>)
    (<a> ^policy-learning-needed true)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-performed-action)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <changes>)
    -->
    (<changes> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type retrospective-learning +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <s*1> +)
    (<s*1> ^learning-event <l*1> +)
    (<l*1> ^type retrospective +)
    (<params> ^action-context <a> +)
}

sp {action*apply*report-performed-action
    (state <s> ^operator <o*1>)
    (<o*1> ^name report-performed-action)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^action-context <a*1>)
    (<a*1> ^action-handle <action-handle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*2> +)
    (<p*2> ^action-event <a*2> +)
    (<a*2> ^type <action-handle> +)
}

sp {action*execute*propose*report-performed-action
    (state <s> ^desired <d*1>)
    (<d*1> ^satisfied true)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^action-context <context>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type execute)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-performed-action +)
}

sp {action*apply*wait*do*action-model
    (state <s> ^operator <op>)
    (<op> ^name initiate-wait1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<op> ^until-clause <u*1>)
    (<u*1> ^predicate <pred>)
    (<pred> ^handle cooked1)
    (<pred> ^type state)
    (<s> ^world <world>)
    (<world> ^objects <o*2>)
    (<world> ^objects <o*1>)
    (<world> ^predicates <p*3>)
    (<p*3> ^predicate <on-pred>)
    (<on-pred> ^handle on1)
    (<on-pred> ^instance <i>)
    (<pred> ^1 <steak>)
    (<i> ^1 <steak>)
    (<steak> ^predicates <steak-preds>)
    (<steak-preds> ^shape steak1)
    (<i> ^2 <stove>)
    (<stove> ^predicates <stove-preds>)
    (<stove-preds> ^activation1 on2)
    (<stove-preds> ^door1 closed2)
    (<stove-preds> ^name stove)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    (<o*2> ^object <stove>)
    (<o*1> ^object <steak>)
    -->
    (<steak-preds> ^meat1 raw1 -)
    (<steak-preds> ^meat1 cooked1 +)
}

sp {action*reject*remember*if*all*is*known*2*args
    (state <s> ^operator <op> +)
    (<op> ^name initiate-remember1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<op> ^arg2 <a*1>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<a*1> ^id <i*1>)
    (<i*1> ^predicates <preds2>)
    (<preds2> ^<att2> <val2>)
    (<preds2> -^<att3> { > <val2> <val3> })
    (<preds2> ^<att1> { < <val2> <val1> })
    (<o*1> ^object <o*2>)
    (<o*2> ^predicates <preds1>)
    (<preds1> ^<att2> <val2>)
    (<preds1> ^<att1> <val1>)
    -->
    (<s> ^operator <op> -)
}

sp {action*apply*remember*do*action-model
    (state <s> ^operator <op>)
    (<op> ^name initiate-remember1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<op> ^arg2 <a*3>)
    (<op> ^arg1 <a*2>)
    (<a*3> ^id <i*1>)
    (<i*1> ^predicates <p*3>)
    (<a*2> ^id <arg1>)
    (<arg1> ^predicates <preds>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    (<p*3> ^<att> <val>)
    -->
    (<preds> ^<att> <val> +)
}

sp {action*apply*turn-off*do*action-model
    (state <s> ^operator <op>)
    (<op> ^name initiate-turn-off1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<op> ^arg1 <a*2>)
    (<a*2> ^id <i*1>)
    (<i*1> ^predicates <preds>)
    (<preds> ^activation1 on2)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<preds> ^activation1 on2 -)
    (<preds> ^activation1 off2 +)
}

sp {action*apply*turn-on*do*action-model
    (state <s> ^operator <op>)
    (<op> ^name initiate-turn-on1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<op> ^arg1 <a*2>)
    (<a*2> ^id <i*1>)
    (<i*1> ^predicates <preds>)
    (<preds> ^activation1 off2)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<preds> ^activation1 off2 -)
    (<preds> ^activation1 on2 +)
}

sp {action*apply*close*do*action-model
    (state <s> ^operator <op>)
    (<op> ^name initiate-close1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<op> ^arg1 <a*2>)
    (<a*2> ^id <i*1>)
    (<i*1> ^predicates <preds>)
    (<preds> ^door1 open2)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<preds> ^door1 open2 -)
    (<preds> ^door1 closed2 +)
}

sp {action*apply*open*do*action-model
    (state <s> ^operator <op>)
    (<op> ^name initiate-open1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<op> ^arg1 <a*2>)
    (<a*2> ^id <i*1>)
    (<i*1> ^predicates <preds>)
    (<preds> ^door1 closed2)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<preds> ^door1 closed2 -)
    (<preds> ^door1 open2 +)
}

sp {action*apply*go-to-location*do*action-model*mark*old*objects*not*visible
    (state <s> ^operator <o>)
    (<o> ^name initiate-go-to-location1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^arg2 <a*2>)
    (<a*2> ^2 <new-loc>)
    (<s> ^world <world>)
    (<world> ^objects <o*1>)
    (<world> ^predicates <p*3>)
    (<p*3> ^predicate <in-pred>)
    (<in-pred> ^handle in1)
    (<in-pred> ^instance <i>)
    (<i> ^2 { <> <new-loc> <old-loc> })
    (<i> ^1 <obj>)
    (<obj> ^predicates <preds>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    (<o*1> ^object <obj>)
    -->
    (<preds> ^visible true -)
    (<preds> ^visible false +)
}

sp {action*apply*go-to-location*do*action-model*mark*new*object*visible
    (state <s> ^operator <o>)
    (<o> ^name initiate-go-to-location1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^arg2 <a*2>)
    (<a*2> ^2 <new-loc>)
    (<s> ^world <world>)
    (<world> ^objects <o*1>)
    (<world> ^predicates <p*3>)
    (<p*3> ^predicate <in-pred>)
    (<in-pred> ^handle in1)
    (<in-pred> ^instance <i>)
    (<i> ^2 <new-loc>)
    (<i> ^1 <obj>)
    (<obj> ^predicates <preds>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    (<o*1> ^object <obj>)
    -->
    (<preds> ^visible false -)
    (<preds> ^visible true +)
}

sp {action*apply*go-to-location*do*action-model*remove*old*location
    (state <s> ^operator <o>)
    (<o> ^name initiate-go-to-location1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^arg2 <a*2>)
    (<a*2> ^2 <new-loc>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <robot>)
    (<robot> ^current-location { <> <new-loc> <old-loc> })
    (<old-loc> ^predicates <preds>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<robot> ^current-location <old-loc> -)
    (<preds> ^visible true -)
    (<preds> ^visible false +)
}

sp {action*apply*go-to-location*do*action-model*add*new*location
    (state <s> ^operator <o>)
    (<o> ^name initiate-go-to-location1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^arg2 <a*2>)
    (<a*2> ^2 <new-loc>)
    (<new-loc> ^predicates <preds>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <robot>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<robot> ^current-location <new-loc> +)
    (<preds> ^visible false -)
    (<preds> ^visible true +)
}

sp {action*apply*put-down*do*action-model*add*in*relation
    (state <s> ^operator <o>)
    (<o> -^arg2 <a*3>)
    (<o> ^name initiate-put-down1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^arg1 <a*2>)
    (<s> ^world <w*2>)
    (<w*2> ^predicates <p*3>)
    (<p*3> ^predicate <pred>)
    (<pred> ^handle in1)
    (<s> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^current-location <loc>)
    (<a*2> ^id <obj>)
    (<obj> ^predicates <p*4>)
    (<p*4> ^arm-status grabbed)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<pred> ^instance <i> +)
    (<i> ^1 <obj> +)
    (<i> ^2 <loc> +)
}

sp {action*apply*putdown*do*action-model*on
    (state <s> ^operator <o>)
    (<o> ^name initiate-put-down1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^arg2 <a*4>)
    (<o> ^arg2 <a*3>)
    (<a*3> ^2 <obj2>)
    (<o> ^arg1 <a*2>)
    (<a*4> ^handle <pred-handle>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <p*3>)
    (<p*3> ^predicate <pred>)
    (<pred> ^handle <pred-handle>)
    (<a*2> ^id <obj1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<pred> ^instance <i> +)
    (<i> ^1 <obj1> +)
    (<i> ^2 <obj2> +)
}

sp {action*apply*putdown*do*action-model*arm-status
    (state <s> ^operator <o>)
    (<o> ^name initiate-put-down1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^arg1 <a*2>)
    (<a*2> ^id <i*1>)
    (<i*1> ^predicates <obj1-preds>)
    (<obj1-preds> ^arm-status grabbed)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<obj1-preds> ^arm-status grabbed -)
    (<obj1-preds> ^arm-status not-grabbed +)
}

sp {action*apply*pickup*do*action-model*remove*in*on*relation
    (state <s> ^operator <o>)
    (<o> ^name initiate-pick-up1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^arg1 <a*2>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <p*3>)
    (<p*3> ^predicate <pred>)
    (<pred> ^instance <i>)
    (<i> ^1 <obj>)
    (<a*2> ^id <obj>)
    (<i> ^2 <loc>)
    (<pred> ^handle { << in1 on1 >> <h*1> })
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<pred> ^instance <i> -)
}

sp {action*apply*pickup*do*action-model
    (state <s> ^operator <op>)
    (<op> ^name initiate-pick-up1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<op> ^arg1 <a*2>)
    (<a*2> ^id <i*1>)
    (<i*1> ^predicates <preds>)
    (<preds> ^arm-status not-grabbed)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type simulate)
    -->
    (<preds> ^arm-status grabbed +)
    (<preds> ^arm-status not-grabbed -)
}

sp {action*apply*primitive*initiate-operator*copy*current-action*top-state*segment
    (state <s> ^copied-arguments true)
    (<s> ^operator <o>)
    (<o> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^current-action-copy <ca>)
    (<ca> ^action-handle <action-handle>)
    (<o> ^action-handle <action-handle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <seg>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type execute)
    -->
    (<seg> ^current-action <ca> +)
}

sp {action*apply*primitive*initiate-operator*copy*until*args
    (state <s> ^operator <o>)
    (<o> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^current-action-copy <ca>)
    (<ca> ^action-handle <action-handle>)
    (<o> ^action-handle <action-handle>)
    (<s> ^action-to-match <a*2>)
    (<ca> ^arguments <args>)
    (<a*2> ^until-clause <until>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type execute)
    -->
    (<args> ^until-clause <until> +)
}

sp {action*apply*primitive*initiate-operator*copy*level2*args
    (state <s> ^operator <o>)
    (<o> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^current-action-copy <ca>)
    (<ca> ^action-handle <action-handle>)
    (<o> ^action-handle <action-handle>)
    (<ca> ^arguments <args>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type execute)
    (<o> ^<arg-name> <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^2 <pred-obj>)
    (<arg> ^handle <pred-handle>)
    -->
    (<args> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type predicate +)
    (<new-arg> ^handle <pred-handle> +)
    (<new-arg> ^2 <pred-obj> +)
}

sp {action*apply*primitive*initiate-operator*copy*concept*arg
    (state <s> ^operator <o>)
    (<o> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^current-action-copy <ca>)
    (<ca> ^action-handle <action-handle>)
    (<o> ^action-handle <action-handle>)
    (<ca> ^arguments <args>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type execute)
    (<o> ^<arg-name> <arg>)
    (<arg> ^arg-type concept)
    (<arg> ^handle <concept>)
    -->
    (<args> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type concept +)
    (<new-arg> ^handle <concept> +)
}

sp {action*apply*primitive*initiate-operator*copy*object*arg
    (state <s> ^operator <o>)
    (<o> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^current-action-copy <ca>)
    (<ca> ^action-handle <action-handle>)
    (<o> ^action-handle <action-handle>)
    (<ca> ^arguments <args>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type execute)
    (<o> ^<arg-name> <arg>)
    (<arg> ^arg-type { << object location >> <a*2> })
    (<arg> ^id <obj>)
    -->
    (<args> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type object +)
    (<new-arg> ^id <obj> +)
}

sp {action*apply*primitive*initiate-operator*mark*copied-arguments
    (state <s> ^operator <o>)
    (<o> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^current-action-copy <ca>)
    (<ca> ^action-handle <action-handle>)
    (<o> ^action-handle <action-handle>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type execute)
    -->
    (<s> ^copied-arguments true +)
}

sp {action*execute*apply*primitive*initiate-operator*copy*action-context*composte
    (state <s> ^operator <o>)
    (<o> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^current-action-copy <current-action>)
    (<current-action> ^action-handle <action-handle>)
    (<o> ^action-handle <action-handle>)
    (<s> ^action-context <action>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type execute)
    -->
    (<current-action> ^action-context <action> +)
}

sp {action*apply*primitive*initiate-operator*create*local*current-action
    (state <s> ^operator <o>)
    (<o> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<o> ^action-handle <action-handle>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^type execute)
    -->
    (<s> ^current-action-copy <ca> +)
    (<ca> ^action-handle <action-handle> +)
    (<ca> ^first-appearance true +)
    (<ca> ^execution-operator (concat execute- <action-handle>) +)
    (<ca> ^arguments <args> +)
}

sp {composite-action*propose*initiate-follow-wall1*left
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*3>)
    (<a*3> ^domain mobile)
    (<s> ^problem-space <p*3>)
    (<p*3> ^action <a*2>)
    (<a*2> ^propose-driving-operators true)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    -->
    (<s> ^operator <o> +)
    (<o> ^name initiate-follow-wall1 +)
    (<o> ^action-handle follow-wall1 +)
    (<o> ^action-type primitive +)
}

sp {composite-action*propose*initiate-turn1
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*3>)
    (<a*3> ^domain mobile)
    (<s> ^problem-space <p*3>)
    (<p*3> ^action <a*2>)
    (<a*2> ^propose-driving-operators true)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    -->
    (<s> ^operator <oleft> +)
    (<s> ^operator <oright> +)
    (<s> ^operator <oaround> +)
    (<oleft> ^name initiate-turn1 +)
    (<oleft> ^action-handle turn1 +)
    (<oleft> ^action-type primitive +)
    (<oleft> ^arg1 <left-arg1> +)
    (<left-arg1> ^arg-type concept +)
    (<left-arg1> ^handle left1 +)
    (<oright> ^name initiate-turn1 +)
    (<oright> ^action-handle turn1 +)
    (<oright> ^action-type primitive +)
    (<oright> ^arg1 <right-arg1> +)
    (<right-arg1> ^arg-type concept +)
    (<right-arg1> ^handle right1 +)
    (<oaround> ^name initiate-turn1 +)
    (<oaround> ^action-handle turn1 +)
    (<oaround> ^action-type primitive +)
    (<oaround> ^arg1 <around-arg1> +)
    (<around-arg1> ^arg-type concept +)
    (<around-arg1> ^handle around1 +)
}

sp {composite-action*propose*initiate-orient1*each*direction
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*3>)
    (<a*3> ^domain mobile)
    (<s> ^problem-space <p*3>)
    (<p*3> ^action <a*2>)
    (<a*2> ^propose-driving-operators true)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    -->
    (<s> ^operator <on> +)
    (<s> ^operator <os> +)
    (<s> ^operator <oe> +)
    (<s> ^operator <ow> +)
    (<on> ^name initiate-orient1 +)
    (<on> ^action-handle orient1 +)
    (<on> ^arg1 <n-arg1> +)
    (<on> ^action-type primitive +)
    (<n-arg1> ^arg-type concept +)
    (<n-arg1> ^handle north1 +)
    (<os> ^name initiate-orient1 +)
    (<os> ^action-handle orient1 +)
    (<os> ^arg1 <s-arg1> +)
    (<os> ^action-type primitive +)
    (<s-arg1> ^arg-type concept +)
    (<s-arg1> ^handle south1 +)
    (<oe> ^name initiate-orient1 +)
    (<oe> ^action-handle orient1 +)
    (<oe> ^arg1 <e-arg1> +)
    (<oe> ^action-type primitive +)
    (<e-arg1> ^arg-type concept +)
    (<e-arg1> ^handle east1 +)
    (<ow> ^name initiate-orient1 +)
    (<ow> ^action-handle orient1 +)
    (<ow> ^arg1 <w-arg1> +)
    (<ow> ^action-type primitive +)
    (<w-arg1> ^arg-type concept +)
    (<w-arg1> ^handle west1 +)
}

sp {composite-action*propose*initiate-stop1
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*3>)
    (<a*3> ^domain mobile)
    (<s> ^problem-space <p*3>)
    (<p*3> ^action <a*2>)
    (<a*2> ^propose-driving-operators true)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    -->
    (<s> ^operator <o> +)
    (<o> ^name initiate-stop1 +)
    (<o> ^action-handle stop1 +)
    (<o> ^action-type primitive +)
}

sp {composite-action*propose*initiate-turn-on1
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain arm)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <p*3>)
    (<p*3> ^activation1 off2)
    -->
    (<s> ^operator <op> +)
    (<op> ^name initiate-turn-on1 +)
    (<op> ^action-handle turn-on1 +)
    (<op> ^arg1 <arg1> +)
    (<op> ^action-type primitive +)
    (<arg1> ^arg-type object +)
    (<arg1> ^id <obj> +)
}

sp {composite-action*propose*initiate-turn-off1
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain arm)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <p*3>)
    (<p*3> ^activation1 on2)
    -->
    (<s> ^operator <op> +)
    (<op> ^name initiate-turn-off1 +)
    (<op> ^action-handle turn-off1 +)
    (<op> ^arg1 <arg1> +)
    (<op> ^action-type primitive +)
    (<arg1> ^arg-type object +)
    (<arg1> ^id <obj> +)
}

sp {action*propose*initiate-go-to-location1
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain mobile)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    (<o*1> ^object <loc>)
   -{ (<s> ^world <w*2>)
      (<w*2> ^robot <r*1>)
      (<r*1> ^current-location <loc>)}
    (<loc> ^predicates <p*3>)
    (<p*3> ^category location)
    -->
    (<s> ^operator <o> +)
    (<o> ^name initiate-go-to-location1 +)
    (<o> ^action-handle go-to-location1 +)
    (<o> ^action-type primitive +)
    (<o> ^arg2 <arg2> +)
    (<arg2> ^arg-type predicate +)
    (<arg2> ^handle to1 +)
    (<arg2> ^2 <loc> +)
}

sp {composite-action*propose*initiate-close1
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain arm)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <p*3>)
    (<p*3> ^door1 open2)
    -->
    (<s> ^operator <op> +)
    (<op> ^name initiate-close1 +)
    (<op> ^action-handle close1 +)
    (<op> ^arg1 <arg1> +)
    (<op> ^action-type primitive +)
    (<arg1> ^arg-type object +)
    (<arg1> ^id <obj> +)
}

sp {composite-action*propose*initiate-open1
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain arm)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <p*3>)
    (<p*3> ^door1 closed2)
    -->
    (<s> ^operator <op> +)
    (<op> ^name initiate-open1 +)
    (<op> ^action-handle open1 +)
    (<op> ^arg1 <arg1> +)
    (<op> ^action-type primitive +)
    (<arg1> ^arg-type object +)
    (<arg1> ^id <obj> +)
}

sp {composite-action*propose*initiate-put-down1
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain mobile)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <p*3>)
    (<p*3> ^arm-status grabbed)
    -->
    (<s> ^operator <op> +)
    (<op> ^name initiate-put-down1 +)
    (<op> ^action-handle put-down1 +)
    (<op> ^arg1 <arg1> +)
    (<op> ^action-type primitive +)
    (<arg1> ^arg-type object +)
    (<arg1> ^id <obj> +)
}

sp {composite-action*propose*initiate-put-down1*no*door
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain arm)
    (<s> ^world <w*2>)
    (<w*2> ^objects <o*2>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    (<o*2> ^object <dest>)
   -{ (<dest> ^predicates <p*4>)
      (<p*4> ^door1 <any>)}
    (<o*1> ^object { <> <dest> <obj> })
    (<obj> ^predicates <p*3>)
    (<p*3> ^arm-status grabbed)
    -->
    (<s> ^operator <op> +)
    (<op> ^name initiate-put-down1 +)
    (<op> ^action-handle put-down1 +)
    (<op> ^arg1 <arg1> +)
    (<op> ^arg2 <arg2> +)
    (<op> ^action-type primitive +)
    (<arg1> ^arg-type object +)
    (<arg1> ^id <obj> +)
    (<arg2> ^arg-type predicate +)
    (<arg2> ^2 <dest> +)
}

sp {composite-action*propose*initiate-put-down1*has*door
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain arm)
    (<s> ^world <w*2>)
    (<w*2> ^objects <o*2>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    (<o*2> ^object <dest>)
    (<dest> ^predicates <p*4>)
    (<p*4> ^door1 open2)
    (<o*1> ^object { <> <dest> <obj> })
    (<obj> ^predicates <p*3>)
    (<p*3> ^arm-status grabbed)
    -->
    (<s> ^operator <op> +)
    (<op> ^name initiate-put-down1 +)
    (<op> ^action-handle put-down1 +)
    (<op> ^arg1 <arg1> +)
    (<op> ^arg2 <arg2> +)
    (<op> ^action-type primitive +)
    (<arg1> ^arg-type object +)
    (<arg1> ^id <obj> +)
    (<arg2> ^arg-type predicate +)
    (<arg2> ^handle on1 +)
    (<arg2> ^2 <dest> +)
}

sp {composite-action*reject*initiate-pick-up1*achieved*goal
    (state <s> ^operator <o> +)
    (<o> ^name initiate-pick-up1)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d*2>)
    (<d*2> ^predicate <pred>)
    (<pred> ^satisfied true)
    (<pred> ^type relation)
    (<o> ^arg1 <a*3>)
    (<pred> ^1 <obj1>)
    (<a*3> ^id <obj1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain { << arm mobile >> <d*1> })
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    -->
    (<s> ^operator <o> -)
}

sp {composite-action*propose*initiate-pick-up1*on*location*with*door
    (state <s> ^top-state <t*1>)
   -{ (<s> ^world <w*3>)
      (<w*3> ^objects <o*2>)
      (<o*2> ^object <o*3>)
      (<o*3> ^predicates <p*4>)
      (<p*4> ^arm-status grabbed)}
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain { << arm mobile >> <d*1> })
    (<s> ^world <w*2>)
    (<w*2> ^predicates <p*3>)
    (<p*3> ^predicate <on-pred>)
    (<on-pred> ^handle on1)
    (<on-pred> ^instance <i>)
    (<i> ^2 <v*1>)
    (<v*1> ^predicates <p*5>)
    (<p*5> ^door1 open2)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<i> ^1 <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^arm-status not-grabbed)
    (<preds> ^visible true)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    (<o*1> ^object <obj>)
    -->
    (<s> ^operator <op> +)
    (<op> ^name initiate-pick-up1 +)
    (<op> ^action-handle pick-up1 +)
    (<op> ^arg1 <arg1> +)
    (<op> ^action-type primitive +)
    (<arg1> ^arg-type object +)
    (<arg1> ^id <obj> +)
}

sp {composite-action*propose*initiate-pick-up1
    (state <s> ^top-state <t*1>)
   -{ (<s> ^world <w*2>)
      (<w*2> ^objects <o*2>)
      (<o*2> ^object <o*3>)
      (<o*3> ^predicates <p*3>)
      (<p*3> ^arm-status grabbed)}
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<t*1> ^agent-params <a*2>)
    (<a*2> ^domain { << arm mobile >> <d*1> })
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^action <a*1>)
    (<a*1> ^propose-action-operators true)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^arm-status not-grabbed)
    (<preds> ^visible true)
    (<preds> ^category { << object block >> <c*1> })
    -->
    (<s> ^operator <op> +)
    (<op> ^name initiate-pick-up1 +)
    (<op> ^action-handle pick-up1 +)
    (<op> ^arg1 <arg1> +)
    (<op> ^action-type primitive +)
    (<arg1> ^arg-type object +)
    (<arg1> ^id <obj> +)
}

sp {reject*wait*if*until-clause*satisfied
    (state <s> ^operator <o> +)
    (<o> ^name initiate-wait1)
    (<o> ^until-clause <until>)
    (<until> ^satisfied true)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    -->
    (<s> ^operator <o> -)
}

sp {composite-action*execute*prefer*report-performed-action*over*others
    (state <s> ^operator <o1> +)
    (<o1> ^name report-performed-action)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator <o2> +)
    (<o2> ^name { <> report-performed-action <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {action*reject*non-matched*operators
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<info> ^op-matched no)
    (<info> ^operator <o>)
    (<s> ^operator <o> +)
    -->
    (<s> ^operator <o> -)
}

sp {action*problem-space*match-action*elaborate*evaluate-operator*matched
    (state <s> ^operator <o> +)
    (<o> ^name evaluate-operator)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<info> ^op-matched yes)
    (<o> ^superoperator <op>)
    (<info> ^operator <op>)
    -->
    (<s> ^operator <o> >)
}

sp {action*problem-space*match-action*elaborate*operator*matched
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<info> ^operator <o>)
    (<s> ^operator <o> +)
    (<info> ^op-matched <any>)
    -->
    (<o> ^op-matched <any> +)
}

sp {action*problem-space*match-action*elaborate*op-matched*yes
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<info> -^op-matched no)
    (<info> ^matches handle)
    -->
    (<info> ^op-matched yes +)
}

sp {action*problem-space*match-action*elaborate*op-matched*no*arg
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<s> ^action-to-match <a*1>)
    (<info> ^operator <o*2>)
    (<o*2> ^<arg-name> <a*3>)
    (<info> -^matches <arg-name>)
    (<a*3> ^arg-type <any>)
    (<a*1> ^<arg-name> <a*2>)
    -->
    (<info> ^op-matched no +)
}

sp {action*problem-space*match-action*elaborate*op-matched*no*handle
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<info> -^matches handle)
    -->
    (<info> ^op-matched no +)
}

sp {action*problem-space*match-action*elaborate*match-info*matches*until-clause*arg
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<s> ^action-to-match <a*1>)
    (<info> ^operator <o*2>)
    (<o*2> ^<arg-name> <arg>)
    (<arg> ^arg-type until-clause)
    (<a*1> ^<arg-name> <sub-arg>)
    (<sub-arg> ^arg-type until-clause)
    -->
    (<info> ^matches <arg-name> +)
}

sp {action*problem-space*match-action*elaborate*match-info*matches*predicate*arg
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<s> ^action-to-match <a*1>)
    (<info> ^operator <o*2>)
    (<o*2> ^<arg-name> <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^2 <obj>)
    (<a*1> ^<arg-name> <sub-arg>)
    (<sub-arg> ^2 <obj>)
    (<sub-arg> ^handle <pred-handle>)
    (<arg> ^handle <pred-handle>)
    -->
    (<info> ^matches <arg-name> +)
}

sp {action*problem-space*match-action*elaborate*match-info*matches*concept*arg
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<s> ^action-to-match <a*1>)
    (<info> ^operator <o*2>)
    (<o*2> ^<arg-name> <arg>)
    (<arg> ^arg-type concept)
    (<arg> ^handle <concept>)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^handle <concept>)
    -->
    (<info> ^matches <arg-name> +)
}

sp {action*problem-space*match-action*elaborate*match-info*matches*imagined*object
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<s> ^action-to-match <a*1>)
    (<info> ^operator <o*2>)
    (<a*1> ^<arg-name> <atm-arg>)
    (<atm-arg> ^imagined true)
    (<atm-arg> ^arg-type { << object location >> <a*2> })
    (<atm-arg> ^id <obj>)
    (<o*2> ^<arg-name> <arg>)
   -{ (<arg> ^predicates <p*2>)
      (<p*2> ^<att> <val>)
     -{ (<obj> ^predicates <p*3>)
        (<p*3> ^<att> <val>)}}
    -->
    (<info> ^matches <arg-name> +)
}

sp {action*problem-space*match-action*elaborate*match-info*matches*object*arg
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<s> ^action-to-match <a*1>)
    (<info> ^operator <o*2>)
    (<o*2> ^<arg-name> <arg>)
    (<arg> ^arg-type { << object location >> <a*3> })
    (<arg> ^id <obj>)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^id <obj>)
    -->
    (<info> ^matches <arg-name> +)
}

sp {action*problem-space*match-action*elaborate*match-info*matches*action-handle
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <o*1>)
    (<o*1> ^match-info <info>)
    (<s> ^action-to-match <a*1>)
    (<a*1> ^action-handle <action-handle>)
    (<info> ^operator <o*2>)
    (<o*2> ^action-handle <action-handle>)
    -->
    (<info> ^matches handle +)
}

sp {action*problem-space*match-action*elaborate*match-info*evaluate-operator
    (state <s> ^operator <o> +)
    (<o> ^name evaluate-operator)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <matches>)
    (<o> ^superoperator <op>)
    (<s> ^action-to-match <atm>)
    -->
    (<matches> ^match-info <info> +)
    (<info> ^operator <op> +)
}

sp {action*problem-space*match-action*elaborate*match-info*action*operator
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^operator-matches <matches>)
    (<s> ^action-to-match <atm>)
    (<s> ^operator <o> +)
    (<o> ^action-type { << primitive composite >> <a*1> })
    -->
    (<matches> ^match-info <info> +)
    (<info> ^operator <o> +)
}

sp {action*problem-space*match-action*elaborate*operator-matches
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^action-to-match <atm>)
    -->
    (<s> ^operator-matches <matches> +)
}

sp {action*elaborate*desired*satisfied*6*predicates
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d>)
    (<d> ^predicate <p6>)
    (<p6> ^satisfied true)
    (<d> ^predicate { < <p6> <p5> })
    (<p5> ^satisfied true)
    (<d> ^predicate { < <p5> <p4> })
    (<p4> ^satisfied true)
    (<d> ^predicate { < <p4> <p3> })
    (<p3> ^satisfied true)
    (<d> ^predicate { < <p3> <p2> })
    (<p2> ^satisfied true)
    (<d> ^predicate { < <p2> <p1> })
    (<d> -^predicate { <> <p1> <> <p2> <> <p3> <> <p4> <> <p5> <> <p6> <p7> })
    (<p1> ^satisfied true)
    -->
    (<d> ^satisfied true +)
}

sp {action*elaborate*desired*satisfied*5*predicates
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d>)
    (<d> ^predicate <p5>)
    (<p5> ^satisfied true)
    (<d> ^predicate { < <p5> <p4> })
    (<p4> ^satisfied true)
    (<d> ^predicate { < <p4> <p3> })
    (<p3> ^satisfied true)
    (<d> ^predicate { < <p3> <p2> })
    (<p2> ^satisfied true)
    (<d> ^predicate { < <p2> <p1> })
    (<d> -^predicate { <> <p1> <> <p2> <> <p3> <> <p4> <> <p5> <p6> })
    (<p1> ^satisfied true)
    -->
    (<d> ^satisfied true +)
}

sp {action*elaborate*desired*satisfied*4*predicates
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d>)
    (<d> ^predicate <p4>)
    (<p4> ^satisfied true)
    (<d> ^predicate { < <p4> <p3> })
    (<p3> ^satisfied true)
    (<d> ^predicate { < <p3> <p2> })
    (<p2> ^satisfied true)
    (<d> ^predicate { < <p2> <p1> })
    (<d> -^predicate { <> <p1> <> <p2> <> <p3> <> <p4> <p5> })
    (<p1> ^satisfied true)
    -->
    (<d> ^satisfied true +)
}

sp {action*elaborate*desired*satisfied*3*predicates
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d>)
    (<d> ^predicate <p3>)
    (<p3> ^satisfied true)
    (<d> ^predicate { < <p3> <p2> })
    (<p2> ^satisfied true)
    (<d> ^predicate { < <p2> <p1> })
    (<d> -^predicate { <> <p1> <> <p2> <> <p3> <p4> })
    (<p1> ^satisfied true)
    -->
    (<d> ^satisfied true +)
}

sp {action*elaborate*desired*satisfied*2*predicates
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d>)
    (<d> ^predicate <p2>)
    (<p2> ^satisfied true)
    (<d> ^predicate { < <p2> <p1> })
    (<d> -^predicate { <> <p1> <> <p2> <p3> })
    (<p1> ^satisfied true)
    -->
    (<d> ^satisfied true +)
}

sp {action*elaborate*desired*satisfied*1*predicate
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d>)
    (<d> ^predicate <p1>)
    (<d> -^predicate { <> <p1> <p2> })
    (<p1> ^satisfied true)
    -->
    (<d> ^satisfied true +)
}

sp {action*elaborate*desired*relation*predicate*satisfied
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d*1>)
    (<d*1> ^predicate <p>)
    (<p> ^type relation)
    (<p> ^2 <obj2>)
    (<p> ^handle <rel-handle>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <preds>)
    (<preds> ^predicate <pred>)
    (<pred> ^handle <rel-handle>)
    (<pred> ^instance <i>)
    (<i> ^2 <obj2>)
    (<i> ^1 <obj1>)
    (<p> ^1 <obj1>)
    -->
    (<p> ^satisfied true +)
}

sp {action*elaborate*desired*state*predicate*satisfied
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d*1>)
    (<d*1> ^predicate <p>)
    (<p> ^type state)
    (<p> ^handle <pred-name>)
    (<p> ^1 <obj>)
    (<obj> ^predicates <preds>)
    (<preds> ^<pred-type> <pred-name>)
    -->
    (<p> ^satisfied true +)
}

sp {action*elaborate*desired*copy*source*arg
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^desired <d*1>)
    (<d*1> ^predicate <p>)
    (<p> ^{ << 1 2 >> <num> } <obj>)
    (<obj> ^source <src>)
    -->
    (<p> ^<num> <src> +)
}

sp {action*problem-space*learning*elaborate*action-context*deep*until-clause*relation*predicate
    (state <s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^world <w*1>)
    (<w*1> ^copy-type deep)
    (<s> ^copy-objects-map <c*2>)
    (<s> ^copy-objects-map <c*1>)
    (<s> ^action-context <a*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <a*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type until-clause)
    (<arg> ^predicate <until-pred>)
    (<until-pred> ^type relation)
    (<until-pred> ^2 <src-obj2>)
    (<until-pred> ^handle <pred>)
    (<until-pred> ^1 <src-obj1>)
    (<a*2> ^<arg-name> <new-arg>)
    (<c*2> ^<src-obj2> <obj2>)
    (<c*1> ^<src-obj1> <obj1>)
    -->
    (<new-arg> ^predicate <new-pred> +)
    (<new-pred> ^type relation +)
    (<new-pred> ^handle <pred> +)
    (<new-pred> ^1 <obj1> +)
    (<new-pred> ^2 <obj2> +)
}

sp {action*problem-space*elaborate*action-context*deep*until-clause*state*predicate
    (state <s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^world <w*1>)
    (<w*1> ^copy-type deep)
    (<s> ^copy-objects-map <c*1>)
    (<s> ^action-context <a*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <a*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type until-clause)
    (<arg> ^predicate <until-pred>)
    (<until-pred> ^type state)
    (<until-pred> ^handle <pred>)
    (<until-pred> ^1 <src-obj>)
    (<a*2> ^<arg-name> <new-arg>)
    (<c*1> ^<src-obj> <obj>)
    -->
    (<new-arg> ^predicate <new-pred> +)
    (<new-pred> ^type state +)
    (<new-pred> ^handle <pred> +)
    (<new-pred> ^1 <obj> +)
}

sp {action*problem-space*elaborate*action-context*deep*until-clause*argument
    (state <s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^world <w*1>)
    (<w*1> ^copy-type deep)
    (<s> ^action-context <new-context>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <a*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type until-clause)
    -->
    (<new-context> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type until-clause +)
}

sp {action*problem-space*elaborate*action-context*deep*predicate*argument
    (state <s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^world <w*1>)
    (<w*1> ^copy-type deep)
    (<s> ^copy-objects-map <c*1>)
    (<s> ^action-context <new-context>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <a*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^2 <src-obj>)
    (<arg> ^handle <pred>)
    (<c*1> ^<src-obj> <obj>)
    -->
    (<new-context> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type predicate +)
    (<new-arg> ^handle <pred> +)
    (<new-arg> ^2 <obj> +)
}

sp {action*problem-space*elaborate*action-context*deep*concept*argument
    (state <s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^world <w*1>)
    (<w*1> ^copy-type deep)
    (<s> ^action-context <new-context>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <a*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type concept)
    (<arg> ^id <concept>)
    -->
    (<new-context> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type concept +)
    (<new-arg> ^id <concept> +)
}

sp {action*problem-space*elaborate*action-context*deep*object*argument
    (state <s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^world <w*1>)
    (<w*1> ^copy-type deep)
    (<s> ^copy-objects-map <c*1>)
    (<s> ^action-context <new-context>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <a*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type { << object location >> <a*2> })
    (<arg> ^id <src-obj>)
    (<c*1> ^<src-obj> <obj>)
    -->
    (<new-context> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type object +)
    (<new-arg> ^id <obj> +)
}

sp {action*problem-space*elaborate*action-context*deep*level*1
    (state <s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^world <w*1>)
    (<w*1> ^copy-type deep)
    (<s> ^action-context <new-context>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <context>)
    (<context> ^<att> <val>)
    (<val> -^<sub> <s*2>)
    -->
    (<new-context> ^<att> <val> +)
}

sp {action*problem-space*elaborate*action-context*deep
    (state <s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^world <w*1>)
    (<w*1> ^copy-type deep)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <context>)
    -->
    (<s> ^action-context <new-context> +)
}

sp {action*problem-space*elaborate*action-context*shallow*copy
    (state <s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^world <w*1>)
    (<w*1> ^copy-type shallow)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-context <context>)
    -->
    (<s> ^action-context <context> +)
}

sp {action*elaborate*action-context*superoperator
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^action-type { << primitive composite >> <a*1> })
    -->
    (<s> ^action-context <o> +)
}

sp {action*elaborate*action-id*from*superstate
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^superstate <s*1>)
    (<s*1> ^action-id <id>)
    -->
    (<s> ^action-id <id> +)
}

sp {execute-primitive-action*elaborate*current-action*status*complete*all*satisfied
    (state <s> ^satisfied <pred>)
    (<s> -^unsatisfied <any>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name execute-primitive-action)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-primitive-action*elaborate*until-clause*predicate*satisfied*false
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name execute-primitive-action)
    (<s> ^until-clause <u*1>)
    (<u*1> ^predicate <pred>)
    (<s> -^satisfied <pred>)
    -->
    (<s> ^unsatisfied <pred> +)
}

sp {execute-primitive-action*elaborate*until-clause*state*relation*satisfied
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name execute-primitive-action)
    (<s> ^until-clause <u*1>)
    (<u*1> ^predicate <until-pred>)
    (<until-pred> ^type relation)
    (<until-pred> ^2 <obj2>)
    (<until-pred> ^handle <pred-handle>)
    (<s> ^world <world>)
    (<world> ^objects <o*2>)
    (<world> ^objects <o*1>)
    (<world> ^predicates <p*2>)
    (<p*2> ^predicate <pred>)
    (<pred> ^handle <pred-handle>)
    (<pred> ^instance <i>)
    (<i> ^2 <obj2>)
    (<i> ^1 <obj1>)
    (<until-pred> ^1 <obj1>)
    (<o*2> ^object <obj2>)
    (<o*1> ^object <obj1>)
    -->
    (<s> ^satisfied <until-pred> +)
}

sp {execute-primitive-action*elaborate*until-clause*state*predicate*satisfied
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name execute-primitive-action)
    (<s> ^until-clause <u*1>)
    (<u*1> ^predicate <pred>)
    (<pred> ^type state)
    (<pred> ^handle <pred-handle>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<pred> ^1 <obj>)
    (<obj> ^predicates <p*2>)
    (<p*2> ^<prop> <pred-handle>)
    (<o*1> ^object <obj>)
    -->
    (<s> ^satisfied <pred> +)
}

sp {execute-primitive-action*elaborate*until-clause*from*superoperator
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name execute-primitive-action)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^until-clause <until>)
    -->
    (<s> ^until-clause <until> +)
}

sp {execute-remember*apply*merge-objects*mark*complete
    (state <s> ^name execute-remember1)
    (<s> ^operator <o*1>)
    (<o*1> ^name merge-objects)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-remember*apply*merge-objects*remove*object2*from*world
    (state <s> ^name execute-remember1)
    (<s> ^operator <o>)
    (<o> ^name merge-objects)
    (<o> ^object2 <obj2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <objs>)
    (<objs> ^object <obj2>)
    -->
    (<objs> ^object <obj2> -)
}

sp {execute-remember*apply*merge-objects*mark*as*remembered
    (state <s> ^name execute-remember1)
    (<s> ^operator <o>)
    (<o> ^name merge-objects)
    (<o> ^object2 <o*1>)
    (<o> ^object1 <obj>)
    (<obj> ^predicates <preds>)
    (<o*1> ^predicates <p*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^next <n*1>)
    (<n*1> ^info <info>)
    (<p*1> ^{ << property category >> <att> } <val>)
    (<preds> -^<att> <val>)
    -->
    (<info> ^remembered <rem> +)
    (<rem> ^object <obj> +)
    (<rem> ^property <att> +)
    (<rem> ^predicate <val> +)
}

sp {execute-remember*apply*merge-objects*copy*predicates
    (state <s> ^name execute-remember1)
    (<s> ^operator <o>)
    (<o> ^name merge-objects)
    (<o> ^object2 <o*1>)
    (<o> ^object1 <o*2>)
    (<o*2> ^predicates <preds>)
    (<o*1> ^predicates <p*1>)
    (<p*1> ^{ << property category >> <att> } <val>)
    (<preds> -^<att> <val>)
    -->
    (<preds> ^<att> <val> +)
}

sp {execute-remember*apply*merge-objects*mark*source
    (state <s> ^name execute-remember1)
    (<s> ^operator <o>)
    (<o> ^name merge-objects)
    (<o> ^object2 <obj2>)
    (<o> ^object1 <obj1>)
    -->
    (<obj2> ^source <obj1> +)
}

sp {execute-remember*propose*merge-objects
    (state <s> ^name execute-remember1)
    (<s> ^object2 <obj2>)
    (<s> ^object1 <obj1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name merge-objects +)
    (<o> ^object1 <obj1> +)
    (<o> ^object2 <obj2> +)
}

sp {execute-remember1*elaborate*objects*superoperator
    (state <s> ^name execute-remember1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <ssop>)
    (<ssop> ^arg2 <a*2>)
    (<ssop> ^arg1 <a*1>)
    (<a*2> ^id <obj2>)
    (<a*1> ^id <obj1>)
    -->
    (<s> ^object1 <obj1> +)
    (<s> ^object2 <obj2> +)
}

sp {execute-primitive-action*elaborate*problem-space
    (state <s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^problem-space execute-primitive-action)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^name execute-primitive-action +)
    (<ps> ^action-type primitive +)
    (<ps> ^action <action> +)
    (<ps> ^world <world> +)
    (<ps> ^learning <learn> +)
    (<ps> ^perception <perc> +)
    (<action> ^type execute +)
    (<action> ^propose-actions false +)
    (<world> ^copy-type shallow +)
    (<perc> ^attend-to-all-perception yes +)
}

sp {execute-search-for-object1*elaborate*target-object*superoperator
    (state <s> ^name execute-search-for-object1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <obj>)
    -->
    (<s> ^target-object <obj> +)
}

sp {execute-search-for-object*apply*ask-for-item*yes*mark*visible
    (state <s> ^name execute-search-for-object1)
    (<s> ^current-action <c*1>)
    (<c*1> ^received-yes true)
    (<s> ^operator <o*1>)
    (<o*1> ^name ask-for-item)
    (<s> ^target-object <t*1>)
    (<t*1> ^predicates <preds>)
    -->
    (<preds> ^visible false -)
    (<preds> ^visible true +)
}

sp {execute-search-for-object*apply*ask-for-item*mark*current-waypoint*searched
    (state <s> ^name execute-search-for-object1)
    (<s> ^operator <o*1>)
    (<o*1> ^name ask-for-item)
    (<s> ^current-action <a>)
    (<a> ^action-context <context>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^current-waypoint <wp>)
    (<a> ^{ << received-yes received-no >> <a*1> } true)
    -->
    (<context> ^searched <wp> +)
}

sp {execute-search-for-object*apply*ask-for-item*mark*complete
    (state <s> ^name execute-search-for-object1)
    (<s> ^operator <o*1>)
    (<o*1> ^name ask-for-item)
    (<s> ^current-action <a>)
    (<a> ^{ << received-yes received-no >> <a*1> } true)
    -->
    (<a> ^status complete +)
}

sp {execute-search-for-object*apply*ask-for-item*send-message
    (state <s> ^name execute-search-for-object1)
    (<s> ^current-action <a>)
    (<a> -^sent-message true)
    (<s> ^operator <o>)
    (<o> ^name ask-for-item)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<o> ^object <o*1>)
    (<o*1> ^predicates <p*1>)
    (<p*1> ^shape <shape>)
    -->
    (<c> ^outgoing-message <msg> +)
    (<msg> ^type ask-about-item +)
    (<msg> ^item <shape> +)
    (<a> ^sent-message true +)
}

sp {execute-search-for-object*propose*ask-for-item
    (state <s> ^name execute-search-for-object1)
    (<s> ^target-object <obj>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <a*1>)
    (<a*1> ^state internal)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name ask-for-item +)
    (<o> ^object <obj> +)
}

sp {execute-orient*apply*report-success*remove*command
    (state <s> ^name execute-orient1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<a> ^orient-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^<cmd-name> <cmd>)
    -->
    (<a> ^orient-command <cmd> -)
    (<out> ^<cmd-name> <cmd> -)
}

sp {execute-orient*apply*report-success*add*status
    (state <s> ^name execute-orient1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-orient*propose*report-success
    (state <s> ^name execute-orient1)
    (<s> ^current-action <c*1>)
    (<c*1> ^orient-command <o*1>)
    (<o*1> ^status success)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-success +)
}

sp {execute-orient1*apply*send-orient-command
    (state <s> ^name execute-orient1)
    (<s> ^operator <o>)
    (<o> ^name send-orient-command)
    (<o> ^yaw <yaw>)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^do-control-law <law> +)
    (<law> ^name orient +)
    (<law> ^parameters <p*1> +)
    (<p*1> ^yaw <yaw> +)
    (<law> ^termination-condition <t*2> +)
    (<t*2> ^name stabilized +)
    (<a> ^orient-command <law> +)
}

sp {execute-orient1*propose*send-orient-command
    (state <s> ^name execute-orient1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^orient-command <o*1>)
      (<o*1> ^status success)}
    (<s> ^direction-id <d*1>)
    (<d*1> ^yaw <yaw>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name send-orient-command +)
    (<o> ^yaw <yaw> +)
}

sp {execute-orient1*elaborate*direction-id*from*retrieval
    (state <s> ^name execute-orient1)
    (<s> ^direction-handle <dir-handle>)
    (<s> ^smem-query <s*1>)
    (<s*1> ^result <dir-id>)
    (<dir-id> ^handle <dir-handle>)
    -->
    (<s> ^direction-id <dir-id> +)
}

sp {execute-orient1*elaborate*smem-query-cue*direction
    (state <s> ^name execute-orient1)
    (<s> ^direction-handle <dir-handle>)
    -->
    (<s> ^smem-query <q> +)
    (<q> ^cue <cue> +)
    (<q> ^depth 2 +)
    (<cue> ^handle <dir-handle> +)
}

sp {execute-orient1*elaborate*direction*from*superoperator
    (state <s> ^name execute-orient1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^handle <dir-handle>)
    -->
    (<s> ^direction-handle <dir-handle> +)
}

sp {execute-follow-wall*apply*report-success*remove*command
    (state <s> ^name execute-follow-wall1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<a> ^follow-wall-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^<cmd-name> <cmd>)
    -->
    (<a> ^follow-wall-command <cmd> -)
    (<out> ^<cmd-name> <cmd> -)
}

sp {execute-follow-wall*apply*report-success*add*status
    (state <s> ^name execute-follow-wall1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-follow-wall*propose*report-success
    (state <s> ^name execute-follow-wall1)
    (<s> ^current-action <c*1>)
    (<c*1> ^follow-wall-command <f*1>)
    (<f*1> ^status success)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-success +)
}

sp {execute-follow-wall1*apply*send-follow-wall-command*until
    (state <s> ^name execute-follow-wall1)
    (<s> ^operator <o>)
    (<o> ^name send-follow-wall-command)
    (<o> ^side <side>)
    (<s> ^until-clause <until>)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^do-control-law <law> +)
    (<law> ^name follow-wall +)
    (<law> ^parameters <p*1> +)
    (<p*1> ^side <side> +)
    (<law> ^termination-condition <until> +)
    (<a> ^follow-wall-command <law> +)
}

sp {execute-follow-wall1*apply*send-follow-wall-command*no*until
    (state <s> ^name execute-follow-wall1)
    (<s> -^until-clause <u*1>)
    (<s> ^operator <o>)
    (<o> ^name send-follow-wall-command)
    (<o> ^side <side>)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^do-control-law <law> +)
    (<law> ^name follow-wall +)
    (<law> ^parameters <p*1> +)
    (<p*1> ^side <side> +)
    (<law> ^termination-condition <t*2> +)
    (<t*2> ^name stabilized +)
    (<a> ^follow-wall-command <law> +)
}

sp {execute-follow-wall1*propose*send-follow-wall-command
    (state <s> ^name execute-follow-wall1)
    (<s> ^current-action <a>)
    (<a> -^follow-wall-command <f*1>)
    (<s> ^wall-side <side>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name send-follow-wall-command +)
    (<o> ^side <side> +)
}

sp {execute-follow-wall*elaborate*wall-side*default
    (state <s> ^name execute-follow-wall1)
    (<s> -^direction-handle <d*1>)
    -->
    (<s> ^wall-side 1 +)
}

sp {execute-follow-wall*elaborate*wall-side*from*direction-id
    (state <s> ^name execute-follow-wall1)
    (<s> ^direction-id <d*1>)
    (<d*1> ^side <side>)
    -->
    (<s> ^wall-side <side> +)
}

sp {execute-follow-wall1*elaborate*direction-id*from*retrieval
    (state <s> ^name execute-follow-wall1)
    (<s> ^direction-handle <dir-handle>)
    (<s> ^smem-query <s*1>)
    (<s*1> ^result <dir-id>)
    (<dir-id> ^handle <dir-handle>)
    -->
    (<s> ^direction-id <dir-id> +)
}

sp {execute-follow-wall1*elaborate*smem-query-cue*direction
    (state <s> ^name execute-follow-wall1)
    (<s> ^direction-handle <dir-handle>)
    -->
    (<s> ^smem-query <q> +)
    (<q> ^cue <cue> +)
    (<q> ^depth 2 +)
    (<cue> ^handle <dir-handle> +)
}

sp {execute-follow-wall1*elaborate*direction*from*superoperator
    (state <s> ^name execute-follow-wall1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <i*1>)
    (<i*1> ^predicates <p*1>)
    (<p*1> ^relative-direction1 { <> wall1 <dir-handle> })
    -->
    (<s> ^direction-handle <dir-handle> +)
}

sp {execute-follow-wall1*elaborate*until-clause*from*superoperator
    (state <s> ^name execute-follow-wall1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^until-clause <term>)
    -->
    (<s> ^until-clause <term> +)
}

sp {execute-go*apply*report-success*remove*command
    (state <s> ^name execute-go1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<a> ^go-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^<cmd-name> <cmd>)
    -->
    (<a> ^go-command <cmd> -)
    (<out> ^<cmd-name> <cmd> -)
}

sp {execute-go*apply*report-success*add*status
    (state <s> ^name execute-go1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-go*propose*report-success
    (state <s> ^name execute-go1)
    (<s> ^current-action <c*1>)
    (<c*1> ^go-command <g*1>)
    (<g*1> ^status success)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-success +)
}

sp {execute-go1*elaborate*until-clause*from*superoperator
    (state <s> ^name execute-go1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^until-clause <until>)
    -->
    (<s> ^until-clause <until> +)
}

sp {execute-stop*apply*report-success*remove*command
    (state <s> ^name execute-stop1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<a> ^stop-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^<cmd-name> <cmd>)
    -->
    (<a> ^stop-command <cmd> -)
    (<out> ^<cmd-name> <cmd> -)
}

sp {execute-stop*apply*report-success*add*status
    (state <s> ^name execute-stop1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-stop*propose*report-success
    (state <s> ^name execute-stop1)
    (<s> ^current-action <c*1>)
    (<c*1> ^stop-command <s*1>)
    (<s*1> ^status success)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-success +)
}

sp {execute-stop1*apply*send-stop-command
    (state <s> ^name execute-stop1)
    (<s> ^operator <o*1>)
    (<o*1> ^name send-stop-command)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^do-control-law <law> +)
    (<law> ^name stop +)
    (<law> ^termination-condition <t*2> +)
    (<t*2> ^name none +)
    (<a> ^stop-command <law> +)
}

sp {execute-stop1*propose*send-stop-command
    (state <s> ^name execute-stop1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^stop-command <s*1>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name send-stop-command +)
}

sp {execute-turn1*elaborate*direction-id*from*retrieval
    (state <s> ^name execute-turn1)
    (<s> ^direction-handle <dir-handle>)
    (<s> ^smem-query <s*1>)
    (<s*1> ^result <dir-id>)
    (<dir-id> ^handle <dir-handle>)
    -->
    (<s> ^direction-id <dir-id> +)
}

sp {execute-turn1*elaborate*smem-query-cue*direction
    (state <s> ^name execute-turn1)
    (<s> ^direction-handle <dir-handle>)
    -->
    (<s> ^smem-query <q> +)
    (<q> ^cue <cue> +)
    (<q> ^depth 2 +)
    (<cue> ^handle <dir-handle> +)
}

sp {execute-turn1*elaborate*direction*from*superoperator
    (state <s> ^name execute-turn1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^handle <dir-handle>)
    -->
    (<s> ^direction-handle <dir-handle> +)
}

sp {execute-turn*apply*report-success*remove*command
    (state <s> ^name execute-turn1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<a> ^turn-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^<cmd-name> <cmd>)
    -->
    (<a> ^turn-command <cmd> -)
    (<out> ^<cmd-name> <cmd> -)
}

sp {execute-turn*apply*report-success*add*status
    (state <s> ^name execute-turn1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-turn*propose*report-success
    (state <s> ^name execute-turn1)
    (<s> ^current-action <c*1>)
    (<c*1> ^turn-command <t*1>)
    (<t*1> ^status success)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-success +)
}

sp {execute-turn1*apply*send-turn-command
    (state <s> ^name execute-turn1)
    (<s> ^operator <o*1>)
    (<o*1> ^name send-turn-command)
    (<s> ^direction-id <d*2>)
    (<d*2> ^yaw <yaw>)
    (<s> ^direction-id <d*1>)
    (<d*1> ^side <side>)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^do-control-law <law> +)
    (<law> ^name turn +)
    (<law> ^parameters <p*1> +)
    (<p*1> ^direction <side> +)
    (<law> ^termination-condition <cond> +)
    (<cond> ^name rotation +)
    (<cond> ^parameters <p*2> +)
    (<p*2> ^yaw <yaw> +)
    (<a> ^turn-command <law> +)
}

sp {execute-turn1*propose*send-turn-command
    (state <s> ^name execute-turn1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^turn-command <t*1>)}
    (<s> ^direction-id <d*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name send-turn-command +)
}

sp {execute-turn-off1*apply*send-turn-off-command
    (state <s> ^name execute-turn-off1)
    (<s> ^operator <o>)
    (<o> ^name send-turn-off-command)
    (<o> ^state-predicate <state-pred>)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<o> ^object <o*1>)
    (<o*1> ^handle <obj-handle>)
    -->
    (<out> ^set-state <set> +)
    (<set> ^object-handle <obj-handle> +)
    (<set> ^name <state-pred> +)
    (<set> ^value off2 +)
    (<a> ^turn-off-command <set> +)
}

sp {execute-turn-off1*propose*send-turn-off-command
    (state <s> ^name execute-turn-off1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^turn-off-command <t*1>)}
    (<s> ^target-object <obj>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name send-turn-off-command +)
    (<o> ^object <obj> +)
    (<o> ^state-predicate activation1 +)
}

sp {execute-turn-off*apply*report-success*remove*command
    (state <s> ^name execute-turn-off1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<a> ^turn-off-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^<cmd-name> <cmd>)
    -->
    (<a> ^turn-off-command <cmd> -)
    (<out> ^<cmd-name> <cmd> -)
}

sp {execute-turn-off*apply*report-success*add*status
    (state <s> ^name execute-turn-off1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-turn-off*propose*report-success
    (state <s> ^name execute-turn-off1)
    (<s> ^target-object <t*1>)
    (<t*1> ^predicates <p*1>)
    (<p*1> ^activation1 off2)
    -->
    (<s> ^operator <o> +)
    (<o> ^name report-success +)
}

sp {execute-turn-off*elaborate*target-object*from*superoperator*source
    (state <s> ^name execute-turn-off1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <i*1>)
    (<i*1> ^source <obj>)
    -->
    (<s> ^target-object <obj> +)
}

sp {execute-turn-off*elaborate*target-object*from*superoperator
    (state <s> ^name execute-turn-off1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <obj>)
    (<obj> -^source <s*2>)
    -->
    (<s> ^target-object <obj> +)
}

sp {execute-turn-on1*apply*send-turn-on-command
    (state <s> ^name execute-turn-on1)
    (<s> ^operator <o>)
    (<o> ^name send-turn-on-command)
    (<o> ^state-predicate <state-pred>)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<o> ^object <o*1>)
    (<o*1> ^handle <obj-handle>)
    -->
    (<out> ^set-state <set> +)
    (<set> ^object-handle <obj-handle> +)
    (<set> ^name <state-pred> +)
    (<set> ^value on2 +)
    (<a> ^turn-on-command <set> +)
}

sp {execute-turn-on1*propose*send-turn-on-command
    (state <s> ^name execute-turn-on1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^turn-on-command <t*1>)}
    (<s> ^target-object <obj>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name send-turn-on-command +)
    (<o> ^object <obj> +)
    (<o> ^state-predicate activation1 +)
}

sp {execute-turn-on*apply*report-success*remove*command
    (state <s> ^name execute-turn-on1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<a> ^turn-on-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^<cmd-name> <cmd>)
    -->
    (<a> ^turn-on-command <cmd> -)
    (<out> ^<cmd-name> <cmd> -)
}

sp {execute-turn-on*apply*report-success*add*status
    (state <s> ^name execute-turn-on1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-turn-on*propose*report-success
    (state <s> ^name execute-turn-on1)
    (<s> ^target-object <t*1>)
    (<t*1> ^predicates <p*1>)
    (<p*1> ^activation1 on2)
    -->
    (<s> ^operator <o> +)
    (<o> ^name report-success +)
}

sp {execute-turn-on*elaborate*target-object*from*superoperator*source
    (state <s> ^name execute-turn-on1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <i*1>)
    (<i*1> ^source <obj>)
    -->
    (<s> ^target-object <obj> +)
}

sp {execute-turn-on*elaborate*target-object*from*superoperator
    (state <s> ^name execute-turn-on1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <obj>)
    (<obj> -^source <s*2>)
    -->
    (<s> ^target-object <obj> +)
}

sp {execute-put-down*apply*internal-put-down*add*in*relation
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o>)
    (<o> ^name internal-put-down)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <world>)
    (<world> ^robot <r*1>)
    (<r*1> ^current-location <loc>)
    (<world> ^predicates <p*1>)
    (<p*1> ^predicate <in-pred>)
    (<in-pred> ^handle in1)
    (<o> ^object <obj>)
    -->
    (<in-pred> ^instance <i> +)
    (<i> ^1 <obj> +)
    (<i> ^2 <loc> +)
}

sp {execute-put-down*apply*internal-put-down*remove*grabbed
    (state <s> ^name execute-put-down1)
    (<s> ^current-action <c*1>)
    (<c*1> ^received-yes true)
    (<s> ^operator <o>)
    (<o> ^name internal-put-down)
    (<o> ^object <o*1>)
    (<o*1> ^predicates <preds>)
    (<preds> ^arm-status grabbed)
    -->
    (<preds> ^arm-status grabbed -)
}

sp {execute-put-down*apply*internal-put-down*mark*complete
    (state <s> ^name execute-put-down1)
    (<s> ^current-action <a>)
    (<a> ^received-yes true)
    (<s> ^operator <o*1>)
    (<o*1> ^name internal-put-down)
    -->
    (<a> ^status complete +)
}

sp {execute-put-down*apply*internal-put-down*send-message
    (state <s> ^name execute-put-down1)
    (<s> ^current-action <a>)
    (<a> -^sent-message true)
    (<s> ^operator <o>)
    (<o> ^name internal-put-down)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*1>)
    (<a*1> ^arm-simulation-level pretend)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<o> ^object <o*1>)
    (<o*1> ^predicates <p*1>)
    (<p*1> ^shape <shape>)
    -->
    (<c> ^outgoing-message <msg> +)
    (<msg> ^type give-item-request +)
    (<msg> ^item <shape> +)
    (<a> ^sent-message true +)
}

sp {execute-put-down*apply*internal-put-down*send-confirmation
    (state <s> ^name execute-put-down1)
    (<s> ^current-action <c*1>)
    (<c*1> ^received-yes true)
    (<s> ^operator <o>)
    (<o> ^name internal-put-down)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*1>)
    (<a*1> ^arm-simulation-level none)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type confirm-put-down +)
}

sp {execute-put-down*skip*ask
    (state <s> ^name execute-put-down1)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^arm-simulation-level none)
    -->
    (<a> ^received-yes true +)
}

sp {execute-put-down*propose*internal-put-down
    (state <s> ^name execute-put-down1)
    (<s> ^held-object <obj>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <a*1>)
    (<a*1> ^state internal)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name internal-put-down +)
    (<o> ^object <obj> +)
}

sp {execute-put-down1*elaborate*evaluate-new-object*candidate-for-missing-object
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type new-stable-object)
    (<s> ^held-object <h*1>)
    (<o> ^change <c*2>)
    (<h*1> ^handle <obj-handle>)
    (<c*2> ^object-info <cand>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^object-handle <obj-handle>)
    -->
    (<cand> ^candidate-for-missing-object <obj-info> +)
}

sp {execute-put-down1*reject*attend-to-scene-change*grabbed*object
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*2>)
    (<c*2> ^object-info <o*1>)
    (<o*1> ^object-handle <handle>)
    (<s> ^target-object <t*1>)
    (<t*1> ^handle <handle>)
    (<s> ^current-action <c*1>)
    (<c*1> ^put-down-command <cmd>)
    (<cmd> -^status <s*1>)
    -->
    (<s> ^operator <o> -)
}

sp {execute-put-down1*reject*attend-to-scene-change*all*during*put-down
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*2>)
    (<s> ^current-action <c*1>)
    (<c*1> ^put-down-command <cmd>)
    (<cmd> -^status <s*1>)
    (<c*2> ^type { <> new-object <any> })
    -->
    (<s> ^operator <o> -)
}

sp {execute-put-down1*reject*attend-to-new-object
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*2>)
    (<c*2> ^type new-stable-object)
    (<s> ^current-action <c*1>)
    (<c*1> ^put-down-command <cmd>)
    (<cmd> -^status <s*1>)
    -->
    (<s> ^operator <o> -)
}

sp {execute-put-down1*reject*attend-to-stale-object*held*object
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type stale-object)
    (<s> ^held-object <h*1>)
    (<o> ^change <c*2>)
    (<h*1> ^handle <handle>)
    (<c*2> ^object-info <o*1>)
    (<o*1> ^object-handle <handle>)
    -->
    (<s> ^operator <o> -)
}

sp {execute-put-down1*apply*report-failure*remove*put-down-command
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-failure)
    (<s> ^current-action <a>)
    (<a> ^put-down-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^put-down <cmd>)
    -->
    (<a> ^put-down-command <cmd> -)
    (<out> ^put-down <cmd> -)
}

sp {execute-put-down1*apply*report-failure*remove*grabbed
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-failure)
    (<s> ^held-object <h*1>)
    (<h*1> ^predicates <preds>)
    (<preds> ^arm-status grabbed)
    -->
    (<preds> ^arm-status grabbed -)
}

sp {execute-put-down1*apply*report-failure*report*failure
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-failure)
    (<s> ^held-object <obj>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^failure <f> +)
    (<f> ^type missing-object +)
    (<f> ^missing-object <obj> +)
}

sp {execute-put-down1*propose*report-failure
    (state <s> ^name execute-put-down1)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^perception-monitor <p*2>)
      (<p*2> ^object-monitor <o*1>)
      (<o*1> ^new-object-info <n*1>)
      (<n*1> ^status <s*1>)}
    (<s> ^held-object <h*1>)
    (<h*1> ^predicates <p*3>)
    (<p*3> ^visible false)
    (<s> ^current-action <c*1>)
    (<c*1> ^put-down-command <p*1>)
    (<p*1> ^status complete)
    -->
    (<s> ^operator <o> +)
    (<o> ^name report-failure +)
}

sp {execute-put-down1*apply*report-success*remove*put-down-command
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<a> ^put-down-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^put-down <cmd>)
    -->
    (<a> ^put-down-command <cmd> -)
    (<out> ^put-down <cmd> -)
}

sp {execute-put-down1*apply*report-success*remove*grabbed
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^held-object <h*1>)
    (<h*1> ^predicates <preds>)
    (<preds> ^arm-status grabbed)
    -->
    (<preds> ^arm-status grabbed -)
}

sp {execute-put-down1*apply*report-success
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-put-down1*propose*report-success
    (state <s> ^name execute-put-down1)
    (<s> ^held-object <h*1>)
    (<h*1> ^predicates <p*2>)
    (<p*2> ^visible true)
    (<s> ^current-action <c*1>)
    (<c*1> ^put-down-command <p*1>)
    (<p*1> ^status complete)
    -->
    (<s> ^operator <o> +)
    (<o> ^name report-success +)
}

sp {execute-put-down1*prefer*find-projection*over*send-put-down
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o2> +)
    (<o2> ^name send-put-down-command)
    (<s> ^operator <o1> +)
    (<o1> ^name find-projection)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {execute-put-down1*prefer*attend-to-scene-change*over*reports
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o1> +)
    (<o1> ^name attend-to-scene-change)
    (<s> ^operator <o2> +)
    (<o2> ^name { << report-success report-failure >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {execute-put-down1*apply*send-put-down-command*relocate*object
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o>)
    (<o> ^name send-put-down-command)
    (<s> ^held-object <h*1>)
    (<h*1> ^svs-obj <s*1>)
    (<o> ^destination <dest>)
    (<dest> ^z <z>)
    (<dest> ^y <y>)
    (<dest> ^x <x>)
    (<s> ^top-state <t*1>)
    (<s*1> ^id <id>)
    (<t*1> ^svs <s*2>)
    (<s*2> ^command <cmd>)
    -->
    (<cmd> ^set_transform <setxform> +)
    (<setxform> ^id <id> +)
    (<setxform> ^position <pos> +)
    (<pos> ^x <x> +)
    (<pos> ^y <y> +)
    (<pos> ^z <z> +)
}

sp {execute-put-down1*apply*send-put-down-command*send
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o>)
    (<o> ^name send-put-down-command)
    (<o> ^destination <dest>)
    (<dest> ^z <z>)
    (<dest> ^y <y>)
    (<dest> ^x <x>)
    (<s> ^current-action <a>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^put-down <cmd> +)
    (<cmd> ^location <loc> +)
    (<loc> ^x <x> +)
    (<loc> ^y <y> +)
    (<loc> ^z <z> +)
    (<a> ^put-down-command <cmd> +)
}

sp {execute-put-down1*propose*send-put-down-command
    (state <s> ^name execute-put-down1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^put-down-command <p*1>)}
    (<s> ^projection-result <res>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <a*1>)
    (<a*1> ^action wait)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name send-put-down-command +)
    (<o> ^destination <res> +)
}

sp {execute-put-down1*elaborate*projection-result*from*current-action
    (state <s> ^name execute-put-down1)
    (<s> ^current-action <c*1>)
    (<c*1> ^projection-result <res>)
    -->
    (<s> ^projection-result <res> +)
}

sp {execute-put-down1*elaborate*destination*superoperator*source
    (state <s> ^name execute-put-down1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg2 <a*1>)
    (<a*1> ^2 <v*1>)
    (<v*1> ^source <obj>)
    -->
    (<s> ^destination <obj> +)
}

sp {execute-put-down1*elaborate*destination*superoperator
    (state <s> ^name execute-put-down1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg2 <a*1>)
    (<a*1> ^2 <obj>)
    (<obj> -^source <s*2>)
    -->
    (<s> ^destination <obj> +)
}

sp {execute-put-down1*elaborate*predicate-handle*superoperator
    (state <s> ^name execute-put-down1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg2 <a*1>)
    (<a*1> ^handle <pred-handle>)
    -->
    (<s> ^predicate-handle <pred-handle> +)
}

sp {execute-put-down1*elaborate*held-object*superoperator*source
    (state <s> ^name execute-put-down1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <i*1>)
    (<i*1> ^source <obj>)
    -->
    (<s> ^held-object <obj> +)
}

sp {execute-put-down1*elaborate*held-object*superoperator
    (state <s> ^name execute-put-down1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <obj>)
    (<obj> -^source <s*2>)
    -->
    (<s> ^held-object <obj> +)
}

sp {execute-put-down1*apply*find-projection*copy*result
    (state <s> ^name execute-put-down1)
    (<s> ^operator <o*1>)
    (<o*1> ^name find-projection)
    (<s> ^projection-result <res>)
    (<s> ^current-action <a>)
    -->
    (<a> ^projection-result <res> +)
}

sp {execute-put-down1*propose*find-projection
    (state <s> ^name execute-put-down1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^projection-result <p*1>)}
    (<s> ^held-object <held>)
    (<s> ^destination <dest>)
    (<s> ^predicate-handle <pred-handle>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name find-projection +)
    (<o> ^predicate-handle <pred-handle> +)
    (<o> ^arg-list <args> +)
    (<args> ^1 <held> +)
    (<args> ^2 <dest> +)
}

sp {execute-close*apply*report-success*remove*command
    (state <s> ^name execute-close1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<a> ^close-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^set-state <cmd>)
    -->
    (<a> ^close-command <cmd> -)
    (<out> ^set-state <cmd> -)
}

sp {execute-close*apply*report-success*add*status
    (state <s> ^name execute-close1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-close*propose*report-success
    (state <s> ^name execute-close1)
    (<s> ^target-object <t*1>)
    (<t*1> ^predicates <p*1>)
    (<p*1> ^door1 closed2)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-success +)
}

sp {execute-close*apply*send-close-command
    (state <s> ^name execute-close1)
    (<s> ^operator <o>)
    (<o> ^name send-close-command)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<o> ^object <o*1>)
    (<o*1> ^handle <obj-handle>)
    -->
    (<out> ^set-state <set> +)
    (<set> ^object-handle <obj-handle> +)
    (<set> ^name door1 +)
    (<set> ^value closed2 +)
    (<a> ^close-command <set> +)
}

sp {execute-close*propose*send-close-command
    (state <s> ^name execute-close1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^close-command <cmd>)}
    (<s> ^target-object <obj>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name send-close-command +)
    (<o> ^object <obj> +)
}

sp {execute-close*elaborate*targett-object*from*source
    (state <s> ^name execute-close1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <i*1>)
    (<i*1> ^source <obj>)
    -->
    (<s> ^target-object <obj> +)
}

sp {execute-close*elaborate*targett-object
    (state <s> ^name execute-close1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <obj>)
    (<obj> -^source <s*2>)
    -->
    (<s> ^target-object <obj> +)
}

sp {execute-open*apply*report-success*remove*command
    (state <s> ^name execute-open1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<a> ^open-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^<cmd-name> <cmd>)
    -->
    (<a> ^open-command <cmd> -)
    (<out> ^<cmd-name> <cmd> -)
}

sp {execute-open*apply*report-success*add*status
    (state <s> ^name execute-open1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-open*propose*report-success
    (state <s> ^name execute-open1)
    (<s> ^target-object <t*1>)
    (<t*1> ^predicates <p*1>)
    (<p*1> ^door1 open2)
    -->
    (<s> ^operator <o> +)
    (<o> ^name report-success +)
}

sp {execute-open*apply*send-open-command
    (state <s> ^name execute-open1)
    (<s> ^operator <o>)
    (<o> ^name send-open-command)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<o> ^object <o*1>)
    (<o*1> ^handle <obj-handle>)
    -->
    (<out> ^set-state <set> +)
    (<set> ^object-handle <obj-handle> +)
    (<set> ^name door1 +)
    (<set> ^value open2 +)
    (<a> ^open-command <set> +)
}

sp {execute-open*propose*send-open-command
    (state <s> ^name execute-open1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^open-command <cmd>)}
    (<s> ^target-object <obj>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name send-open-command +)
    (<o> ^object <obj> +)
}

sp {execute-open*elaborate*target-object*superoperator*source
    (state <s> ^name execute-open1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <i*1>)
    (<i*1> ^source <obj>)
    -->
    (<s> ^target-object <obj> +)
}

sp {execute-open*elaborate*target-object*superoperator
    (state <s> ^name execute-open1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <obj>)
    (<obj> -^source <s*2>)
    -->
    (<s> ^target-object <obj> +)
}

sp {execute-pick-up*apply*report-success*remove*in*relation*grabbed
    (state <s> ^name execute-pick-up1)
    (<s> ^current-action <c*1>)
    (<c*1> ^received-yes true)
    (<s> ^operator <o>)
    (<o> ^name internal-pick-up)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <world>)
    (<world> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle in1)
    (<pred> ^instance <i>)
    (<i> ^2 <loc>)
    (<loc> ^item-type location)
    (<i> ^1 <obj>)
    (<o> ^object <obj>)
    -->
    (<pred> ^instance <i> -)
}

sp {execute-pick-up*apply*internal-pick-up*mark*grabbed
    (state <s> ^name execute-pick-up1)
    (<s> ^current-action <c*1>)
    (<c*1> ^received-yes true)
    (<s> ^operator <o>)
    (<o> ^name internal-pick-up)
    (<o> ^object <o*1>)
    (<o*1> ^predicates <preds>)
    -->
    (<preds> ^arm-status grabbed +)
}

sp {execute-pick-up*apply*internal-pick-up*mark*complete
    (state <s> ^name execute-pick-up1)
    (<s> ^current-action <a>)
    (<a> ^received-yes true)
    (<s> ^operator <o*1>)
    (<o*1> ^name internal-pick-up)
    -->
    (<a> ^status complete +)
}

sp {execute-pick-up*apply*internal-pick-up*send-message
    (state <s> ^name execute-pick-up1)
    (<s> ^current-action <a>)
    (<a> -^sent-message true)
    (<s> ^operator <o>)
    (<o> ^name internal-pick-up)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*1>)
    (<a*1> ^arm-simulation-level pretend)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<o> ^object <o*1>)
    (<o*1> ^predicates <p*1>)
    (<p*1> ^shape <shape>)
    -->
    (<c> ^outgoing-message <msg> +)
    (<msg> ^type get-item-request +)
    (<msg> ^item <shape> +)
    (<a> ^sent-message true +)
}

sp {execute-pick-up*apply*internal-pick-up*send-confirmation
    (state <s> ^name execute-pick-up1)
    (<s> ^current-action <c*1>)
    (<c*1> ^received-yes true)
    (<s> ^operator <o>)
    (<o> ^name internal-pick-up)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*1>)
    (<a*1> ^arm-simulation-level none)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type confirm-pick-up +)
}

sp {execute-pick-up*skip*ask
    (state <s> ^name execute-pick-up1)
    (<s> ^current-action <a>)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^arm-simulation-level none)
    -->
    (<a> ^received-yes true +)
}

sp {execute-pick-up*propose*internal-pick-up
    (state <s> ^name execute-pick-up1)
    (<s> ^target-object <obj>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <a*1>)
    (<a*1> ^state internal)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name internal-pick-up +)
    (<o> ^object <obj> +)
}

sp {execute-pick-up1*apply*report-failure*remove*commands
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-failure)
    (<s> ^current-action <a>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^<cmd-name> <cmd>)
    (<a> ^{ << pick-up-command reset-command >> <cmd-type> } <cmd>)
    -->
    (<a> ^<cmd-type> <cmd> -)
    (<out> ^<cmd-name> <cmd> -)
}

sp {execute-pick-up1*apply*report-failure*report*failure
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-failure)
    (<s> ^target-object <obj>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^failure <f> +)
    (<f> ^type missing-object +)
    (<f> ^missing-object <obj> +)
}

sp {execute-pick-up1*apply*report-failure*remove-arm-status
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-failure)
    (<s> ^target-object <t*1>)
    (<t*1> ^predicates <preds>)
    (<preds> ^arm-status moving)
    -->
    (<preds> ^arm-status moving -)
}

sp {execute-pick-up1*propose*report-failure
    (state <s> ^name execute-pick-up1)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^perception-monitor <p*2>)
      (<p*2> ^object-monitor <o*1>)
      (<o*1> ^new-object-info <n*1>)
      (<n*1> ^status <s*1>)}
    (<s> ^target-object <t*2>)
    (<t*2> ^predicates <p*3>)
    (<p*3> ^visible false)
    (<s> ^current-action <c*1>)
    (<c*1> ^pick-up-command <p*1>)
    (<p*1> ^status failure)
    -->
    (<s> ^operator <o> +)
    (<o> ^name report-failure +)
}

sp {execute-pick-up1*apply*report-success*remove*commands
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^<cmd-name> <cmd>)
    (<a> ^{ << pick-up-command reset-command >> <cmd-type> } <cmd>)
    -->
    (<a> ^<cmd-type> <cmd> -)
    (<out> ^<cmd-name> <cmd> -)
}

sp {execute-pick-up1*apply*report-success*move*belief*to*arm
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^target-object <t*1>)
    (<t*1> ^svs-obj <s*1>)
    (<s> ^top-state <t*2>)
    (<s*1> ^id <id>)
    (<t*2> ^svs <s*3>)
    (<s*3> ^command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^self <s*2>)
    (<s*2> ^pose <pose>)
    (<pose> ^z <z>)
    (<pose> ^y <y>)
    (<pose> ^x <x>)
    -->
    (<cmd> ^set_transform <xform> +)
    (<xform> ^id <id> +)
    (<xform> ^position <pos> +)
    (<pos> ^x <x> +)
    (<pos> ^y <y> +)
    (<pos> ^z <z> +)
}

sp {execute-pick-up1*apply*report-success*add*grabbed
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^target-object <t*1>)
    (<t*1> ^predicates <preds>)
    (<preds> ^arm-status moving)
    -->
    (<preds> ^arm-status moving -)
    (<preds> ^arm-status grabbed +)
}

sp {execute-pick-up1*apply*report-success*mark*finished
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^current-action <a>)
    -->
    (<a> ^status complete +)
}

sp {execute-pick-up1*propose*report-success
    (state <s> ^name execute-pick-up1)
    (<s> ^current-action <c*1>)
    (<c*1> ^pick-up-command <p*1>)
    (<p*1> ^status complete)
    -->
    (<s> ^operator <o> +)
    (<o> ^name report-success +)
}

sp {execute-pickup*apply*send-pick-up-command*remove*reset-command
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o*1>)
    (<o*1> ^name send-pick-up-command)
    (<s> ^current-action <a>)
    (<a> ^reset-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^reset <cmd>)
    -->
    (<a> ^reset-command <cmd> -)
    (<out> ^reset <cmd> -)
}

sp {execute-pick-up1*apply*send-pick-up-command*mark*object*moving
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o>)
    (<o> ^name send-pick-up-command)
    (<o> ^object <o*1>)
    (<o*1> ^predicates <preds>)
    -->
    (<preds> ^arm-status moving +)
}

sp {execute-pick-up1*apply*send-pick-up-command*send
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o>)
    (<o> ^name send-pick-up-command)
    (<s> ^current-action <a>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    (<o> ^object <o*1>)
    (<o*1> ^handle <obj-handle>)
    -->
    (<ol> ^pick-up <cmd> +)
    (<cmd> ^object-handle <obj-handle> +)
    (<a> ^pick-up-command <cmd> +)
}

sp {execute-pick-up1*propose*send-pick-up-command
    (state <s> ^name execute-pick-up1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^pick-up-command <p*1>)}
   -{ (<s> ^world <w*2>)
      (<w*2> ^robot <r*2>)
      (<r*2> ^arm <a*2>)
      (<a*2> ^state internal)}
    (<s> ^target-object <obj>)
    (<obj> ^predicates <p*2>)
    (<p*2> ^visible true)
    (<s> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <a*1>)
    (<a*1> ^action wait)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name send-pick-up-command +)
    (<o> ^object <obj> +)
}

sp {execute-pickup*apply*send-reset-command*remove*pick-up-command
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o*1>)
    (<o*1> ^name send-reset-command)
    (<s> ^current-action <a>)
    (<a> ^pick-up-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<out> ^pick-up <cmd>)
    -->
    (<a> ^pick-up-command <cmd> -)
    (<out> ^pick-up <cmd> -)
}

sp {execute-pickup*apply*send-reset-command
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o*1>)
    (<o*1> ^name send-reset-command)
    (<s> ^current-action <a>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    -->
    (<ol> ^reset <r> +)
    (<a> ^reset-command <r> +)
}

sp {execute-pick-up1*propose*send-reset-command
    (state <s> ^name execute-pick-up1)
   -{ (<s> ^current-action <c*1>)
      (<c*1> ^reset-command <r*2>)}
    (<s> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <a*1>)
    (<a*1> ^action { << failure home >> <a*2> })
    -->
    (<s> ^operator <o> +)
    (<o> ^name send-reset-command +)
    (<o> ^actions <a*3> +)
    (<a*3> ^reset <r> +)
}

sp {execute-pick-up1*elaborate*evaluate-new-object*candidate-for-missing-object
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type new-stable-object)
    (<o> ^change <c*2>)
    (<c*2> ^object-info <cand>)
    (<s> ^target-object <t*1>)
    (<t*1> ^handle <obj-handle>)
    (<s> ^top-state <t*2>)
    (<t*2> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^object-handle <obj-handle>)
    -->
    (<cand> ^candidate-for-missing-object <obj-info> +)
}

sp {execute-pick-up1*reject*attend-to-scene-change*grabbed*object
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*2>)
    (<c*2> ^object-info <o*1>)
    (<o*1> ^object-handle <handle>)
    (<s> ^target-object <t*1>)
    (<t*1> ^handle <handle>)
    (<s> ^current-action <c*1>)
    (<c*1> ^pick-up-command <cmd>)
    (<cmd> -^status <s*1>)
    -->
    (<s> ^operator <o> -)
}

sp {execute-pick-up1*reject*attend-to-new-object
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*2>)
    (<c*2> ^type new-object)
    (<s> ^current-action <c*1>)
    (<c*1> ^pick-up-command <cmd>)
    (<cmd> -^status <s*1>)
    -->
    (<s> ^operator <o> -)
}

sp {execute-pick-up1*reject*attend-to-stale-object
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type stale-object)
    (<o> ^change <c*2>)
    (<c*2> ^object-info <o*1>)
    (<o*1> ^wm-obj <obj>)
    (<s> ^target-object <obj>)
    -->
    (<s> ^operator <o> -)
}

sp {execute-pick-up1*prefer*attend-to-scene*over*failure*operators
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o1> +)
    (<o1> ^name attend-to-scene-change)
    (<s> ^operator <o2> +)
    (<o2> ^name { << report-failure send-reset-command >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {execute-pick-up1*prefer*attend-to-arm*over*report-success
    (state <s> ^name execute-pick-up1)
    (<s> ^operator <o2> +)
    (<o2> ^name report-success)
    (<s> ^operator <o1> +)
    (<o1> ^name attend-to-scene-change)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {execute-pick-up1*elaborate*target-object*superoperator*source
    (state <s> ^name execute-pick-up1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <i*1>)
    (<i*1> ^source <obj>)
    -->
    (<s> ^target-object <obj> +)
}

sp {execute-pick-up1*elaborate*target-object*superoperator
    (state <s> ^name execute-pick-up1)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <a*1>)
    (<a*1> ^id <obj>)
    (<obj> -^source <s*2>)
    -->
    (<s> ^target-object <obj> +)
}

sp {top-state*apply*execute-primitive-action*complete*report*performed*action-event
    (state <s> ^top-state <s>)
    (<s> ^current-action <a>)
    (<a> ^status complete)
    (<s> ^operator <o>)
    (<o> ^problem-space execute-primitive-action)
    (<a> ^action-handle <action-handle>)
    (<s> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^action-event <a*1> +)
    (<a*1> ^type <action-handle> +)
}

sp {top-state*apply*execute-primitive-action*complete*copy*next-action
    (state <s> ^top-state <s>)
    (<s> ^operator <o>)
    (<o> ^problem-space execute-primitive-action)
    (<s> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <seg>)
    (<seg> ^current-action <c*1>)
    (<c*1> ^next-action { <> none <next> })
    -->
    (<seg> ^current-action <next> +)
}

sp {top-state*apply*execute-primitive-action*complete*remove*current-action
    (state <s> ^top-state <s>)
    (<s> ^operator <o>)
    (<o> ^problem-space execute-primitive-action)
    (<s> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <seg>)
    (<seg> ^current-action <a>)
    (<a> ^status complete)
    -->
    (<seg> ^current-action <a> -)
}

sp {top-state*apply*execute-primitive-action*remove*first-appearance
    (state <s> ^superstate nil)
    (<s> ^current-action <a>)
    (<a> ^first-appearance true)
    (<s> ^operator <o>)
    (<o> ^problem-space execute-primitive-action)
    -->
    (<a> ^first-appearance true -)
}

sp {execute-primitive-action*elaborate*allow-wait
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name execute-primitive-action)
    -->
    (<s> ^allow-wait true +)
}

sp {execute-primitive-action*elaborate*state*current-action
    (state <s> ^problem-space <p*1>)
    (<p*1> ^name execute-primitive-action)
    (<s> ^superstate <s*1>)
    (<s*1> ^current-action <ca>)
    -->
    (<s> ^current-action <ca> +)
}

sp {top-state*elaborate*execute-primitive-action*arguments
    (state <s> ^top-state <s>)
    (<s> ^operator <o> +)
    (<o> ^problem-space execute-primitive-action)
    (<s> ^current-action <a>)
    (<a> ^arguments <a*1>)
    (<a*1> ^<arg-name> <arg>)
    -->
    (<o> ^<arg-name> <arg> +)
}

sp {top-state*propose*execute-primitive-action*current-action
    (state <s> ^top-state <s>)
    (<s> ^current-action <a>)
    (<a> ^execution-operator <op-name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name <op-name> +)
    (<o> ^problem-space execute-primitive-action +)
}

sp {top-state*elaborate*current-action*learning*action
    (state <s> ^superstate nil)
   -{ (<s> ^interaction <i*1>)
      (<i*1> ^stack <s*1>)
      (<s*1> ^segment <s*2>)
      (<s*2> ^context <c*1>)
      (<c*1> ^type get-location-info)}
    (<s> ^current-action <a>)
    -->
    (<a> ^learning-action true +)
}

sp {top-state*elaborate*current-action*segment
    (state <s> ^top-state <s>)
    (<s> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^current-action <a>)
    -->
    (<s> ^current-action <a> +)
}

sp {execute-action*elaborate*smem-retrieve*subaction
    :o-support
    (state <s> ^name execute-action)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <p*1>)
    (<p*1> ^subaction <sub>)
    (<sub> -^op_name <o*1>)
    -->
    (<s> ^smem-retrieve <ret> +)
    (<ret> ^identifier <sub> +)
    (<ret> ^depth 5 +)
}

sp {execute-action*copy*smem-query*result*action-id
    (state <s> ^name execute-action)
    (<s> ^action-context <a*1>)
    (<a*1> ^action-handle <handle>)
    (<s> ^smem-query <q>)
    (<q> ^cue <c*1>)
    (<c*1> ^handle <handle>)
    (<q> ^result <res>)
    -->
    (<s> ^action-id <res> +)
}

sp {execute-action*elaborate*smem-query*action-id
    (state <s> ^name execute-action)
    (<s> ^action-context <a*1>)
    (<a*1> ^action-handle <handle>)
    -->
    (<s> ^smem-query <q> +)
    (<q> ^cue <cue> +)
    (<q> ^depth 8 +)
    (<cue> ^handle <handle> +)
}

sp {execute-action*propose*action-operator
    (state <s> ^name execute-action)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^action-operator <op>)
    (<op> ^action-type composite)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
}

sp {top-state*apply*execute-action
    (state <s> ^superstate nil)
    (<s> ^operator <o>)
    (<o> ^name execute-action)
    (<o> ^action-operator <op>)
    (<op> ^first true)
    -->
    (<op> ^first true -)
}

sp {execute-action*problem-space*composite*elaborate*propose-driving-operators*false
    (state <s> ^name execute-action)
    (<s> ^action-to-match <a*1>)
    (<a*1> ^action-type composite)
    (<s> ^problem-space <p*1>)
    (<p*1> ^action <a>)
    -->
    (<a> ^propose-driving-operators false +)
}

sp {execute-action*problem-space*primitive*elaborate*propose-driving-operators*true
    (state <s> ^name execute-action)
    (<s> ^action-to-match <a*1>)
    (<a*1> ^action-type primitive)
    (<s> ^problem-space <p*1>)
    (<p*1> ^action <a>)
    -->
    (<a> ^propose-driving-operators true +)
}

sp {execute-action*elaborate*problem-space
    (state <s> ^name execute-action)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^name action +)
    (<ps> ^action <action> +)
    (<ps> ^world <world> +)
    (<ps> ^learning <learn> +)
    (<action> ^type execute +)
    (<action> ^propose-action-operators true +)
    (<world> ^copy-type shallow +)
    (<learn> ^type exploration +)
}

sp {execute-action*elaborate*supertask*from*interaction*stack
    (state <s> ^name execute-action)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^next <n*1>)
    (<n*1> ^purpose <p*1>)
    (<p*1> ^parameters <p*2>)
    (<p*2> ^action-operator <action>)
    -->
    (<s> ^action-context <action> +)
}

sp {execute-action*elaborate*action-operator*superoperator
    (state <s> ^name execute-action)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^action-operator <op>)
    -->
    (<s> ^action-to-match <op> +)
}

sp {problem-space*perception*attend-to-robot*yes*propose*attend-to-scene-change
    (state <s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*3>)
    (<p*3> ^changes <c*1>)
    (<c*1> ^change <change>)
    (<change> ^info <i*1>)
    (<i*1> ^category robot)
    (<s> ^problem-space <p*1>)
    (<p*1> ^perception <p*2>)
    (<p*2> ^attend-to-robot yes)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name attend-to-scene-change +)
    (<o> ^change <change> +)
}

sp {problem-space*perception*attend-to-object*propose*attend-to-scene-change
    (state <s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*3>)
    (<p*3> ^changes <c*1>)
    (<c*1> ^change <change>)
    (<change> ^object-info <o*1>)
    (<o*1> ^object-handle <obj-handle>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^perception <p*2>)
    (<p*2> ^attend-to-object <obj-handle>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name attend-to-scene-change +)
    (<o> ^change <change> +)
}

sp {problem-space*perception*attend-to-all-perception*yes*propose*attend-to-scene-change
    (state <s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*3>)
    (<p*3> ^changes <c*1>)
    (<c*1> ^change <change>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^perception <p*2>)
    (<p*2> ^attend-to-all-perception yes)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name attend-to-scene-change +)
    (<o> ^change <change> +)
}

sp {problem-space*default-operator-copy*yes*copy*until-clause*relation*predicate
    (state <s> ^problem-space <p*1>)
    (<p*1> ^default-operator-copy yes)
    (<s> ^copy-objects-map <c*2>)
    (<s> ^copy-objects-map <c*1>)
    (<s> ^operator <o> +)
    (<o> ^duplicate-of <src-op>)
    (<src-op> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type until-clause)
    (<src-arg> ^predicate <src-pred>)
    (<src-pred> ^type relation)
    (<src-pred> ^2 <src-obj2>)
    (<src-pred> ^handle <pred>)
    (<src-pred> ^1 <src-obj1>)
    (<o> ^<arg-name> <new-arg>)
    (<c*2> ^<src-obj2> <obj2>)
    (<c*1> ^<src-obj1> <obj1>)
    -->
    (<new-arg> ^predicate <new-pred> +)
    (<new-pred> ^type relation +)
    (<new-pred> ^handle <pred> +)
    (<new-pred> ^1 <obj1> +)
    (<new-pred> ^2 <obj2> +)
}

sp {problem-space*default-operator-copy*yes*copy*until-clause*state*predicate
    (state <s> ^problem-space <p*1>)
    (<p*1> ^default-operator-copy yes)
    (<s> ^copy-objects-map <c*1>)
    (<s> ^operator <o> +)
    (<o> ^duplicate-of <src-op>)
    (<src-op> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type until-clause)
    (<src-arg> ^predicate <src-pred>)
    (<src-pred> ^type state)
    (<src-pred> ^handle <pred>)
    (<src-pred> ^1 <src-obj>)
    (<o> ^<arg-name> <new-arg>)
    (<c*1> ^<src-obj> <obj>)
    -->
    (<new-arg> ^predicate <new-pred> +)
    (<new-pred> ^type state +)
    (<new-pred> ^handle <pred> +)
    (<new-pred> ^1 <obj> +)
}

sp {problem-space*default-operator-copy*yes*copy*until-clause*arg
    (state <s> ^problem-space <p*1>)
    (<p*1> ^default-operator-copy yes)
    (<s> ^operator <o> +)
    (<o> ^duplicate-of <src-op>)
    (<src-op> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type until-clause)
    -->
    (<o> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type until-clause +)
}

sp {problem-space*default-operator-copy*yes*copy*predicate*arg
    (state <s> ^problem-space <p*1>)
    (<p*1> ^default-operator-copy yes)
    (<s> ^copy-objects-map <c*1>)
    (<s> ^operator <o> +)
    (<o> ^duplicate-of <src-op>)
    (<src-op> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type predicate)
    (<src-arg> ^2 <src-obj>)
    (<src-arg> ^handle <pred-handle>)
    (<c*1> ^<src-obj> <obj>)
    -->
    (<o> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type predicate +)
    (<new-arg> ^handle <pred-handle> +)
    (<new-arg> ^2 <obj> +)
}

sp {problem-space*default-operator-copy*yes*copy*concept*arg
    (state <s> ^problem-space <p*1>)
    (<p*1> ^default-operator-copy yes)
    (<s> ^operator <o> +)
    (<o> ^duplicate-of <src-op>)
    (<src-op> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type concept)
    (<src-arg> ^handle <concept-handle>)
    -->
    (<o> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type concept +)
    (<new-arg> ^handle <concept-handle> +)
}

sp {problem-space*default-operator-copy*yes*copy*object*not*in*map
    (state <s> ^problem-space <p*1>)
    (<p*1> ^default-operator-copy yes)
    (<s> ^operator <o> +)
    (<o> ^duplicate-of <src-op>)
    (<src-op> ^<arg-name> <src-arg>)
    (<src-arg> ^id <src-obj>)
   -{ (<s> ^copy-objects-map <c*1>)
      (<c*1> ^<src-obj> <s*1>)}
    (<src-arg> ^arg-type { << object location >> <type> })
    -->
    (<o> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type <type> +)
    (<new-arg> ^id <src-obj> +)
}

sp {problem-space*default-operator-copy*yes*copy*object*arg
    (state <s> ^problem-space <p*1>)
    (<p*1> ^default-operator-copy yes)
    (<s> ^copy-objects-map <c*1>)
    (<s> ^operator <o> +)
    (<o> ^duplicate-of <src-op>)
    (<src-op> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type { << object location >> <type> })
    (<src-arg> ^id <src-obj>)
    (<c*1> ^<src-obj> <obj>)
    -->
    (<o> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type <type> +)
    (<new-arg> ^id <obj> +)
}

sp {problem-space*default-operator-copy*yes*elaborate*dont-copy
    (state <s> ^problem-space <ps>)
    (<ps> ^default-operator-copy yes)
    -->
    (<ps> ^dont-copy arg1 +)
    (<ps> ^dont-copy arg2 +)
    (<ps> ^dont-copy until-clause +)
}

sp {problem-space*default-desired-copy*yes*copy*relation*predicate
    (state <s> ^problem-space <p*1>)
    (<p*1> ^default-desired-copy yes)
    (<s> ^copy-objects-map <c*2>)
    (<s> ^copy-objects-map <c*1>)
    (<s> ^desired <des>)
    (<des> ^duplicate-of <d*1>)
    (<d*1> ^predicate <src-pred>)
    (<src-pred> ^type relation)
    (<src-pred> ^2 <src-obj2>)
    (<src-pred> ^handle <pred-handle>)
    (<src-pred> ^1 <src-obj1>)
    (<c*2> ^<src-obj2> <obj2>)
    (<c*1> ^<src-obj1> <obj1>)
    -->
    (<des> ^predicate <new-pred> +)
    (<new-pred> ^type relation +)
    (<new-pred> ^handle <pred-handle> +)
    (<new-pred> ^1 <obj1> +)
    (<new-pred> ^2 <obj2> +)
}

sp {problem-space*default-desired-copy*yes*copy*state*predicate
    (state <s> ^problem-space <p*1>)
    (<p*1> ^default-desired-copy yes)
    (<s> ^copy-objects-map <c*1>)
    (<s> ^desired <des>)
    (<des> ^duplicate-of <d*1>)
    (<d*1> ^predicate <src-pred>)
    (<src-pred> ^type state)
    (<src-pred> ^handle <pred-handle>)
    (<src-pred> ^1 <src-obj>)
    (<c*1> ^<src-obj> <obj>)
    -->
    (<des> ^predicate <new-pred> +)
    (<new-pred> ^type state +)
    (<new-pred> ^handle <pred-handle> +)
    (<new-pred> ^1 <obj> +)
}

sp {problem-space*default-desired-copy*yes*elaborate*dont-copy
    (state <s> ^problem-space <ps>)
    (<ps> ^default-desired-copy yes)
    -->
    (<ps> ^dont-copy predicate +)
}

sp {problem-space*subactions*copy-type*deep*copy*until-clause*relation*predicate
    (state <s> ^copy-subactions-map <c*1>)
    (<s> ^copy-objects-map <c*3>)
    (<s> ^copy-objects-map <c*2>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<c*1> ^<src-sub> <sub>)
    (<src-sub> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type until-clause)
    (<src-arg> ^predicate <src-pred>)
    (<src-pred> ^type relation)
    (<src-pred> ^2 <src-obj2>)
    (<src-pred> ^handle <pred>)
    (<src-pred> ^1 <src-obj1>)
    (<sub> ^<arg-name> <new-arg>)
    (<c*3> ^<src-obj2> <obj2>)
    (<c*2> ^<src-obj1> <obj1>)
    -->
    (<new-arg> ^predicate <new-pred> +)
    (<new-pred> ^type relation +)
    (<new-pred> ^handle <pred> +)
    (<new-pred> ^1 <obj1> +)
    (<new-pred> ^2 <obj2> +)
}

sp {problem-space*subactions*copy-type*deep*copy*until-clause*state*predicate
    (state <s> ^copy-subactions-map <c*1>)
    (<s> ^copy-objects-map <c*2>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<c*1> ^<src-sub> <sub>)
    (<src-sub> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type until-clause)
    (<src-arg> ^predicate <src-pred>)
    (<src-pred> ^type state)
    (<src-pred> ^handle <pred>)
    (<src-pred> ^1 <src-obj>)
    (<sub> ^<arg-name> <new-arg>)
    (<c*2> ^<src-obj> <obj>)
    -->
    (<new-arg> ^predicate <new-pred> +)
    (<new-pred> ^type state +)
    (<new-pred> ^handle <pred> +)
    (<new-pred> ^1 <obj> +)
}

sp {problem-space*subactions*copy-type*deep*copy*until-clause
    (state <s> ^copy-subactions-map <c*1>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<c*1> ^<src-sub> <sub>)
    (<src-sub> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type until-clause)
    -->
    (<sub> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type until-clause +)
}

sp {problem-space*subactions*copy-type*deep*copy*subaction*predicate*arg
    (state <s> ^copy-subactions-map <c*1>)
    (<s> ^copy-objects-map <c*2>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<c*1> ^<src-sub> <sub>)
    (<src-sub> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type predicate)
    (<src-arg> ^2 <src-obj>)
    (<src-arg> ^handle <pred-handle>)
    (<c*2> ^<src-obj> <obj>)
    -->
    (<sub> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type predicate +)
    (<new-arg> ^handle <pred-handle> +)
    (<new-arg> ^2 <obj> +)
}

sp {problem-space*subactions*copy-type*deep*copy*subaction*concept*arg
    (state <s> ^copy-subactions-map <c*1>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<c*1> ^<src-sub> <sub>)
    (<src-sub> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type concept)
    (<src-arg> ^handle <concept-handle>)
    -->
    (<sub> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type concept +)
    (<new-arg> ^handle <concept-handle> +)
}

sp {problem-space*subactions*copy-type*deep*copy*subaction*object*arg
    (state <s> ^copy-subactions-map <c*1>)
    (<s> ^copy-objects-map <c*2>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<c*1> ^<src-sub> <sub>)
    (<src-sub> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type object)
    (<src-arg> ^id <src-obj>)
    (<c*2> ^<src-obj> <obj>)
    -->
    (<sub> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type object +)
    (<new-arg> ^id <obj> +)
}

sp {problem-space*subactions*copy-type*deep*copy*subaction*create*unknown*predicate*object
    (state <s> ^copy-subactions-map <c*1>)
    (<s> ^copy-objects-map <map>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <objs>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<c*1> ^<src-sub> <sub>)
    (<src-sub> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type predicate)
    (<src-arg> ^2 <src-obj>)
   -{ (<map> ^<src-obj> <obj>)
      (<objs> ^object <obj>)}
    (<src-arg> ^handle <pred-handle>)
    -->
    (<map> ^<src-obj> <new-obj> +)
    (<new-obj> ^predicates <new-preds> +)
}

sp {problem-space*subactions*copy-type*deep*copy*subaction*create*unknown*object
    (state <s> ^copy-subactions-map <c*1>)
    (<s> ^copy-objects-map <map>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <objs>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<c*1> ^<src-sub> <sub>)
    (<src-sub> ^<arg-name> <src-arg>)
    (<src-arg> ^arg-type object)
    (<src-arg> ^id <src-obj>)
   -{ (<map> ^<src-obj> <obj>)
      (<objs> ^object <obj>)}
    -->
    (<map> ^<src-obj> <new-obj> +)
    (<new-obj> ^predicates <new-preds> +)
}

sp {problem-space*subactions*copy-type*deep*copy*subaction*name
    (state <s> ^copy-subactions-map <c*1>)
    (<src-sub> ^action-handle <handle>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<c*1> ^<src-sub> <sub>)
    -->
    (<sub> ^action-handle <handle> +)
    (<sub> ^action-type primitive +)
}

sp {problem-space*subactions*copy-type*deep*elaborate*subaction*none
    (<src-sub> ^next none)
    (state <s> ^copy-subactions-map <map>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<map> ^<src-sub> <sub>)
    -->
    (<sub> ^next none +)
}

sp {problem-space*subactions*copy-type*deep*elaborate*subaction
    (state <s> ^copy-subactions-map <map>)
    (<src-sub> ^next { <> none <src-next-sub> })
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <s*1>)
    (<s*1> ^copy-type deep)
    (<map> ^<src-sub> <sub>)
    -->
    (<sub> ^next <new-next-sub> +)
    (<map> ^<src-next-sub> <new-next-sub> +)
}

sp {problem-space*subactions*copy-type*deep*elaborate*next*subaction*none
    (state <s> ^subactions <subactions>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <subs>)
    (<subs> ^copy-type deep)
    (<subs> ^source <s*1>)
    (<s*1> ^next none)
    -->
    (<subactions> ^next none +)
}

sp {problem-space*subactions*copy-type*deep*elaborate*next*subaction
    (state <s> ^copy-subactions-map <map>)
    (<s> ^subactions <subactions>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^subactions <subs>)
    (<subs> ^copy-type deep)
    (<subs> ^source <s*1>)
    (<s*1> ^next { <> none <src-next-sub> })
    -->
    (<subactions> ^next <new-next-sub> +)
    (<map> ^<src-next-sub> <new-next-sub> +)
}

sp {problem-space*subactions*copy-type*deep*elaborate*subactions
    (state <s> ^problem-space <p*1>)
    (<p*1> ^subactions <subs>)
    (<subs> ^copy-type deep)
    (<subs> ^source <source>)
    -->
    (interrupt)
    (<s> ^subactions <new-subactions> +)
    (<s> ^copy-subactions-map <map> +)
}

sp {problem-space*subactions*copy-type*shallow*elaborate*subactions
    (state <s> ^problem-space <p*1>)
    (<p*1> ^subactions <subs>)
    (<subs> ^copy-type shallow)
    (<subs> ^source <source>)
    -->
    (interrupt)
    (<s> ^subactions <source> +)
}

sp {problem-space*subactions*source*elaborate*default
    (state <s> ^superstate <s*1>)
    (<s*1> ^subactions <subactions>)
    (<s> ^problem-space <ps>)
    (<ps> ^subactions <subs>)
    (<subs> -^source { <> <subactions> <s*2> })
    -->
    (<subs> ^source <subactions> +)
}

sp {problem-space*world*copy-type*deep*copy*predicate*instance*size*3
    (state <s> ^copy-predicates-map <c*1>)
    (<s> ^copy-objects-map <c*4>)
    (<s> ^copy-objects-map <c*3>)
    (<s> ^copy-objects-map <c*2>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^predicates <p*2>)
    (<p*2> ^predicate <src-pred>)
    (<src-pred> ^instance <src-instance>)
    (<src-instance> ^2 <src-obj2>)
    (<src-instance> ^3 <src-obj3>)
    (<src-instance> ^1 <src-obj1>)
    (<c*4> ^<src-obj3> <obj3>)
    (<c*3> ^<src-obj2> <obj2>)
    (<c*2> ^<src-obj1> <obj1>)
    (<c*1> ^<src-pred> <pred>)
    -->
    (<pred> ^instance <new-instance> +)
    (<new-instance> ^1 <obj1> +)
    (<new-instance> ^2 <obj2> +)
    (<new-instance> ^3 <obj3> +)
}

sp {problem-space*world*copy-type*deep*copy*predicate*instance*size*2
    (state <s> ^copy-predicates-map <c*1>)
    (<s> ^copy-objects-map <c*3>)
    (<s> ^copy-objects-map <c*2>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^predicates <p*2>)
    (<p*2> ^predicate <src-pred>)
    (<src-pred> ^instance <src-instance>)
    (<src-instance> -^3 <v*1>)
    (<src-instance> ^2 <src-obj2>)
    (<src-instance> ^1 <src-obj1>)
    (<c*3> ^<src-obj2> <obj2>)
    (<c*2> ^<src-obj1> <obj1>)
    (<c*1> ^<src-pred> <pred>)
    -->
    (<pred> ^instance <new-instance> +)
    (<new-instance> ^1 <obj1> +)
    (<new-instance> ^2 <obj2> +)
}

sp {problem-space*world*copy-type*deep*copy*predicate*instance*size*1*set-objects
    (state <s> ^copy-set-map <c*1>)
    (<s> ^copy-objects-map <c*2>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^predicates <p*2>)
    (<p*2> ^predicate <p*3>)
    (<p*3> ^instance <src-instance>)
    (<src-instance> ^1 <src-set>)
    (<c*1> ^<src-instance> <new-instance>)
    (<new-instance> ^1 <set>)
    (<src-set> ^<elem> <src-obj1>)
    (<c*2> ^<src-obj1> <obj1>)
    -->
    (<set> ^<elem> <obj1> +)
}

sp {problem-space*world*copy-type*deep*copy*predicate*instance*size*1*set
    (state <s> ^copy-set-map <csm>)
    (<s> ^copy-predicates-map <c*1>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^predicates <p*2>)
    (<p*2> ^predicate <src-pred>)
    (<src-pred> ^instance <src-instance>)
    (<src-instance> -^2 <v*1>)
    (<src-instance> ^1 <src-set>)
    (<src-set> -^item-type <i*1>)
    (<c*1> ^<src-pred> <pred>)
    -->
    (<pred> ^instance <new-instance> +)
    (<new-instance> ^1 <set> +)
    (<csm> ^<src-instance> <new-instance> +)
}

sp {problem-space*world*elaborate*copy-set-map
    (state <s> ^problem-space <p*1>)
    (<p*1> ^world <w*1>)
    (<w*1> ^copy-type deep)
    -->
    (<s> ^copy-set-map <csm> +)
}

sp {problem-space*world*copy-type*deep*copy*predicate*info
    (state <s> ^copy-predicates-map <c*1>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^predicates <p*2>)
    (<p*2> ^predicate <src-pred>)
    (<src-pred> ^handle <pred-handle>)
    (<c*1> ^<src-pred> <pred>)
    -->
    (<pred> ^handle <pred-handle> +)
}

sp {problem-space*world*copy-type*deep*copy*predicate
    (state <s> ^copy-predicates-map <map>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <preds>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^predicates <p*2>)
    (<p*2> ^predicate <src-pred>)
    -->
    (<preds> ^predicate <new-pred> +)
    (<map> ^<src-pred> <new-pred> +)
}

sp {problem-space*world*copy-type*deep*copy*object*predicates
    (state <s> ^copy-objects-map <c*1>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^objects <o*1>)
    (<c*1> ^<src-obj> <obj>)
    (<obj> ^predicates <preds>)
    (<src-obj> ^predicates <src-preds>)
    (<o*1> ^object <src-obj>)
    (<src-preds> ^<pred-name> <pred-val>)
    -->
    (<preds> ^<pred-name> <pred-val> +)
}

sp {problem-space*world*copy-type*deep*copy*object*handle
    (state <s> ^copy-objects-map <c*1>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^objects <o*1>)
    (<c*1> ^<src-obj> <obj>)
    (<src-obj> ^handle <handle>)
    (<o*1> ^object <src-obj>)
    -->
    (<obj> ^handle <handle> +)
}

sp {problem-space*world*copy-type*deep*copy*object
    (state <s> ^copy-objects-map <map>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <objs>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^objects <o*1>)
    (<o*1> ^object <src-obj>)
    (<src-obj> ^item-type <type>)
    -->
    (<objs> ^object <new-obj> +)
    (<new-obj> ^item-type <type> +)
    (<new-obj> ^predicates <preds> +)
    (<map> ^<src-obj> <new-obj> +)
}

sp {problem-space*world*copy-type*deep*copy*robot*arm
    (state <s> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <arm>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^robot <r*2>)
    (<r*2> ^arm <src-arm>)
    (<src-arm> ^<att-name> <att-val>)
    -->
    (<arm> ^<att-name> <att-val> +)
}

sp {problem-space*world*copy-type*deep*copy*robot*current-location
    (state <s> ^copy-objects-map <c*1>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <robot>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <s*1>)
    (<s*1> ^robot <r*1>)
    (<r*1> ^current-location <src-loc>)
    (<c*1> ^<src-loc> <loc>)
    -->
    (<robot> ^current-location <loc> +)
}

sp {problem-space*world*copy-type*deep*elaborate*world
    (state <s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> ^copy-type deep)
    (<w> ^source <world>)
    -->
    (<s> ^world <new-world> +)
    (<s> ^copy-objects-map <objs-map> +)
    (<s> ^copy-predicates-map <preds-map> +)
    (<new-world> ^objects <objs> +)
    (<new-world> ^predicates <preds> +)
    (<new-world> ^robot <robot> +)
    (<robot> ^arm <arm> +)
}

sp {problem-space*world*copy-type*shallow*elaborate*world
    (state <s> ^problem-space <p*1>)
    (<p*1> ^world <w>)
    (<w> -^copy-type deep)
    (<w> ^copy-type shallow)
    (<w> ^source <world>)
    -->
    (<s> ^world <world> +)
}

sp {problem-space*world*source*elaborate*default
    (state <s> ^superstate <s*1>)
    (<s*1> ^world <world>)
    (<s> ^problem-space <ps>)
    (<ps> ^world <w>)
    (<w> -^source { <> <world> <s*2> })
    -->
    (<w> ^source <world> +)
}

sp {problem-space*learning*elaborate*type*from*superstate
    (state <s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*2>)
    (<p*2> ^learning <l*1>)
    (<l*1> ^type <type>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^learning <learn>)
    (<learn> -^type { <> <type> <t*1> })
    -->
    (<learn> ^type <type> +)
}

sp {chunk*in*selection*space
    (state <s> ^problem-space <p*1>)
    (<p*1> ^learning <l*1>)
    (<l*1> ^use chunking)
    -->
    (force-learn <s>)
}

sp {top-state*apply*any-op*remove*completed*svs*commands
    (state <s> ^top-state <s>)
    (<s> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<s> ^operator <o>)
    (<cmd> ^{ <> extract <> extract_once <type> } <val>)
    (<val> ^status <status>)
    -->
    (<cmd> ^<type> <val> -)
}

sp {top-state*apply*any-op*remove*monitor*filters
    (state <s> ^top-state <s>)
    (<s> ^svs <s*2>)
    (<s*2> ^spatial-scene <scene>)
    (<s> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^extract <filter>)
    (<filter> ^a <a*1>)
    (<a*1> ^id <id>)
   -{ (<scene> ^child <c*1>)
      (<c*1> ^id <id>)}
    (<filter> ^type { << monitor_position monitor_volume >> <t*1> })
    (<s> ^operator <o>)
    -->
    (<cmd> ^extract <filter> -)
}

sp {apply*operator*remove*interrupted*command
    (state <s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    (<s> ^operator <op>)
    (<ol> ^{ << do-control-law face-point >> <cmd-name> } <cmd>)
    (<cmd> ^status interrupted)
    -->
    (<ol> ^<cmd-name> <cmd> -)
}

sp {apply*operator*remove*successful*command
    (state <s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    (<s> ^operator <op>)
    (<ol> ^{ << send-message >> <cmd-name> } <com>)
    (<com> ^status <status>)
    -->
    (<ol> ^<cmd-name> <com> -)
}

sp {DEBUG-RULE*top-state*apply*send-next-message*create*message
    (state <s> ^operator <o>)
    (<o> ^name send-next-message)
    (<o> ^message <msg>)
    (<msg> ^structure <struct>)
    (<s> ^top-state <top>)
    (<top> ^message-list <msgs>)
    (<top> ^interaction <i*1>)
    (<msg> ^next <next>)
    (<i*1> ^status <status>)
    -->
    (<msgs> ^next <msg> -)
    (<msgs> ^next <next> +)
    (<status> ^new-message <struct> +)
}

sp {DEBUG-RULE*top-state*propose*send-next-message
    (state <s> ^superstate nil)
   -{ (<s> ^interaction <i*1>)
      (<i*1> ^status <s*1>)
      (<s*1> ^new-message <n*1>)}
    (<s> ^message-list <m*1>)
    (<m*1> ^next { <> none <next> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name send-next-message +)
    (<o> ^message <next> +)
}

sp {DEBUG-RULE*wait-for-response*propose*send-next-message
    (state <s> ^name wait-for-response)
    (<s> ^top-state <top>)
    (<top> ^message-list <m*1>)
    (<m*1> ^next { <> none <next> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name send-next-message +)
    (<o> ^message <next> +)
}

sp {top-state*elaborate*smem-query*lti-store*result
    :o-support
    (state <s> ^superstate nil)
    (<s> ^lti-store <store>)
    (<store> ^to-get <t*1>)
    (<s> ^smem-query <q>)
    (<t*1> ^handle <handle>)
    (<q> ^cue <c*1>)
    (<c*1> ^handle <handle>)
    (<q> ^result <lti>)
    -->
    (<store> ^<handle> <lti> +)
}

sp {top-state*elaborate*smem-query*lti-store
    (state <s> ^superstate nil)
    (<s> ^lti-store <l*1>)
    (<l*1> ^to-get <t*1>)
    (<t*1> ^handle <handle>)
   -{ (<s> ^lti-store <l*2>)
      (<l*2> ^<handle> <lti>)}
    -->
    (<s> ^smem-query <q> +)
    (<q> ^cue <cue> +)
    (<q> ^depth 8 +)
    (<cue> ^handle <handle> +)
}

sp {top-statel*elaborate*lti-store
    (state <s> ^superstate nil)
    -->
    (<s> ^lti-store <store> +)
    (<store> ^to-get <get> +)
}

sp {propose*retrieve-lti*retrieve-missing-assinger-id-referent-property-lt
    (state <s> ^segment <s*1>)
    (<s*1> ^comprehension-structure <cs>)
    (<cs> ^{ << not-merged-receiver not-merged-assigner >> <a*1> } <v*1>)
    (<v*1> ^lt <l*1>)
    (<l*1> ^referent <r*1>)
    (<r*1> ^property <lt>)
    (<lt> -^<att> <a*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<s> ^operator <op> =)
    (<op> ^name retrieve-lti +)
    (<op> ^lti <lt> +)
}

sp {state*no-change*apply*create-purpose*2
    (state <s> ^action-num 1)
    (<s> ^top-state <s>)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-purpose)
    (<s> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<s> ^world <w*2>)
    (<w*2> ^objects <o*3>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*2>)
    (<o*3> ^object <obj2>)
    (<obj2> ^id 2)
    (<o*2> ^object <obj1>)
    (<obj1> ^id 11)
    -->
    (<c> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type action-command +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <s*1> +)
    (<s*1> ^action-event <a*1> +)
    (<a*1> ^type putdown +)
    (<params> ^object1 <obj1> +)
    (<params> ^object2 <obj2> +)
    (<s> ^action-num 1 -)
    (<s> ^action-num 2 +)
}

sp {top-state*prefer*smem*over*execute-action
    (state <s> ^superstate nil)
    (<s> ^operator <o2> +)
    (<o2> ^name execute-go-to-location1)
    (<s> ^operator <o1> +)
    (<o1> ^name smem-query)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {top-state*prefer*others*over*create-purpose
    (state <s> ^top-state <s>)
    (<s> ^operator <o2> +)
    (<o2> ^name create-purpose)
    (<s> ^operator <o1> +)
    (<o1> ^name { <> create-purpose <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {top-state*mobile*elaborate*world*unknown-objects
    (state <s> ^world-usage external)
    (<s> ^superstate nil)
    (<s> ^agent-params <a*1>)
    (<a*1> ^domain mobile)
    (<s> ^world <world>)
    (<world> ^objects <objs>)
    (<world> ^predicates <p*1>)
    (<p*1> ^predicate <in-pred>)
    (<in-pred> ^handle in1)
    (<objs> ^object <kitchen>)
    (<kitchen> ^handle kitchen1)
    -->
    (<world> ^unknown-objects <unknowns> +)
    (<unknowns> ^object <soda1> +)
    (<soda1> ^handle soda1 +)
    (<soda1> ^item-type object +)
    (<soda1> ^predicates <soda1-preds> +)
    (<soda1-preds> ^category object +)
    (<soda1-preds> ^shape soda1 +)
    (<in-pred> ^instance <soda1-loc> +)
    (<soda1-loc> ^1 <soda1> +)
    (<soda1-loc> ^2 <kitchen> +)
}

sp {top-state*elaborate*simulated*mobile*objects
    (state <s> ^world-usage external)
    (<s> ^superstate nil)
    (<s> ^agent-params <a*1>)
    (<a*1> ^domain mobile)
    (<s> ^world <world>)
    (<world> ^objects <objs>)
    (<world> ^predicates <p*1>)
    (<p*1> ^predicate <in-pred>)
    (<in-pred> ^handle in1)
    -->
    (<objs> ^object <osoar-office> +)
    (<objs> ^object <oapril-office> +)
    (<objs> ^object <omain-office> +)
    (<objs> ^object <ocopy-room> +)
    (<ocopy-room> ^handle copy-room1 +)
    (<ocopy-room> ^item-type location +)
    (<ocopy-room> ^predicates <preds002> +)
    (<ocopy-room> ^english-description |copy room| +)
    (<ocopy-room> ^waypoint wp101 +)
    (<preds002> ^category location +)
    (<preds002> ^name copy1 +)
    (<preds002> ^spatial-shape room1 +)
    (<osoar-office> ^handle soar-office1 +)
    (<osoar-office> ^item-type location +)
    (<osoar-office> ^predicates <preds007> +)
    (<osoar-office> ^english-description |soar office| +)
    (<preds007> ^category location +)
    (<preds007> ^name soar1 +)
    (<preds007> ^spatial-shape room1 +)
    (<oapril-office> ^handle april-office1 +)
    (<oapril-office> ^item-type location +)
    (<oapril-office> ^predicates <preds008> +)
    (<oapril-office> ^english-description |april office| +)
    (<preds008> ^category location +)
    (<preds008> ^name april1 +)
    (<preds008> ^spatial-shape room1 +)
    (<omain-office> ^handle main-office1 +)
    (<omain-office> ^item-type location +)
    (<omain-office> ^predicates <preds009> +)
    (<omain-office> ^english-description |main office| +)
    (<omain-office> ^waypoint wp15 +)
    (<preds009> ^category location +)
    (<preds009> ^name main1 +)
    (<preds009> ^spatial-shape room1 +)
}

sp {top-state*apply*init-agent*create*world-state*mobile
    (state <s> ^world-usage external)
    (<s> ^top-state <s>)
    (<s> ^agent-params <a*1>)
    (<a*1> ^domain mobile)
    (<s> ^operator <o*1>)
    (<o*1> ^name init-agent)
    -->
    (<s> ^world <w> +)
    (<w> ^objects <objs> +)
    (<w> ^predicates <preds> +)
    (<w> ^robot <rob> +)
    (<rob> ^arm <arm> +)
    (<rob> ^handle rosie +)
    (<rob> ^predicates <p*1> +)
    (<p*1> ^name rosie +)
    (<rob> ^moving-state stopped +)
    (<arm> ^state internal +)
}

sp {top-state*apply*init-agent*create*world-state*arm
    (state <s> ^world-usage external)
    (<s> ^top-state <s>)
    (<s> ^agent-params <a*1>)
    (<a*1> ^domain arm)
    (<s> ^operator <o*1>)
    (<o*1> ^name init-agent)
    -->
    (<s> ^world <w> +)
    (<w> ^objects <objs> +)
    (<w> ^predicates <preds> +)
    (<w> ^robot <rob> +)
    (<rob> ^arm <arm> +)
    (<rob> ^handle rosie +)
    (<rob> ^predicates <p*1> +)
    (<p*1> ^name rosie +)
    (<arm> ^state external +)
}

sp {top-state*world*robot*elaborate*arm*moving
    (state <s> ^top-state <s>)
    (<s> ^world <w*2>)
    (<w*2> ^robot <r*1>)
    (<r*1> ^arm <arm>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <p*1>)
    (<p*1> ^arm-status moving)
    -->
    (<arm> ^moving <obj> +)
}

sp {top-state*world*robot*elaborate*arm*grabbed
    (state <s> ^top-state <s>)
    (<s> ^world <w*2>)
    (<w*2> ^robot <r*1>)
    (<r*1> ^arm <arm>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*1> ^object <obj>)
    (<obj> ^predicates <p*1>)
    (<p*1> ^arm-status grabbed)
    -->
    (<arm> ^grabbed <obj> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^object-test <test>)
    (<test> ^x <x*1>)
    (<pred-info> ^predicate-handle <pred-handle>)
    (<s> ^world <w*2>)
    (<w*2> ^predicates <p*3>)
    (<p*3> ^predicate <pred>)
    (<pred> ^handle <pred-handle>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<x*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*2> ^params <p*4>)
    (<p*4> ^b <id2>)
    (<o*1> ^object <obj2>)
    (<obj2> ^svs-obj <s*1>)
    (<s*1> ^id <id2>)
    (<test> ^object { <> <obj2> <obj1> })
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <obj1> +)
    (<args> ^2 <obj2> +)
}

sp {top-state*world*predicates*elaborate*predicate-monitor*object-test*relations
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^smem-info <s*1>)
    (<s*1> ^type relation)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*1> ^object <obj>)
    -->
    (<pred-info> ^object-test <test> +)
    (<test> ^object <obj> +)
}

sp {top-state*world*predicates*elaborate*predicate
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle <pred-handle>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <preds>)
    -->
    (<preds> ^predicate <pred> +)
    (<pred> ^handle <pred-handle> +)
}

sp {top-state*world*object*predicates*elaborate*from*source
    (state <s> ^world-usage external)
    (<s> ^superstate nil)
    (<s> ^agent-params <a*1>)
    (<a*1> ^domain mobile)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*1> ^object <obj>)
    (<obj> ^source <s*1>)
    (<obj> ^predicates <preds>)
    (<s*1> ^predicates <p*1>)
    (<p*1> ^<att> <val>)
    -->
    (<preds> ^<att> <val> +)
}

sp {top-state*world*object*predicates*elaborate*not*visible
    (state <s> ^world-usage external)
    (<s> ^superstate nil)
    (<s> ^agent-params <a*1>)
    (<a*1> ^domain mobile)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*1> ^object <o*2>)
    (<o*2> ^predicates <preds>)
    (<preds> -^visible true)
    -->
    (<preds> ^visible false +)
}

sp {top-state*world*object*predicates*elaborate*visible*in*location
    (state <s> ^world-usage external)
    (<s> ^superstate nil)
    (<s> ^agent-params <a*1>)
    (<a*1> ^domain mobile)
    (<s> ^world <world>)
    (<world> ^objects <o*1>)
    (<world> ^robot <r*1>)
    (<r*1> ^current-location <cur-loc>)
    (<world> ^predicates <p*1>)
    (<p*1> ^predicate <in-pred>)
    (<in-pred> ^handle in1)
    (<in-pred> ^instance <i>)
    (<i> ^2 <cur-loc>)
    (<i> ^1 <obj>)
    (<obj> ^predicates <preds>)
    (<o*1> ^object <obj>)
    -->
    (<preds> ^visible true +)
}

sp {top-state*world*object*predicates*elaborate*current-location*visible*true
    (state <s> ^world-usage external)
    (<s> ^superstate nil)
    (<s> ^agent-params <a*1>)
    (<a*1> ^domain mobile)
    (<s> ^world <world>)
    (<world> ^robot <r*1>)
    (<r*1> ^current-location <cur-loc>)
    (<cur-loc> ^predicates <preds>)
    -->
    (<preds> ^visible true +)
}

sp {top-state*world*object*predicates*elaborate*arm-status*default*not-grabbed
    (state <s> ^superstate nil)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*1> ^object <o*2>)
    (<o*2> ^predicates <preds>)
    (<preds> -^arm-status { << moving grabbed >> <a*1> })
    -->
    (<preds> ^arm-status not-grabbed +)
}

sp {top-state*world*object*predicates*elaborate*indicated*pointed
    (state <s> ^top-state <s>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^pointed-object <handle>)
    (<o*1> ^object <obj>)
    (<obj> ^handle <handle>)
    (<obj> ^predicates <preds>)
    -->
    (<preds> ^indicated pointed +)
}

sp {top-state*world*object*predicates*elaborate*property*current
    (state <s> ^top-state <s>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^current-location <loc>)
    (<loc> ^predicates <preds>)
    -->
    (<preds> ^property current +)
}

sp {top-state*world*object*predicates*elaborate*category*location
    (<s> -^world-usage internal)
    (state <s> ^top-state <s>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*1> ^object <o*2>)
    (<o*2> ^predicates <preds>)
    (<preds> ^name <name>)
    -->
    (<preds> ^category location +)
}

sp {top-state*world*object*predicates*elaborate*category*block
    (<s> -^world-usage internal)
    (state <s> ^top-state <s>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*1> ^object <o*2>)
    (<o*2> ^predicates <preds>)
    (<preds> -^category location)
    (<preds> -^name <name>)
    -->
    (<preds> ^category block +)
}

sp {top-state*world*elaborate*object*from*perception-monitor
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^object-handle <obj-handle>)
    (<obj-info> ^belief-obj <bel-obj>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <objs>)
    -->
    (<objs> ^object <obj> +)
    (<obj> ^handle <obj-handle> +)
    (<obj> ^item-type object +)
    (<obj> ^real true +)
    (<obj> ^svs-obj <bel-obj> +)
    (<obj> ^predicates <preds> +)
    (<obj-info> ^wm-obj <obj> +)
    (<preds> ^visible true +)
}

sp {top-state*perception-monitor*elaborate*change*info
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^change-info <c*2>)
    (<c*2> ^change <info>)
    (<perc-mon> ^changes <c*1>)
    (<c*1> ^change <change>)
    (<info> ^type <change-type>)
    (<change> ^type <change-type>)
    -->
    (<change> ^info <info> +)
}

sp {top-state*apply*init-agent*create*perception-monitor*internal
    (state <s> ^world-usage internal)
    (<s> ^top-state <s>)
    (<s> ^operator <o*1>)
    (<o*1> ^name init-agent)
    -->
    (<s> ^perception-monitor <mon> +)
    (<mon> ^object-monitor <obj-mon> +)
    (<mon> ^predicate-monitor <pred-mon> +)
}

sp {top-state*apply*init-agent*create*perception-monitor
    (state <s> ^world-usage external)
    (<s> ^top-state <s>)
    (<s> ^operator <o*1>)
    (<o*1> ^name init-agent)
    -->
    (<s> ^perception-monitor <mon> +)
    (<mon> ^change-info <info> +)
    (<mon> ^changes <changes> +)
    (<mon> ^object-monitor <obj-mon> +)
    (<mon> ^predicate-monitor <pred-mon> +)
}

sp {top-state*perception-monitor*predicate-monitor*copy*smem-query*result*as*smem-info
    :o-support
    (state <s> ^superstate nil)
    (<s> ^smem-query <query>)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <info>)
    (<info> ^predicate-handle <pred-handle>)
    (<query> ^cue <c*1>)
    (<c*1> ^handle <pred-handle>)
    (<query> ^result <res>)
    -->
    (<info> ^smem-info <res> +)
}

sp {top-state*perception-monitor*predicate-monitor*elaborate*smem-query*predicate
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <info>)
    (<info> -^smem-info <s*1>)
    (<info> ^predicate-handle <pred-handle>)
    -->
    (<s> ^smem-query <query> +)
    (<query> ^cue <cue> +)
    (<query> ^depth 2 +)
    (<cue> ^handle <pred-handle> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded8
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p1>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<s> ^world <w>)
    (<w> ^objects <o1>)
    (<w> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle linear)
    (<o1> ^object <obj1>)
    (<obj1> ^handle 7)
    (<o1> ^object <obj2>)
    (<obj2> ^handle 5)
    (<o1> ^object <obj3>)
    (<obj3> ^handle 3)
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <set> +)
    (<set> ^object <obj1> +)
    (<set> ^object <obj2> +)
    (<set> ^object <obj3> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded7
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p1>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<s> ^world <w>)
    (<w> ^objects <o1>)
    (<w> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle linear)
    (<o1> ^object <obj1>)
    (<obj1> ^handle 1)
    (<o1> ^object <obj2>)
    (<obj2> ^handle 5)
    (<o1> ^object <obj3>)
    (<obj3> ^handle 9)
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <set> +)
    (<set> ^object <obj1> +)
    (<set> ^object <obj2> +)
    (<set> ^object <obj3> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded6
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p1>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<s> ^world <w>)
    (<w> ^objects <o1>)
    (<w> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle linear)
    (<o1> ^object <obj1>)
    (<obj1> ^handle 3)
    (<o1> ^object <obj2>)
    (<obj2> ^handle 6)
    (<o1> ^object <obj3>)
    (<obj3> ^handle 9)
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <set> +)
    (<set> ^object <obj1> +)
    (<set> ^object <obj2> +)
    (<set> ^object <obj3> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded5
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p1>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<s> ^world <w>)
    (<w> ^objects <o1>)
    (<w> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle linear)
    (<o1> ^object <obj1>)
    (<obj1> ^handle 2)
    (<o1> ^object <obj2>)
    (<obj2> ^handle 5)
    (<o1> ^object <obj3>)
    (<obj3> ^handle 8)
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <set> +)
    (<set> ^object <obj1> +)
    (<set> ^object <obj2> +)
    (<set> ^object <obj3> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded4
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p1>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<s> ^world <w>)
    (<w> ^objects <o1>)
    (<w> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle linear)
    (<o1> ^object <obj1>)
    (<obj1> ^handle 1)
    (<o1> ^object <obj2>)
    (<obj2> ^handle 4)
    (<o1> ^object <obj3>)
    (<obj3> ^handle 7)
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <set> +)
    (<set> ^object <obj1> +)
    (<set> ^object <obj2> +)
    (<set> ^object <obj3> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded3
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p1>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<s> ^world <w>)
    (<w> ^objects <o1>)
    (<w> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle linear)
    (<o1> ^object <obj1>)
    (<obj1> ^handle 7)
    (<o1> ^object <obj2>)
    (<obj2> ^handle 8)
    (<o1> ^object <obj3>)
    (<obj3> ^handle 9)
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <set> +)
    (<set> ^object <obj1> +)
    (<set> ^object <obj2> +)
    (<set> ^object <obj3> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded2
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p1>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<s> ^world <w>)
    (<w> ^objects <o1>)
    (<w> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle linear)
    (<o1> ^object <obj1>)
    (<obj1> ^handle 4)
    (<o1> ^object <obj2>)
    (<obj2> ^handle 5)
    (<o1> ^object <obj3>)
    (<obj3> ^handle 6)
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <set> +)
    (<set> ^object <obj1> +)
    (<set> ^object <obj2> +)
    (<set> ^object <obj3> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*linear*hardcoded1
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p1>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle linear)
    (<s> ^world <w>)
    (<w> ^objects <o1>)
    (<w> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle linear)
    (<o1> ^object <obj1>)
    (<obj1> ^handle 1)
    (<o1> ^object <obj2>)
    (<obj2> ^handle 2)
    (<o1> ^object <obj3>)
    (<obj3> ^handle 3)
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <set> +)
    (<set> ^object <obj1> +)
    (<set> ^object <obj2> +)
    (<set> ^object <obj3> +)
}

sp {top-state*world*predicates*elaborate*instance*from*predicate-monitor*larger-than
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p1>)
    (<p1> ^predicate-monitor <p2>)
    (<p2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle larger-than1)
    (<s> ^world <w>)
    (<w> ^objects <o1>)
    (<w> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle larger-than1)
    (<s> ^svs <s*1>)
    (<s*1> ^command <c*1>)
    (<c*1> ^extract <e>)
    (<e> ^type larger_select)
    (<e> ^result <r1>)
    (<r1> ^record <r2>)
    (<r2> ^params <p4>)
    (<p4> ^b <id2>)
    (<p4> ^a <id1>)
    (<o1> ^object <obj1>)
    (<obj1> ^svs-obj <s*2>)
    (<s*2> ^id <id1>)
    (<o1> ^object <obj2>)
    (<obj2> ^svs-obj <s*3>)
    (<s*3> ^id <id2>)
    -->
    (<pred> ^instance <args> +)
    (<args> ^1 <obj1> +)
    (<args> ^2 <obj2> +)
}

sp {top-state*perception-monitor*predicate-monitor*larger-than
    (state <s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^predicate-handle larger-than1)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^svs <s*2>)
    (<s*2> ^command <cmd>)
    (<o*1> ^object <o*2>)
    (<o*2> ^svs-obj <s*1>)
    (<s*1> ^id <id1>)
    -->
    (<cmd> ^extract <filter> +)
    (<filter> ^mark test +)
    (<filter> ^a <belief-nodes> +)
    (<filter> ^b <belief-nodes2> +)
    (<filter> ^type larger_select +)
    (<belief-nodes> ^type node +)
    (<belief-nodes> ^id <id1> +)
    (<belief-nodes2> ^type all_nodes +)
}

sp {top-state*perception-monitor*predicate-monitor*object-test*put*on*svs*command
    (state <s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^object-test <test>)
    (<test> ^x <filter>)
    (<s> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract <filter> +)
    (<filter> ^mark test +)
}

sp {top-state*perception-monitor*predicate-monitor*object-test*connect*z*belief-nodes
    (state <s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^object-test <test>)
    (<test> ^z <z>)
    -->
    (<z> ^b <belief-nodes> +)
    (<belief-nodes> ^type tag_select +)
    (<belief-nodes> ^a <a*1> +)
    (<a*1> ^type all_nodes +)
    (<belief-nodes> ^tag_name object-source +)
    (<belief-nodes> ^tag_value belief +)
}

sp {top-state*perception-monitor*predicate-monitor*object-test*connect*yz
    (state <s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^object-test <test>)
    (<test> ^z <z>)
    (<test> ^y <y>)
    -->
    (<y> ^b <z> +)
}

sp {top-state*perception-monitor*predicate-monitor*object-test*connect*xy
    (state <s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^object-test <test>)
    (<test> ^y <y>)
    (<test> ^x <x>)
    -->
    (<x> ^b <y> +)
}

sp {top-state*perception-monitor*predicate-monitor*object-test*copy*top*bottom
    (state <s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^object-test <test>)
    (<pred-info> ^smem-info <s*1>)
    (<s*1> ^relation <r>)
    (<r> ^top <top>)
    (<r> ^bottom <bot>)
    (<r> ^axis <axis>)
    (<test> ^<axis> <axis-filter>)
    -->
    (<axis-filter> ^bottom <bot> +)
    (<axis-filter> ^top <top> +)
}

sp {top-state*perception-monitor*predicate-monitor*object-test*copy*relation*types
    (state <s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^object-test <test>)
    (<pred-info> ^smem-info <s*1>)
    (<s*1> ^relation <r>)
    (<r> ^axis <axis>)
    (<r> ^type <type>)
    (<test> ^<axis> <axis-filter>)
    -->
    (<axis-filter> ^<type> true +)
}

sp {top-state*perception-monitor*predicate-monitor*object-test*elaborate*axis*filters
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <p*2>)
    (<p*2> ^predicate-info <pred-info>)
    (<pred-info> ^object-test <test>)
    (<pred-info> ^smem-info <s*1>)
    (<s*1> ^relation <r>)
    (<r> ^axis <axis>)
    (<test> ^object <o*1>)
    (<o*1> ^svs-obj <s*2>)
    (<s*2> ^id <id>)
    -->
    (<test> ^<axis> <axis-filter> +)
    (<axis-filter> ^type axis_relation_select +)
    (<axis-filter> ^axis <axis> +)
    (<axis-filter> ^a <a> +)
    (<a> ^type node +)
    (<a> ^id <id> +)
    (<a> ^base a +)
}

sp {top-state*perception-monitor*robot-monitor*elaborate*change*new-waypoint
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^changes <changes>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <robot>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^self <s*1>)
    (<s*1> ^current-waypoint <c*1>)
    (<c*1> ^waypoint-handle <wp-handle>)
   -{ (<robot> ^current-waypoint <c*2>)
      (<c*2> ^handle <wp-handle>)}
    -->
    (<changes> ^change <change> +)
    (<change> ^type changed-waypoint +)
    (<change> ^new-waypoint-handle <wp-handle> +)
}

sp {top-state*perception-monitor*change-info*elaborate*changed-waypoint
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <changed-waypoint> +)
    (<changed-waypoint> ^type changed-waypoint +)
    (<changed-waypoint> ^category robot +)
    (<changed-waypoint> ^op-name attend-to-changed-waypoint +)
}

sp {top-state*perception-monitor*robot-monitor*elaborate*change*changed-robot-status
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^changes <changes>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^moving-state <cur-state>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^self <self>)
    (<self> ^moving-state { <> <cur-state> <new-state> })
    -->
    (<changes> ^change <change> +)
    (<change> ^type changed-robot-status +)
    (<change> ^self-info <self> +)
}

sp {top-state*perception-monitor*change-info*elaborate*changed-robot-status
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <changed-robot-status> +)
    (<changed-robot-status> ^type changed-robot-status +)
    (<changed-robot-status> ^category robot +)
    (<changed-robot-status> ^op-name attend-to-changed-robot-status +)
}

sp {top-state*perception-monitor*robot-monitor*elaborate*change*changed-arm-status
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^changes <changes>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <arm>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^self <self>)
    (<self> ^action <cur-action>)
    (<arm> -^action <cur-action>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type changed-arm-status +)
    (<change> ^self-info <self> +)
}

sp {top-state*perception-monitor*change-info*elaborate*changed-arm-status
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <changed-arm-status> +)
    (<changed-arm-status> ^type changed-arm-status +)
    (<changed-arm-status> ^category robot +)
    (<changed-arm-status> ^op-name attend-to-changed-arm-status +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*changes*changed-object-predicate*visible*true
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <d*1>)
    (<d*1> ^is-stale false)
    (<obj-info> ^wm-obj <w*1>)
    (<w*1> ^predicates <preds>)
    (<preds> ^visible false)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type changed-object-predicate +)
    (<change> ^object-info <obj-info> +)
    (<change> ^property-handle visible +)
    (<change> ^predicate-handle true +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*changes*changed-object-predicate*visible*false
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <d*1>)
    (<d*1> ^is-stale true)
    (<obj-info> ^wm-obj <w*1>)
    (<w*1> ^predicates <preds>)
    (<preds> ^visible true)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type changed-object-predicate +)
    (<change> ^object-info <obj-info> +)
    (<change> ^property-handle visible +)
    (<change> ^predicate-handle false +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*changes*changed-object-predicate*non-visual
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^properties <p*1>)
    (<p*1> ^property-info <prop-info>)
    (<prop-info> -^type visual)
    (<obj-info> ^wm-obj <w*1>)
    (<prop-info> ^property-handle <prop-handle>)
    (<prop-info> ^predicate-handle <pred-handle>)
    (<w*1> ^predicates <wm-preds>)
    (<wm-preds> -^<prop-handle> <pred-handle>)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type changed-object-predicate +)
    (<change> ^object-info <obj-info> +)
    (<change> ^property-handle <prop-handle> +)
    (<change> ^predicate-handle <pred-handle> +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*changes*changed-object-predicate*visual
    (state <s> ^top-state <s>)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <d*1>)
    (<d*1> ^is-occluded false)
    (<obj-info> ^properties <p*1>)
    (<p*1> ^property-info <prop-info>)
    (<prop-info> ^type visual)
    (<obj-info> ^wm-obj <w*1>)
    (<prop-info> ^property-handle <prop-handle>)
    (<prop-info> ^predicate-handle <pred-handle>)
    (<w*1> ^predicates <wm-preds>)
    (<wm-preds> -^<prop-handle> <pred-handle>)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type changed-object-predicate +)
    (<change> ^object-info <obj-info> +)
    (<change> ^property-handle <prop-handle> +)
    (<change> ^predicate-handle <pred-handle> +)
}

sp {top-state*perception-monitor*elaborate*change-info*changed-object-predicate
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <changed-obj-pred> +)
    (<changed-obj-pred> ^type changed-object-predicate +)
    (<changed-obj-pred> ^category object +)
    (<changed-obj-pred> ^op-name attend-to-changed-object-predicate +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*stale-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <diffs>)
    (<diffs> ^is-stale true)
    (<diffs> ^is-occluded false)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type stale-object +)
    (<change> ^object-info <obj-info> +)
}

sp {top-state*perception-monitor*elaborate*change-info*stale-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <stale-obj> +)
    (<stale-obj> ^type stale-object +)
    (<stale-obj> ^category object +)
    (<stale-obj> ^op-name attend-to-stale-object +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*recheck-occlusion
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <diffs>)
    (<diffs> ^occlusion-time-expired true)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type recheck-occlusion +)
    (<change> ^object-info <obj-info> +)
}

sp {top-state*perception-monitor*elaborate*change-info*recheck-occlusion
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <recheck-occlusion> +)
    (<recheck-occlusion> ^type recheck-occlusion +)
    (<recheck-occlusion> ^category object +)
    (<recheck-occlusion> ^op-name check-for-occlusion +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*grown-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <diffs>)
    (<diffs> -^growth-wait true)
    (<diffs> ^has-grown true)
    (<perc-mon> ^changes <changes>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^self <s*1>)
    (<s*1> ^action wait)
    -->
    (<changes> ^change <change> +)
    (<change> ^type grown-object +)
    (<change> ^object-info <obj-info> +)
}

sp {top-state*perception-monitor*elaborate*change-info*grown-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <grown-obj> +)
    (<grown-obj> ^type grown-object +)
    (<grown-obj> ^category object +)
    (<grown-obj> ^op-name evaluate-grown-object +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*shurnken-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <diffs>)
    (<diffs> ^has-shrunk true)
    (<diffs> ^is-occluded false)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type shrunken-object +)
    (<change> ^object-info <obj-info> +)
}

sp {top-state*perception-monitor*elaborate*change-info*shrunken-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <shrunk-obj> +)
    (<shrunk-obj> ^type shrunken-object +)
    (<shrunk-obj> ^category object +)
    (<shrunk-obj> ^op-name evaluate-shrunken-object +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*moved-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <diffs>)
    (<diffs> ^has-moved true)
    (<diffs> ^is-occluded false)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type moved-object +)
    (<change> ^object-info <obj-info> +)
}

sp {top-state*perception-monitor*elaborate*change-info*moved-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <moved-object> +)
    (<moved-object> ^type moved-object +)
    (<moved-object> ^category object +)
    (<moved-object> ^op-name check-for-occlusion +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*new-stable-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^new-object-info <obj-info>)
    (<obj-info> ^status unidentified)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type new-stable-object +)
    (<change> ^object-info <obj-info> +)
}

sp {top-state*perception-monitor*elaborate*change-info*new-stable-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <new-stable-obj> +)
    (<new-stable-obj> ^type new-stable-object +)
    (<new-stable-obj> ^category object +)
    (<new-stable-obj> ^op-name evaluate-new-object +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*evaluate-new-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^new-object-info <obj-info>)
    (<obj-info> ^stability-timer-satisfied true)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type stability-timer-satisfied +)
    (<change> ^object-info <obj-info> +)
}

sp {top-state*perception-monitor*elaborate*change-info*stability-timer-satisfied
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <stability-timer-satisfied> +)
    (<stability-timer-satisfied> ^type stability-timer-satisfied +)
    (<stability-timer-satisfied> ^category object +)
    (<stability-timer-satisfied> ^op-name evaluate-stability +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*new-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^new-object-info <obj-info>)
    (<obj-info> -^status <s*1>)
    (<obj-info> ^perception-obj <perc-obj>)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type new-object +)
    (<change> ^object-info <obj-info> +)
}

sp {top-state*perception-monitor*elaborate*change-info*new-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <new-obj> +)
    (<new-obj> ^type new-object +)
    (<new-obj> ^category object +)
    (<new-obj> ^op-name attend-to-new-object +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*delete-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^mark-for-deletion true)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type delete-object +)
    (<change> ^object-info <obj-info> +)
}

sp {top-state*perception-monitor*elaborate*change-info*delete-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <del-obj> +)
    (<del-obj> ^type delete-object +)
    (<del-obj> ^category object +)
    (<del-obj> ^op-name delete-object +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*change*update-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <perc-mon>)
    (<perc-mon> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^mark-for-copying true)
    (<obj-info> ^perception-obj <p*1>)
    (<perc-mon> ^changes <changes>)
    -->
    (<changes> ^change <change> +)
    (<change> ^type update-object +)
    (<change> ^object-info <obj-info> +)
}

sp {top-state*perception-monitor*elaborate*change-info*update-object
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^change-info <info>)
    -->
    (<info> ^change <update-obj> +)
    (<update-obj> ^type update-object +)
    (<update-obj> ^category object +)
    (<update-obj> ^op-name update-belief-object +)
}

sp {check-for-occlusion*apply*occlusion-command*is-occluded*false*remove*internal-link
    (state <s> ^object-occluded false)
    (<s> ^report-to-top-state true)
    (<s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^object-info <obj-info>)
    (<obj-info> ^internal-link <handle2>)
    (<obj-info> ^object-handle { <> <handle2> <handle> })
    -->
    (<obj-info> ^internal-link <handle2> -)
}

sp {top-state*perception-monitor*object-monitor*elaborate*occlusion-time-expired*internal-link
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <diffs>)
    (<diffs> -^recheck-occlusion-time <r*1>)
    (<obj-info> ^internal-link <handle2>)
    (<obj-info> ^object-handle { <> <handle2> <handle> })
    -->
    (<diffs> ^occlusion-time-expired true +)
}

sp {anystate*reject*attend-to-scene-change*property*changes*internally-linked
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c>)
    (<c> ^object-info <obj-info>)
    (<obj-info> ^internal-link <handle2>)
    (<obj-info> ^object-handle <handle>)
    (<c> ^type { << changed-object-status changed-object-predicate >> <type> })
    -->
    (<s> ^operator <o> -)
    (<c> ^rejected true +)
}

sp {anystate*reject*attend-to-scene-change*pos*size*changes*internally-linked
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c>)
    (<c> ^object-info <obj-info>)
    (<obj-info> ^internal-link <handle2>)
    (<obj-info> ^object-handle <handle>)
    (<c> ^type { << grown-object shrunken-object moved-object >> <type> })
    -->
    (<s> ^operator <o> -)
    (<c> ^rejected true +)
}

sp {anystate*reject*attend-to-scene-change*stale-object*internally-linked
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c>)
    (<c> ^type stale-object)
    (<c> ^object-info <obj-info>)
    (<obj-info> ^internal-link <handle2>)
    (<obj-info> ^object-handle { <> <handle2> <handle> })
    -->
    (<s> ^operator <o> -)
    (<c> ^rejected true +)
}

sp {top-state*perception-monitor*object-monitor*remove*internal-link*stale*object
    :o-support
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <mon>)
    (<mon> ^object-info <src>)
    (<src> -^perception-obj <p*2>)
    (<src> ^object-handle <handle2>)
    (<mon> ^object-info <dest>)
    (<dest> ^internal-link <handle2>)
    (<dest> ^object-handle { <> <handle2> <handle> })
    -->
    (<dest> ^internal-link <handle2> -)
}

sp {top-state*perception-monitor*object-monitor*remove*internal-link*not*stale*remove*occlusion
    :o-support
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <diffs>)
    (<diffs> ^is-occluded true)
    (<obj-info> ^internal-link <handle2>)
    (<diffs> ^recheck-occlusion-time <t>)
    (<obj-info> ^perception-obj <p*2>)
    (<obj-info> ^perception-id <percId>)
    (<p*2> ^id <percId>)
    (<obj-info> ^object-handle { <> <handle2> <handle> })
    -->
    (<diffs> ^is-occluded true -)
    (<diffs> ^recheck-occlusion-time <t> -)
}

sp {top-state*perception-monitor*object-monitor*remove*internal-link*not*stale
    :o-support
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^internal-link <handle2>)
    (<obj-info> ^perception-obj <p*2>)
    (<obj-info> ^perception-id <percId>)
    (<p*2> ^id <percId>)
    (<obj-info> ^object-handle { <> <handle2> <handle> })
    -->
    (<obj-info> ^internal-link <handle2> -)
}

sp {top-state*perception-monitor*object-monitor*object-info*elaborate*internal-link
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <m>)
    (<m> ^object-info <other-info>)
    (<other-info> ^internal-link <handle>)
    (<m> ^object-info { <> <other-info> <obj-info> })
    (<obj-info> ^object-handle <handle>)
    -->
    (<obj-info> ^internal-link <handle> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*differences*elaborate*growth-wait*true
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> ^has-grown true)
    (<diffs> ^recheck-growth-at <r*1>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^time <t*1>)
    (<t*1> ^seconds { < <r*1> <t> })
    -->
    (<diffs> ^growth-wait true +)
}

sp {top-state*perception-monitor*object-monitor*object-info*differences*elaborate*has-grown
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> ^vol-diff <v*1>)
    (<s> ^agent-params <a*1>)
    (<a*1> ^vol-high-diff-threshold { < <v*1> <high> })
    -->
    (<diffs> ^has-grown true +)
}

sp {top-state*perception-monitor*object-monitor*object-info*differences*elaborate*has-shrunk
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> ^vol-diff <v*1>)
    (<s> ^agent-params <a*1>)
    (<a*1> ^vol-low-diff-threshold { > <v*1> <low> })
    -->
    (<diffs> ^has-shrunk true +)
}

sp {top-state*perception-monitor*object-monitor*object-info*differences*elaborate*vol-diff
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> ^perception-vol <p*2>)
    (<diffs> ^belief-vol <b*1>)
    (<p*2> ^result <r*3>)
    (<r*3> ^record <r*4>)
    (<b*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*4> ^value <perc-vol>)
    (<r*2> ^value <bel-vol>)
    -->
    (<diffs> ^vol-diff (|/| (+ <perc-vol> 0.000000) (+ <bel-vol> 0.000000)) +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*svs-command*compare-volume
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <diffs>)
    (<obj-info> ^perception-obj <p*2>)
    (<obj-info> ^belief-obj <b*1>)
    (<b*1> ^id <bel-id>)
    (<p*2> ^id <perc-id>)
    (<s> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract <perc-vol> +)
    (<cmd> ^extract <bel-vol> +)
    (<perc-vol> ^type volume +)
    (<perc-vol> ^a <pa> +)
    (<perc-vol> ^volume_type scale +)
    (<pa> ^type node +)
    (<pa> ^id <perc-id> +)
    (<bel-vol> ^type volume +)
    (<bel-vol> ^a <ba> +)
    (<bel-vol> ^volume_type scale +)
    (<ba> ^type node +)
    (<ba> ^id <bel-id> +)
    (<diffs> ^belief-vol <bel-vol> +)
    (<diffs> ^perception-vol <perc-vol> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*differences*elaborate*has-moved
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> ^pos-diff <p*2>)
    (<s> ^agent-params <a*1>)
    (<a*1> ^pos-diff-threshold { < <p*2> <thresh> })
    -->
    (<diffs> ^has-moved true +)
}

sp {top-state*perception-monitor*object-monitor*object-info*differences*elaborate*pos-diff
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> ^compare-position <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*2> ^value <val>)
    -->
    (<diffs> ^pos-diff <val> +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*svs-command*compare-position
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <diffs>)
    (<obj-info> ^perception-obj <p*2>)
    (<obj-info> ^belief-obj <b*1>)
    (<b*1> ^id <bel-id>)
    (<p*2> ^id <perc-id>)
    (<s> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract <compare> +)
    (<compare> ^type distance +)
    (<compare> ^a <a> +)
    (<compare> ^b <b> +)
    (<compare> ^distance_type centroid +)
    (<a> ^type node +)
    (<a> ^id <perc-id> +)
    (<b> ^type node +)
    (<b> ^id <bel-id> +)
    (<diffs> ^compare-position <compare> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*differences*elaborate*occlusion-time-expired*true
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> ^is-occluded true)
    (<diffs> ^recheck-occlusion-time <r*1>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^time <t*1>)
    (<t*1> ^seconds { > <r*1> <t> })
    -->
    (<diffs> ^occlusion-time-expired true +)
}

sp {top-state*perception-monitor*object-monitor*object-info*differences*elaborate*is-occluded*false
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> -^is-occluded true)
    -->
    (<diffs> ^is-occluded false +)
}

sp {top-state*perception-monitor*object-monitor*new-object-info*stability-timer*satisfied
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^new-object-info <obj-info>)
    (<obj-info> ^stability-check-time <s*1>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^time <t*1>)
    (<t*1> ^seconds { >= <s*1> <cur-t> })
    -->
    (<obj-info> ^stability-timer-satisfied true +)
}

sp {top-state*perception-monitor*object-monitor*object-info*differences*elaborate*is-stale*false
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^differences <diff>)
    (<obj-info> ^perception-obj <perc-obj>)
    -->
    (<diff> ^is-stale false +)
}

sp {top-state*perception-monitor*object-monitor*object-info*differences*elaborate*is-stale*true
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> -^perception-obj <p*2>)
    (<obj-info> ^differences <diff>)
    -->
    (<diff> ^is-stale true +)
}

sp {top-state*perception-monitor*object-monitor*object-info*property-info*state*elaborate*predicate-handle
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^<any-type> <a*1>)
    (<a*1> ^properties <p*2>)
    (<p*2> ^property-info <prop-info>)
    (<prop-info> ^type state)
    (<prop-info> ^input-link-prop <i*1>)
    (<i*1> ^predicate-handle <pred-handle>)
    -->
    (<prop-info> ^predicate-handle <pred-handle> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*property-info*visual*elaborate*predicate-handle
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^<any-type> <a*1>)
    (<a*1> ^properties <p*2>)
    (<p*2> ^property-info <prop-info>)
    (<prop-info> ^type visual)
    (<prop-info> ^hypothesis <h>)
    (<h> ^best true)
    (<h> ^lower-threshold <low-thresh>)
   -{ (<prop-info> ^hypothesis { <> <h> <h2> })
      (<h2> ^confidence { > <low-thresh> <c*1> })}
    (<h> ^predicate-handle <pred-handle>)
    -->
    (<prop-info> ^predicate-handle <pred-handle> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*property-info*visual*elaborate*hypothesis*lower-threshold
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^<any-type> <a*1>)
    (<a*1> ^properties <p*2>)
    (<p*2> ^property-info <prop-info>)
    (<prop-info> ^type visual)
    (<prop-info> ^hypothesis <h>)
    (<h> ^best true)
    (<h> ^confidence <conf>)
    -->
    (<h> ^lower-threshold (* <conf> 0.800000) +)
}

sp {top-state*perception-monitor*object-monitor*object-info*property-info*visual*elaborate*hypothesis*best
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^<any-type> <a*1>)
    (<a*1> ^properties <p*2>)
    (<p*2> ^property-info <prop-info>)
    (<prop-info> ^type visual)
    (<prop-info> ^hypothesis <h1>)
    (<h1> ^confidence <best>)
   -{ (<prop-info> ^hypothesis <h*1>)
      (<h*1> ^confidence { > <best> <c*1> })}
    -->
    (<h1> ^best true +)
}

sp {top-state*perception-monitor*object-monitor*object-info*property-info*visual*elaborate*hypothesis
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^<any-type> <a*1>)
    (<a*1> ^properties <p*2>)
    (<p*2> ^property-info <prop-info>)
    (<prop-info> ^type visual)
    (<prop-info> ^input-link-prop <i*1>)
    (<i*1> ^values <v*1>)
    (<v*1> ^<pred-handle> { > 0.100000 <conf> })
    -->
    (<prop-info> ^hypothesis <h> +)
    (<h> ^predicate-handle <pred-handle> +)
    (<h> ^confidence <conf> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*elaborate*property-info*visual*state
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^<any-type> <obj-info>)
    (<obj-info> ^properties <props>)
    (<obj-info> ^input-link-obj <i*1>)
    (<i*1> ^property <prop>)
    (<prop> ^property-handle <prop-handle>)
    (<prop> ^type { << visual state >> <type> })
    -->
    (<props> ^property-info <prop-info> +)
    (<prop-info> ^property-handle <prop-handle> +)
    (<prop-info> ^type <type> +)
    (<prop-info> ^input-link-prop <prop> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*elaborate*property-info*name
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^<any-type> <obj-info>)
    (<obj-info> ^properties <props>)
    (<obj-info> ^input-link-obj <i*1>)
    (<i*1> ^property <prop>)
    (<prop> ^property-handle name)
    (<prop> ^values <v*1>)
    (<v*1> ^<obj-name> <any>)
    -->
    (<props> ^property-info <prop-info> +)
    (<prop-info> ^property-handle name +)
    (<prop-info> ^type linguistic +)
    (<prop-info> ^predicate-handle <obj-name> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*elaborate*property-info*state
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^<any-type> <obj-info>)
    (<obj-info> ^properties <props>)
    (<obj-info> ^input-link-obj <i*1>)
    (<i*1> ^{ <> id <> property <prop-handle> } <pred-handle>)
    -->
    (<props> ^property-info <prop-info> +)
    (<prop-info> ^property-handle <prop-handle> +)
    (<prop-info> ^type state +)
    (<prop-info> ^predicate-handle <pred-handle> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*elaborate*properties
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^<any-type> <obj-info>)
    (<obj-info> ^object-handle <obj-handle>)
    -->
    (<obj-info> ^properties <props> +)
}

sp {top-state*perception-monitor*object-monitor*remove*object-info*no*svs*objects
    :o-support
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <mon>)
    (<mon> ^object-info <obj-info>)
    (<obj-info> -^belief-obj <b*1>)
    (<obj-info> -^perception-obj <p*2>)
    -->
    (<mon> ^object-info <obj-info> -)
}

sp {top-state*perception-monitor*object-monitor*object-info*elaborate*input-link-obj
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^object-handle <obj-handle>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^objects <o*2>)
    (<o*2> ^object <il-obj>)
    (<il-obj> ^object-handle <obj-handle>)
    -->
    (<obj-info> ^input-link-obj <il-obj> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*elaborate*perception-obj*internal
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*2>)
    (<p*2> ^object-monitor <o*2>)
    (<o*2> ^object-info <obj-info2>)
    (<obj-info2> ^perception-obj <perc-obj>)
    (<obj-info2> ^object-handle <handle2>)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info1>)
    (<obj-info1> ^internal-link <handle2>)
    (<obj-info1> ^object-handle <handle1>)
    -->
    (<obj-info1> ^perception-obj <perc-obj> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*elaborate*perception-obj
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^perception-id <perc-id>)
    (<s> ^svs <s*1>)
    (<s*1> ^spatial-scene <s*2>)
    (<s*2> ^child <perc-obj>)
    (<perc-obj> ^id <perc-id>)
    -->
    (<obj-info> ^perception-obj <perc-obj> +)
}

sp {top-state*perception-monitor*object-monitor*object-info*elaboratee*belief-obj
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^belief-id <bel-id>)
    (<s> ^svs <s*1>)
    (<s*1> ^spatial-scene <s*2>)
    (<s*2> ^child <belief-obj>)
    (<belief-obj> ^id <bel-id>)
    -->
    (<obj-info> ^belief-obj <belief-obj> +)
}

sp {top-state*perception-monitor*object-monitor*new-object*elaborate*input-link-obj
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^new-object-info <obj-info>)
    (<obj-info> ^object-handle <handle>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^objects <o*2>)
    (<o*2> ^object <il-obj>)
    (<il-obj> ^object-handle <handle>)
    -->
    (<obj-info> ^input-link-obj <il-obj> +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*new-object-info*object-handle
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^new-object-info <obj-info>)
    (<obj-info> ^perception-obj <p*2>)
    (<p*2> ^id <svs-id>)
    -->
    (<obj-info> ^object-handle (int <svs-id>) +)
}

sp {top-state*perception-monitor*object-monitor*elaborate*new-object-info
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <obj-mon>)
    (<s> ^svs <s*1>)
    (<s*1> ^spatial-scene <s*2>)
    (<s*2> ^child <perc-obj>)
    (<perc-obj> -^id { << arm world eye >> <i*1> })
   -{ (<obj-mon> ^object-info <o*1>)
      (<o*1> ^perception-obj <perc-obj>)}
    (<perc-obj> ^object-source perception)
    -->
    (<obj-mon> ^new-object-info <new-obj-info> +)
    (<new-obj-info> ^differences <diffs> +)
    (<new-obj-info> ^perception-obj <perc-obj> +)
}

sp {anystate*apply*attend-to-scene-change*update-object*report
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type update-object)
    (<o> ^change <c*2>)
    (<c*2> ^object-info <o*1>)
    (<o*1> ^object-handle <obj-handle>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    -->
    
}

sp {anystate*apply*attend-to-scene-change*update-object*cleanup
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type update-object)
    (<o> ^change <c*2>)
    (<c*2> ^object-info <obj-info>)
    (<obj-info> ^mark-for-copying true)
    (<obj-info> ^copy-command <copy>)
    (<copy> ^status success)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<obj-info> ^mark-for-copying true -)
    (<obj-info> ^copy-command <copy> -)
}

sp {anystate*apply*attend-to-scene-change*update-object*svs*copy_node
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type update-object)
    (<o> ^change <c*2>)
    (<c*2> ^object-info <obj-info>)
    (<obj-info> ^perception-obj <p*1>)
    (<obj-info> ^belief-obj <b*1>)
    (<s> ^top-state <t*1>)
    (<b*1> ^id <bel-id>)
    (<p*1> ^id <perc-id>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^copy_transform <copy> +)
    (<copy> ^source <perc-id> +)
    (<copy> ^destination <bel-id> +)
    (<copy> ^position yes +)
    (<copy> ^rotation yes +)
    (<copy> ^scale yes +)
    (<copy> ^adjust true +)
    (<obj-info> ^copy-command <copy> +)
}

sp {anystate*apply*attend-to-scene-change*delete-object*report
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type delete-object)
    (<o> ^change <c*2>)
    (<c*2> ^object-info <o*1>)
    (<o*1> ^object-handle <obj-handle>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    -->
    
}

sp {anystate*apply*attend-to-scene-change*delete-object*delete*object-info
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type delete-object)
    (<o> ^change <c*2>)
    (<c*2> ^object-info <obj-info>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <obj-mon>)
    (<obj-mon> ^object-info <obj-info>)
    -->
    (<obj-mon> ^object-info <obj-info> -)
}

sp {anystate*apply*attend-to-scene-change*delete-object*delete*belief*from*svs
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type delete-object)
    (<o> ^change <c*2>)
    (<c*2> ^object-info <o*1>)
    (<o*1> ^belief-obj <b*1>)
    (<s> ^top-state <t*1>)
    (<b*1> ^id <id>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^delete_node <d*1> +)
    (<d*1> ^id <id> +)
}

sp {attend-to-scene-change*evaluate-moved-object*apply*check-for-occlusion*not-occluded*mark-for-copying
    (state <s> ^object-occluded false)
    (<s> ^name attend-to-scene-change)
    (<s> ^operator <o>)
    (<o> ^change-type moved-object)
    (<o> ^name check-for-occlusion)
    (<o> ^object-info <obj-info>)
    -->
    (<obj-info> ^mark-for-copying true +)
}

sp {attend-to-scene-change*evaluate-moved-object*elaborate*check-for-occlusion*parameters
    (state <s> ^name attend-to-scene-change)
    (<s> ^operator <o> +)
    (<o> ^change-type moved-object)
    (<o> ^name check-for-occlusion)
    (<o> ^object-info <obj-info>)
    -->
    (<o> ^object-info <obj-info> +)
    (<o> ^report-to-top-state true +)
    (<o> ^report-to-superstate true +)
}

sp {attend-to-scene-change*recheck-occlusion*elaborate*check-for-occlusion*parameters
    (state <s> ^name attend-to-scene-change)
    (<s> ^operator <o> +)
    (<o> ^change-type recheck-occlusion)
    (<o> ^name check-for-occlusion)
    (<o> ^object-info <obj-info>)
    -->
    (<o> ^object-info <obj-info> +)
    (<o> ^report-to-top-state true +)
    (<o> ^report-to-superstate false +)
}

sp {anystate*apply*attend-to-scene-change*new-object*create*filters
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <change>)
    (<change> ^type new-object)
    (<change> ^object-info <obj-info>)
    (<obj-info> ^perception-obj <p*1>)
    (<s> ^top-state <t*1>)
    (<p*1> ^id <id>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract <pos> +)
    (<pos> ^type monitor_position +)
    (<pos> ^a <pa> +)
    (<pa> ^type node +)
    (<pa> ^id <id> +)
    (<obj-info> ^position-monitor <pos> +)
    (<cmd> ^extract <vol> +)
    (<vol> ^type monitor_volume +)
    (<vol> ^a <va> +)
    (<va> ^type node +)
    (<va> ^id <id> +)
    (<obj-info> ^volume-monitor <vol> +)
}

sp {anystate*apply*attend-to-scene-change*new-object*add*status
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <change>)
    (<change> ^type new-object)
    (<change> ^object-info <obj-info>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*1>)
    (<a*1> ^stability-check-duration <dur>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^time <t*1>)
    (<t*1> ^seconds <t>)
    -->
    (<obj-info> ^status uncertain +)
    (<obj-info> ^stability-check-time (+ <t> <dur>) +)
    (<obj-info> ^number-checks 0 +)
}

sp {attend-to-changed-waypoint*apply*change-waypoint-info*add*unknown-object
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^operator <o>)
    (<o> ^name change-waypoint-info)
    (<o> ^current-location { <> none <new-loc> })
    (<s> ^top-state <t*1>)
    (<t*1> ^world <world>)
    (<world> ^unknown-objects <u*1>)
    (<world> ^objects <objs>)
    (<world> ^predicates <p*1>)
    (<p*1> ^predicate <in-pred>)
    (<in-pred> ^handle in1)
    (<in-pred> ^instance <i>)
    (<i> ^2 <new-loc>)
    (<i> ^1 <obj>)
    (<obj> ^handle <obj-handle>)
    (<u*1> ^object <obj>)
    -->
    (<objs> ^object <obj> +)
}

sp {attend-to-changed-waypoint*apply*change-waypoint-info*monitor*location
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^operator <o>)
    (<o> ^name change-waypoint-info)
    (<o> ^current-location <c*1>)
    (<c*1> ^handle <loc-handle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    -->
    
}

sp {attend-to-changed-waypoint*apply*change-waypoint-info*monitor*waypoint
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^operator <o>)
    (<o> ^name change-waypoint-info)
    (<o> ^current-waypoint <c*1>)
    (<c*1> ^handle <wp-handle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    -->
    
}

sp {attend-to-changed-waypoint*apply*change-waypoint-info*remove*old*location
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^operator <o>)
    (<o> ^name change-waypoint-info)
    (<o> ^current-location <loc>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <robot>)
    (<robot> ^current-location { <> <loc> <old-loc> })
    -->
    (<robot> ^current-location <old-loc> -)
}

sp {attend-to-changed-waypoint*apply*change-waypoint-info*remove*old*waypoint
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^operator <o>)
    (<o> ^name change-waypoint-info)
    (<o> ^current-waypoint <wp>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <robot>)
    (<robot> ^current-waypoint { <> <wp> <old-wp> })
    -->
    (<robot> ^current-waypoint <old-wp> -)
}

sp {attend-to-changed-waypoint*apply*change-waypoint-info*add*new*location
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^operator <o>)
    (<o> ^name change-waypoint-info)
    (<o> ^current-location { <> none <loc> })
    (<s> ^top-state <t*1>)
    (<t*1> ^world <world>)
    (<world> ^objects <objs>)
    (<world> ^robot <robot>)
    -->
    (<robot> ^current-location <loc> +)
    (<objs> ^object <loc> +)
}

sp {attend-to-changed-waypoint*apply*change-waypoint-info*add*new*waypoint
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^operator <o>)
    (<o> ^name change-waypoint-info)
    (<o> ^current-waypoint <wp>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <robot>)
    -->
    (<robot> ^current-waypoint <wp> +)
}

sp {attend-to-changed-waypoint*propose*change-waypoint-info
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^new-location <loc>)
    (<s> ^new-waypoint <wp>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name change-waypoint-info +)
    (<o> ^current-waypoint <wp> +)
    (<o> ^current-location <loc> +)
}

sp {attend-to-changed-waypoint*elaborate*current-location*success
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^new-waypoint-handle <wp-handle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*1> ^object <loc>)
    (<loc> ^waypoint <wp-handle>)
    -->
    (<s> ^new-location <loc> +)
}

sp {attend-to-changed-waypoint*elaborate*current-location*none
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^new-waypoint-handle <wp-handle>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^world <w*1>)
      (<w*1> ^objects <o*1>)
      (<o*1> ^object <o*2>)
      (<o*2> ^waypoint <wp-handle>)}
    -->
    (<s> ^new-location none +)
}

sp {attend-to-changed-waypoint*elaborate*new-waypoint*topstate
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^new-waypoint-handle <wp-handle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^maps <m*1>)
    (<m*1> ^map <m*2>)
    (<m*2> ^waypoint <wp>)
    (<wp> ^handle <wp-handle>)
    -->
    (<s> ^new-waypoint <wp> +)
}

sp {attend-to-changed-waypoint*elaborate*new-waypoint-handle
    (state <s> ^name attend-to-changed-waypoint)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^new-waypoint-handle <wp-handle>)
    -->
    (<s> ^new-waypoint-handle <wp-handle> +)
}

sp {anystate*apply*attend-to-scene-change*monitor*changed-robot-status
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type changed-robot-status)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^self <s*1>)
    (<s*1> ^moving-state <state>)
    -->
    
}

sp {anystate*apply*attend-to-scene-change*changed-robot-status*remove*old
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type changed-robot-status)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <robot>)
    (<robot> ^moving-state <old-state>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^self <s*1>)
    (<s*1> ^moving-state { <> <old-state> <cur-state> })
    -->
    (<robot> ^moving-state <old-state> -)
}

sp {anystate*apply*attend-to-scene-change*changed-robot-status*add*new
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type changed-robot-status)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <robot>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^self <s*1>)
    (<s*1> ^moving-state <cur-state>)
    -->
    (<robot> ^moving-state <cur-state> +)
}

sp {anystate*apply*attend-to-scene-change*changed-object-status*remove*old
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c>)
    (<c> ^type changed-object-status)
    (<c> ^old-status <old>)
    (<c> ^object-info <o*1>)
    (<o*1> ^wm-obj <w*1>)
    (<w*1> ^predicates <wm-preds>)
    (<wm-preds> ^status <old>)
    -->
    (<wm-preds> ^status <old> -)
}

sp {anystate*apply*attend-to-scene-change*changed-object-status*add*new
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c>)
    (<c> ^type changed-object-status)
    (<c> ^new-status <new>)
    (<c> ^object-info <o*1>)
    (<o*1> ^wm-obj <w*1>)
    (<w*1> ^predicates <wm-preds>)
    -->
    (<wm-preds> ^status <new> +)
}

sp {anystate*apply*attend-to-scene-change*changed-object-predicate*remove*old
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c>)
    (<c> ^type changed-object-predicate)
    (<c> ^property-handle <prop-handle>)
    (<c> ^predicate-handle <pred-handle>)
    (<c> ^object-info <o*1>)
    (<o*1> ^wm-obj <w*1>)
    (<w*1> ^predicates <wm-preds>)
    (<wm-preds> ^<prop-handle> { <> <pred-handle> <old-pred> })
    -->
    (<wm-preds> ^<prop-handle> <old-pred> -)
}

sp {anystate*apply*attend-to-scene-change*changed-object-predicate*add*new
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c>)
    (<c> ^type changed-object-predicate)
    (<c> ^property-handle <prop-handle>)
    (<c> ^predicate-handle <pred-handle>)
    (<c> ^object-info <o*1>)
    (<o*1> ^wm-obj <w*1>)
    (<w*1> ^predicates <wm-preds>)
    -->
    (<wm-preds> ^<prop-handle> <pred-handle> +)
}

sp {anystate*apply*attend-to-changed-arm-status*stopped*remove*other*internal-links
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type changed-arm-status)
    (<o> ^change <c*2>)
    (<c*2> ^self-info <s*1>)
    (<s*1> ^action wait)
    (<s> ^top-state <t*2>)
    (<t*2> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <mon>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <arm>)
    (<arm> ^moving <id>)
    (<mon> ^object <dest-obj>)
    (<dest-obj> ^internal-link <id>)
    (<dest-obj> ^id <id2>)
    (<mon> ^object <src-obj>)
    (<src-obj> ^id <id>)
    -->
    (<dest-obj> ^internal-link <id> -)
}

sp {anystate*apply*attend-to-changed-arm-status*stopped*remove*moved-object*internal-links
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type changed-arm-status)
    (<o> ^change <c*2>)
    (<c*2> ^self-info <s*1>)
    (<s*1> ^action wait)
    (<s> ^top-state <t*2>)
    (<t*2> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <obj-info>)
    (<obj-info> ^internal-link <handle2>)
    (<obj-info> ^object-handle <handle1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <arm>)
    (<arm> ^moving <handle1>)
    -->
    (<obj-info> ^internal-link <handle2> -)
}

sp {anystate*apply*attend-to-changed-arm-status*remove*old*action
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type changed-arm-status)
    (<o> ^change <c*2>)
    (<c*2> ^self-info <s*1>)
    (<s*1> ^action <action>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <arm>)
    (<arm> ^action { <> <action> <old-action> })
    -->
    (<arm> ^action <old-action> -)
}

sp {anystate*apply*attend-to-changed-arm-status*add*current*action
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type changed-arm-status)
    (<o> ^change <c*2>)
    (<c*2> ^self-info <s*1>)
    (<s*1> ^action <action>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <arm>)
    -->
    (<arm> ^action <action> +)
}

sp {evaluate-stability*apply*mark-unstable*reset*filters
    (state <s> ^name evaluate-stability)
    (<s> ^operator <o>)
    (<o> ^name mark-unstable)
    (<o> ^object-info <obj-info>)
    (<obj-info> ^perception-obj <p*1>)
    (<s> ^top-state <t*1>)
    (<p*1> ^id <id>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract <pos> +)
    (<pos> ^type monitor_position +)
    (<pos> ^a <pa> +)
    (<pa> ^type node +)
    (<pa> ^id <id> +)
    (<obj-info> ^position-monitor <pos> +)
    (<cmd> ^extract <vol> +)
    (<vol> ^type monitor_volume +)
    (<vol> ^a <va> +)
    (<va> ^type node +)
    (<va> ^id <id> +)
    (<obj-info> ^volume-monitor <vol> +)
}

sp {evaluate-stability*apply*mark-unstable*remove*filters
    (state <s> ^name evaluate-stability)
    (<s> ^operator <o>)
    (<o> ^name mark-unstable)
    (<o> ^object-info <obj-info>)
    (<obj-info> ^volume-monitor <old-vol>)
    (<obj-info> ^position-monitor <old-pos>)
    (<obj-info> ^perception-obj <p*1>)
    (<s> ^top-state <t*1>)
    (<p*1> ^id <id>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract <old-pos> -)
    (<cmd> ^extract <old-vol> -)
    (<obj-info> ^position-monitor <old-pos> -)
    (<obj-info> ^volume-monitor <old-vol> -)
}

sp {evaluate-stability*apply*mark-unstable*reset*timers
    (state <s> ^name evaluate-stability)
    (<s> ^operator <o>)
    (<o> ^name mark-unstable)
    (<o> ^object-info <obj-info>)
    (<obj-info> ^stability-check-time <old-t>)
    (<obj-info> ^number-checks <num>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*1>)
    (<a*1> ^stability-check-duration <dur>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^time <t*1>)
    (<t*1> ^seconds <cur-t>)
    -->
    (<obj-info> ^stability-check-time <old-t> -)
    (<obj-info> ^stability-check-time (+ <cur-t> <dur>) +)
    (<obj-info> ^number-checks <num> -)
    (<obj-info> ^number-checks (+ <num> 1) +)
}

sp {evaluate-stability*propose*mark-unstable
    (state <s> ^obj-is-stable false)
    (<s> ^name evaluate-stability)
    (<s> ^object-info <obj-info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name mark-unstable +)
    (<o> ^object-info <obj-info> +)
}

sp {evaluate-stability*apply*mark-stable*remove*filters
    (state <s> ^name evaluate-stability)
    (<s> ^operator <o>)
    (<o> ^name mark-stable)
    (<o> ^object-info <obj-info>)
    (<obj-info> ^volume-monitor <old-vol>)
    (<obj-info> ^position-monitor <old-pos>)
    (<obj-info> ^perception-obj <p*1>)
    (<s> ^top-state <t*1>)
    (<p*1> ^id <id>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract <old-pos> -)
    (<cmd> ^extract <old-vol> -)
    (<obj-info> ^position-monitor <old-pos> -)
    (<obj-info> ^volume-monitor <old-vol> -)
}

sp {evaluate-stability*apply*mark-stable*cleanup*object
    (state <s> ^name evaluate-stability)
    (<s> ^operator <o>)
    (<o> ^name mark-stable)
    (<o> ^object-info <obj-info>)
    (<obj-info> ^stability-check-time <t>)
    (<obj-info> ^number-checks <num>)
    -->
    (<obj-info> ^number-checks <num> -)
    (<obj-info> ^stability-check-time <t> -)
}

sp {evaluate-stability*apply*mark-stable*mark*unidentified
    (state <s> ^name evaluate-stability)
    (<s> ^operator <o>)
    (<o> ^name mark-stable)
    (<o> ^object-info <obj-info>)
    (<obj-info> ^status uncertain)
    -->
    (<obj-info> ^status uncertain -)
    (<obj-info> ^status unidentified +)
}

sp {evaluate-stability*propose*mark-stable
    (state <s> ^obj-is-stable true)
    (<s> ^name evaluate-stability)
    (<s> ^object-info <obj-info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name mark-stable +)
    (<o> ^object-info <obj-info> +)
}

sp {evaluate-stability*elaborate*obj-is-stable*false*more-checks
    (state <s> ^name evaluate-stability)
    (<s> ^max-checks <max>)
    (<s> ^object-info <o*1>)
    (<o*1> ^number-checks { < <max> <n*1> })
    (<s> ^{ << stable-pos stable-vol >> <a*1> } false)
    -->
    (<s> ^obj-is-stable false +)
}

sp {evaluate-stability*elaborate*obj-is-stable*true*timeout
    (state <s> ^name evaluate-stability)
    (<s> ^max-checks <max>)
    (<s> ^object-info <o*1>)
    (<o*1> ^number-checks { >= <max> <n*1> })
    (<s> ^{ << stable-pos stable-vol >> <a*1> } false)
    -->
    (<s> ^obj-is-stable true +)
}

sp {evaluate-stability*elaborate*obj-is-stable*true
    (state <s> ^stable-vol true)
    (<s> ^stable-pos true)
    (<s> ^name evaluate-stability)
    -->
    (<s> ^obj-is-stable true +)
}

sp {evaluate-stability*elaborate*stable-vol*false*high
    (state <s> ^name evaluate-stability)
    (<s> ^vol-diff <v*1>)
    (<s> ^vol-high-threshold { <= <v*1> <high> })
    -->
    (<s> ^stable-vol false +)
}

sp {evaluate-stability*elaborate*stable-vol*false*low
    (state <s> ^name evaluate-stability)
    (<s> ^vol-diff <v*1>)
    (<s> ^vol-low-threshold { >= <v*1> <low> })
    -->
    (<s> ^stable-vol false +)
}

sp {evaluate-stability*elaborate*stable-vol*true
    (state <s> ^name evaluate-stability)
    (<s> ^vol-diff <v*1>)
    (<s> ^vol-high-threshold { > <v*1> <high> })
    (<s> ^vol-low-threshold { < <v*1> <low> })
    -->
    (<s> ^stable-vol true +)
}

sp {evaluate-stability*elaborate*stable-pos*false
    (state <s> ^name evaluate-stability)
    (<s> ^pos-diff <p*1>)
    (<s> ^pos-threshold { <= <p*1> <t> })
    -->
    (<s> ^stable-pos false +)
}

sp {evaluate-stability*elaborate*stable-pos*true
    (state <s> ^name evaluate-stability)
    (<s> ^pos-diff <p*1>)
    (<s> ^pos-threshold { > <p*1> <t> })
    -->
    (<s> ^stable-pos true +)
}

sp {evaluate-stability*elaborate*vol-diff
    (state <s> ^name evaluate-stability)
    (<s> ^object-info <o*1>)
    (<o*1> ^volume-monitor <v*1>)
    (<v*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*2> ^value <val>)
    -->
    (<s> ^vol-diff <val> +)
}

sp {evaluate-stability*elaborate*pos-diff
    (state <s> ^name evaluate-stability)
    (<s> ^object-info <o*1>)
    (<o*1> ^position-monitor <p*1>)
    (<p*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*2> ^value <val>)
    -->
    (<s> ^pos-diff <val> +)
}

sp {evaluate-stability*elaborate*thresholds
    (state <s> ^name evaluate-stability)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <params>)
    (<params> ^max-stability-checks <max>)
    (<params> ^vol-high-diff-threshold <vht>)
    (<params> ^vol-low-diff-threshold <vlt>)
    (<params> ^pos-diff-threshold <pdt>)
    -->
    (<s> ^pos-threshold <pdt> +)
    (<s> ^vol-low-threshold <vlt> +)
    (<s> ^vol-high-threshold <vht> +)
    (<s> ^max-checks <max> +)
}

sp {evaluate-stability*elaborate*object-info
    (state <s> ^name evaluate-stability)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object-info <obj-info>)
    -->
    (<s> ^object-info <obj-info> +)
}

sp {evaluate-shrunken-object*prefer*others*over*check-for-occlusion
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^operator <o2> +)
    (<o2> ^name check-for-occlusion)
    (<s> ^operator <o1> +)
    (<o1> ^name { << overlap-command intersect-command link-objects >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {evaluate-shrunken-object*prefer*overlap-command*over*link-objects
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^operator <o2> +)
    (<o2> ^name link-objects)
    (<s> ^operator <o1> +)
    (<o1> ^name overlap-command)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {evaluate-shrunken-object*reject*superoperator
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^operator <o>)
    (<o> ^name link-objects)
    (<o> ^modify-scene-command <m*1>)
    (<m*1> ^status complete)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^redo-attend true +)
}

sp {evaluate-shrunken-object*apply*link-objects*monitor*perception
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^operator <o>)
    (<o> ^name link-objects)
    (<o> ^modify-scene-command <cmd>)
    (<cmd> ^source-handle <source>)
    (<cmd> ^destination-handle <dest>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    -->
    
}

sp {evaluate-shrunken-object*apply*link-objects
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^operator <o>)
    (<o> ^name link-objects)
    (<o> ^modify-scene-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    -->
    (<ol> ^modify-scene <cmd> +)
}

sp {evaluate-shrunken-object*elaborate*link-objects*source-handle
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^operator <o> +)
    (<o> ^name link-objects)
    (<o> ^modify-scene-command <cmd>)
    (<s> ^contained-fragment-id <src-handle>)
    -->
    (<cmd> ^source-handle <src-handle> +)
}

sp {evaluate-shrunken-object*propose*link-objects
    (state <s> ^found-contained-fragment true)
    (<s> ^name evaluate-shrunken-object)
    (<s> ^object-info <o*1>)
    (<o*1> ^object-handle <dest-handle>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name link-objects +)
    (<o> ^modify-scene-command <cmd> +)
    (<cmd> ^type link +)
    (<cmd> ^destination-handle <dest-handle> +)
}

sp {evaluate-shrunken-object*apply*overlap-command*debug-perception*report*overlap
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name overlap-command)
    (<s> ^overlap-command <o*2>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<o*2> ^result <res>)
    (<res> ^overlap <val>)
    (<res> ^object-b <b>)
    (<res> ^object-a <a>)
    -->
    
}

sp {evaluate-shrunken-object*apply*overlap-command*copy-result
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name overlap-command)
    (<s> ^overlap-results <results>)
    (<s> ^overlap-command <cmd>)
    (<cmd> ^result <res>)
    (<res> ^overlap { <> none <o*2> })
    -->
    (<s> ^overlap-command <cmd> -)
    (<results> ^result <res> +)
}

sp {evaluate-shrunken-object*propose*overlap-command*contains
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^intersect-command <i*1>)
    (<i*1> ^result { <> none <perc-id> })
   -{ (<s> ^overlap-results <o*4>)
      (<o*4> ^result <r*1>)
      (<r*1> ^object-a <perc-id>)}
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^perception-monitor <p*1>)
      (<p*1> ^object-monitor <o*2>)
      (<o*2> ^object-info <o*3>)
      (<o*3> ^perception-obj <p*2>)
      (<p*2> ^id <perc-id>)}
    (<s> ^object-info <o*1>)
    (<o*1> ^belief-obj <b*1>)
    (<b*1> ^id <stale-id>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name overlap-command +)
    (<o> ^object-a <perc-id> +)
    (<o> ^object-b <stale-id> +)
}

sp {evaluate-shrunken-object*propose*intersect-command
    (state <s> ^name evaluate-shrunken-object)
   -{ (<s> ^intersect-command <i*1>)
      (<i*1> ^result <r*1>)}
    (<s> ^object-info <o*1>)
    (<o*1> ^belief-obj <b*1>)
    (<b*1> ^id <id>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name intersect-command +)
    (<o> ^object-id <id> +)
    (<o> ^candidate-set <perc-objs> +)
    (<perc-objs> ^type tag_select +)
    (<perc-objs> ^a <a*1> +)
    (<a*1> ^type all_nodes +)
    (<perc-objs> ^tag_name object-source +)
    (<perc-objs> ^tag_value perception +)
}

sp {evaluate-shrunken-object*apply*check-for-occlusion*occluded*mark-for-copying
    (state <s> ^object-occluded false)
    (<s> ^name evaluate-shrunken-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-for-occlusion)
    (<s> ^object-info <obj-info>)
    -->
    (<obj-info> ^mark-for-copying true +)
}

sp {evaluate-shrunken-object*propose*check-for-occlusion
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^object-info <obj-info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name check-for-occlusion +)
    (<o> ^object-info <obj-info> +)
    (<o> ^report-to-superstate true +)
    (<o> ^report-to-top-state true +)
}

sp {evaluate-shrunken-object*elaborate*found-contained-fragment
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^contained-fragment-id <id>)
    -->
    (<s> ^found-contained-fragment true +)
}

sp {evaluate-shrunken-object*elaborate*contained-fragment
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^overlap-results <o*1>)
    (<s> ^contained-threshold <t>)
    (<o*1> ^result <res>)
    (<res> ^overlap { > <t> <o*2> })
    (<res> ^object-a <id>)
    -->
    (<s> ^contained-fragment-id <id> +)
}

sp {evaluate-shrunken-object*elaborate*overlap-results
    (state <s> ^name evaluate-shrunken-object)
    -->
    (<s> ^overlap-results <res> +)
}

sp {evaluate-shrunken-object*elaborate*agent-params*contained-threshold
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^contained-threshold <t>)
    -->
    (<s> ^contained-threshold <t> +)
}

sp {evaluate-shrunken-object*elaborate*object-info
    (state <s> ^name evaluate-shrunken-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object-info <obj-info>)
    -->
    (<s> ^object-info <obj-info> +)
}

sp {evaluate-new-object*apply*create-new-object*create*belief-object
    (state <s> ^name evaluate-new-object)
    (<s> ^operator <o>)
    (<o> ^name create-new-object)
    (<o> ^belief-id <bel-id>)
    (<o> ^perception-obj <p*1>)
    (<s> ^top-state <t*1>)
    (<p*1> ^id <perc-id>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^copy_node <copy> +)
    (<copy> ^id <bel-id> +)
    (<copy> ^source <perc-id> +)
    (<copy> ^adjust true +)
}

sp {evaluate-new-object*apply*create-new-object*create*object-info
    (state <s> ^name evaluate-new-object)
    (<s> ^operator <o>)
    (<o> ^name create-new-object)
    (<o> ^belief-id <bel-id>)
    (<o> ^perception-obj <p*2>)
    (<o> ^object-handle <obj-handle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <obj-mon>)
    (<p*2> ^id <perc-id>)
    -->
    (<obj-mon> ^object-info <new-obj-info> +)
    (<new-obj-info> ^object-handle <obj-handle> +)
    (<new-obj-info> ^belief-id <bel-id> +)
    (<new-obj-info> ^perception-id <perc-id> +)
    (<new-obj-info> ^differences <diffs> +)
}

sp {evaluate-new-object*elaborate*create-new-object*belief-id
    (state <s> ^name evaluate-new-object)
    (<s> ^operator <o> +)
    (<o> ^name create-new-object)
    (<o> ^object-handle <obj-handle>)
    -->
    (<o> ^belief-id (concat bel- <obj-handle>) +)
}

sp {match-missing-object*compare*copy*over*link
    (state <s> ^name match-missing-object)
    (<s> ^operator <op2> +)
    (<op2> ^name link-objects)
    (<s> ^operator <op1> +)
    (<op1> ^name copy-object)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {match-missing-object*prefer*all*over*complete
    (state <s> ^name match-missing-object)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-match-missing-object)
    (<s> ^operator <o1> +)
    (<o1> ^name { <> complete-match-missing-object <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {match-missing-object*apply*link-objects*monitor*perception
    (state <s> ^name match-missing-object)
    (<s> ^operator <o>)
    (<o> ^name link-objects)
    (<o> ^dest-info <d*1>)
    (<o> ^src-info <s*1>)
    (<d*1> ^perception-obj <p*2>)
    (<s*1> ^perception-obj <p*1>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<p*2> ^id <dest>)
    (<p*1> ^id <source>)
    -->
    
}

sp {match-missing-object*apply*link-objects
    (state <s> ^name match-missing-object)
    (<s> ^operator <o>)
    (<o> ^name link-objects)
    (<o> ^dest-info <d*1>)
    (<o> ^src-info <s*1>)
    (<s*1> ^perception-obj <p*1>)
    (<d*1> ^object-handle <dest-handle>)
    (<p*1> ^id <src-handle>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    -->
    (<ol> ^modify-scene <ms> +)
    (<ms> ^type link +)
    (<ms> ^source-handle <src-handle> +)
    (<ms> ^destination-handle <dest-handle> +)
}

sp {match-missing-object*propose*link-objects
    (state <s> ^property-conflict false)
    (<s> ^volume-match true)
    (<s> ^name match-missing-object)
    (<s> ^candidate-info <src-obj-info>)
    (<s> ^missing-object-info <dest-obj-info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name link-objects +)
    (<o> ^src-info <src-obj-info> +)
    (<o> ^dest-info <dest-obj-info> +)
}

sp {match-missing-object*apply*copy-object
    (state <s> ^name match-missing-object)
    (<s> ^operator <o>)
    (<o> ^name copy-object)
    (<o> ^dest-id <dest>)
    (<o> ^source-id <src>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^copy_transform <copy> +)
    (<copy> ^source <src> +)
    (<copy> ^destination <dest> +)
    (<copy> ^position yes +)
    (<copy> ^rotation yes +)
    (<copy> ^scale yes +)
    (<copy> ^adjust true +)
    (<s> ^copied true +)
}

sp {match-missing-object*propose*copy-object
    (state <s> ^property-conflict false)
    (<s> -^copied <c*2>)
    (<s> ^volume-match true)
    (<s> ^name match-missing-object)
    (<s> ^candidate-info <c*1>)
    (<s> ^missing-object-info <m*1>)
    (<c*1> ^perception-obj <p*1>)
    (<m*1> ^belief-obj <b*1>)
    (<p*1> ^id <src>)
    (<b*1> ^id <dest>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name copy-object +)
    (<o> ^source-id <src> +)
    (<o> ^dest-id <dest> +)
}

sp {match-missing-object*apply*compare-volume*cleanup
    (state <s> ^name match-missing-object)
    (<s> ^operator <o>)
    (<o> ^name compare-volume)
    (<s> ^belief-volume-filter <bel-vol>)
    (<s> ^candidate-volume-filter <cand-vol>)
    (<o> ^volume-diff <diff>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract_once <cand-vol> -)
    (<cmd> ^extract_once <bel-vol> -)
    (<s> ^volume-diff <diff> +)
}

sp {match-missing-object*apply*compare-volume*no*result*candidate
    (state <s> ^name match-missing-object)
    (<s> ^operator <o> +)
    (<o> ^name compare-volume)
    (<s> ^candidate-volume-filter <c*1>)
    (<c*1> ^result <res>)
   -{ (<res> ^record <r*1>)
      (<r*1> ^value <val>)}
    -->
    (<o> ^volume-diff 0 +)
}

sp {match-missing-object*apply*compare-volume*no*result*belief
    (state <s> ^name match-missing-object)
    (<s> ^operator <o> +)
    (<o> ^name compare-volume)
    (<s> ^belief-volume-filter <b*1>)
    (<b*1> ^result <res>)
   -{ (<res> ^record <r*1>)
      (<r*1> ^value <val>)}
    -->
    (<o> ^volume-diff 0 +)
}

sp {match-missing-object*apply*compare-volume*copy*result
    (state <s> ^name match-missing-object)
    (<s> ^operator <o> +)
    (<o> ^name compare-volume)
    (<s> ^belief-volume-filter <b*1>)
    (<s> ^candidate-volume-filter <c*1>)
    (<b*1> ^result <r*3>)
    (<r*3> ^record <r*4>)
    (<c*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*4> ^value <bel-vol>)
    (<r*2> ^value <cand-vol>)
    -->
    (<o> ^volume-diff (|/| (+ <cand-vol> 0.000000) (+ <bel-vol> 0.000000)) +)
}

sp {match-missing-object*apply*compare-volume*create*filter
    (state <s> ^name match-missing-object)
    (<s> ^operator <op>)
    (<op> ^name compare-volume)
    (<op> ^candidate-id <cand-id>)
    (<op> ^missing-id <bel-id>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract_once <bel-vol> +)
    (<cmd> ^extract_once <cand-vol> +)
    (<bel-vol> ^type volume +)
    (<bel-vol> ^a <ba> +)
    (<bel-vol> ^volume_type scale +)
    (<ba> ^type node +)
    (<ba> ^id <bel-id> +)
    (<cand-vol> ^type volume +)
    (<cand-vol> ^a <ca> +)
    (<cand-vol> ^volume_type scale +)
    (<ca> ^type node +)
    (<ca> ^id <cand-id> +)
    (<s> ^candidate-volume-filter <cand-vol> +)
    (<s> ^belief-volume-filter <bel-vol> +)
}

sp {match-missing-object*propose*compare-volume
    (state <s> ^name match-missing-object)
    (<s> -^volume-diff <v*1>)
    (<s> ^candidate-info <c*1>)
    (<s> ^missing-object-info <m*1>)
    (<c*1> ^perception-obj <p*1>)
    (<m*1> ^belief-obj <b*1>)
    (<p*1> ^id <cand-id>)
    (<b*1> ^id <bel-id>)
    -->
    (<s> ^operator <op> +)
    (<op> ^name compare-volume +)
    (<op> ^missing-id <bel-id> +)
    (<op> ^candidate-id <cand-id> +)
}

sp {match-missing-object*apply*complete-match-missing-object*mark*superstate
    (state <s> ^name match-missing-object)
    (<s> ^operator <op>)
    (<op> ^name complete-match-missing-object)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^matches-missing-object false +)
}

sp {match-missing-object*propose*complete-match-missing-object
    (state <s> ^name match-missing-object)
    -->
    (<s> ^operator <op> +)
    (<op> ^name complete-match-missing-object +)
}

sp {match-missing-object*elaborate*property-conflict*false
    (state <s> ^name match-missing-object)
    (<s> -^property-conflict true)
    -->
    (<s> ^property-conflict false +)
}

sp {match-missing-object*elaborate*volume-match*false*too-large
    (state <s> ^name match-missing-object)
    (<s> ^volume-diff <v*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^vol-high-candidate-match { > <v*1> <high> })
    -->
    (<s> ^volume-match false +)
}

sp {match-missing-object*elaborate*volume-match*false*too-small
    (state <s> ^name match-missing-object)
    (<s> ^volume-diff <v*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^vol-low-candidate-match { > <v*1> <low> })
    -->
    (<s> ^volume-match false +)
}

sp {match-missing-object*elaborate*volume-match*true
    (state <s> ^name match-missing-object)
    (<s> ^volume-diff <v*2>)
    (<s> ^volume-diff <v*1>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^vol-high-candidate-match { >= <v*2> <high> })
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^vol-low-candidate-match { <= <v*1> <low> })
    -->
    (<s> ^volume-match true +)
}

sp {match-missing-object*elaborate*candidate
    (state <s> ^name match-missing-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object-info <obj-info>)
    -->
    (<s> ^candidate-info <obj-info> +)
}

sp {match-missing-object*elaborate*missing-object-info
    (state <s> ^name match-missing-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^missing-object-info <obj-info>)
    -->
    (<s> ^missing-object-info <obj-info> +)
}

sp {evaluate-new-object*prefer*match-missing-object*over*others
    (state <s> ^name evaluate-new-object)
    (<s> ^operator <o1> +)
    (<o1> ^name match-missing-object)
    (<s> ^operator <o2> +)
    (<o2> ^name { << create-new-object >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {evaluate-new-object*prefer*match-known-object*over*others
    (state <s> ^name evaluate-new-object)
    (<s> ^operator <o1> +)
    (<o1> ^name match-known-object)
    (<s> ^operator <o2> +)
    (<o2> ^name { << match-missing-object create-new-object >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {match-known-object*apply*link-objects*monitor*perception
    (state <s> ^name match-known-object)
    (<s> ^operator <o>)
    (<o> ^name link-objects)
    (<o> ^dest-info <d*1>)
    (<o> ^src-info <s*1>)
    (<d*1> ^perception-obj <p*2>)
    (<s*1> ^perception-obj <p*1>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<p*2> ^id <dest>)
    (<p*1> ^id <src>)
    -->
    
}

sp {match-known-object*apply*link-objects
    (state <s> ^name match-known-object)
    (<s> ^operator <o>)
    (<o> ^name link-objects)
    (<o> ^dest-info <d*1>)
    (<o> ^src-info <s*1>)
    (<s*1> ^perception-obj <p*1>)
    (<d*1> ^object-handle <dest-handle>)
    (<p*1> ^id <src-handle>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    -->
    (<ol> ^modify-scene <ms> +)
    (<ms> ^type link +)
    (<ms> ^source-handle <src-handle> +)
    (<ms> ^destination-handle <dest-handle> +)
}

sp {match-known-object*prefer*link-objects*more*overlap
    (state <s> ^name match-known-object)
    (<s> ^operator <o2> +)
    (<o2> ^name link-objects)
    (<s> ^operator <o1> +)
    (<o1> ^name link-objects)
    (<o2> ^overlap <val2>)
    (<o1> ^overlap { > <val2> <val1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {match-known-object*reject*not-enough-overlap
    (state <s> ^name match-known-object)
    (<s> ^operator <o> +)
    (<o> ^name link-objects)
    (<o> ^dest-info <dest-obj-info>)
    (<o> ^overlap <o*1>)
    (<dest-obj-info> ^perception-obj <any>)
    (<s> ^contained-threshold { > <o*1> <thresh> })
    -->
    (<s> ^operator <o> -)
}

sp {match-known-object*propose*link-objects
    (state <s> ^name match-known-object)
    (<s> ^overlap-results <o*1>)
    (<s> ^object-info <src-obj-info>)
    (<o*1> ^result <res>)
    (<res> ^overlapper-info <dest-obj-info>)
    (<res> ^overlap <val>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name link-objects +)
    (<o> ^src-info <src-obj-info> +)
    (<o> ^dest-info <dest-obj-info> +)
    (<o> ^overlap <val> +)
}

sp {match-known-object*apply*complete-match-known-object
    (state <s> ^name match-known-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-match-known-object)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^matches-known-object none +)
}

sp {match-known-object*propose*complete-match-known-object
    (state <s> ^name match-known-object)
    -->
    (<s> ^operator <o> +)
    (<o> ^name complete-match-known-object +)
}

sp {match-known-object*prefer*all*over*complete-match-known-object
    (state <s> ^name match-known-object)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-match-known-object)
    (<s> ^operator <o1> +)
    (<o1> ^name { <> complete-match-known-object <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {match-known-object*apply*overlap-command*debug-perception*report*overlap
    (state <s> ^name match-known-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name overlap-command)
    (<s> ^overlap-command <o*2>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<o*2> ^result <res>)
    (<res> ^overlap <val>)
    (<res> ^object-b <b>)
    (<res> ^object-a <a>)
    -->
    
}

sp {match-known-object*apply*overlap-command*copy-result
    (state <s> ^name match-known-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name overlap-command)
    (<s> ^overlap-results <results>)
    (<s> ^overlap-command <cmd>)
    (<cmd> ^result <res>)
    (<res> ^overlap <val>)
    -->
    (<s> ^overlap-command <cmd> -)
    (<results> ^result <res> +)
}

sp {match-known-object*propose*overlap-command
    (state <s> ^name match-known-object)
    (<s> ^intersect-command <i*1>)
    (<i*1> ^result { <> none <int-id> })
   -{ (<s> ^overlap-results <o*2>)
      (<o*2> ^result <r*1>)
      (<r*1> ^object-b <int-id>)}
    (<s> ^object-info <o*1>)
    (<o*1> ^perception-obj <p*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*2>)
    (<p*2> ^object-monitor <o*3>)
    (<o*3> ^object-info <int-info>)
   -{ (<int-info> ^wm-obj <w*1>)
      (<w*1> ^predicates <p*3>)
      (<p*3> ^category location)}
    (<int-info> ^belief-obj <b*1>)
    (<b*1> ^id <int-id>)
    (<p*1> ^id <new-id>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name overlap-command +)
    (<o> ^object-a <new-id> +)
    (<o> ^object-b <int-id> +)
}

sp {match-known-object*elaborate*overlap-result*overlapper-info
    (state <s> ^name match-known-object)
    (<s> ^overlap-results <o*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*2>)
    (<o*2> ^object-info <known-obj-info>)
    (<known-obj-info> ^belief-obj <b*1>)
    (<b*1> ^id <known-bel-id>)
    (<o*1> ^result <res>)
    (<res> ^object-b <known-bel-id>)
    -->
    (<res> ^overlapper-info <known-obj-info> +)
}

sp {match-known-object*elaborate*overlap-results
    (state <s> ^name match-known-object)
    -->
    (<s> ^overlap-results <cmd> +)
}

sp {match-known-object*elaborate*contained-threshold
    (state <s> ^name match-known-object)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^contained-threshold <thresh>)
    -->
    (<s> ^contained-threshold <thresh> +)
}

sp {match-known-object*elaborate*object-info
    (state <s> ^name match-known-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object-info <obj-info>)
    -->
    (<s> ^object-info <obj-info> +)
}

sp {match-known-object*propose*intersect-command
    (state <s> ^name match-known-object)
   -{ (<s> ^intersect-command <i*1>)
      (<i*1> ^result <r*1>)}
    (<s> ^object-info <o*1>)
    (<o*1> ^perception-obj <p*1>)
    (<p*1> ^id <id>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name intersect-command +)
    (<o> ^object-id <id> +)
    (<o> ^candidate-set <cand> +)
    (<cand> ^type tag_select +)
    (<cand> ^a <a*1> +)
    (<a*1> ^type all_nodes +)
    (<cand> ^tag_name object-source +)
    (<cand> ^tag_value belief +)
}

sp {evaluate-new-object*propose*create-new-object
    (state <s> ^name evaluate-new-object)
    (<s> ^object-info <o*2>)
    (<o*2> ^object-handle <obj-handle>)
    (<s> ^object-info <o*1>)
    (<o*1> ^perception-obj <perc-obj>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-new-object +)
    (<o> ^perception-obj <perc-obj> +)
    (<o> ^object-handle <obj-handle> +)
}

sp {evaluate-new-object*propose*match-missing-object
    (state <s> ^name evaluate-new-object)
    (<s> -^matches-missing-object <m*1>)
    (<s> ^match-missing-object-info <missing>)
    (<missing> ^wm-obj <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^visible false)
    (<s> ^object-info <obj-info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name match-missing-object +)
    (<o> ^object-info <obj-info> +)
    (<o> ^missing-object-info <missing> +)
}

sp {evaluate-new-object*propose*match-known-object
    (state <s> ^name evaluate-new-object)
    (<s> -^matches-known-object <m*1>)
    (<s> ^object-info <obj-info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name match-known-object +)
    (<o> ^object-info <obj-info> +)
}

sp {evaluate-new-object*elaborate*match-missing-object
    (state <s> ^name evaluate-new-object)
    (<s> ^object-info <o*1>)
    (<o*1> ^candidate-for-missing-object <obj-info>)
    -->
    (<s> ^match-missing-object-info <obj-info> +)
}

sp {evaluate-new-object*elaborate*object-info
    (state <s> ^name evaluate-new-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object-info <obj-info>)
    -->
    (<s> ^object-info <obj-info> +)
}

sp {evaluate-grown-object*prefer*others*over*copy-object
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o2> +)
    (<o2> ^name copy-object)
    (<s> ^operator <o1> +)
    (<o1> ^name { <> copy-object <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {evaluate-grown-object*prefer*overlap*intersect*over*link
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o2> +)
    (<o2> ^name internally-link-objects)
    (<s> ^operator <o1> +)
    (<o1> ^name { << overlap-command intersect-command >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {evaluate-grown-object*prefer*intersect*over*overlap
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o2> +)
    (<o2> ^name overlap-command)
    (<s> ^operator <o1> +)
    (<o1> ^name intersect-command)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {evaluate-grown-object*apply*copy-object*remove*old*recheck-growth
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o>)
    (<o> ^name copy-object)
    (<o> ^object-info <o*1>)
    (<o*1> ^differences <diffs>)
    (<diffs> ^recheck-growth-at <r>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^time <t*1>)
    (<t*1> ^seconds { > <r> <t> })
    -->
    (<diffs> ^recheck-growth-at <r> -)
}

sp {evaluate-grown-object*apply*copy-object*mark-recheck-growth
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o>)
    (<o> ^name copy-object)
    (<o> ^object-info <o*1>)
    (<o*1> ^differences <diffs>)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^recheck-growth-delay <d>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^time <t*2>)
    (<t*2> ^seconds <t>)
    -->
    (<diffs> ^recheck-growth-at (+ <t> <d>) +)
}

sp {evaluate-grown-object*apply*copy-object
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o>)
    (<o> ^name copy-object)
    (<o> ^object-info <obj-info>)
    -->
    (<obj-info> ^mark-for-copying true +)
}

sp {evaluate-grown-object*propose*copy-object
    (state <s> ^name evaluate-grown-object)
    (<s> ^object-info <obj-info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name copy-object +)
    (<o> ^object-info <obj-info> +)
}

sp {evaluate-grown-object*apply*internally-link-objects*monitor*perception
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o>)
    (<o> ^name internally-link-objects)
    (<o> ^dest-info <d*1>)
    (<o> ^src-info <s*1>)
    (<s*1> ^object-handle <src-handle>)
    (<d*1> ^object-handle <dest-handle>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    -->
    
}

sp {evaluate-grown-object*apply*internally-link-objects*link
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o>)
    (<o> ^name internally-link-objects)
    (<o> ^dest-info <dest-info>)
    (<o> ^src-info <s*1>)
    (<s*1> ^object-handle <src-handle>)
    -->
    (<dest-info> ^internal-link <src-handle> +)
}

sp {evaluate-grown-object*elaborate*internally-link-objects*dest-id
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o> +)
    (<o> ^name internally-link-objects)
    (<s> ^contained-object-info <dest-info>)
    -->
    (<o> ^dest-info <dest-info> +)
}

sp {evaluate-grown-object*propose*internally-link-object
    (state <s> ^found-contained-object true)
    (<s> ^name evaluate-grown-object)
    (<s> ^object-info <obj-info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name internally-link-objects +)
    (<o> ^src-info <obj-info> +)
}

sp {evaluate-grown-object*apply*overlap-command*debug-perception*report*overlap
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name overlap-command)
    (<s> ^overlap-command <o*2>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<o*2> ^result <res>)
    (<res> ^overlap <val>)
    (<res> ^object-b <b>)
    (<res> ^object-a <a>)
    -->
    
}

sp {evaluate-grown-object*apply*overlap-command*copy-result
    (state <s> ^name evaluate-grown-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name overlap-command)
    (<s> ^overlap-results <results>)
    (<s> ^overlap-command <cmd>)
    (<cmd> ^result <res>)
    (<res> ^overlap { <> none <o*2> })
    -->
    (<s> ^overlap-command <cmd> -)
    (<results> ^result <res> +)
}

sp {evaluate-grown-object*propose*overlap-command*contains
    (state <s> ^name evaluate-grown-object)
    (<s> ^intersect-command <i*1>)
    (<i*1> ^result { <> none <belief-id> })
   -{ (<s> ^overlap-results <o*3>)
      (<o*3> ^result <r*1>)
      (<r*1> ^object-a <belief-id>)}
    (<s> ^object-info <o*1>)
    (<o*1> ^perception-obj <p*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*2>)
    (<p*2> ^object-monitor <o*2>)
    (<o*2> ^object-info <obj-info>)
    (<obj-info> -^perception-obj <p*3>)
    (<obj-info> ^belief-obj <b*1>)
    (<b*1> ^id <belief-id>)
    (<p*1> ^id <perc-id>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name overlap-command +)
    (<o> ^object-a <belief-id> +)
    (<o> ^object-b <perc-id> +)
}

sp {evaluate-grown-object*propose*intersect-command
    (state <s> ^name evaluate-grown-object)
   -{ (<s> ^intersect-command <i*1>)
      (<i*1> ^result <r*1>)}
    (<s> ^object-info <o*1>)
    (<o*1> ^perception-obj <p*1>)
    (<p*1> ^id <id>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name intersect-command +)
    (<o> ^object-id <id> +)
    (<o> ^candidate-set <perc-objs> +)
    (<perc-objs> ^type tag_select +)
    (<perc-objs> ^a <a*1> +)
    (<a*1> ^type all_nodes +)
    (<perc-objs> ^tag_name object-source +)
    (<perc-objs> ^tag_value belief +)
}

sp {evaluate-grown-object*elaborate*found-contained-object
    (state <s> ^name evaluate-grown-object)
    (<s> ^contained-object-info <obj>)
    -->
    (<s> ^found-contained-object true +)
}

sp {evaluate-grown-object*elaborate*contained-object
    (state <s> ^name evaluate-grown-object)
    (<s> ^overlap-results <o*2>)
    (<s> ^object-info <o*1>)
    (<o*1> ^perception-obj <p*1>)
    (<s> ^contained-threshold <t>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*2>)
    (<p*2> ^object-monitor <o*3>)
    (<o*3> ^object-info <obj-info>)
    (<obj-info> ^belief-obj <b*1>)
    (<b*1> ^id <a>)
    (<o*2> ^result <res>)
    (<res> ^object-a <a>)
    (<res> ^object-b <grown-id>)
    (<p*1> ^id <grown-id>)
    (<res> ^overlap { > <t> <o*4> })
    -->
    (<s> ^contained-object-info <obj-info> +)
}

sp {evaluate-grown-object*elaborate*overlap-results
    (state <s> ^name evaluate-grown-object)
    -->
    (<s> ^overlap-results <res> +)
}

sp {evaluate-grown-object*elaborate*agent-params*contained-threshold
    (state <s> ^name evaluate-grown-object)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^contained-threshold <t>)
    -->
    (<s> ^contained-threshold <t> +)
}

sp {evaluate-grown-object*elaborate*object-info
    (state <s> ^name evaluate-grown-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object-info <obj-info>)
    -->
    (<s> ^object-info <obj-info> +)
}

sp {attend-to-stale-object*apply*internally-link-objects*monitor*perception
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o>)
    (<o> ^name internally-link-objects)
    (<o> ^dest-info <d*1>)
    (<o> ^src-info <s*1>)
    (<d*1> ^object-handle <dest>)
    (<s*1> ^object-handle <src>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    -->
    
}

sp {attend-to-stale-object*apply*internally-link-objects
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o>)
    (<o> ^name internally-link-objects)
    (<o> ^dest-info <dest-obj-info>)
    (<o> ^src-info <s*1>)
    (<s*1> ^object-handle <src-handle>)
    -->
    (<dest-obj-info> ^internal-link <src-handle> +)
}

sp {attend-to-stale-object*prefer*internally-link-objects*higher*overlap
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o2> +)
    (<o2> ^name internally-link-objects)
    (<s> ^operator <o1> +)
    (<o1> ^name internally-link-objects)
    (<o2> ^overlap <o*1>)
    (<o1> ^overlap { > <o*1> <overlap1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {attend-to-stale-object*elaborate*internally-link-objects*overlap
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o> +)
    (<o> ^name internally-link-objects)
    (<o> ^src-info <s*1>)
    (<s> ^overlap-results <o*1>)
    (<s*1> ^perception-obj <p*1>)
    (<p*1> ^id <src-perc-id>)
    (<o*1> ^result <res>)
    (<res> ^object-b <src-perc-id>)
    (<res> ^overlap <overlap>)
    -->
    (<o> ^overlap <overlap> +)
}

sp {attend-to-stale-object*propose*internally-link-objects
    (state <s> ^name attend-to-stale-object)
    (<s> ^contained-by <src-obj-info>)
    (<s> ^object-info <dest-obj-info>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name internally-link-objects +)
    (<o> ^src-info <src-obj-info> +)
    (<o> ^dest-info <dest-obj-info> +)
}

sp {attend-to-stale-object*apply*check-for-occlusion*occluded*add*info
    (state <s> ^object-occluded true)
    (<s> ^name attend-to-stale-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-for-occlusion)
    (<s> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<s> ^occlusion-check-period <period>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^time <t*1>)
    (<t*1> ^seconds <cur-t>)
    -->
    (<diffs> ^is-occluded true +)
    (<diffs> ^recheck-occlusion-time (+ <cur-t> <period>) +)
}

sp {attend-to-stale-object*apply*check-for-occlusion*not-occluded*mark-for-deletion
    (state <s> ^object-occluded false)
    (<s> ^name attend-to-stale-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-for-occlusion)
    (<s> ^object-info <obj-info>)
    -->
    (<obj-info> ^mark-for-deletion true +)
}

sp {attend-to-stale-object*propose*check-for-occlusion
    (state <s> ^name attend-to-stale-object)
    (<s> ^object-info <obj-info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name check-for-occlusion +)
    (<o> ^object-info <obj-info> +)
    (<o> ^report-to-superstate true +)
    (<o> ^report-to-top-state false +)
}

sp {attend-to-stale-object*reject*superoperator
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o>)
    (<o> ^name link-objects)
    (<o> ^modify-scene-command <m*1>)
    (<m*1> ^status complete)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^redo-attend true +)
}

sp {attend-to-stale-object*apply*link-objects*monitor*perception
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o>)
    (<o> ^name link-objects)
    (<o> ^modify-scene-command <cmd>)
    (<cmd> ^source-handle <src>)
    (<cmd> ^destination-handle <dest>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    -->
    
}

sp {attend-to-stale-object*apply*link-objects
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o>)
    (<o> ^name link-objects)
    (<o> ^modify-scene-command <cmd>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    -->
    (<ol> ^modify-scene <cmd> +)
}

sp {attend-to-stale-object*elaborate*link-objects*src-handle
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o> +)
    (<o> ^name link-objects)
    (<o> ^modify-scene-command <cmd>)
    (<s> ^contained-fragment-id <src-handle>)
    -->
    (<cmd> ^source-handle <src-handle> +)
}

sp {attend-to-stale-object*propose*link-objects
    (state <s> ^found-contained-fragment true)
    (<s> ^name attend-to-stale-object)
    (<s> ^object-info <o*1>)
    (<o*1> ^object-handle <dest-handle>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name link-objects +)
    (<o> ^modify-scene-command <cmd> +)
    (<cmd> ^type link +)
    (<cmd> ^destination-handle <dest-handle> +)
}

sp {attend-to-stale-object*prefer*others*over*check-for-occlusion
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o2> +)
    (<o2> ^name check-for-occlusion)
    (<s> ^operator <o1> +)
    (<o1>
          ^name { << overlap-command intersect-command internally-link-objects link-objects >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {attend-to-stale-object*prefer*external*to*internal*link
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o2> +)
    (<o2> ^name internally-link-objects)
    (<s> ^operator <o1> +)
    (<o1> ^name link-objects)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {attend-to-stale-object*prefer*overlap-command*over*link-objects
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o1> +)
    (<o1> ^name overlap-command)
    (<s> ^operator <o2> +)
    (<o2> ^name { << link-objects internally-link-objects >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {attend-to-stale-object*elaborate*found-contained-fragment
    (state <s> ^name attend-to-stale-object)
    (<s> ^contained-fragment-id <id>)
    -->
    (<s> ^found-contained-fragment true +)
}

sp {attend-to-stale-object*elaborate*contained-by
    (state <s> ^name attend-to-stale-object)
    (<s> ^overlap-results <o*2>)
    (<s> ^object-info <o*1>)
    (<o*1> ^belief-obj <b*1>)
    (<s> ^contained-by-threshold <t>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*3>)
    (<o*3> ^object-info <cont-obj-info>)
    (<cont-obj-info> ^perception-obj <p*2>)
    (<p*2> ^id <cont-id>)
    (<o*2> ^result <res>)
    (<res> ^object-b <cont-id>)
    (<res> ^object-a <stale-id>)
    (<b*1> ^id <stale-id>)
    (<res> ^overlap { > <t> <o*4> })
    -->
    (<s> ^contained-by <cont-obj-info> +)
}

sp {attend-to-stale-object*elaborate*contained-fragment
    (state <s> ^name attend-to-stale-object)
    (<s> ^overlap-results <o*2>)
    (<s> ^object-info <o*1>)
    (<o*1> ^belief-obj <b*1>)
    (<s> ^contained-threshold <t>)
    (<b*1> ^id <stale-id>)
    (<o*2> ^result <res>)
    (<res> ^object-b <stale-id>)
    (<res> ^overlap { > <t> <o*3> })
    (<res> ^object-a <cont-id>)
    -->
    (<s> ^contained-fragment-id <cont-id> +)
}

sp {attend-to-stale-object*elaborate*overlap-results
    (state <s> ^name attend-to-stale-object)
    -->
    (<s> ^overlap-results <res> +)
}

sp {attend-to-stale-object*elaborate*intersected-perc-id*from*intersect-command
    (state <s> ^name attend-to-stale-object)
    (<s> ^intersect-command <i*1>)
    (<i*1> ^result { <> none <obj-id> })
    -->
    (<s> ^intersected-perc-id <obj-id> +)
}

sp {attend-to-stale-object*elaborate*agent-params*contained-by-threshold
    (state <s> ^name attend-to-stale-object)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^contained-by-threshold <t>)
    -->
    (<s> ^contained-by-threshold <t> +)
}

sp {attend-to-stale-object*elaborate*agent-params*contained-threshold
    (state <s> ^name attend-to-stale-object)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^contained-threshold <t>)
    -->
    (<s> ^contained-threshold <t> +)
}

sp {attend-to-stale-object*elaborate*agent-params*occlusion-check-period
    (state <s> ^name attend-to-stale-object)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^occlusion-check-period <p>)
    -->
    (<s> ^occlusion-check-period <p> +)
}

sp {attend-to-stale-object*elaborate*object-info
    (state <s> ^name attend-to-stale-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object-info <obj-info>)
    -->
    (<s> ^object-info <obj-info> +)
}

sp {attend-to-stale-object*apply*overlap-command*debug-perception*report*overlap
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name overlap-command)
    (<s> ^overlap-command <o*2>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<o*2> ^result <res>)
    (<res> ^overlap <val>)
    (<res> ^object-b <b>)
    (<res> ^object-a <a>)
    -->
    
}

sp {attend-to-stale-object*apply*overlap-command*copy-result
    (state <s> ^name attend-to-stale-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name overlap-command)
    (<s> ^overlap-results <results>)
    (<s> ^overlap-command <cmd>)
    (<cmd> ^result <res>)
    (<res> ^overlap { <> none <o*2> })
    -->
    (<s> ^overlap-command <cmd> -)
    (<results> ^result <res> +)
}

sp {attend-to-stale-object*propose*overlapt-command*contained-by
    (state <s> ^name attend-to-stale-object)
    (<s> ^intersected-perc-id <perc-id>)
   -{ (<s> ^overlap-results <o*4>)
      (<o*4> ^result <r*1>)
      (<r*1> ^object-b <perc-id>)}
    (<s> ^object-info <o*1>)
    (<o*1> ^belief-obj <b*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*2>)
    (<o*2> ^object-info <o*3>)
    (<o*3> ^perception-obj <p*2>)
    (<p*2> ^id <perc-id>)
    (<b*1> ^id <stale-id>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name overlap-command +)
    (<o> ^object-a <stale-id> +)
    (<o> ^object-b <perc-id> +)
}

sp {attend-to-stale-object*propose*overlap-command*contains*new*fragment
    (state <s> ^name attend-to-stale-object)
    (<s> ^intersected-perc-id <perc-id>)
   -{ (<s> ^overlap-results <o*4>)
      (<o*4> ^result <r*1>)
      (<r*1> ^object-a <perc-id>)}
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^perception-monitor <p*1>)
      (<p*1> ^object-monitor <o*2>)
      (<o*2> ^object-info <o*3>)
      (<o*3> ^perception-obj <p*2>)
      (<p*2> ^id <perc-id>)}
    (<s> ^object-info <o*1>)
    (<o*1> ^belief-obj <b*1>)
    (<b*1> ^id <stale-id>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name overlap-command +)
    (<o> ^object-a <perc-id> +)
    (<o> ^object-b <stale-id> +)
}

sp {attend-to-stale-object*propose*intersect-command
    (state <s> ^name attend-to-stale-object)
   -{ (<s> ^intersect-command <i*1>)
      (<i*1> ^result <r*1>)}
    (<s> ^object-info <o*1>)
    (<o*1> ^belief-obj <b*1>)
    (<b*1> ^id <id>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name intersect-command +)
    (<o> ^object-id <id> +)
    (<o> ^candidate-set <perc-objs> +)
    (<perc-objs> ^type tag_select +)
    (<perc-objs> ^a <a*1> +)
    (<a*1> ^type all_nodes +)
    (<perc-objs> ^tag_name object-source +)
    (<perc-objs> ^tag_value perception +)
}

sp {anystate*apply*attend-to-scene-change*debug-perception*report-change*arm*actions
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<c> ^type { << arm-status-change >> <type> })
    -->
    
}

sp {anystate*apply*attend-to-scene-change*debug-perception*report-change*belief
    (state <s> ^operator <o>)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c>)
    (<c> ^object-info <o*1>)
    (<o*1> ^object-handle <handle>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<c> ^type <type>)
    -->
    
}

sp {anystate*scene-change*recheck-occlusion*preference-order
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type recheck-occlusion)
    -->
    (<o> ^preference-order 10 +)
}

sp {anystate*scene-change*unary*predicates*preference-order
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1>
          ^type { << changed-object-predicate changed-object-status >> <t*1> })
    -->
    (<o> ^preference-order 20 +)
}

sp {anystate*scene-change*moved-object*preference-order
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type moved-object)
    -->
    (<o> ^preference-order 30 +)
}

sp {anystate*scene-change*grown-object*preference-order
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type grown-object)
    -->
    (<o> ^preference-order 40 +)
}

sp {anystate*scene-change*stability-timer-satisfied*preference-order
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type { << stability-timer-satisfied new-stable-object >> <t*1> })
    -->
    (<o> ^preference-order 50 +)
}

sp {anystate*scene-change*new-object*preference-order
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type new-object)
    -->
    (<o> ^preference-order 60 +)
}

sp {anystate*scene-change*shrunken-object*preference-order
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type shrunken-object)
    -->
    (<o> ^preference-order 90 +)
}

sp {anystate*scene-change*stale-object*preference-order
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type stale-object)
    -->
    (<o> ^preference-order 100 +)
}

sp {anystate*scene-change*robot-changes*preference-order
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1>
          ^type { << changed-arm-status changed-robot-status changed-waypoint >> <t*1> })
    -->
    (<o> ^preference-order 150 +)
}

sp {anystate*scene-change*update*delete*object*preference-order
    (state <s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*1>)
    (<c*1> ^type { << update-object delete-object >> <t*1> })
    -->
    (<o> ^preference-order 200 +)
}

sp {anystate*attend-to-scene-change*elaborate*default*preference-order
    (state <s> ^operator <o> +)
    (<o> -^preference-order { > 0 <p*1> })
    (<o> ^name attend-to-scene-change)
    -->
    (<o> ^preference-order 0 +)
}

sp {anystate*attend-to-scene-change*prefer*equal*same*preference-order
    (state <s> ^operator <o2> +)
    (<o2> ^name attend-to-scene-change)
    (<s> ^operator <o1> +)
    (<o1> ^name attend-to-scene-change)
    (<o2> ^preference-order <pref>)
    (<o1> ^preference-order <pref>)
    -->
    (<s> ^operator <o1> = <o2>)
}

sp {anystate*attend-to-scene-change*prefer*higher*preference-order
    (state <s> ^operator <o2> +)
    (<o2> ^name attend-to-scene-change)
    (<s> ^operator <o1> +)
    (<o1> ^name attend-to-scene-change)
    (<o2> ^preference-order <p*1>)
    (<o1> ^preference-order { > <p*1> <pref1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {anystate*reject*attend-to-scene-change*moving*object
    (state <s> ^operator <o> +)
    (<s> -^name { << execute-pick-up1 execute-put-down1 >> <n*1> })
    (<o> ^name attend-to-scene-change)
    (<o> ^change <c*2>)
    (<o> ^change <c*1>)
    (<c*1> ^object-info <o*1>)
    (<o*1> ^wm-obj <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^arm-status { << moving grabbed >> <a*1> })
    (<c*2> ^type { <> changed-object-status <t*1> })
    -->
    (<s> ^operator <o> -)
}

sp {attend-to-scene-change*apply*redo*attend
    (state <s> ^redo-attend true)
    (<s> ^name attend-to-scene-change)
    (<s> ^operator <o*1>)
    (<o*1> ^name redo-attend)
    -->
    (<s> ^redo-attend false +)
}

sp {attend-to-scene-change*propose*redo*attend
    (state <s> ^redo-attend true)
    (<s> ^name attend-to-scene-change)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name redo-attend +)
}

sp {attend-to-scene-change*elaborate*attend-to-change*info
    (state <s> ^name attend-to-scene-change)
    (<s> ^scene-change <s*1>)
    (<s> ^operator <o> +)
    (<o> ^change-type <type>)
    (<s*1> ^{ <> type <att> } <val>)
    -->
    (<o> ^<att> <val> +)
}

sp {attend-to-scene-change*propose*attend-to-change
    (state <s> ^name attend-to-scene-change)
    (<s> -^redo-attend true)
    (<s> ^change-info <info>)
    (<info> ^op-name <op-name>)
    (<info> ^type <type>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name <op-name> +)
    (<o> ^change-type <type> +)
}

sp {attend-to-scene-change*elaborate*change-info
    (state <s> ^name attend-to-scene-change)
    (<s> ^scene-change <s*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*1>)
    (<p*1> ^change-info <c*1>)
    (<c*1> ^change <change-info>)
    (<change-info> ^type <change-type>)
    (<s*1> ^type <change-type>)
    -->
    (<s> ^change-info <change-info> +)
}

sp {attend-to-scene-change*elaborate*scene-change
    (state <s> ^name attend-to-scene-change)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^change <change>)
    -->
    (<s> ^scene-change <change> +)
}

sp {apply*next-sentence-update-dialog-object-list-saved
    (state <s> ^operator <o*1>)
    (<o*1> ^name next-sentence)
    (<s> ^dialog-object-list <dol>)
    (<s> ^dialog-object-list-saved { <> <dol> <dols> })
    -->
    (<s> ^dialog-object-list-saved <dols> -)
    (<s> ^dialog-object-list-saved <dol> +)
}

sp {apply*next-sentence2
    (state <s> ^operator <op>)
    (<op> ^name next-sentence)
    (<s> ^interaction <i*1>)
    (<i*1> ^status <stat>)
    (<stat> ^new-message <nm>)
    -->
    (<stat> ^new-message <nm> -)
}

sp {apply*next-sentence
    (state <s> ^terminated-sentence <csn>)
    (<s> ^current-sentence-number <csn>)
    (<s> ^operator <op>)
    (<op> ^name next-sentence)
    (<op> ^next-sentence-number <n>)
    -->
    (<s> ^terminated-sentence <csn> -)
    (<s> ^current-sentence-number <n> +)
    (<s> ^current-sentence-number <csn> -)
}

sp {rosie*propose*next-sentence*skip
    (state <s> ^superstate <ss>)
    (<ss> ^world-usage internal)
    (<ss> ^current-sentence-number <csn>)
    (<s> ^segment <s*1>)
    (<s*1> ^input-sentence <i*1>)
    (<i*1> ^skip true)
    -->
    (<ss> ^terminated-sentence <csn> +)
}

sp {rosie*propose*next-sentence
    (state <s> ^terminated-sentence <csn>)
    (<s> ^current-sentence-number <csn>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^max-sentence-number { > <csn> <n> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name next-sentence +)
    (<op> ^next-sentence-number (+ <csn> 1) +)
}

sp {apply*initialize-rosie*initialize-world*othello
    (state <s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name initialize-rosie)
    -->
    (<s> ^world <world> +)
    (<world> ^objects <objects> +)
    (<world> ^predicates <predicates> +)
    (<world> ^robot <robot> +)
    (<robot> ^handle rosie +)
    (<robot> ^current-location <loc> +)
    (<robot> ^item-type object +)
    (<robot> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<robot> ^predicates <p*1> +)
    (<p*1> ^handle rosie +)
    (<objects> ^object <obj0> +)
    (<objects> ^object <obj1> +)
    (<objects> ^object <obj2> +)
    (<objects> ^object <obj3> +)
    (<objects> ^object <obj4> +)
    (<objects> ^object <obj5> +)
    (<objects> ^object <obj6> +)
    (<objects> ^object <obj7> +)
    (<objects> ^object <loc> +)
    (<objects> ^object <loc1> +)
    (<objects> ^object <loc2> +)
    (<objects> ^object <loc3> +)
    (<objects> ^object <loc4> +)
    (<objects> ^object <loc5> +)
    (<objects> ^object <loc6> +)
    (<objects> ^object <loc7> +)
    (<objects> ^object <loc8> +)
    (<objects> ^object <loc9> +)
    (<objects> ^object <loc10> +)
    (<objects> ^object <loc11> +)
    (<objects> ^object <loc12> +)
    (<objects> ^object <loc13> +)
    (<objects> ^object <loc14> +)
    (<objects> ^object <loc15> +)
    (<loc> ^handle |\|B0\|| +)
    (<loc> ^item-type object +)
    (<loc> ^predicates <ploc> +)
    (<ploc> ^x 1 +)
    (<ploc> ^y 1 +)
    (<ploc> ^category location +)
    (<ploc> ^visible true +)
    (<loc1> ^handle |\|B1\|| +)
    (<loc1> ^item-type object +)
    (<loc1> ^predicates <ploc1> +)
    (<ploc1> ^x 2 +)
    (<ploc1> ^y 1 +)
    (<ploc1> ^category location +)
    (<ploc1> ^visible true +)
    (<loc2> ^handle |\|B2\|| +)
    (<loc2> ^item-type object +)
    (<loc2> ^predicates <ploc2> +)
    (<ploc2> ^x 3 +)
    (<ploc2> ^y 1 +)
    (<ploc2> ^category location +)
    (<ploc2> ^visible true +)
    (<loc3> ^handle |\|B3\|| +)
    (<loc3> ^item-type object +)
    (<loc3> ^predicates <ploc3> +)
    (<ploc3> ^x 4 +)
    (<ploc3> ^y 1 +)
    (<ploc3> ^category location +)
    (<ploc3> ^visible true +)
    (<loc4> ^handle |\|B4\|| +)
    (<loc4> ^item-type object +)
    (<loc4> ^predicates <ploc4> +)
    (<ploc4> ^x 1 +)
    (<ploc4> ^y 2 +)
    (<ploc4> ^category location +)
    (<ploc4> ^visible true +)
    (<loc5> ^handle |\|B5\|| +)
    (<loc5> ^item-type object +)
    (<loc5> ^predicates <ploc5> +)
    (<ploc5> ^x 2 +)
    (<ploc5> ^y 2 +)
    (<ploc5> ^category location +)
    (<ploc5> ^visible true +)
    (<loc6> ^handle |\|B6\|| +)
    (<loc6> ^item-type object +)
    (<loc6> ^predicates <ploc6> +)
    (<ploc6> ^x 3 +)
    (<ploc6> ^y 2 +)
    (<ploc6> ^category location +)
    (<ploc6> ^visible true +)
    (<loc7> ^handle |\|B7\|| +)
    (<loc7> ^item-type object +)
    (<loc7> ^predicates <ploc7> +)
    (<ploc7> ^x 4 +)
    (<ploc7> ^y 2 +)
    (<ploc7> ^category location +)
    (<ploc7> ^visible true +)
    (<loc8> ^handle |\|B8\|| +)
    (<loc8> ^item-type object +)
    (<loc8> ^predicates <ploc8> +)
    (<ploc8> ^x 1 +)
    (<ploc8> ^y 3 +)
    (<ploc8> ^category location +)
    (<ploc8> ^visible true +)
    (<loc9> ^handle |\|B9\|| +)
    (<loc9> ^item-type object +)
    (<loc9> ^predicates <ploc9> +)
    (<ploc9> ^x 2 +)
    (<ploc9> ^y 3 +)
    (<ploc9> ^category location +)
    (<ploc9> ^visible true +)
    (<loc10> ^handle |\|B10\|| +)
    (<loc10> ^item-type object +)
    (<loc10> ^predicates <ploc10> +)
    (<ploc10> ^x 3 +)
    (<ploc10> ^y 3 +)
    (<ploc10> ^category location +)
    (<ploc10> ^visible true +)
    (<loc11> ^handle |\|B11\|| +)
    (<loc11> ^item-type object +)
    (<loc11> ^predicates <ploc11> +)
    (<ploc11> ^x 4 +)
    (<ploc11> ^y 3 +)
    (<ploc11> ^category location +)
    (<ploc11> ^visible true +)
    (<loc12> ^handle |\|B12\|| +)
    (<loc12> ^item-type object +)
    (<loc12> ^predicates <ploc12> +)
    (<ploc12> ^x 1 +)
    (<ploc12> ^y 4 +)
    (<ploc12> ^category location +)
    (<ploc12> ^visible true +)
    (<loc13> ^handle |\|B13\|| +)
    (<loc13> ^item-type object +)
    (<loc13> ^predicates <ploc13> +)
    (<ploc13> ^x 2 +)
    (<ploc13> ^y 4 +)
    (<ploc13> ^category location +)
    (<ploc13> ^visible true +)
    (<loc14> ^handle |\|B14\|| +)
    (<loc14> ^item-type object +)
    (<loc14> ^predicates <ploc14> +)
    (<ploc14> ^x 3 +)
    (<ploc14> ^y 4 +)
    (<ploc14> ^category location +)
    (<ploc14> ^visible true +)
    (<loc15> ^handle |\|B15\|| +)
    (<loc15> ^item-type object +)
    (<loc15> ^predicates <ploc15> +)
    (<ploc15> ^x 4 +)
    (<ploc15> ^y 4 +)
    (<ploc15> ^category location +)
    (<ploc15> ^visible true +)
    (<obj0> ^type object +)
    (<obj0> ^handle self +)
    (<obj0> ^predicates <plot0> +)
    (<plot0> ^type object +)
    (<obj1> ^handle |\|L1\|| +)
    (<obj1> ^predicates <plot1> +)
    (<obj1> ^item-type object +)
    (<plot1> ^category block +)
    (<plot1> ^color red1 +)
    (<plot1> ^visible true +)
    (<plot1> ^movable true +)
    (<obj2> ^handle |\|L2\|| +)
    (<obj2> ^item-type object +)
    (<obj2> ^predicates <plot2> +)
    (<plot2> ^category block +)
    (<plot2> ^color red1 +)
    (<plot2> ^visible true +)
    (<plot2> ^movable true +)
    (<obj3> ^handle |\|L3\|| +)
    (<obj3> ^item-type object +)
    (<obj3> ^predicates <plot3> +)
    (<plot3> ^category block +)
    (<plot3> ^color red1 +)
    (<plot3> ^visible true +)
    (<plot3> ^movable true +)
    (<obj4> ^handle |\|L4\|| +)
    (<obj4> ^predicates <plot4> +)
    (<obj4> ^item-type object +)
    (<plot4> ^category block +)
    (<plot4> ^color blue1 +)
    (<plot4> ^visible true +)
    (<plot4> ^movable true +)
    (<obj5> ^handle |\|L5\|| +)
    (<obj5> ^item-type object +)
    (<obj5> ^predicates <plot5> +)
    (<plot5> ^category block +)
    (<plot5> ^color blue1 +)
    (<plot5> ^visible true +)
    (<plot5> ^movable true +)
    (<obj6> ^handle |\|L6\|| +)
    (<obj6> ^item-type object +)
    (<obj6> ^predicates <plot6> +)
    (<plot6> ^category block +)
    (<plot6> ^color blue1 +)
    (<plot6> ^visible true +)
    (<plot6> ^movable true +)
    (<obj7> ^handle |\|L7\|| +)
    (<obj7> ^predicates <plot7> +)
    (<obj7> ^item-type object +)
    (<plot7> ^category block +)
    (<plot7> ^color red1 +)
    (<plot7> ^visible true +)
    (<plot7> ^movable true +)
    (<plot7> ^indicated pointed +)
    (<predicates> ^predicate <on1> +)
    (<predicates> ^predicate <below1> +)
    (<on1> ^handle on1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^instance <on-1> +)
    (<on1> ^instance <on-2> +)
    (<on1> ^instance <on-3> +)
    (<on1> ^instance <on-4> +)
    (<on1> ^instance <on-5> +)
    (<on1> ^instance <on-6> +)
    (<on-1> ^1 <obj1> +)
    (<on-1> ^2 <loc9> +)
    (<on-2> ^1 <obj2> +)
    (<on-2> ^2 <loc7> +)
    (<on-3> ^1 <obj4> +)
    (<on-3> ^2 <loc5> +)
    (<on-4> ^1 <obj5> +)
    (<on-4> ^2 <loc6> +)
    (<on-5> ^1 <obj6> +)
    (<on-5> ^2 <loc10> +)
    (<on-6> ^1 <obj3> +)
    (<on-6> ^2 <loc2> +)
    (<below1> ^handle below1 +)
    (<below1> ^item-type predicate +)
    (<below1> ^instance <b-1> +)
    (<below1> ^instance <b-2> +)
    (<below1> ^instance <b-3> +)
    (<below1> ^instance <b-4> +)
    (<below1> ^instance <b-5> +)
    (<below1> ^instance <b-6> +)
    (<below1> ^instance <b-7> +)
    (<below1> ^instance <b-8> +)
    (<below1> ^instance <b-21> +)
    (<below1> ^instance <b-22> +)
    (<below1> ^instance <b-23> +)
    (<below1> ^instance <b-24> +)
    (<below1> ^instance <b-25> +)
    (<below1> ^instance <b-26> +)
    (<below1> ^instance <b-27> +)
    (<below1> ^instance <b-28> +)
    (<b-1> ^2 <obj1> +)
    (<b-1> ^1 <loc1> +)
    (<b-2> ^2 <obj2> +)
    (<b-2> ^1 <loc2> +)
    (<b-3> ^2 <obj4> +)
    (<b-3> ^1 <loc3> +)
    (<b-4> ^2 <obj3> +)
    (<b-4> ^1 <loc4> +)
    (<b-5> ^2 <obj5> +)
    (<b-5> ^1 <loc5> +)
    (<b-6> ^2 <obj1> +)
    (<b-6> ^1 <loc6> +)
    (<b-7> ^2 <obj2> +)
    (<b-7> ^1 <loc7> +)
    (<b-8> ^2 <obj3> +)
    (<b-8> ^1 <loc8> +)
    (<b-21> ^2 <obj1> +)
    (<b-21> ^1 <loc11> +)
    (<b-22> ^2 <obj2> +)
    (<b-22> ^1 <loc12> +)
    (<b-23> ^2 <obj4> +)
    (<b-23> ^1 <loc13> +)
    (<b-24> ^2 <obj3> +)
    (<b-24> ^1 <loc14> +)
    (<b-25> ^2 <obj5> +)
    (<b-25> ^1 <loc15> +)
    (<b-26> ^2 <obj6> +)
    (<b-26> ^1 <loc> +)
    (<b-27> ^2 <obj1> +)
    (<b-27> ^1 <loc10> +)
    (<b-28> ^2 <obj2> +)
    (<b-28> ^1 <loc9> +)
}

sp {apply*wait-for-response*add*next-sentence-number
    (state <s> ^top-state <ts>)
    (<ts> ^game-scripting true)
    (<s> ^operator <o*1>)
    (<o*1> ^name wait-for-response)
    (<ts> ^n-sentence-number <csn>)
    -->
    (<ts> ^n-sentence-number <csn> -)
    (<ts> ^current-sentence-number <csn> +)
}

sp {apply*wait-for-response*stop*max-sentence
    (state <s> ^operator <o*1>)
    (<o*1> ^name wait-for-response)
    (<s> ^top-state <ts>)
    (<ts> ^max-sentence-number <csn>)
    (<ts> ^current-sentence-number { > <csn> <c*1> })
    -->
    (write (cmd |ctf stats.txt stats|))
    (write (cmd |ctf statsm.txt statsm|))
    (write (cmd |ctf statesexp.txt fc game-search*elaborate*other-levels*simulated|))
    (write (cmd |ctf solution.txt print (* ^dcount *) -d 2|))
    (write (cmd |ctf chunks.txt pfc|))
    (write (cmd |ctf s1.txt print s1 -d 3|))
    (halt)
}

sp {apply*interpet-message*remove*current-sentence-number
    (state <s> ^top-state <ts>)
    (<ts> ^game-scripting true)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-message)
    (<ts> ^current-sentence-number <csn>)
    -->
    (<ts> ^n-sentence-number (+ <csn> 1) +)
    (<ts> ^current-sentence-number <csn> -)
}

sp {language-comprehension*propose*initialize-rosie
    (state <s> ^name rosie)
    (<s> -^world <w*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> !)
    (<op> ^name initialize-rosie +)
}

sp {apply*halt*sync
    (state <s> ^operator <o*1>)
    (<o*1> ^name halt)
    -->
    (<s> ^test yes +)
}

sp {apply*halt*expectation-failures*none
    (state <s> ^operator <o*1>)
    (<s> -^expectation-failure <e*1>)
    (<o*1> ^name halt)
    -->
    
}

sp {apply*halt*expectation-failures
    (state <s> ^operator <o*1>)
    (<o*1> ^name halt)
    (<s> ^expectation-failure <csn>)
    -->
    
}

sp {apply*halt
    (state <s> ^test yes)
    (<s> ^operator <o*1>)
    (<o*1> ^name halt)
    (<s> ^failure-count <fc>)
    (<s> ^success-count <sc>)
    -->
    (halt)
}

sp {rosie*propose*halt
    (state <s> ^name rosie)
    (<s> ^max-sentence-number <n>)
    (<s> ^terminated-sentence <n>)
    (<s> ^current-sentence-number <n>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> !)
    (<op> ^name halt +)
}

sp {comprehension*apply*conjuction-processing
    (state <s> ^operator <op>)
    (<op> ^name conjuction-processing)
    (<op> ^after-rec <reciever2>)
    (<op> ^conj-rec <receiver1>)
    (<reciever2> ^lt <l*2>)
    (<l*2> ^converts-to <c-type>)
    (<reciever2> ^structure-type <s-type>)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-assigner <ass1>)
    (<ass1> ^struture-type *unknown*)
    (<ass1> ^parent-receiver <receiver1>)
    (<ass1> ^lt <l*1>)
    (<l*1> ^before <ass2>)
    (<ass2> ^structure-type *unknown*)
    -->
    (<receiver1> ^lt <l*3> +)
    (<l*3> ^converts-to <c-type> +)
    (<receiver1> ^structure-type <s-type> +)
    (<receiver1> ^delay-merge true -)
    (<ass1> ^structure-type <c-type> +)
    (<ass1> ^structure-type *unknown* -)
    (<ass1> ^lt <l*4> +)
    (<l*4> ^attachment immediately-follow +)
    (<ass2> ^structure-type <c-type> +)
    (<ass2> ^structure-type *unknown* -)
}

sp {comprehension*propose*conjuction-processing
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <receiver1>)
    (<receiver1> ^delay-merge true)
    (<receiver1> ^decision-count <after>)
    (<seg> ^not-merged-receiver { <> <receiver1> <receiver2> })
    (<receiver2> ^decision-count { > <after> <d*1> })
    (<receiver2> ^converts-to <c-type>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name conjuction-processing +)
    (<op> ^conj-rec <receiver1> +)
    (<op> ^after-rec <reciever2> +)
}

sp {comprehend*apply*non-process-multiple*remove-referent-home
    (state <s> ^operator <op>)
    (<op>
          -^name { << process-multiple-groundings dialog-object-list-update >> <n*1> })
    (<s> ^referent-home <pr>)
    -->
    (<s> ^referent-home <pr> -)
}

sp {comprehend*apply*process-multiple-groundings*not
    (state <s> ^referent-home <pr>)
   -{ (<pr> ^referent <pr-d>)
      (<pr> ^referent { <> <pr-d> <pr-g> })
      (<pr-g> ^predicates <p*1>)
      (<p*1> ^status live)
      (<pr-d> ^predicates <p*2>)
      (<p*2> ^visible { << false unknown >> <v*1> })}
    (<s> ^operator <op>)
    (<op> ^name process-multiple-groundings)
    -->
    (<op> ^not-live-available-with-not-visible true +)
}

sp {comprehension*compare*process-multiple-groundings
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name process-multiple-groundings)
    (<s> ^operator <op2> +)
    (<op2>
          ^name { << process-phrase-end process-semantics merge process-missing-assigner clean-up-retrieved-stack comprehend-construction comprehend-word >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehend*propose*process-multiple-groundings
    (state <s> ^multiple-referents true)
    (<s> -^processed-multiple true)
    (<s> ^name comprehension)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-multiple-groundings +)
}

sp {comprehension*elaborate-operator*process-multiple-groundings
    (state <s> ^name comprehension)
   -{ (<s> ^referent-home <r*3>)
      (<r*3> ^constraint <c*1>)
      (<c*1> ^multiple true)}
    (<s> ^referent-home <r*1>)
    (<r*1> ^referent <r*2>)
    (<r*1> ^referent { <> <r*2> <obj> })
    -->
    (<s> ^multiple-referents true +)
}

sp {process-multiple-groundings*apply*next-list-item*skip
    (state <s> ^operator <op>)
    (<op> ^name next-list-item)
    (<s> ^dialog-object-list <d*1>)
    (<d*1> ^referent <obj>)
    (<s> ^segment <s*1>)
    (<s*1> ^last-merge <l*1>)
    (<l*1> ^assigner <a*1>)
    (<a*1> ^parent-receiver <p*1>)
    (<p*1> ^constraint <c*1>)
    (<c*1> ^handle { << original former >> <h*1> })
    (<s> ^object <obj>)
    -->
    (<s> ^skipped-latter true +)
}

sp {process-multiple-groundings*apply*next-list-item
    (state <s> ^operator <op>)
    (<op> ^name next-list-item)
    (<s> ^dialog-object-list <dol>)
    (<op> ^item <dol>)
    (<dol> ^next <ndol>)
    -->
    (<s> ^dialog-object-list <dol> -)
    (<s> ^dialog-object-list <ndol> +)
}

sp {process-multiple-groundings*propose*next-list-item
    (state <s> ^name process-multiple-groundings)
    (<s> ^dialog-object-list { <> nil <dol> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> <)
    (<op> ^name next-list-item +)
    (<op> ^item <dol> +)
}

sp {process-multiple-groundings*apply*detect-match
    (state <s> ^operator <op>)
    (<op> ^name detect-match)
    (<s> ^superstate <ss>)
    (<ss> ^referent-home <pr>)
    (<pr> ^referent <obj>)
    (<ss> ^operator <o>)
    (<op> ^object { <> <obj> <o*1> })
    -->
    (<pr> ^referent <obj> -)
}

sp {process-multiple-groundings*propose*detect-match*skipped-latter
    (state <s> ^skipped-latter true)
    (<s> ^name process-multiple-groundings)
    (<s> ^dialog-object-list <d*1>)
    (<d*1> ^referent <obj>)
    (<obj> -^specifier distinct)
    (<s> ^segment <s*1>)
    (<s*1> ^last-merge <l*1>)
    (<l*1> ^assigner <a*1>)
    (<a*1> ^parent-receiver <p*1>)
    (<p*1> ^constraint <c*1>)
    (<c*1> ^handle { << original former >> <h*1> })
    (<s> ^object <obj>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name detect-match +)
    (<op> ^object <obj> +)
}

sp {process-multiple-groundings*propose*detect-match
    (state <s> ^name process-multiple-groundings)
   -{ (<s> ^segment <s*1>)
      (<s*1> ^last-merge <l*1>)
      (<l*1> ^assigner <a*1>)
      (<a*1> ^parent-receiver <p*1>)
      (<p*1> ^constraint <c*1>)
      (<c*1> ^handle { << original former >> <h*1> })}
    (<s> ^dialog-object-list <d*1>)
    (<d*1> ^referent <obj>)
    (<obj> -^specifier distinct)
    (<s> ^object <obj>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name detect-match +)
    (<op> ^object <obj> +)
}

sp {process-multiple-groundings*elaborate-operator*processed-multiple
    (state <s> ^dialog-object-list nil)
    (<s> ^name process-multiple-groundings)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^processed-multiple true +)
}

sp {process-multiple-groundings*elaborate-state*substate2
    (state <s> ^name process-multiple-groundings)
    (<s> ^segment <s*1>)
    (<s*1> ^dialog-object-list-access <dola>)
    -->
    (<s> ^dialog-object-list <dola> +)
}

sp {process-multiple-groundings*elaborate-state*substate
    (state <s> ^name process-multiple-groundings)
    (<s> ^superstate <s*1>)
    (<s*1> ^referent-home <r*1>)
    (<r*1> ^referent <obj>)
    -->
    (<s> ^object <obj> +)
}

sp {apply*tested-referent*add-referent-dialog-object-list-access
    (state <s> ^operator <op>)
    (<op> ^name dialog-object-list-update)
    (<s> ^tsegment <seg>)
    (<seg> ^dialog-object-list-access <dol>)
    (<op> ^referent <obj>)
    -->
    (<seg> ^dialog-object-list-access <dol> -)
    (<seg> ^dialog-object-list-access <ndol> +)
    (<ndol> ^referent <obj> +)
    (<ndol> ^next <dol> +)
}

sp {apply*tested-referent*add-referent-dialog-object-list
    (state <s> ^operator <op>)
    (<op> ^name dialog-object-list-update)
    (<op> ^referent <obj>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-object-list <dol>)
    -->
    (<ts> ^dialog-object-list <dol> -)
    (<ts> ^dialog-object-list <ndol> +)
    (<ndol> ^referent <obj> +)
    (<ndol> ^next <dol> +)
}

sp {comprehension*compare*dialog-object-list-update
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name dialog-object-list-update)
    (<s> ^operator <op2> +)
    (<op2>
          ^name { << process-phrase-end process-semantics merge process-missing-assigner ground-referent ground-new-constraint clean-up-retrieved-stack >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*propose*dialog-object-list-update
    (state <s> ^name comprehension)
    (<s> -^name evaluate-operator)
    (<s> ^referent-home <r*1>)
    (<r*1> ^referent <obj>)
   -{ (<s> ^referent-home <r*2>)
      (<r*2> ^referent { <> <obj> <r*3> })}
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-object-list <dol>)
    (<dol> -^referent <obj>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<op> ^name dialog-object-list-update +)
    (<op> ^referent <obj> +)
}

sp {comprehension*elaborate*possible-referent*complement
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^last-merge <lm>)
    (<lm> ^assigner <a*1>)
    (<a*1> ^parent-receiver <pr>)
   -{ (<pr> ^head <h*1>)
      (<h*1> ^referent <r*1>)}
    (<pr> ^ground-tested <g*1>)
    (<pr> ^{ << complement complement2 >> <a*2> } <comp>)
    (<comp> ^head <rh>)
    (<rh> ^referent <r*2>)
    -->
    (<s> ^referent-home <rh> +)
}

sp {comprehension*elaborate*possible-referent*head
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^last-merge <lm>)
    (<lm> ^assigner <a*1>)
    (<a*1> ^parent-receiver <pr>)
    (<pr> ^ground-tested <g*1>)
    (<pr> ^{ << complement complement2 head >> <a*2> } <rh>)
    (<rh> ^referent <r*1>)
    -->
    (<s> ^referent-home <rh> +)
}

sp {comprehension*elaborate*possible-referent*assigner
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^last-merge <lm>)
    (<lm> ^assigner <a*1>)
    (<a*1> ^parent-receiver <rh>)
    (<rh> ^ground-tested <g*1>)
    (<rh> ^referent <r*1>)
    -->
    (<s> ^referent-home <rh> +)
}

sp {apply*merge*monitor
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <wws>)
    (<op> ^receiver <receiver>)
    (<assigner> ^lt <l*2>)
    (<receiver> ^lt <l*1>)
    (<l*2> ^syntactic-structure <ss>)
    (<wws> ^current-word <c*1>)
    (<assigner> ^structure-type <stype>)
    (<c*1> ^{ << construction spelling >> <a*2> } <word1>)
    (<l*1> ^{ << construction spelling >> <a*1> } <word2>)
    -->
    
}

sp {apply*merge*remove-failed-construction*referent-nil
    (state <s> ^operator <op>)
   -{ (<op> ^assigner <a*1>)
      (<a*1> ^lt <l*1>)
      (<l*1> ^referent <r*1>)}
    (<op> ^name merge)
    (<op> ^receiver <uri>)
    (<uri> ^failed-grounding <fg>)
    (<s> ^segment <seg>)
    -->
    (<uri> ^failed-grounding <fg> -)
}

sp {apply*merge*remove-processing-result-failure
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<s> ^segment <s*1>)
    (<s*1> ^original-sentence <is>)
    (<is> ^processing-result failure)
    -->
    (<is> ^processing-result failure -)
}

sp {apply*merge*remove-failed-construction
    (state <s> ^segment <seg>)
    (<seg> ^failed-construction true)
    (<s> ^operator <op>)
    (<op> ^name merge)
    -->
    (<seg> ^failed-construction true -)
}

sp {apply*merge*remove-stale-assigners*noun
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <sit>)
    (<sit> ^structure-type N)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
    (<assigner> ^parent-receiver <sit>)
    (<assigner> ^structure-type { << ADJ D >> <s*1> })
    -->
    (<seg> ^not-merged-assigner <assigner> -)
}

sp {apply*merge*remove-exclusive-assigner
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pr>)
    (<assigner> ^lt <l*1>)
    (<l*1> ^exclusive <x-ass>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <uai>)
    (<uai> ^parent-receiver <pr>)
    (<uai> ^lt <x-ass>)
    -->
    (<seg> ^not-merged-assigner <uai> -)
}

sp {apply*merge*clean-up-retrieved-stack2*duplicate
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <uai>)
    (<uai> ^parent-receiver <ps>)
    (<op> ^receiver <uri>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <uri>)
    (<seg> ^retrieved-stack <rs>)
    (<rs> ^item <ps>)
    (<rs> ^prior <p>)
    (<p> ^item <uri>)
    (<p> ^prior <ppp>)
    -->
    (<rs> ^prior <p> -)
    (<rs> ^prior <ppp> +)
}

sp {apply*merge*clean-up-retrieved-stack2-5
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <uai>)
    (<uai> ^parent-receiver <ps>)
    (<op> ^receiver <uri>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <uri>)
    (<seg> ^retrieved-stack <rs>)
    (<rs> -^item <ps>)
    (<rs> ^prior <p>)
    (<p> ^item <uri>)
    (<p> ^prior <p2>)
    (<p2> ^item <ps>)
    -->
    (<rs> ^prior <p> -)
    (<rs> ^prior <p2> +)
}

sp {apply*merge*clean-up-retrieved-stack2
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <uai>)
    (<uai> ^parent-receiver <ps>)
    (<op> ^receiver <uri>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <uri>)
    (<seg> ^retrieved-stack <rs>)
    (<rs> -^item <ps>)
    (<rs> ^prior <p>)
   -{ (<p> ^prior <p*1>)
      (<p*1> ^item <ps>)}
    (<p> ^item <uri>)
    -->
    (<p> ^item <uri> -)
    (<p> ^item <ps> +)
}

sp {apply*merge*clean-up-retrieved-stack1-2
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <uai>)
    (<uai> ^parent-receiver <ps>)
    (<op> ^receiver <uri>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <uri>)
    (<seg> ^retrieved-stack <rs>)
    (<rs> ^item <uri>)
    (<rs> ^prior <prior>)
    (<prior> ^item <ps>)
    -->
    (<seg> ^retrieved-stack <rs> -)
    (<seg> ^retrieved-stack <prior> +)
    (<ps> ^merged-with true +)
}

sp {apply*merge*clean-up-retrieved-stack1
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <uai>)
    (<uai> ^parent-receiver <ps>)
    (<op> ^receiver <uri>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <uri>)
    (<seg> ^retrieved-stack <rs>)
   -{ (<rs> ^prior <p*1>)
      (<p*1> ^item <ps>)}
    (<rs> ^item <uri>)
    -->
    (<rs> ^item <uri> -)
    (<rs> ^item <ps> +)
}

sp {apply*merge*clear-new-word
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <a*1>)
    (<a*1> ^lt <lla>)
    (<lla> ^structure-type U)
    (<op> ^receiver <receiver>)
    (<receiver> ^lt <l*1>)
    (<l*1> ^spelling <uw>)
    (<s> ^segment <seg>)
    (<seg> ^unknown-word <uw>)
    -->
    (<seg> ^unknown-word <uw> -)
}

sp {apply*merge*define-new-verb
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
    (<receiver> -^structure-type <s*2>)
    (<op> ^assigner <assigner>)
    (<assigner> ^lt <lla>)
    (<lla> ^predicted-structure-type V)
    (<lla> ^structure-type U)
    (<receiver> ^lt <lli>)
    (<lli> ^spelling <spell>)
    (<s> ^segment <seg>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<seg> ^new-verb <lli> +)
}

sp {apply*merge*assign-syntactic-referent-type*name
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
    (<receiver> -^structure-type <s*3>)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<pword> ^structure-type CP)
    (<assigner> ^lt <lla>)
    (<lla> -^structure-type <s*2>)
    (<receiver> ^lt <lli>)
    (<pword> ^head <head>)
    (<head> ^complement <c*1>)
    (<c*1> ^head <h*2>)
    (<h*2> ^head <h*3>)
    (<h*3> ^lt <l*2>)
    (<head> ^head <h*1>)
    (<h*1> ^lt <l*1>)
    (<l*1> ^spelling name)
    (<l*2> ^syntactic-referent-type <srt>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <lli> +)
    (<receiver> ^structure-type <srt> +)
    (<lli> ^structure-type <srt> +)
}

sp {apply*merge*assign-syntactic-referent-type-not-name
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
    (<receiver> -^structure-type <s*3>)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<pword> ^structure-type CP)
    (<assigner> ^lt <lla>)
    (<lla> -^structure-type <s*2>)
    (<receiver> ^lt <lli>)
    (<pword> ^head <h*1>)
    (<h*1> ^head <h*2>)
    (<h*2> ^lt <lt>)
    (<lt> -^spelling name)
    (<lt> ^syntactic-referent-type <srt>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <lli> +)
    (<receiver> ^structure-type <srt> +)
    (<lli> ^structure-type <srt> +)
}

sp {apply*merge*constraint*to-the-left-of
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^structure-type DP)
    (<assigner> ^parent-receiver <pword>)
    (<pword> ^structure-type P)
    (<op> ^receiver <receiver>)
    (<receiver> ^complement <com>)
    (<com> ^lt <l*1>)
    (<com> ^head <h*2>)
    (<receiver> ^head <h*1>)
    (<h*1> ^lt <lt>)
    (<lt> ^semantic-structure relation)
    (<h*2> ^referent <garbage>)
    (<s> ^segment <seg>)
    (<l*1> ^relation <r*2>)
    (<r*2> ^handle of1)
    (<lt> ^relation <r*1>)
    (<r*1> ^handle <right-left>)
    -->
    (<seg> ^new-constraint <nc> +)
    (<nc> ^object <pword> +)
    (<nc> ^constraint <c> +)
    (<pword> ^constraint <c> +)
    (<c> ^relation <srx> +)
    (<srx> ^2 <garbage> +)
    (<srx> ^handle <right-left> +)
}

sp {apply*merge*constraint*preposition-noun-special*ternary
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^structure-type PP)
    (<op> ^receiver <receiver>)
    (<receiver> ^structure-type PP)
    (<receiver> ^lt <l*1>)
    (<l*1> ^relation-type ternary)
    (<receiver> ^complement <c*1>)
    (<assigner> ^parent-receiver <pword>)
    (<c*1> ^lt <l*4>)
    (<receiver> ^lt <l*2>)
    (<receiver> ^head <h*2>)
    (<h*2> ^lt <l*3>)
    (<pword> ^head <h*1>)
    (<h*1> ^lt-referent <ref>)
    (<pword> ^structure-type { << D CN >> <s*1> })
    (<s> ^segment <seg>)
    (<l*4> ^relation <r*3>)
    (<r*3> ^handle <rh>)
    (<l*3> ^relation <r*2>)
    (<r*2> ^handle <obj>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle <sr>)
    -->
    (<ref> ^relation <srx> +)
    (<srx> ^2 <obj> +)
    (<srx> ^3 <rh> +)
    (<srx> ^handle <sr> +)
}

sp {apply*merge*constraint*preposition-noun-special
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^structure-type PP)
    (<op> ^receiver <receiver>)
   -{ (<receiver> ^lt <l*1>)
      (<l*1> ^relation-type ternary)}
    (<receiver> ^structure-type PP)
    (<assigner> ^parent-receiver <pword>)
    (<receiver> ^lt <l*2>)
    (<receiver> ^head <h*2>)
    (<h*2> ^lt <l*3>)
    (<pword> ^head <h*1>)
    (<h*1> ^lt-referent <ref>)
    (<pword> ^structure-type { << D CN >> <s*1> })
    (<s> ^segment <seg>)
    (<l*3> ^relation <r*2>)
    (<r*2> ^handle <obj>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle <sr>)
    -->
    (<ref> ^relation <srx> +)
    (<srx> ^2 <obj> +)
    (<srx> ^handle <sr> +)
}

sp {apply*merge*forward-grounding*to-preposition-verb*ternary
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<op> ^receiver <receiver>)
    (<receiver> ^lt <l*1>)
    (<l*1> ^relation-type ternary)
    (<receiver> ^complement <c*1>)
    (<receiver> ^lt <l*2>)
    (<receiver> ^head <h*1>)
    (<receiver> ^structure-type { << PP CONJP C-ADJ-P >> <s*2> })
    (<pword> ^structure-type { << VP GP >> <s*1> })
    (<c*1> ^referent <cr>)
    (<h*1> ^referent <sg>)
    (<l*2> ^relation <sr>)
    -->
    (<pword> ^<sr> <sg> +)
    (<pword> ^relation <srr> +)
    (<srr> ^2 <sg> +)
    (<srr> ^3 <cr> +)
    (<srr> ^handle <sr> +)
}

sp {apply*merge*forward-grounding*to-preposition-verb*binary
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
   -{ (<receiver> ^lt <l*1>)
      (<l*1> ^relation-type ternary)}
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<receiver> ^lt <l*2>)
    (<receiver> ^head <h*1>)
    (<receiver> ^structure-type { << PP CONJP C-ADJ-P >> <s*2> })
    (<pword> ^structure-type { << VP GP >> <s*1> })
    (<h*1> ^referent <sg>)
    (<l*2> ^relation <sr>)
    -->
    (<pword> ^<sr> <sg> +)
    (<pword> ^relation <srr> +)
    (<srr> ^2 <sg> +)
    (<srr> ^handle <sr> +)
}

sp {apply*merge*constraint*RCP*merge*noun
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
    (<receiver> ^structure-type RCP)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<pword> ^head <h*1>)
    (<h*1> ^lt-referent <ref>)
    (<pword> ^structure-type { << D CN >> <s*1> })
    (<s> ^segment <seg>)
    (<receiver> ^{ << complement predicate >> <a*1> } <comp>)
    (<comp> ^lt <l*1>)
    (<comp> ^head <h*2>)
    (<h*2> ^lt <l*2>)
    (<l*2> ^relation <r*2>)
    (<r*2> ^handle <head>)
    (<l*1> ^relation <r*1>)
    (<r*1> ^handle <named>)
    -->
    (<ref> ^relation <srx> +)
    (<srx> ^2 <head> +)
    (<srx> ^handle <named> +)
}

sp {apply*merge*constraint*PP*merge*of*referent*no-lt-referent
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
    (<receiver> ^structure-type PP)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
   -{ (<pword> ^head <h*3>)
      (<h*3> ^lt <lt>)
      (<lt> ^structure-type N)
      (<lt> ^spelling { << right left >> <s*3> })}
   -{ (<pword> ^head <h*2>)
      (<h*2> ^lt <l*1>)
      (<l*1> ^spelling { << left-noun right-noun >> <s*2> })}
   -{ (<pword> ^head <h*1>)
      (<h*1> ^lt-referent <ref1>)}
    (<receiver> ^lt <l*2>)
    (<receiver> ^head <h*4>)
    (<pword> ^structure-type { << D CN >> <s*1> })
    (<h*4> ^referent <ref>)
    (<s> ^segment <seg>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle of1)
    -->
    (<seg> ^new-constraint <nc> +)
    (<nc> ^object <pword> +)
    (<nc> ^constraint <c> +)
    (<pword> ^constraint <c> +)
    (<c> ^relation <spr> +)
    (<spr> ^2 <ref> +)
    (<spr> ^handle of1 +)
}

sp {apply*merge*constraint*PP*merge*of*referent
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
    (<receiver> ^structure-type PP)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
   -{ (<pword> ^head <h*3>)
      (<h*3> ^lt <lt>)
      (<lt> ^structure-type N)
      (<lt> ^spelling { << right left >> <s*3> })}
   -{ (<pword> ^head <h*2>)
      (<h*2> ^lt <l*1>)
      (<l*1> ^spelling { << left-noun right-noun >> <s*2> })}
    (<receiver> ^lt <l*2>)
    (<receiver> ^head <h*4>)
    (<pword> ^head <h*1>)
    (<h*1> ^lt-referent <ref1>)
    (<pword> ^structure-type { << D CN >> <s*1> })
    (<h*4> ^referent <ref>)
    (<s> ^segment <seg>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle of1)
    -->
    (<ref1> ^relation <srx> +)
    (<srx> ^2 <ref> +)
    (<srx> ^handle of1 +)
}

sp {apply*merge*constraint*PP*merge*of
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
   -{ (<receiver> ^head <h*4>)
      (<h*4> ^referent <r*2>)}
    (<receiver> ^structure-type PP)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<receiver> ^lt <l*1>)
    (<receiver> ^head <h*2>)
    (<h*2> ^head <h*3>)
    (<h*3> ^lt-referent <ref>)
    (<pword> ^head <h*1>)
    (<h*1> ^lt-referent <ref1>)
    (<pword> ^structure-type { << D CN >> <s*1> })
    (<s> ^segment <seg>)
    (<l*1> ^relation <r*1>)
    (<r*1> ^handle of1)
    -->
    (<ref1> ^relation <srx> +)
    (<srx> ^2 <ref> +)
    (<srx> ^handle of1 +)
}

sp {apply*merge*constraint*preposition-noun*semantics
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<op> ^receiver <receiver>)
    (<receiver> ^semantics <s*4>)
    (<receiver> ^structure-type { << PP CONJP C-ADJ-P >> <s*3> })
    (<pword> ^structure-type { << D DP CN >> <s*2> })
    (<assigner> ^structure-type { << PP CONJP C-ADJ-P >> <s*1> })
    (<s> ^segment <seg>)
    (<s*4> ^relation <spr>)
    -->
    (<seg> ^new-constraint <nc> +)
    (<nc> ^object <pword> +)
    (<nc> ^constraint <c> +)
    (<pword> ^constraint <c> +)
    (<c> ^relation <spr> +)
}

sp {apply*merge*constraint*preposition-noun*ternary
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
   -{ (<receiver> ^lt <l*3>)
      (<l*3> ^directional true)}
    (<receiver> ^lt <l*2>)
    (<l*2> ^relation-type ternary)
    (<receiver> ^complement <comp>)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
   -{ (<pword> ^head <h*1>)
      (<h*1> ^lt <l*1>)
      (<l*1> ^semantic-structure relation)}
    (<receiver> ^lt <l*4>)
    (<receiver> ^head <head>)
    (<receiver> ^structure-type { << PP CONJP C-ADJ-P >> <s*3> })
    (<pword> ^structure-type { << D DP CN RC >> <s*2> })
    (<assigner> ^structure-type { << PP CONJP C-ADJ-P >> <s*1> })
    (<comp> ^referent <comp-obj>)
    (<head> ^referent <obj>)
    (<s> ^segment <seg>)
    (<l*4> ^relation <r*1>)
    (<r*1> ^handle <sr>)
    -->
    (<seg> ^new-constraint <nc> +)
    (<nc> ^object <pword> +)
    (<nc> ^constraint <c> +)
    (<pword> ^constraint <c> +)
    (<c> ^relation <srx> +)
    (<srx> ^2 <obj> +)
    (<srx> ^3 <comp-obj> +)
    (<srx> ^handle <sr> +)
}

sp {apply*merge*constraint*preposition-noun*CONJ-C
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
   -{ (<receiver> ^lt <l*3>)
      (<l*3> ^directional true)}
   -{ (<receiver> ^lt <l*2>)
      (<l*2> ^relation-type ternary)}
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
   -{ (<pword> ^head <h*1>)
      (<h*1> ^lt <l*1>)
      (<l*1> ^semantic-structure relation)}
    (<receiver> ^lt <l*4>)
    (<receiver> ^head <h*2>)
    (<h*2> ^head <head>)
    (<receiver> ^structure-type { << PP CONJP CONJ-C-ADJ-P >> <s*3> })
    (<pword> ^structure-type { << D DP CN RC >> <s*2> })
    (<assigner> ^structure-type { << CONJ-C-ADJ-P >> <s*1> })
    (<head> ^referent <obj>)
    (<s> ^segment <seg>)
    (<l*4> ^relation <r*1>)
    (<r*1> ^handle { <> of1 <sr> })
    -->
    (<seg> ^new-constraint <nc> +)
    (<nc> ^object <pword> +)
    (<nc> ^constraint <c> +)
    (<pword> ^constraint <c> +)
    (<c> ^relation <srx> +)
    (<srx> ^2 <obj> +)
    (<srx> ^handle <sr> +)
    (write (crlf) |Add new constraint to | <pword> | relation: | <sr> | object: | <obj>)
}

sp {apply*merge*constraint*preposition-noun
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
   -{ (<receiver> ^lt <l*3>)
      (<l*3> ^directional true)}
   -{ (<receiver> ^lt <l*2>)
      (<l*2> ^relation-type ternary)}
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
   -{ (<pword> ^head <h*1>)
      (<h*1> ^lt <l*1>)
      (<l*1> ^semantic-structure relation)}
    (<receiver> ^lt <l*4>)
    (<receiver> ^head <head>)
    (<receiver> ^structure-type { << PP CONJP C-ADJ-P >> <s*3> })
    (<pword> ^structure-type { << D DP CN RC >> <s*2> })
    (<assigner> ^structure-type { << PP CONJP C-ADJ-P >> <s*1> })
    (<head> ^referent <obj>)
    (<s> ^segment <seg>)
    (<l*4> ^relation <r*1>)
    (<r*1> ^handle { <> of1 <sr> })
    -->
    (<seg> ^new-constraint <nc> +)
    (<nc> ^object <pword> +)
    (<nc> ^constraint <c> +)
    (<pword> ^constraint <c> +)
    (<c> ^relation <srx> +)
    (<srx> ^2 <obj> +)
    (<srx> ^handle <sr> +)
}

sp {apply*merge*constraint*preposition-right-conversion
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^structure-type DP)
    (<op> ^receiver <receiver>)
    (<receiver> ^structure-type DP)
    (<assigner> ^parent-receiver <pword>)
    (<pword> ^lt <pll>)
    (<pll> ^converts-to <ctrs>)
    (<pll> ^structure-type <st>)
    (<pll> ^spelling <spell>)
    (<receiver> ^{ << head noun >> <a*1> } <dp>)
    (<dp> ^lt <xxi>)
    (<xxi> ^semantic-structure relation)
    (<dp> ^head <h*1>)
    (<h*1> ^head <head>)
    (<head> ^referent <sg>)
    (<xxi> ^relation <sr>)
    -->
    (<pword> ^head <head> +)
    (<pword> ^lt <new-lli> +)
    (<pword> ^lt <pll> -)
    (<new-lli> ^relation <sr> +)
    (<new-lli> ^semantic-structure relation +)
    (<new-lli> ^converts-to <ctrs> +)
    (<new-lli> ^directional false +)
    (<new-lli> ^spelling <spell> +)
    (<new-lli> ^structure-type <st> +)
}

sp {apply*merge*constraint*features2
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<op> ^receiver <receiver>)
    (<receiver> ^lt-referent <id>)
    (<pword> -^constraint <id>)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-receiver <receiver>)
    (<id> ^{ << handle name >> <a*1> } { <> category <value> })
    (<id> ^property <pf>)
    (<pf> -^value <v*1>)
    (<pf> ^{ << handle name >> <a*2> } <name>)
    -->
    (<pword> ^constraint <id> +)
}

sp {apply*merge*constraint*features
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<op> ^receiver <receiver>)
    (<receiver> ^lt-referent <id>)
    (<pword> -^constraint <id>)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-receiver <receiver>)
    (<id> ^property <pf>)
    (<pf> ^value <value>)
    (<pf> ^{ << handle name >> <a*1> } <name>)
    -->
    (<pword> ^constraint <id> +)
}

sp {apply*merge*constraint*features*name
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<op> ^receiver <receiver>)
    (<receiver> ^lt-referent <id>)
    (<pword> -^constraint <id>)
    (<id> -^property <p*1>)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-receiver <receiver>)
    (<id> ^{ << handle name >> <a*1> } <handle>)
    -->
    (<pword> ^constraint <id> +)
}

sp {apply*merge*constraint*possessive
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<pword> ^structure-type POS)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-assigner <assigner>)
    (<pword> ^lt <l*1>)
    (<l*1> ^referent <ref>)
    (<pword> -^constraint <ref>)
    (<ref> ^handle <handle>)
    -->
    (write (crlf) |Add possesive constraint ^handle | <handle> | to | <pword> | from assigner:| <assigner>)
    (<pword> ^constraint <ref> +)
}

sp {apply*merge*push-constraint*clear-ground-tested
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <a*1>)
    (<op> ^receiver <receiver>)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-receiver <receiver>)
    (<receiver> ^ground-tested <gt>)
    (<a*1> ^lt <l*1>)
    (<l*1> ^constraint <con>)
    -->
    (<receiver> ^ground-tested <gt> -)
}

sp {apply*merge*push-constraint*receiver-assigner*RCP-D
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
    (<receiver> ^structure-type RCP)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-receiver <receiver>)
    (<receiver> ^constraint <con>)
    (<op> ^assigner <a*1>)
    (<a*1> ^parent-receiver <pr>)
   -{ (<pr> ^constraint <c*1>)
      (<c*1> ^handle <handle>)
      (<con> ^handle <handle>)}
    (<pr> -^constraint <con>)
    (<pr> ^structure-type { << CN D QUANT >> <s*2> })
    -->
    (<pr> ^constraint <con> +)
}

sp {apply*merge*push-constraint*receiver-assigner*DP-RC
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <a*1>)
    (<a*1> ^parent-receiver <pr>)
    (<pr> ^structure-type RC)
    (<op> ^receiver <receiver>)
    (<receiver> ^constraint <con>)
    (<pr> -^constraint <con>)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-receiver <receiver>)
    (<receiver> ^structure-type { << C-ADJ-P DP >> <s*2> })
    -->
    (<pr> ^constraint <con> +)
}

sp {apply*merge*push-constraint
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <a*1>)
    (<op> ^receiver <receiver>)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-receiver <receiver>)
    (<a*1> ^lt <l*1>)
    (<l*1> ^constraint <con>)
    (<receiver> -^constraint <con>)
    -->
    (<receiver> ^constraint <con> +)
}

sp {apply*merge*strip-assigners
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^lt <l*1>)
    (<l*1> ^strip-assigners true)
    (<op> ^receiver <receiver>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <receiver>)
    (<seg> ^not-merged-assigner <assigner2>)
    (<assigner2> ^parent-receiver <receiver>)
    -->
    (<seg> ^not-merged-assigner <assigner2> -)
}

sp {apply*merge*relation-value*semantics
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<op> ^receiver <receiver>)
    (<receiver> ^lt-referent <con>)
    (<receiver> ^semantics <sem>)
    (<sem> ^<att> <relation>)
    (<relation> ^handle by1)
    -->
    (write (crlf) |Inherited relation-source | <relation> | usually for THAT IS.... by|)
    (<sem> ^<att> <relation> -)
    (<con> ^relation <relation> +)
}

sp {apply*merge*relation-value*inherit*2
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
    (<pword> ^structure-type CONJ-C-ADJ)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
    (<op> ^receiver <receiver>)
    (<seg> ^not-merged-receiver <receiver>)
    (<receiver> ^lt <l*1>)
    (<pword> ^lt <lla>)
    (<l*1> ^relation <relation>)
    -->
    (write (crlf) |Inherited relation-source | <relation> | usually for THAT IS.|)
    (<lla> ^relation <relation> +)
}

sp {apply*merge*relation-value
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
    (<op> ^receiver <receiver>)
    (<seg> ^not-merged-receiver <receiver>)
    (<assigner> ^parent-receiver <pword>)
    (<receiver> ^lt <l*1>)
    (<pword> ^lt <lla>)
    (<lla> ^relation-source <rv>)
    (<assigner> ^lt <rv>)
    (<l*1> ^relation <relation>)
    -->
    (<lla> ^relation <relation> +)
}

sp {apply*merge*copy-first-word
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^parent-receiver <pword>)
   -{ (<pword> ^constraint <c*2>)
      (<c*2> ^<att> <val>)}
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-assigner <assigner>)
    (<op> ^receiver <receiver>)
    (<receiver> ^current-word <c*1>)
    (<c*1> ^first-word true)
    (<pword> ^current-word <wd>)
    -->
    (<pword> ^first-word true +)
    (<wd> ^first-word true +)
}

sp {apply*merge*copy-message-type
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <a*1>)
    (<a*1> ^parent-receiver <pword>)
    (<pword> ^lt <l*2>)
    (<l*2> ^structure-type S)
    (<op> ^receiver <r*1>)
    (<r*1> ^lt <l*1>)
    (<l*1> ^message-type <ms-type>)
    -->
    (<pword> ^message-type <ms-type> +)
}

sp {apply*merge*copy-message-type*semantics
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <a*1>)
    (<a*1> ^parent-receiver <pword>)
    (<pword> ^lt <l*2>)
    (<l*2> ^structure-type S)
    (<op> ^receiver <r*1>)
    (<pword> ^semantics <sem2>)
    (<r*1> ^lt <l*1>)
    (<l*1> ^message-type <ms-type>)
    -->
    (<sem2> ^message-type <ms-type> +)
}

sp {apply*merge*copy-semantics
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <ass>)
   -{ (<ass> ^lt <l*1>)
      (<l*1> ^semantic-structure <s*1>)}
    (<ass> ^parent-receiver <p*1>)
    (<op> ^receiver <r*1>)
    (<p*1> ^semantics <sem2>)
    (<r*1> ^semantics <sem>)
    (<sem> ^<att> <value>)
    (<value> -^handle by1)
    -->
    (<sem2> ^<att> <value> +)
    (<ass> ^process-semantics <value> +)
}

sp {apply*merge*last-merge
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
    (<op> ^receiver <receiver>)
    (<seg> ^not-merged-receiver <receiver>)
    (<seg> ^last-merge <lm>)
    (<assigner> ^lt <l*1>)
    (<l*1> ^syntactic-structure <stype>)
    -->
    (<seg> ^last-merge <nm> +)
    (<seg> ^last-merge <lm> -)
    (<nm> ^assigner <assigner> +)
    (<nm> ^receiver <receiver> +)
    (<nm> ^structure-type <stype> +)
}

sp {apply*merge*remove-unfilled-assigner
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^receiver <receiver>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <receiver>)
    (<seg> ^not-merged-assigner <assigner>)
    (<assigner> ^parent-receiver <receiver>)
    -->
    (<seg> ^not-merged-assigner <assigner> -)
}

sp {apply*merge*conj-predicate
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
   -{ (<assigner> ^lt <l*1>)
      (<l*1> ^repeatable true)}
    (<assigner> ^lt <l*2>)
    (<l*2> ^syntactic-structure conj-predicate)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
    (<op> ^receiver <receiver>)
    (<seg> ^not-merged-receiver <receiver>)
    (<assigner> ^parent-receiver <pword>)
    -->
    (<seg> ^not-merged-receiver <receiver> -)
    (<seg> ^not-merged-assigner <assigner> -)
    (<seg> ^merged-assigner <assigner> +)
    (<assigner> ^merged-receiver <receiver> +)
    (<pword> ^predicate <receiver> +)
}

sp {apply*merge*filler-word*repeatable
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^lt <lt>)
    (<lt> ^repeatable true)
    (<lt> ^syntactic-structure nil)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
    (<op> ^receiver <receiver>)
    (<seg> ^not-merged-receiver <receiver>)
    -->
    (<seg> ^not-merged-receiver <receiver> -)
    (<seg> ^merged-assigner <assigner> +)
    (<assigner> ^merged-receiver <receiver> +)
}

sp {apply*merge*repeatable
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
    (<assigner> ^lt <lt>)
    (<lt> ^repeatable true)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
    (<op> ^receiver <receiver>)
    (<seg> ^not-merged-receiver <receiver>)
    (<assigner> ^parent-receiver <pword>)
    (<lt> ^syntactic-structure { <> nil <stype> })
    -->
    (<seg> ^not-merged-receiver <receiver> -)
    (<seg> ^merged-assigner <assigner> +)
    (<assigner> ^merged-receiver <receiver> +)
    (<pword> ^<stype> <receiver> +)
}

sp {apply*merge*filler-word
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
   -{ (<assigner> ^lt <l*1>)
      (<l*1> ^repeatable true)}
    (<assigner> ^lt <l*2>)
    (<l*2> ^syntactic-structure nil)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
    (<op> ^receiver <receiver>)
    (<seg> ^not-merged-receiver <receiver>)
    -->
    (<seg> ^not-merged-receiver <receiver> -)
    (<seg> ^not-merged-assigner <assigner> -)
    (<seg> ^merged-assigner <assigner> +)
    (<assigner> ^merged-receiver <receiver> +)
}

sp {apply*merge
    (state <s> ^operator <op>)
    (<op> ^name merge)
    (<op> ^assigner <assigner>)
   -{ (<assigner> ^lt <l*1>)
      (<l*1> ^repeatable true)}
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
    (<op> ^receiver <receiver>)
    (<seg> ^not-merged-receiver <receiver>)
    (<assigner> ^parent-receiver <pword>)
    (<assigner> ^lt <l*2>)
    (<l*2>
          ^syntactic-structure { <> nil <> reverse-merge <> conj-predicate <stype> })
    -->
    (<seg> ^not-merged-receiver <receiver> -)
    (<seg> ^not-merged-assigner <assigner> -)
    (<seg> ^merged-assigner <assigner> +)
    (<assigner> ^merged-receiver <receiver> +)
    (<pword> ^<stype> <receiver> +)
}

sp {apply*retrieve-lti*retrieve-missing-receiver-lt*clean-up
    (state <s> ^operator <o>)
    (<o> ^name retrieve-lti)
    (<o> ^lti <lt>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^retrieve { <> <lt> <a2> })
    -->
    (<cmd> ^retrieve <a2> -)
}

sp {apply*retrieve-lti*retrieve-missing-receiver-lt
    (state <s> ^operator <op>)
    (<op> ^name retrieve-lti)
    (<op> ^lti <lt>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^retrieve <lt> +)
    (<cmd> ^depth 9 +)
}

sp {comprehension*compare*retrieve-lti
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name retrieve-lti)
    (<s> ^operator <op2> +)
    (<op2>
          ^name { << process-phrase-end merge comprehend-construction next-word ground-new-constraint >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {propose*retrieve-lti*retrieve-missing-relation
    (state <s> ^segment <s*1>)
    (<s*1> ^comprehension-structure <cs>)
    (<cs> ^{ << not-merged-receiver not-merged-assigner >> <a*1> } <v*1>)
    (<v*1> ^lt <l*1>)
    (<l*1> ^relation <lt>)
    (<lt> -^<att> <a*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<s> ^operator <op> =)
    (<op> ^name retrieve-lti +)
    (<op> ^lti <lt> +)
}

sp {propose*retrieve-lti*retrieve-missing-assinger-head-lt-relation
    (state <s> ^assigner <cs>)
    (<cs> ^merged-receiver <m*1>)
    (<m*1> ^lt <l*1>)
    (<l*1> ^relation <lt>)
    (<lt> -^<att> <a*1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<s> ^operator <op> =)
    (<op> ^name retrieve-lti +)
    (<op> ^lti <lt> +)
}

sp {propose*retrieve-lti*retrieve-missing-assinger-id-referent-procedural-lt
    (state <s> ^segment <s*1>)
    (<s*1> ^comprehension-structure <cs>)
    (<cs> ^{ << not-merged-receiver not-merged-assigner >> <a*1> } <v*1>)
    (<v*1> ^lt-referent <l*1>)
    (<l*1> ^procedural <lt>)
    (<lt> -^<att> <a*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<s> ^operator <op> =)
    (<op> ^name retrieve-lti +)
    (<op> ^lti <lt> +)
}

sp {propose*retrieve-lti*retrieve-missing-assinger-id-property-lt
    (state <s> ^segment <cs>)
    (<cs> ^{ << not-merged-receiver not-merged-assigner >> <a*1> } <v*1>)
    (<v*1> ^lt <l*1>)
    (<l*1> ^property <lt>)
    (<lt> -^<att> <a*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<s> ^operator <op> =)
    (<op> ^name retrieve-lti +)
    (<op> ^lti <lt> +)
}

sp {propose*retrieve-lti*retrieve-missing-assinger-lt-constraint
    (state <s> ^segment <cs>)
    (<cs> ^{ << not-merged-receiver not-merged-assigner >> <a*1> } <v*1>)
    (<v*1> ^lt <l*1>)
    (<l*1> ^constraint <lt>)
    (<lt> -^<att> <a*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<s> ^operator <op> =)
    (<op> ^name retrieve-lti +)
    (<op> ^lti <lt> +)
}

sp {propose*retrieve-lti*retrieve-missing-assinger-constraint-property-lt
    (state <s> ^segment <cs>)
    (<cs> ^{ << not-merged-receiver not-merged-assigner >> <a*1> } <v*1>)
    (<v*1> ^constraint <c*1>)
    (<c*1> ^property <lt>)
    (<lt> -^<att> <a*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<s> ^operator <op> =)
    (<op> ^name retrieve-lti +)
    (<op> ^lti <lt> +)
}

sp {propose*retrieve-lti*retrieve-missing-assinger-lt
    (state <s> ^segment <cs>)
    (<cs> ^{ << not-merged-receiver not-merged-assigner >> <a*1> } <v*1>)
    (<v*1> ^{ << constraint lt >> <a*2> } <lt>)
    (<lt> -^<att> <a*3>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<s> ^operator <op> =)
    (<op> ^name retrieve-lti +)
    (<op> ^lti <lt> +)
}

sp {comprehension*propose*record-decision-counts*rule
    :o-support
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^{ << not-merged-receiver not-merged-assigner >> <a*1> } <nm>)
    (<nm> -^decision-count <d*1>)
    -->
    (<nm> ^decision-count (int (cmd stats |-d|)) +)
}

sp {comprehension*compare*record-decision-counts
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name record-decision-counts)
    (<s> ^operator <op1> +)
    (<op1> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*apply*record-decision-counts
    (state <s> ^operator <op>)
    (<op> ^name record-decision-counts)
    (<op> ^not-merged <nm>)
    -->
    (<nm> ^decision-count (int (cmd stats |-d|)) +)
}

sp {comprehension*propose*record-decision-counts*receiver
    (state <s> ^name comprehension)
    (<s> ^segment <cs>)
    (<cs> ^not-merged-receiver <na>)
    (<na> -^decision-count <d*1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name record-decision-counts +)
    (<op> ^not-merged <na> +)
}

sp {comprehension*propose*record-decision-counts
    (state <s> ^name comprehension)
    (<s> ^segment <cs>)
    (<cs> ^not-merged-assigner <na>)
    (<na> -^decision-count <d*1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name record-decision-counts +)
    (<op> ^not-merged <na> +)
}

sp {comprehension*apply*unmerged-word
    (state <s> ^operator <op>)
    (<op> ^name unmerged-word)
    (<op> ^not-merged-receiver <receiver>)
    -->
    (<receiver> ^unmerged-checked true +)
}

sp {comprehension*compare*unmerged-word
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name next-word)
    (<s> ^operator <op1> +)
    (<op1> ^name unmerged-word)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*apply*retry-sentence*copy-retry
    (state <s> ^operator <o>)
    (<o> ^name retry-sentence)
    (<o> ^new-segment <nseg>)
    (<s> ^segment <seg>)
    (<seg> ^retry-sentence <x>)
    -->
    (<nseg> ^retry-receiver <x> +)
}

sp {comprehension*apply*retry-sentence
    (state <s> ^operator <o>)
    (<o> ^name retry-sentence)
    (<o> ^new-segment <nseg>)
    (<s> ^segment <seg>)
    -->
    (<s> ^segment <seg> -)
    (<s> ^segment <nseg> +)
    (<nseg> ^semantics <sss> +)
    (<nseg> ^last-merge <lm> +)
    (<nseg> ^retried-sentence true +)
    (<lm> ^receiver nil +)
    (<lm> ^assigner nil +)
    (<lm> ^structure-type none +)
}

sp {comprehension*compare*retry-sentence
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name failed-comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name retry-sentence)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*propose*retry-sentence
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> -^retried-sentence true)
    (<seg> ^original-sentence <is>)
    (<is> -^processed-sentence true)
    (<seg> ^retry-sentence <x>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name retry-sentence +)
    (<op> ^new-segment <nseg> +)
}

sp {comprehension*compare*failed-receiver-no-alternative-structure
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name failed-receiver-no-alternative-structure)
    (<s> ^operator <op1> +)
    (<op1> ^name failed-comprehension)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*apply*failed-receiver-no-alternative-structure
    (state <s> ^operator <o*1>)
    (<o*1> ^name failed-receiver-no-alternative-structure)
    (<s> ^segment <seg>)
    (<seg> ^original-sentence <cs>)
    -->
    (<cs> ^processing-result failure +)
}

sp {comprehension*propose*failed-receiver-no-alternative-structure
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
   -{ (<seg> ^original-sentence <o*1>)
      (<o*1> ^processing-result failure)}
    (<seg> -^alternative-structure-receiver <asr>)
    (<seg> ^parse-failed-receiver <nmr>)
   -{ (<nmr> ^lt <l*1>)
      (<l*1> ^alternative-structure <structure-new>)}
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name failed-receiver-no-alternative-structure +)
}

sp {elaborate*state*sentence-12*yes
    (state <s> ^current-sentence-number 12)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first> ^complete-sentence |yes.| +)
    (<w0> ^spelling yes +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling |.| +)
    (<w1> ^next nil +)
}

sp {elaborate*state*sentence-11*init-mahjong
    (state <s> ^current-sentence-number 11)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first> ^complete-sentence |init-mahjong.| +)
    (<w0> ^spelling init-mahjong +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling |.| +)
    (<w1> ^next nil +)
}

sp {elaborate*state*sentence-10*done
    (state <s> ^current-sentence-number 10)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first> ^complete-sentence |done.| +)
    (<w0> ^spelling done +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling |.| +)
    (<w1> ^next nil +)
}

sp {elaborate*state*sentence-9*ok
    (state <s> ^current-sentence-number 9)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first> ^complete-sentence |ok.| +)
    (<w0> ^spelling ok +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling |.| +)
    (<w1> ^next nil +)
}

sp {elaborate*state*sentence-8*the-goal-is-that-all-blocks-are-on-a-garbage
    (state <s> ^current-sentence-number 8)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first>
           ^complete-sentence |the goal is that all blocks are on a garbage.| +)
    (<w0> ^spelling the +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling goal +)
    (<w1> ^next <w2> +)
    (<w2> ^spelling is +)
    (<w2> ^next <w3> +)
    (<w3> ^spelling that +)
    (<w3> ^next <w4> +)
    (<w4> ^spelling all +)
    (<w4> ^next <w5> +)
    (<w5> ^spelling blocks +)
    (<w5> ^next <w6> +)
    (<w6> ^spelling are +)
    (<w6> ^next <w7> +)
    (<w7> ^spelling on +)
    (<w7> ^next <w8> +)
    (<w8> ^spelling a +)
    (<w8> ^next <w9> +)
    (<w9> ^spelling garbage +)
    (<w9> ^next <w10> +)
    (<w10> ^spelling |.| +)
    (<w10> ^next nil +)
}

sp {elaborate*state*sentence-7*final-mahjong
    (state <s> ^current-sentence-number 7)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first> ^complete-sentence |final-mahjong.| +)
    (<w0> ^spelling final-mahjong +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling |.| +)
    (<w1> ^next nil +)
}

sp {elaborate*state*sentence-6*if-a-block-is-not-on-a-location-then-it-is-free
    (state <s> ^current-sentence-number 6)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first>
           ^complete-sentence |if a block is not on a location then it is free.| +)
    (<w0> ^spelling if +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling a +)
    (<w1> ^next <w2> +)
    (<w2> ^spelling block +)
    (<w2> ^next <w3> +)
    (<w3> ^spelling is +)
    (<w3> ^next <w4> +)
    (<w4> ^spelling not +)
    (<w4> ^next <w5> +)
    (<w5> ^spelling on +)
    (<w5> ^next <w6> +)
    (<w6> ^spelling a +)
    (<w6> ^next <w7> +)
    (<w7> ^spelling location +)
    (<w7> ^next <w8> +)
    (<w8> ^spelling then +)
    (<w8> ^next <w9> +)
    (<w9> ^spelling it +)
    (<w9> ^next <w10> +)
    (<w10> ^spelling is +)
    (<w10> ^next <w11> +)
    (<w11> ^spelling free +)
    (<w11> ^next <w12> +)
    (<w12> ^spelling |.| +)
    (<w12> ^next nil +)
}

sp {elaborate*state*sentence-5*if-a-location-is-not-below-an-object-then-it-is-clear
    (state <s> ^current-sentence-number 5)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first>
           ^complete-sentence |if a location is not below an object then it is clear.| +)
    (<w0> ^spelling if +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling a +)
    (<w1> ^next <w2> +)
    (<w2> ^spelling location +)
    (<w2> ^next <w3> +)
    (<w3> ^spelling is +)
    (<w3> ^next <w4> +)
    (<w4> ^spelling not +)
    (<w4> ^next <w5> +)
    (<w5> ^spelling below +)
    (<w5> ^next <w6> +)
    (<w6> ^spelling an +)
    (<w6> ^next <w7> +)
    (<w7> ^spelling object +)
    (<w7> ^next <w8> +)
    (<w8> ^spelling then +)
    (<w8> ^next <w9> +)
    (<w9> ^spelling it +)
    (<w9> ^next <w10> +)
    (<w10> ^spelling is +)
    (<w10> ^next <w11> +)
    (<w11> ^spelling clear +)
    (<w11> ^next <w12> +)
    (<w12> ^spelling |.| +)
    (<w12> ^next nil +)
}

sp {elaborate*state*sentence-4*if-the-color-of-an-clear-free-block-is-the-color-of-another-clear-free-block-then-you-can-move-the-blocks-onto-a-garbage
    (state <s> ^current-sentence-number 4)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first>
           ^complete-sentence |if the color of an clear free block is the color of another clear free block then you can move the blocks onto a garbage.| +)
    (<w0> ^spelling if +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling the +)
    (<w1> ^next <w2> +)
    (<w2> ^spelling color +)
    (<w2> ^next <w3> +)
    (<w3> ^spelling of +)
    (<w3> ^next <w4> +)
    (<w4> ^spelling an +)
    (<w4> ^next <w5> +)
    (<w5> ^spelling clear +)
    (<w5> ^next <w6> +)
    (<w6> ^spelling free +)
    (<w6> ^next <w7> +)
    (<w7> ^spelling block +)
    (<w7> ^next <w8> +)
    (<w8> ^spelling is +)
    (<w8> ^next <w9> +)
    (<w9> ^spelling the +)
    (<w9> ^next <w10> +)
    (<w10> ^spelling color +)
    (<w10> ^next <w11> +)
    (<w11> ^spelling of +)
    (<w11> ^next <w12> +)
    (<w12> ^spelling another +)
    (<w12> ^next <w13> +)
    (<w13> ^spelling clear +)
    (<w13> ^next <w14> +)
    (<w14> ^spelling free +)
    (<w14> ^next <w15> +)
    (<w15> ^spelling block +)
    (<w15> ^next <w16> +)
    (<w16> ^spelling then +)
    (<w16> ^next <w17> +)
    (<w17> ^spelling you +)
    (<w17> ^next <w18> +)
    (<w18> ^spelling can +)
    (<w18> ^next <w19> +)
    (<w19> ^spelling move +)
    (<w19> ^next <w20> +)
    (<w20> ^spelling the +)
    (<w20> ^next <w21> +)
    (<w21> ^spelling blocks +)
    (<w21> ^next <w22> +)
    (<w22> ^spelling onto +)
    (<w22> ^next <w23> +)
    (<w23> ^spelling a +)
    (<w23> ^next <w24> +)
    (<w24> ^spelling garbage +)
    (<w24> ^next <w25> +)
    (<w25> ^spelling |.| +)
    (<w25> ^next nil +)
}

sp {elaborate*state*sentence-3*ok
    (state <s> ^current-sentence-number 3)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first> ^complete-sentence |ok.| +)
    (<w0> ^spelling ok +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling |.| +)
    (<w1> ^next nil +)
}

sp {elaborate*state*sentence-2*init-mahjong
    (state <s> ^current-sentence-number 2)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first> ^complete-sentence |init-mahjong.| +)
    (<w0> ^spelling init-mahjong +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling |.| +)
    (<w1> ^next nil +)
}

sp {elaborate*state*sentence-1*the-name-of-the-puzzle-is-mahjong
    (state <s> ^current-sentence-number 1)
    (<s> ^name rosie)
    -->
    (<s> ^current-sentence <seg> +)
    (<seg> ^input-sentence <first> +)
    (<seg> ^current-word <first> +)
    (<seg> ^original-sentence <first> +)
    (<seg> ^expected nil +)
    (<first> ^spelling * +)
    (<first> ^next <w0> +)
    (<first> ^complete-sentence |the name of the puzzle is mahjong.| +)
    (<w0> ^spelling the +)
    (<w0> ^next <w1> +)
    (<w1> ^spelling name +)
    (<w1> ^next <w2> +)
    (<w2> ^spelling of +)
    (<w2> ^next <w3> +)
    (<w3> ^spelling the +)
    (<w3> ^next <w4> +)
    (<w4> ^spelling puzzle +)
    (<w4> ^next <w5> +)
    (<w5> ^spelling is +)
    (<w5> ^next <w6> +)
    (<w6> ^spelling mahjong +)
    (<w6> ^next <w7> +)
    (<w7> ^spelling |.| +)
    (<w7> ^next nil +)
}

sp {apply*initialize-rosie*sentence-number
    (state <s> ^name rosie)
    (<s> ^operator <o*1>)
    (<o*1> ^name initialize-rosie)
    -->
    (<s> ^current-sentence-number 1 +)
    (<s> ^max-sentence-number 12 +)
    (<s> ^game-scripting true +)
}

sp {apply*runaway-word-processing*external
    (state <s> ^top-state <ts>)
    (<ts> ^world-usage external)
    (<s> ^operator <o*1>)
    (<o*1> ^name runaway-word-processing)
    (<s> ^segment <seg>)
    (<seg> ^decision-count-threshold <thres>)
    (<seg> ^original-sentence <cs>)
    -->
    (<seg> ^decision-count-threshold <thres> -)
    (<seg> ^processed-terminator true +)
    (<cs> ^processed-sentence true +)
    (<cs> ^processing-result failure +)
}

sp {apply*runaway-word-processing*internal
    (state <s> ^top-state <ts>)
    (<ts> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name runaway-word-processing)
    (<ts> ^failure-count <fc>)
    (<ts> ^current-sentence-number <csn>)
    (<s> ^segment <seg>)
    (<seg> ^decision-count-threshold <thres>)
    (<seg> ^original-sentence <cs>)
    -->
    (<seg> ^decision-count-threshold <thres> -)
    (<seg> ^processed-terminator true +)
    (<cs> ^processed-sentence true +)
    (<cs> ^processing-result failure +)
    (<ts> ^terminated-sentence <csn> +)
    (<ts> ^failure-count <fc> -)
    (<ts> ^failure-count (+ <fc> 1) +)
}

sp {comprehension*apply*reprocess-unknown-word
    (state <s> ^operator <op>)
    (<op> ^name reprocess-unknown-word)
    (<op> ^not-merged-assigner <uai>)
    (<op> ^not-merged-receiver <uri>)
    (<uri> ^lt <lli>)
    (<lli> -^structure-type <s*2>)
    (<uai> ^structure-type <new>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <lli> +)
    (<uri> ^structure-type <new> +)
    (<lli> ^structure-type <new> +)
}

sp {comprehension*propose*reprocess-unknown-word*no-prior-merge
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^last-merge <l*1>)
    (<l*1> ^assigner nil)
    (<seg> ^not-merged-receiver <uri>)
    (<uri> -^structure-type <s*1>)
    (<seg> ^retrieved-stack <r*1>)
    (<seg> ^not-merged-assigner <as1>)
    (<as1> ^lt <l*2>)
    (<l*2> ^required true)
    (<as1> ^parent-receiver <ps>)
    (<ps> ^structure-type <sstruct>)
   -{ (<seg> ^not-merged-receiver <n*1>)
      (<n*1> ^structure-type <sstruct>)}
    (<uri> ^lt <lti>)
    (<lti> ^possible-assigners <p*1>)
    (<p*1> ^assigner <as1>)
    (<ps> ^lt <l*3>)
    (<l*3> ^converts-to { <> <sstruct> <nstruct> })
    (<r*1> ^item { <> <uri> <item> })
    (<item> ^structure-type { <> <nstruct> <> <sstruct> <s*2> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name reprocess-unknown-word +)
    (<op> ^not-merged-receiver <uri> +)
    (<op> ^not-merged-assigner <as1> +)
}

sp {comprehension*propose*reprocess-unknown-word
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <uri>)
    (<uri> -^structure-type <s*1>)
    (<seg> ^not-merged-assigner <as1>)
    (<uri> ^lt <lti>)
   -{ (<lti> ^possible-assigners <p*2>)
      (<seg> ^not-merged-assigner { <> <as1> <as2> })
      (<p*2> ^assigner <as2>)}
    (<lti> ^possible-assigners <p*1>)
    (<p*1> ^assigner <as1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name reprocess-unknown-word +)
    (<op> ^not-merged-receiver <uri> +)
    (<op> ^not-merged-assigner <as1> +)
}

sp {apply*process-semantics*remove-ungrounded
    (state <s> ^operator <op>)
    (<op> ^name process-semantics)
    (<op> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^attribute <att>)
    (<sem> ^<att> <val>)
    (<val> ^ungrounded <x>)
    -->
    (<sem> ^<att> <val> -)
}

sp {apply*process-semantics*simple*item-type*predicate2
    (state <s> ^operator <op>)
    (<op> ^name process-semantics)
    (<op> ^value2 <value>)
    (<value> -^item-type <i*1>)
    (<op> ^attribute2 { << predicate relation >> <a*1> })
    -->
    (<value> ^item-type predicate +)
}

sp {apply*process-semantics*simple*item-type*action
    (state <s> ^operator <op>)
    (<op> ^name process-semantics)
    (<op> ^attribute action)
    (<op> ^value <value>)
    (<value> -^item-type <i*1>)
    -->
    (<value> ^item-type action +)
}

sp {apply*process-semantics*simple*item-type*predicate
    (state <s> ^operator <op>)
    (<op> -^extra-attribute <of>)
    (<op> ^name process-semantics)
    (<op> ^attribute predicate)
    (<op> ^value <value>)
    (<value> -^item-type <i*1>)
    -->
    (<value> ^item-type predicate +)
}

sp {apply*process-semantics*relation*embedded2
    (state <s> ^operator <op>)
    (<op> ^name process-semantics)
    (<op> ^attribute relation)
    (<op> ^assigner <ass>)
    (<s> ^assigner <ass>)
    (<ass> ^parent-receiver <pr>)
    (<pr> ^complement <c*1>)
    (<pr> ^semantics <sem>)
    (<c*1> ^lt <l*1>)
    (<op> ^value <value>)
    (<l*1> ^relation <r*1>)
    (<r*1> ^handle named)
    -->
    (<sem> ^predicate <sr2> +)
    (<sr2> ^handle named +)
    (<sr2> ^2 <value> +)
    (<sr2> ^item-type predicate +)
    (<ass> ^processed-semantics <value> +)
}

sp {apply*process-semantics*relation*embedded
    (state <s> ^operator <op>)
    (<op> ^name process-semantics)
    (<op> ^attribute relation)
    (<op> ^assigner <ass>)
    (<s> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^value <value>)
    (<value> ^relation <sr>)
    (<sr> -^3 <sg3>)
    (<sr> ^2 <sg>)
    (<sr> ^handle <sp>)
    -->
    (<sem> ^predicate <sr2> +)
    (<sr2> ^handle <sp> +)
    (<sr2> ^2 <sg> +)
    (<sr2> ^item-type predicate +)
    (<ass> ^processed-semantics <value> +)
}

sp {apply*process-semantics*relation*other*deeper
    (state <s> ^operator <op>)
    (<op> ^name process-semantics)
    (<op> ^assigner <ass>)
    (<s> ^assigner <ass>)
    (<op> ^relation2 <rel2>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^value <sg>)
    (<sg> ^2 <sg2>)
    (<sg> ^handle <sghandle>)
    (<op> ^attribute { <> relation <att> })
    (<op> ^relation <sr>)
    (<sr> ^2 <sg>)
    (<sr> ^handle <sp>)
    -->
    (write (crlf) | Add to assigner: | <ass> | Semantics: | <sem> | ^predicate | <sp> | (| <sghandle> |)| <sg2>)
    (<sem> ^<att> <sr2> +)
    (<sr2> ^handle <sp> +)
    (<sr2> ^2 <sgx> +)
    (<sr2> ^item-type predicate +)
    (<sgx> ^handle <sghandle> +)
    (<sgx> ^2 <sg2> +)
    (<sg2> ^relation <rel2> +)
    (<ass> ^processed-semantics <sg> +)
}

sp {apply*process-semantics*relation*other*deep2
    (state <s> ^operator <op>)
    (<op> -^relation2 <r*1>)
    (<op> ^name process-semantics)
    (<op> ^assigner <ass>)
    (<s> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^attribute { <> relation <att> })
    (<op> ^relation <sr>)
    (<sr> ^2 <sg>)
    (<op> -^value <sg>)
    (<sg> ^2 <sg2>)
    (<sg> ^handle <sghandle>)
    (<sr> ^handle <sp>)
    -->
    (write (crlf) | Add to assigner: | <ass> | Semantics: | <sem> | ^predicate | <sp> | (| <sghandle> |)| <sg2>)
    (<sem> ^<att> <sr2> +)
    (<sr2> ^handle <sp> +)
    (<sr2> ^2 <sgx> +)
    (<sr2> ^item-type predicate +)
    (<sgx> ^handle <sghandle> +)
    (<sgx> ^2 <sg2> +)
    (<ass> ^processed-semantics <sg> +)
}

sp {apply*process-semantics*relation*other*deep
    (state <s> ^operator <op>)
    (<op> -^relation2 <r*1>)
    (<op> ^name process-semantics)
    (<op> ^assigner <ass>)
    (<s> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^value <sg>)
    (<sg> ^2 <sg2>)
    (<sg> ^handle <sghandle>)
    (<op> ^attribute { <> relation <att> })
    (<op> ^relation <sr>)
    (<sr> ^2 <sg>)
    (<sr> ^handle <sp>)
    -->
    (<sem> ^<att> <sr2> +)
    (<sr2> ^handle <sp> +)
    (<sr2> ^2 <sgx> +)
    (<sr2> ^item-type predicate +)
    (<sgx> ^handle <sghandle> +)
    (<sgx> ^2 <sg2> +)
    (<ass> ^processed-semantics <sg> +)
}

sp {apply*process-semantics*relation*other3
    (state <s> ^operator <op>)
    (<op> -^value <v*1>)
    (<op> ^name process-semantics)
    (<op> ^assigner <ass>)
    (<s> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^attribute { <> relation <att> })
    (<op> ^relation <sr>)
    (<sr> ^2 <sg>)
    (<sr> ^handle <sp>)
    (<sr> ^3 <sg3>)
    -->
    (<sem> ^<att> <sr2> +)
    (<sr2> ^handle <sp> +)
    (<sr2> ^2 <sg3> +)
    (<sr2> ^item-type predicate +)
    (<ass> ^processed-semantics <sg> +)
}

sp {apply*process-semantics*relation*other
    (state <s> ^operator <op>)
    (<op> -^value <v*1>)
    (<op> ^name process-semantics)
    (<op> ^assigner <ass>)
    (<s> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^attribute { <> relation <att> })
    (<op> ^relation <sr>)
    (<sr> ^2 <sg>)
   -{ (<sg> ^2 <sg2>)
      (<sg> ^handle <sghandle>)}
    (<sr> ^handle <sp>)
    -->
    (<sem> ^<att> <sr2> +)
    (<sr2> ^handle <sp> +)
    (<sr2> ^2 <sg> +)
    (<sr2> ^item-type predicate +)
    (<ass> ^processed-semantics <sg> +)
}

sp {apply*process-semantics*relation*3
    (state <s> ^operator <op>)
    (<op> ^name process-semantics)
    (<op> ^attribute relation)
    (<op> ^assigner <ass>)
    (<s> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^relation <sr>)
    (<sr> ^2 <sg>)
    (<sr> ^handle <sp>)
    (<sr> ^3 <sg3>)
    -->
    (<sem> ^predicate <sr2> +)
    (<sr2> ^handle <sp> +)
    (<sr2> ^2 <sg> +)
    (<sr2> ^3 <sg3> +)
    (<sr2> ^item-type predicate +)
    (<ass> ^processed-semantics <sg> +)
}

sp {apply*process-semantics*relation
    (state <s> ^operator <op>)
    (<op> ^name process-semantics)
    (<op> ^attribute relation)
    (<op> ^assigner <ass>)
    (<s> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^relation <sr>)
    (<sr> -^3 <v*1>)
    (<sr> ^2 <sg>)
    (<sr> ^handle <sp>)
    -->
    (<sem> ^predicate <sr2> +)
    (<sr2> ^handle <sp> +)
    (<sr2> ^2 <sg> +)
    (<sr2> ^item-type predicate +)
    (<ass> ^processed-semantics <sg> +)
}

sp {apply*process-semantics*unknown
    (state <s> ^operator <op>)
    (<op> ^name process-semantics)
    (<op> ^extra-attribute <of>)
    (<op> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^value <value>)
    (<op> ^attribute <att>)
    -->
    (<sem> ^<att> <value> +)
    (<value> ^<of> unknown +)
    (<value> ^item-type predicate +)
    (<ass> ^processed-semantics <att> +)
}

sp {apply*process-semantics*simple2
    (state <s> ^operator <op>)
    (<op> ^name process-semantics)
    (<op> ^value2 <value>)
    (<op> ^attribute2 <att>)
    (<op> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    -->
    (<sem> ^<att> <value> +)
    (<ass> ^processed-semantics <value> +)
}

sp {apply*process-semantics*simple
    (state <s> ^operator <op>)
    (<op> -^relation <sr>)
    (<op> -^extra-attribute <of>)
    (<op> ^name process-semantics)
    (<op> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<op> ^value <value>)
    (<op> ^attribute { <> relation <att> })
    -->
    (<sem> ^<att> <value> +)
    (<ass> ^processed-semantics <value> +)
}

sp {apply*process-semantics*create-empty*semantics
    (state <s> ^operator <o>)
    (<o> ^name process-semantics)
    (<o> ^assigner <a*1>)
    (<a*1> ^parent-receiver <rec>)
    (<rec> -^semantics <sem>)
    -->
    (<rec> ^semantics <sem> +)
}

sp {apply*process-semantics*process-semantics-mark-processed
    (state <s> ^operator <o>)
    (<o> ^name process-semantics)
    (<o> ^assigner <ass>)
    (<o> ^semantics <sem>)
    -->
    (<ass> ^processed-semantics <sem> +)
}

sp {apply*process-semantics*process-semantics-embed*receiver
    (state <s> ^operator <o>)
    (<o> ^name process-semantics)
    (<o> ^embed <embed>)
    (<o> ^receiver <mr>)
    (<o> ^value <value>)
    (<o> ^attribute <att>)
    -->
    (<embed> ^<att> <value> +)
    (<mr> ^processed-semantics <value> +)
}

sp {apply*process-semantics*process-semantics-embed
    (state <s> ^operator <o>)
    (<o> ^embed-semantics true)
    (<o> ^name process-semantics)
    (<o> ^embed-structure <embed>)
    (<o> ^assigner <ass>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<ass> ^merged-receiver <m*1>)
    (<m*1> ^semantics <sem2>)
    -->
    (<sem> ^<embed> <sem2> +)
    (<ass> ^processed-semantics *embed* +)
}

sp {apply*process-semantics*process-semantics-copy-structure
    (state <s> ^operator <o>)
    (<o> ^name process-semantics)
    (<o> ^copy-semantics <sem2>)
    (<o> ^assigner <ass>)
    (<ass> ^merged-receiver <m*1>)
    (<m*1> ^semantics <sem2>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<o> ^copy-structure <att>)
    (<sem2> ^<att2> <val>)
    -->
    (<sem> ^<att> <val> +)
    (<ass> ^processed-semantics <sem2> +)
}

sp {apply*process-semantics*process-semantics-copy
    (state <s> ^operator <o>)
    (<o> -^copy-structure <c*1>)
    (<o> ^name process-semantics)
    (<o> ^copy-semantics <sem2>)
    (<o> ^assigner <ass>)
    (<ass> ^merged-receiver <m*1>)
    (<m*1> ^semantics <sem2>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <sem>)
    (<sem2> ^<att> <val>)
    -->
    (<sem> ^<att> <val> +)
    (<ass> ^processed-semantics <sem2> +)
}

sp {evaluate-operator*reject*process-semantics
    (state <s> ^name evaluate-operator)
    (<s> ^operator <op1> +)
    (<op1> ^name process-semantics)
    -->
    (<s> ^operator <op1> -)
}

sp {comprehension*compare*process-semantics*prefer-specific2
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^copy-semantics true)
    (<op2> ^name process-semantics)
    (<s> ^operator <op1> +)
    (<op1> -^copy-semantics true)
    (<op1> ^name process-semantics)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*process-semantics*prefer-specific
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> -^relation <r*2>)
    (<op2> ^name process-semantics)
    (<s> ^operator <op1> +)
    (<op1> ^name process-semantics)
    (<op1> ^relation <r*1>)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*process-semantics
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name process-semantics)
    (<s> ^operator <op2> +)
    (<op2>
          ^name { << process-phrase-end failed-referent-grounding process-missing-assigner merge comprehend-word >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {propose*process-semantics*semantics*relation
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure relation)
    (<ass> ^merged-receiver <mre>)
    (<mre> ^semantics <sem>)
    (<sem> ^of-relation <sg>)
    (<ass> -^processed-semantics <sg>)
    (<mre> ^{ << complement head >> <a*1> } <v*1>)
    (<v*1> ^lt <lt>)
    (<lt> ^semantic-structure relation)
    (<lt> ^<att> <left-of1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute relation +)
    (<op> ^relation <sr> +)
    (<sr> ^handle <left-of1> +)
    (<sr> ^2 <sg> +)
}

sp {propose*process-semantics*use-semantics*already*same-attribute
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <m*1>)
    (<m*1> ^semantics <sg>)
   -{ (<sg> -^<att> <a*1>)
      (<ass> ^merged-receiver <m*2>)
      (<m*2> ^semantics <sg>)}
   -{ (<ass> ^lt <l*2>)
      (<l*2> ^semantic-structure { << relation arg1 >> <s*1> })
      (<sg> ^relation <x>)}
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<sg> ^<ss> <value>)
    (<ass> -^processed-semantics <value>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <value> +)
}

sp {propose*process-semantics*use-semantics2
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <m*1>)
    (<m*1> ^semantics <sg>)
   -{ (<sg> -^<att> <a*1>)
      (<ass> ^merged-receiver <m*2>)
      (<m*2> ^semantics <sg>)}
   -{ (<ass> ^lt <l*2>)
      (<l*2> ^semantic-structure { << relation arg1 >> <s*1> })
      (<sg> ^relation <x>)}
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<sg> -^<ss> <s*2>)
    (<sg> ^{ << predicate arg1 arg2 >> <a*2> } <value>)
    (<ass> -^processed-semantics <value>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <value> +)
}

sp {propose*process-semantics*use-semantics
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <m*1>)
    (<m*1> ^semantics <sg>)
   -{ (<ass> ^processed-semantics <p*1>)
      (<p*1> ^predicates <x>)
      (<sg> ^action <x>)}
    (<sg> -^{ << arg1 arg2 predicate >> <a*2> } <v*1>)
   -{ (<sg> -^<att> <a*1>)
      (<ass> ^merged-receiver <m*2>)
      (<m*2> ^semantics <sg>)}
   -{ (<ass> ^lt <l*2>)
      (<l*2> ^semantic-structure { << relation arg1 >> <s*1> })
      (<sg> ^relation <x>)}
    (<ass> -^processed-semantics <sg>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<sg> -^<ss> <s*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <sg> +)
}

sp {propose*process-semantics*embed
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> -^processed-semantics *embed*)
    (<ass> ^lt <lt>)
    (<lt> ^semantic-structure *embed*)
    (<lt> ^embed-structure <embed>)
    (<ass> ^merged-receiver <m*1>)
    (<m*1> ^semantics <sg>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^embed-semantics true +)
    (<op> ^embed-structure <embed> +)
    (<op> ^assigner <ass> +)
}

sp {propose*process-semantics*copy*structure
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure *copy*)
    (<ass> ^merged-receiver <m*1>)
    (<m*1> ^semantics <sg>)
   -{ (<sg> -^<att2> <a*1>)
      (<ass> ^merged-receiver <m*2>)
      (<m*2> ^semantics <sg>)}
    (<ass> -^processed-semantics <sg>)
    (<ass> ^lt <l*2>)
    (<l*2> ^copy-structure <att>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^copy-semantics <sg> +)
    (<op> ^copy-structure <att> +)
    (<op> ^assigner <ass> +)
}

sp {propose*process-semantics*copy
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
   -{ (<ass> ^lt <l*2>)
      (<l*2> ^copy-structure <c*1>)}
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure *copy*)
    (<ass> ^merged-receiver <m*1>)
    (<m*1> ^semantics <sg>)
   -{ (<sg> -^<att> <a*1>)
      (<ass> ^merged-receiver <m*2>)
      (<m*2> ^semantics <sg>)}
    (<ass> -^processed-semantics <sg>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^copy-semantics <sg> +)
    (<op> ^assigner <ass> +)
}

sp {propose*process-semantics*adjective*unknown-object-feature
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
    (<mre> -^referent <r*1>)
    (<mre> ^lt <lli>)
    (<lli> -^referent <r*2>)
    (<ass> -^processed-semantics <lli>)
    (<lli> ^structure-type ADJ)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <lli> +)
}

sp {propose*process-semantics*adjective*unknown-name
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
    (<mre> -^referent <r*1>)
    (<mre> ^lt <lli>)
   -{ (<lli> ^referent <r*2>)
      (<r*2> ^handle <pf>)}
    (<lli> ^structure-type ADJ)
    (<lli> ^object-feature { <> unknown <of> })
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<ass> -^processed-semantics <ss>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <xx> +)
    (<op> ^extra-attribute <of> +)
}

sp {propose*process-semantics*adjective
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> -^processed-semantics <id>)
    (<ass> ^merged-receiver <mre>)
    (<mre> -^referent <r*1>)
    (<mre> ^lt <lli>)
    (<lli> ^structure-type ADJ)
    (<lli> ^object-feature <of>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <lli> +)
}

sp {propose*process-semantics*default*adjunct
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
    (<mre> -^referent <sg>)
    (<mre> ^adjunct <a*1>)
    (<a*1> ^lt <l*2>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<l*2> ^relation <adj>)
    (<ass> -^processed-semantics <adj>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute adjunct +)
    (<op> ^value <adj> +)
}

sp {propose*process-semantics*PP-with-left-of-PP
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
    (<mre> ^structure-type PP)
    (<ass> ^parent-receiver <p*1>)
    (<mre> ^lt <l*2>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<mre> ^head <h*2>)
    (<h*2> ^referent <obj>)
    (<ass> -^processed-semantics <obj>)
    (<p*1> ^head <h*1>)
    (<h*1> ^lt <hlli>)
    (<hlli> ^semantic-entity-type relation)
    (<l*2> ^relation <r*2>)
    (<r*2> ^handle of1)
    (<hlli> ^relation <r*1>)
    (<r*1> ^handle <left-of1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute relation +)
    (<op> ^relation <sr> +)
    (<sr> ^handle <left-of1> +)
    (<sr> ^2 <obj> +)
}

sp {propose*process-semantics*PP-with-of-PP-DP
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
    (<mre> ^structure-type PP)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<mre> ^head <h*3>)
    (<h*3> ^lt-referent <sg>)
   -{ (<sg> ^property <p*1>)
      (<p*1> ^handle possessive)}
    (<ass> -^processed-semantics <sg>)
    (<mre> ^head <h*1>)
    (<h*1> ^head <h*2>)
    (<h*2> ^lt-referent <l*2>)
    (<l*2> ^handle <minutes>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^relation <sr> +)
    (<sr> ^handle <minutes> +)
    (<sr> ^2 <sg> +)
}

sp {propose*process-semantics*DP-with-of-DP*referent
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> -^processed-semantics <sg>)
    (<ass> ^merged-receiver <mre>)
    (<mre> -^referent <r*1>)
    (<mre> ^structure-type DP)
    (<mre> ^complement <c*2>)
    (<mre> ^complement <c*1>)
    (<c*1> ^lt <l*2>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<c*2> ^head <head>)
    (<mre> ^head <h*1>)
    (<h*1> ^lt-referent <l*3>)
    (<head> ^referent <ref>)
    (<l*3> ^handle <name>)
    (<l*2> ^relation <r*2>)
    (<r*2> ^handle of1)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^relation <sr> +)
    (<op> ^value <xx> +)
    (<sr> ^handle of1 +)
    (<sr> ^2 <xx> +)
    (<xx> ^handle <name> +)
    (<xx> ^2 <ref> +)
}

sp {propose*process-semantics*DP-with-of-DP
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> -^processed-semantics <sg>)
    (<ass> ^merged-receiver <mre>)
    (<mre> ^structure-type DP)
    (<mre> ^complement <c*2>)
    (<c*2> ^head <h1>)
    (<h1> -^referent <r*2>)
    (<mre> ^complement <c*1>)
    (<c*1> ^lt <l*2>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<h1> ^head <h*2>)
    (<h*2> ^lt-referent <game>)
    (<mre> ^head <h*1>)
    (<h*1> ^lt-referent <l*3>)
    (<l*3> ^handle <name>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle of1)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^relation <sr> +)
    (<op> ^value <xx> +)
    (<sr> ^handle of1 +)
    (<sr> ^2 <xx> +)
    (<xx> ^handle <name> +)
    (<xx> ^2 <game> +)
}

sp {propose*process-semantics*relation*semantics
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure relation)
    (<ass> ^merged-receiver <mre>)
    (<mre> ^head <h*1>)
    (<h*1> ^referent <r*1>)
    (<r*1> ^relation <sg>)
   -{ (<sg> ^2 <v*1>)
      (<v*1> ^predicates <p*1>)
      (<p*1> ^visibility unknown-visible)}
    (<ass> -^processed-semantics <sg>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute predicate +)
    (<op> ^value <sg> +)
}

sp {propose*process-semantics*relation*head-head-lt-referent*ternary
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
   -{ (<mre> ^head <h*3>)
      (<h*3> ^referent <r*2>)}
    (<mre> ^lt <l*3>)
    (<l*3> ^relation-type ternary)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure relation)
    (<mre> ^complement <c*1>)
    (<mre> ^lt <l*2>)
    (<mre> ^head <h*1>)
    (<h*1> ^head <h*2>)
    (<h*2> ^lt-referent <sg>)
    (<ass> -^processed-semantics <sg>)
    (<c*1> ^referent <comp>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle <spr>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute relation +)
    (<op> ^relation <srx> +)
    (<srx> ^handle <spr> +)
    (<srx> ^2 <sg> +)
    (<srx> ^3 <comp> +)
}

sp {propose*process-semantics*relation*head-head-lt-referent
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
   -{ (<mre> ^head <h*3>)
      (<h*3> ^referent <r*2>)}
   -{ (<mre> ^lt <l*3>)
      (<l*3> ^relation-type ternary)}
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure relation)
    (<mre> ^lt <l*2>)
    (<mre> ^head <h*1>)
    (<h*1> ^head <h*2>)
    (<h*2> ^lt-referent <sg>)
    (<ass> -^processed-semantics <sg>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle <spr>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute relation +)
    (<op> ^relation <srx> +)
    (<srx> ^handle <spr> +)
    (<srx> ^2 <sg> +)
}

sp {propose*process-semantics*preposition-relation*head*referent*ternary*head-head-lt-referent
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
    (<mre> ^lt <l*3>)
    (<l*3> ^relation-type ternary)
    (<mre> ^complement <c*1>)
    (<mre> ^lt <l*2>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<mre> ^head <h*1>)
    (<h*1> ^head <h*2>)
    (<h*2> ^lt-referent <sg>)
    (<ass> -^processed-semantics <sg>)
    (<c*1> ^referent <comp>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle <spr>)
    -->
    (write (crlf) |propose*process-semantics*preposition-relation*head*referent*ternary - OK|)
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^relation <sp-x> +)
    (<sp-x> ^handle <spr> +)
    (<sp-x> ^2 <sg> +)
    (<sp-x> ^3 <comp> +)
}

sp {propose*process-semantics*preposition-relation*head-head-complement-lt-referent
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
   -{ (<mre> ^lt <l*3>)
      (<l*3> ^relation-type ternary)}
    (<mre> ^head <head>)
    (<head> -^referent <r*2>)
    (<head> ^complement <c*1>)
    (<c*1> ^constraint <c*2>)
    (<mre> ^lt <l*2>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<head> ^head <h*1>)
    (<h*1> ^lt-referent <sg>)
    (<ass> -^processed-semantics <sg>)
    (<c*2> ^relation <rel>)
    (<rel> -^handle by1)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle <spr>)
    -->
    (write (crlf) |propose*process-semantics*preposition-relation*head-head-complement-lt-referent - OK|)
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^relation <sp-x> +)
    (<sp-x> ^handle <spr> +)
    (<sp-x> ^2 <sg> +)
    (<sg> ^2 <rel> +)
}

sp {propose*process-semantics*preposition-relation*head-head-lt-referent
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
   -{ (<mre> ^lt <l*3>)
      (<l*3> ^relation-type ternary)}
    (<mre> ^head <head>)
    (<head> -^complement <c*1>)
    (<head> -^referent <r*2>)
    (<mre> ^lt <l*2>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<head> ^head <h*1>)
    (<h*1> ^lt-referent <sg>)
    (<ass> -^processed-semantics <sg>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle <spr>)
    -->
    (write (crlf) |propose*process-semantics*preposition-relation*head-head-lt-referent - OK|)
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^relation <sp-x> +)
    (<sp-x> ^handle <spr> +)
    (<sp-x> ^2 <sg> +)
}

sp {propose*process-semantics*preposition-relation*head*referent*ternary
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
    (<mre> ^lt <l*3>)
    (<l*3> ^relation-type ternary)
    (<mre> ^complement <c*1>)
    (<mre> ^lt <l*2>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<mre> ^head <h*1>)
    (<h*1> ^referent <sg>)
    (<ass> -^processed-semantics <sg>)
    (<c*1> ^referent <comp>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle <spr>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^relation <sp-x> +)
    (<sp-x> ^handle <spr> +)
    (<sp-x> ^2 <sg> +)
    (<sp-x> ^3 <comp> +)
}

sp {propose*process-semantics*preposition-relation*head*referent
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
   -{ (<mre> ^lt <l*3>)
      (<l*3> ^relation-type ternary)}
    (<mre> ^lt <l*2>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<mre> ^head <h*1>)
    (<h*1> ^referent <sg>)
    (<ass> -^processed-semantics <sg>)
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle <spr>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^relation <sp-x> +)
    (<sp-x> ^handle <spr> +)
    (<sp-x> ^2 <sg> +)
}

sp {propose*process-semantics*referent2
    (state <s> ^operator <op> +)
    (<op> ^name process-semantics)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mr>)
    (<mr> ^lt-referent2 <sg>)
    (<mr> ^lt <l*1>)
    (<l*1> ^semantic-structure2 <ss>)
    -->
    (<op> ^attribute2 <ss> +)
    (<op> ^value2 <sg> +)
}

sp {propose*process-semantics*receiver*embed
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^lt <lt>)
    (<lt> ^semantic-structure *embed*)
    (<lt> ^embed-structure <es>)
    (<ass> ^parent-receiver <p*1>)
    (<p*1> ^semantics <s*1>)
    (<ass> ^merged-receiver <mr>)
    (<mr> ^lt-referent <sg>)
    (<mr> -^processed-semantics <sg>)
    (<mr> ^semantics <embed>)
    (<s*1> ^<es> <embed>)
    (<mr> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^receiver <mr> +)
    (<op> ^embed <embed> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <sg> +)
}

sp {propose*process-semantics*receiver
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
   -{ (<ass> ^lt <l*1>)
      (<l*1> ^semantic-structure *embed*)}
    (<ass> ^merged-receiver <mr>)
    (<mr> ^lt-referent <sg>)
    (<ass> -^processed-semantics <sg>)
    (<mr> ^lt <l*2>)
    (<l*2> ^semantic-structure { <> *copy* <> *embed* <ss> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <sg> +)
}

sp {propose*process-semantics*referent-nil*deeper*constraint*referent
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
   -{ (<mre> ^complement <c*1>)
      (<c*1> ^head <h*2>)
      (<h*2> ^head <h*3>)
      (<h*3> ^lt-referent <l*4>)}
    (<mre> -^lt-referent <l*3>)
    (<mre> -^referent <r*1>)
    (<mre> ^constraint <con>)
    (<con> ^referent <ref>)
    (<ass> -^processed-semantics <ref>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<mre> ^head <h*1>)
    (<h*1> ^lt-referent <l*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <ref> +)
}

sp {propose*process-semantics*referent-nil*deeper*constraint
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
   -{ (<mre> ^complement <c*1>)
      (<c*1> ^head <h*2>)
      (<h*2> ^head <h*3>)
      (<h*3> ^lt-referent <l*4>)}
    (<mre> -^lt-referent <l*3>)
    (<mre> -^referent <r*1>)
    (<mre> ^constraint <con>)
   -{ (<con> ^property <p*1>)
      (<p*1> ^handle possessive)}
    (<con> -^referent <r*2>)
    (<ass> -^processed-semantics <con>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<mre> ^head <h*1>)
    (<h*1> ^lt-referent <l*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <con> +)
}

sp {propose*process-semantics*referent*deeper
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
   -{ (<mre> ^complement <c*2>)
      (<c*2> ^head <h*2>)
      (<h*2> ^head <h*3>)
      (<h*3> ^lt-referent <l*3>)}
    (<mre> -^constraint <c*1>)
    (<mre> -^lt-referent <l*2>)
    (<mre> -^referent <r*1>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<mre> ^head <h*1>)
    (<h*1> ^lt-referent <sg>)
    (<ass> -^processed-semantics <sg>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <sg> +)
}

sp {propose*process-semantics*failed-referent
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> -^processed-semantics <sg>)
    (<ass> ^merged-receiver <mre>)
    (<mre> -^referent <r*1>)
    (<mre> ^lt <l*2>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<mre> ^head <head>)
    (<head> ^failed-grounding <fg>)
    (<head> ^constraint <con>)
    (<l*2> ^relation <rel>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^relation <val> +)
    (<val> ^2 <con> +)
    (<val> ^handle <rel> +)
}

sp {propose*process-semantics*referent-type*no-constraint*relation
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
   -{ (<mre> ^head <h*1>)
      (<h*1> ^referent <r*2>)}
    (<mre> -^lt-referent <l*3>)
    (<mre> -^referent <r*1>)
    (<mre> -^constraint <con>)
    (<ass> ^lt <l*1>)
    (<l*1> ^referent-type literal)
    (<mre> ^lt <lli>)
    (<ass> ^lt <l*2>)
    (<l*2> ^semantic-structure { <> *copy* <> *embed* <> relation <ss> })
    (<lli> ^relation <rel>)
    (<ass> -^processed-semantics <rel>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <rel> +)
}

sp {propose*process-semantics*referent*no-constraint*relation
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
   -{ (<mre> ^head <h*1>)
      (<h*1> ^referent <r*2>)}
    (<mre> -^lt-referent <l*2>)
    (<mre> -^referent <r*1>)
    (<mre> -^semantics <s*1>)
    (<mre> -^constraint <con>)
    (<mre> ^lt <lli>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <> relation <ss> })
    (<lli> ^relation <rel>)
    (<ass> -^processed-semantics <rel>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <rel> +)
}

sp {propose*process-semantics*no-referent*head
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> -^processed-semantics <sg>)
    (<ass> ^merged-receiver <mre>)
    (<mre> -^referent <r*1>)
    (<mre> -^lt-referent <l*2>)
    (<mre> -^constraint <con>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    (<mre> ^head <h*1>)
    (<h*1> ^referent <head>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <head> +)
}

sp {propose*process-semantics*no-referent*constraint
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
    (<mre> -^referent <r*1>)
    (<mre> -^lt-referent <l*2>)
   -{ (<mre> ^head <h*1>)
      (<h*1> ^lt-referent <sg>)}
    (<mre> ^constraint <con>)
    (<ass> -^processed-semantics <con>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <con> +)
}

sp {propose*process-semantics*no-local-referent*lt-referent
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
    (<mre> -^referent <r*1>)
    (<mre> ^lt-referent <sg>)
    (<ass> -^processed-semantics <sg>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <sg> +)
}

sp {propose*process-semantics*referent
    (state <s> ^name comprehension)
    (<s> -^deep-complement true)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <m*1>)
    (<m*1> ^referent <sg>)
    (<ass> -^processed-semantics <sg>)
    (<ass> ^lt <l*1>)
    (<l*1> ^semantic-structure { <> *copy* <> *embed* <ss> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-semantics +)
    (<op> ^assigner <ass> +)
    (<op> ^attribute <ss> +)
    (<op> ^value <sg> +)
}

sp {elaborate*process-semantics*DP-DP
    (state <s> ^name comprehension)
    (<s> ^assigner <ass>)
    (<ass> ^merged-receiver <mre>)
    (<mre> ^structure-type DP)
    (<mre> ^complement <c*1>)
    (<mre> ^head <h*3>)
    (<h*3> ^lt-referent <l*1>)
    (<l*1> ^handle of1)
    (<c*1> ^head <h*1>)
    (<h*1> ^head <h*2>)
    (<h*2> ^lt-referent <sg>)
    -->
    (<s> ^deep-complement true +)
}

sp {elaborate*assigner
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^merged-assigner <ass>)
    -->
    (<s> ^assigner <ass> +)
}

sp {comprehension*compare*process-phrase-end*prefer-most-recent
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name process-phrase-end)
    (<s> ^operator <op1> +)
    (<op1> ^name process-phrase-end)
    (<op2> ^assigner-parent <a*2>)
    (<op1> ^assigner-parent <a*1>)
    (<a*2> ^decision-count <d*1>)
    (<a*1> ^decision-count { < <d*1> <dc> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*process-phrase-end*prefer-merge-before-process-end2
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator <op1> +)
    (<op1> ^name process-phrase-end)
    (<op1> ^assigner-parent <ap>)
   -{ (<op2> ^assigner <a*1>)
      (<a*1> ^parent-receiver <ap>)}
    (<op2> ^assigner <a*2>)
    (<a*2> ^lt <l*1>)
    (<l*1> ^required true)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*process-phrase-end*prefer-merge-before-process-end*not
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
   -{ (<op2> ^assigner <a*2>)
      (<a*2> ^lt <l*1>)
      (<l*1> ^required true)}
    (<op2> ^name merge)
    (<s> ^operator <op1> +)
    (<op1> ^name process-phrase-end)
    (<op1> ^assigner-parent <ap>)
   -{ (<op2> ^assigner <a*1>)
      (<a*1> ^parent-receiver <ap>)}
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*process-phrase-end*ground-new-constraint
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name ground-new-constraint)
    (<s> ^operator <op1> +)
    (<op1> ^name process-phrase-end)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*process-phrase-end*prefer-merge-before-process-end
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator <op1> +)
    (<op1> ^name process-phrase-end)
    (<op1> ^assigner-parent <ap>)
    (<op2> ^assigner <a*1>)
    (<a*1> ^parent-receiver <ap>)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {apply*process-phrase-end
    (state <s> ^operator <op>)
    (<op> ^name process-phrase-end)
    (<op> ^assigner-parent <ps>)
    (<ps> ^lt <l*1>)
    (<l*1> ^converts-to <nstruct>)
    (<ps> ^structure-type { <> <nstruct> <oldstruct> })
    (<s> ^segment <seg>)
    -->
    (<ps> ^structure-type <nstruct> +)
    (<ps> ^structure-type <oldstruct> -)
    (<seg> ^not-merged-receiver <ps> +)
}

sp {comprehension*propose*process-phrase-end2
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <ps>)
   -{ (<s> ^possible-future-merge <pm2>)
      (<pm2> ^assigner <a*2>)
      (<a*2> ^parent-receiver <ps>)
      (<pm2> ^receiver { <> <ps> <nmr> })}
   -{ (<s> ^possible-merge <pm>)
      (<pm> ^assigner <a*1>)
      (<a*1> ^parent-receiver <ps>)
      (<pm> ^receiver { <> <ps> <nmr> })}
   -{ (<seg> ^not-merged-assigner <uai>)
      (<uai> ^parent-receiver <ps>)
      (<uai> ^lt <l*2>)
      (<l*2> ^required true)}
    (<seg> ^retrieved-stack <r*1>)
    (<ps> ^lt <l*1>)
    (<l*1> ^converts-to <nstruct>)
    (<ps> -^structure-type <nstruct>)
    (<r*1> ^item { <> <ps> <item> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-phrase-end +)
    (<op> ^assigner-parent <ps> +)
}

sp {comprehension*propose*process-phrase-end
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^merged-assigner <p>)
    (<p> ^parent-receiver <ps>)
   -{ (<s> ^possible-future-merge <pm2>)
      (<pm2> ^assigner <a*2>)
      (<a*2> ^parent-receiver <ps>)
      (<pm2> ^receiver { <> <ps> <nmr> })}
   -{ (<s> ^possible-merge <pm>)
      (<pm> ^assigner <a*1>)
      (<a*1> ^parent-receiver <ps>)
      (<pm> ^receiver { <> <ps> <nmr> })}
   -{ (<seg> ^not-merged-assigner <uai>)
      (<uai> ^parent-receiver <ps>)
      (<uai> ^lt <l*2>)
      (<l*2> ^required true)}
    (<seg> ^retrieved-stack <r*1>)
    (<p> ^merged-receiver <m*1>)
    (<ps> ^lt <l*1>)
    (<l*1> ^converts-to <nstruct>)
    (<ps> -^structure-type <nstruct>)
    (<r*1> ^item { <> <ps> <> <m*1> <item> })
    (<item> ^structure-type <s-type>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-phrase-end +)
    (<op> ^assigner-parent <ps> +)
}

sp {comprehension*elaborate*possible-future-merge*converts-to-any
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
   -{ (<s> ^possible-future-merge <p*1>)
      (<seg> ^not-merged-assigner <ass2>)
      (<p*1> ^assigner <ass2>)
      (<ass2> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<ass2> ^lt <l*5>)
      (<assigner> ^lt <before>)
      (<l*5> ^before <before>)}
   -{ (<seg> ^merged-assigner <ass3>)
      (<ass3> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<ass3> ^lt <l*4>)
      (<assigner> ^lt <after>)
      (<l*4> ^after <after>)}
   -{ (<assigner> ^lt <l*1>)
      (<l*1> ^lexical-item-spelling <l*2>)}
    (<seg> ^not-merged-receiver <receiver>)
   -{ (<seg> ^not-possible-merge <npm>)
      (<npm> ^assigner <assigner>)
      (<npm> ^receiver <receiver>)}
   -{ (<receiver> ^lt <l*9>)
      (<l*9> ^directional <d*4>)
      (<assigner> ^lt <l*8>)
      (<l*8> ^directional { <> <d*4> <x> })}
   -{ (<assigner> ^lt <l*7>)
      (<l*7> ^relative-position after)
      (<assigner> ^decision-count <dl-dc2>)
      (<receiver> ^decision-count { < <dl-dc2> <d*3> })}
   -{ (<assigner> ^lt <l*6>)
      (<l*6> ^relative-position before)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { > <dl-dc> <d*2> })}
    (<assigner> -^parent-receiver <receiver>)
    (<receiver> ^lt <l*3>)
    (<l*3> ^converts-to-any true)
    (<receiver> ^decision-count <d*1>)
    (<assigner> ^decision-count { < <d*1> <da-dc> })
    (<assigner> ^structure-type <stype>)
    -->
    (<s> ^possible-future-merge <pm> +)
    (<pm> ^receiver <receiver> +)
    (<pm> ^assigner <assigner> +)
    (<pm> ^type normal +)
}

sp {comprehension*elaborate*possible-future-merge*super-converts
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
   -{ (<s> ^possible-future-merge <p*1>)
      (<seg> ^not-merged-assigner <ass2>)
      (<p*1> ^assigner <ass2>)
      (<ass2> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<ass2> ^lt <l*5>)
      (<assigner> ^lt <before>)
      (<l*5> ^before <before>)}
   -{ (<seg> ^merged-assigner <ass3>)
      (<ass3> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<ass3> ^lt <l*4>)
      (<assigner> ^lt <after>)
      (<l*4> ^after <after>)}
   -{ (<assigner> ^lt <l*1>)
      (<l*1> ^lexical-item-spelling <l*2>)}
    (<seg> ^not-merged-receiver <receiver>)
   -{ (<seg> ^not-possible-merge <npm>)
      (<npm> ^assigner <assigner>)
      (<npm> ^receiver <receiver>)}
   -{ (<receiver> ^lt <l*9>)
      (<l*9> ^directional <d*4>)
      (<assigner> ^lt <l*8>)
      (<l*8> ^directional { <> <d*4> <x> })}
   -{ (<assigner> ^lt <l*7>)
      (<l*7> ^relative-position after)
      (<assigner> ^decision-count <dl-dc2>)
      (<receiver> ^decision-count { < <dl-dc2> <d*3> })}
   -{ (<assigner> ^lt <l*6>)
      (<l*6> ^relative-position before)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { > <dl-dc> <d*2> })}
    (<assigner> -^parent-receiver <receiver>)
    (<receiver> ^decision-count <d*1>)
    (<assigner> ^decision-count { < <d*1> <da-dc> })
    (<receiver> ^lt <l*3>)
    (<l*3> ^super-converts-to <stype>)
    (<assigner> ^structure-type <stype>)
    -->
    (<s> ^possible-future-merge <pm> +)
    (<pm> ^receiver <receiver> +)
    (<pm> ^assigner <assigner> +)
    (<pm> ^type normal +)
}

sp {comprehension*elaborate*possible-future-merge
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
   -{ (<s> ^possible-future-merge <p*1>)
      (<seg> ^not-merged-assigner <ass2>)
      (<p*1> ^assigner <ass2>)
      (<ass2> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<ass2> ^lt <l*5>)
      (<assigner> ^lt <before>)
      (<l*5> ^before <before>)}
   -{ (<seg> ^merged-assigner <ass3>)
      (<ass3> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<ass3> ^lt <l*4>)
      (<assigner> ^lt <after>)
      (<l*4> ^after <after>)}
   -{ (<assigner> ^lt <l*1>)
      (<l*1> ^lexical-item-spelling <l*2>)}
    (<seg> ^not-merged-receiver <receiver>)
   -{ (<seg> ^not-possible-merge <npm>)
      (<npm> ^assigner <assigner>)
      (<npm> ^receiver <receiver>)}
   -{ (<receiver> ^lt <l*9>)
      (<l*9> ^directional <d*4>)
      (<assigner> ^lt <l*8>)
      (<l*8> ^directional { <> <d*4> <x> })}
   -{ (<assigner> ^lt <l*7>)
      (<l*7> ^relative-position after)
      (<assigner> ^decision-count <dl-dc2>)
      (<receiver> ^decision-count { < <dl-dc2> <d*3> })}
   -{ (<assigner> ^lt <l*6>)
      (<l*6> ^relative-position before)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { > <dl-dc> <d*2> })}
    (<assigner> -^parent-receiver <receiver>)
    (<receiver> ^decision-count <d*1>)
    (<assigner> ^decision-count { < <d*1> <da-dc> })
    (<receiver> ^lt <l*3>)
    (<l*3> ^converts-to <stype>)
    (<assigner> ^structure-type <stype>)
    -->
    (<s> ^possible-future-merge <pm> +)
    (<pm> ^receiver <receiver> +)
    (<pm> ^assigner <assigner> +)
    (<pm> ^type normal +)
}

sp {comprehension*elaborate*detect*prefered*verb-PP-directional-merge*so*probable*DP-merge
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner1>)
    (<assigner1> ^parent-receiver <pr>)
    (<pr> ^structure-type V)
    (<assigner1> ^lt <l*3>)
    (<l*3> ^structure-type PP)
    (<assigner1> ^decision-count <da-dc>)
    (<pr> ^lt <l*4>)
    (<l*4> ^directional { << maybe true >> <d*3> })
    (<seg> ^not-merged-receiver <receiver>)
    (<receiver> ^lt <l*1>)
    (<l*1> ^converts-to PP)
    (<receiver> ^decision-count { > <da-dc> <d*1> })
    (<receiver> ^lt <l*2>)
    (<l*2> ^directional { << maybe true >> <d*2> })
    -->
    (<seg> ^probable-merge <npm> +)
    (<npm> ^receiver <receiver> +)
    (<npm> ^assigner <assigner1> +)
}

sp {comprehension*elaborate*detect*prefered*verb-PP-directional-merge*so*no*DP-merge
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner2>)
    (<assigner2> ^lt <l*5>)
    (<l*5> ^structure-type PP)
    (<seg> ^not-merged-assigner <assigner1>)
    (<assigner1> ^parent-receiver <pr>)
    (<pr> ^structure-type V)
    (<assigner1> ^lt <l*3>)
    (<l*3> ^structure-type PP)
    (<assigner2> ^decision-count <d*3>)
    (<assigner1> ^decision-count { < <d*3> <da-dc> })
    (<pr> ^lt <l*4>)
    (<l*4> ^directional { << true >> <d*2> })
    (<seg> ^not-merged-receiver <receiver>)
    (<receiver> ^lt <l*1>)
    (<l*1> ^converts-to PP)
    (<receiver> ^lt <l*2>)
    (<l*2> ^directional { << true >> <d*1> })
    -->
    (<seg> ^not-possible-merge <npm> +)
    (<npm> ^receiver <receiver> +)
    (<npm> ^assigner <assigner2> +)
}

sp {apply*process-missing-assigner*optional*remove
    (state <s> ^segment <seg>)
   -{ (<s> ^segment <s*1>)
      (<s*1> ^not-merged-receiver <n*1>)
      (<n*1> ^structure-type unknown)}
    (<s> ^operator <op>)
    (<op> ^name process-missing-assigner)
    (<seg> ^not-merged-assigner <ass1>)
    (<op> ^item <ass1>)
    (<ass1> ^lt <l*1>)
    (<l*1> ^optional true)
    (<ass1> ^parent-receiver <pr>)
    (<ass1> ^structure-type <stype>)
    -->
    (<seg> ^not-merged-assigner <ass1> -)
}

sp {comprehension*compare*process-missing-assigner*comprehend
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name process-missing-assigner)
    (<s> ^operator <op2> +)
    (<op2> ^name { << process-phrase-end comprehend-word >> <n*1> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*process-missing-assigner
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name process-missing-assigner)
    (<s> ^operator <op2> +)
    (<op2> ^name { << next-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*propose*process-missing-assigner*new
    (state <s> ^name comprehension)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <ass2>)
   -{ (<ass2> ^lt <l*1>)
      (<l*1> ^required true)}
    (<seg> ^not-merged-receiver <nmr>)
   -{ (<s> ^possible-future-merge <pm2>)
      (<pm2> ^assigner <ass2>)
      (<s> ^possible-future-merge <pm>)
      (<pm> ^receiver <nmr>)
      (<pm> ^assigner <a*1>)
      (<a*1> ^parent-receiver <rec2>)
      (<pm2> ^receiver <rec2>)}
    (<nmr> ^lt <lt>)
    (<lt> ^attachment immediate)
    (<lt> ^converts-to <new-type>)
   -{ (<seg> ^not-merged-receiver <n*1>)
      (<n*1> ^structure-type <new-type>)}
    (<seg> ^not-merged-assigner { <> <ass2> <ass1> })
    (<ass1> ^structure-type <new-type>)
    (<ass2> ^parent-receiver <pr>)
    (<ass1> ^parent-receiver <pr>)
    (<ass2> ^decision-count <dc2>)
   -{ (<s> ^possible-future-merge <pfm4>)
      (<pfm4> ^receiver <nmr>)
      (<pfm4> ^assigner <ass4>)
      (<ass4> ^structure-type <new-type>)
      (<ass4> ^decision-count { > <dc2> <d*2> })}
    (<ass1> ^decision-count { >= <dc2> <dc> })
    (<nmr> ^decision-count { > <dc> <d*1> })
    (<ass2> ^structure-type <stype>)
    -->
    (<seg> ^not-merged-assigner <ass2> -)
}

sp {comprehension*propose*process-missing-assigner*phrase-end
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <ass1>)
    (<ass1> ^lt <lla>)
    (<lla> ^optional true)
    (<lla> ^structure-type <rst>)
   -{ (<seg> ^not-merged-receiver <n*2>)
      (<n*2> ^lt <l*1>)
      (<l*1> ^converts-to <rst>)}
    (<ass1> ^parent-receiver <ps>)
    (<ps> ^lt <l*2>)
    (<l*2> ^converts-to <nstruct>)
    (<ps> ^structure-type <nstruct>)
    (<s> ^operator <o*1>)
    (<o*1> ^name { << process-phrase-end next-word >> <n*1> })
    -->
    (<seg> ^not-merged-assigner <ass1> -)
}

sp {comprehension*propose*process-missing-assigner*exclusive
    (state <s> ^name comprehension)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^merged-assigner <ma>)
    (<ma> ^parenet-receiver <pr>)
    (<seg> ^not-merged-assigner <ass1>)
    (<ass1> ^parent-receiver <pr>)
    (<ass1> ^lt <lt-ass1>)
    (<ma> ^lt <l*1>)
    (<l*1> ^exclusive <lt-ass1>)
    -->
    (<seg> ^not-merged-assigner <ass1> -)
}

sp {comprehension*propose*process-missing-assigner*after
    (state <s> ^name comprehension)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <ass1>)
    (<ass1> -^failed merge)
    (<seg> ^not-merged-assigner <ass2>)
    (<ass1> ^parent-receiver <pr>)
    (<ass2> ^parent-receiver <pr>)
    (<ass1> ^lt <l*1>)
    (<ass2> ^lt <ass-after>)
    (<l*1> ^after <ass-after>)
    (<seg> ^not-merged-receiver <n*1>)
    (<n*1> ^structure-type <stype>)
    (<ass1> ^structure-type <stype>)
    -->
    (<seg> ^not-merged-assigner <ass1> -)
}

sp {comprehension*propose*process-missing-assigner*after*x
    (state <s> ^name comprehension)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <ass2>)
   -{ (<ass2> ^lt <l*3>)
      (<l*3> ^required true)}
    (<seg> ^not-merged-assigner { <> <ass2> <ass1> })
    (<ass2> ^parent-receiver <pr>)
    (<ass1> ^parent-receiver <pr>)
    (<ass1> ^structure-type <until-pp>)
   -{ (<seg> ^not-merged-receiver <n*1>)
      (<n*1> ^structure-type <until-pp>)}
    (<ass1> ^decision-count <d*1>)
    (<ass2> ^lt <ass-after>)
    (<ass1> ^lt <l*2>)
    (<l*2> ^after <ass-after>)
    (<seg> ^not-merged-receiver <nmr>)
    (<nmr> ^decision-count { > <d*1> <dc> })
    (<ass2> -^decision-count { > <dc> <d*2> })
    (<nmr> ^lt <l*1>)
    (<l*1> ^converts-to <until-pp>)
    (<ass2> ^structure-type { <> <until-pp> <stype> })
    -->
    (<seg> ^not-merged-assigner <ass2> -)
}

sp {comprehension*propose*process-missing-assigner*before*x
    (state <s> ^name comprehension)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <ass2>)
   -{ (<ass2> ^lt <l*3>)
      (<l*3> ^required true)}
    (<seg> ^not-merged-assigner { <> <ass2> <ass1> })
    (<ass2> ^parent-receiver <pr>)
    (<ass1> ^parent-receiver <pr>)
    (<ass1> ^structure-type <until-pp>)
   -{ (<seg> ^not-merged-receiver <n*1>)
      (<n*1> ^structure-type <until-pp>)}
    (<ass1> ^lt <ass-before>)
   -{ (<seg> ^not-merged-assigner { <> <ass1> <> <ass2> <ass3> })
      (<ass3> ^parent-receiver <pr>)
      (<ass3> ^structure-type <until-pp>)
      (<ass3> ^lt <l*4>)
      (<l*4> ^before <ass-before>)}
    (<ass2> ^lt <l*2>)
    (<l*2> ^before <ass-before>)
    (<ass1> ^decision-count <d*1>)
    (<seg> ^not-merged-receiver <nmr>)
    (<nmr> ^decision-count { > <d*1> <dc> })
    (<ass2> -^decision-count { > <dc> <d*2> })
    (<nmr> ^lt <l*1>)
    (<l*1> ^converts-to <until-pp>)
    (<ass2> ^structure-type { <> <until-pp> <> CP <> IF-CLAUSE <stype> })
    -->
    (<seg> ^not-merged-assigner <ass2> -)
}

sp {comprehension*propose*process-missing-assigner*before-already-merged
    (state <s> ^name comprehension)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <ass1>)
    (<ass1> -^failed merge)
    (<seg> ^merged-assigner <nma>)
    (<ass1> ^parent-receiver <pr>)
    (<nma> ^parent-receiver <pr>)
    (<ass1> ^lt <l*1>)
    (<nma> ^lt <ass-before>)
    (<l*1> ^before <ass-before>)
    (<ass1> ^structure-type <stype>)
    -->
    (<seg> ^not-merged-assigner <ass1> -)
}

sp {comprehension*propose*process-missing-assigner*before
    (state <s> ^name comprehension)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <ass1>)
    (<ass1> -^failed merge)
    (<ass1> ^structure-type <stype>)
   -{ (<seg> ^not-merged-receiver <n*1>)
      (<n*1> ^structure-type <stype>)}
    (<ass1> ^parent-receiver <pr>)
    (<ass1> ^lt <l*1>)
    (<l*1> ^before <ass-before>)
    (<ass-before> -^optional true)
   -{ (<seg> ^not-merged-assigner <nma>)
      (<nma> ^parent-receiver <pr>)
      (<nma> ^lt <ass-before>)}
    -->
    (<seg> ^not-merged-assigner <ass1> -)
}

sp {apply*no-viable-groundings--restart-parse*reset-semantics
    (state <s> ^operator <op>)
    (<op> ^name no-viable-groundings--restart-parse)
    (<s> ^segment <seg>)
    (<seg> ^input-sentence <is>)
    (<seg> ^original-sentence <os>)
    (<seg> ^current-word <cw>)
    -->
    (<seg> ^input-sentence <is> -)
    (<seg> ^input-sentence <os> +)
    (<seg> ^current-word <cw> -)
    (<seg> ^current-word <os> +)
}

sp {apply*no-viable-groundings--restart-parse*reset-current-word-input-sentence
    (state <s> ^operator <op>)
    (<op> ^name no-viable-groundings--restart-parse)
    (<s> ^segment <seg>)
    (<seg> ^last-merge <lm>)
    (<seg> ^semantics <sem>)
    (<seg> ^input-sentence <is>)
    (<seg> ^original-sentence <os>)
    (<seg> ^current-word <cw>)
    -->
    (<seg> ^input-sentence <is> -)
    (<seg> ^input-sentence <os> +)
    (<seg> ^current-word <cw> -)
    (<seg> ^current-word <os> +)
    (<seg> ^semantics <sem> -)
    (<seg> ^semantics <nsem> +)
    (<seg> ^last-merge <lm> -)
    (<seg> ^last-merge <nlm> +)
    (<nlm> ^receiver <as1> +)
    (<nlm> ^assigner <as1> +)
    (<nlm> ^structure-type CP +)
}

sp {apply*no-viable-groundings--restart-parse*remove-receiver-list
    (state <s> ^operator <o*1>)
    (<o*1> ^name no-viable-groundings--restart-parse)
    (<s> ^segment <seg>)
    (<seg> ^receiver-list <as>)
    -->
    (<seg> ^receiver-list <as> -)
}

sp {apply*no-viable-groundings--restart-parse*remove-assigners
    (state <s> ^operator <o*1>)
    (<o*1> ^name no-viable-groundings--restart-parse)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <uri>)
    -->
    (<seg> ^not-merged-assigner <uri> -)
}

sp {apply*no-viable-groundings--restart-parse*remove-receivers
    (state <s> ^operator <o*1>)
    (<o*1> ^name no-viable-groundings--restart-parse)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <uri>)
    -->
    (<seg> ^not-merged-receiver <uri> -)
}

sp {comprehension*apply*next-word*clean-up-multiple
    (state <s> ^processed-multiple true)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    -->
    (<s> ^processed-multiple true +)
}

sp {comprehension*apply*next-word*clean-up-failure
    (state <s> ^segment <seg>)
    (<seg> ^failed-construction true)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    -->
    (<seg> ^failed-construction true -)
}

sp {comprehension*apply*next-word*nil*missing-question-mark
    (state <s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <n*1>)
    (<n*1> ^structure-type QT)
    (<seg> ^input-sentence <i>)
    (<i> -^spelling { << |?| |!| |.| >> <s*1> })
    (<i> ^next nil)
    (<seg> ^current-word <old-w>)
    (<seg> ^prior-word <pw>)
    -->
    (<i> ^next <next> +)
    (<next> ^spelling |?| +)
    (<next> ^next nil +)
    (<seg> ^input-sentence <i> -)
    (<seg> ^input-sentence <next> +)
    (<seg> ^current-word <next> +)
    (<seg> ^current-word <old-w> -)
    (<seg> ^prior-word <pw> -)
    (<seg> ^prior-word <old-w> +)
}

sp {comprehension*apply*next-word*nil*missing-period
    (state <s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <n*1>)
    (<n*1> ^structure-type T)
    (<seg> ^input-sentence <i>)
    (<i> -^spelling { << |?| |!| |.| >> <s*1> })
    (<i> ^next nil)
    (<seg> ^current-word <old-w>)
    (<seg> ^prior-word <pw>)
    -->
    (<i> ^next <next> +)
    (<next> ^spelling |.| +)
    (<next> ^next nil +)
    (<seg> ^input-sentence <i> -)
    (<seg> ^input-sentence <next> +)
    (<seg> ^current-word <next> +)
    (<seg> ^current-word <old-w> -)
    (<seg> ^prior-word <pw> -)
    (<seg> ^prior-word <old-w> +)
}

sp {comprehension*apply*next-word*mark-first-word
    (state <s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^current-word <c*1>)
    (<c*1> ^spelling *)
    (<seg> ^input-sentence <i*1>)
    (<i*1> ^next <n>)
    -->
    (<n> ^first-word true +)
}

sp {comprehension*apply*next-word*end-of-sentence-failure*unknown-word*internal
    (state <s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^input-sentence <i>)
    (<i> ^next nil)
    (<seg> ^original-sentence <cs>)
    (<seg> ^current-word <old-w>)
    (<seg> ^prior-word <pw>)
    (<seg> ^unknown-word <uw>)
    (<i> ^spelling { << |?| |!| |.| >> <s*1> })
    -->
    
}

sp {comprehension*apply*next-word*end-of-sentence-failure*unknown-word*external
    (state <s> ^top-state <t*1>)
    (<t*1> ^world-usage external)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^input-sentence <i>)
    (<i> ^next nil)
    (<seg> ^original-sentence <cs>)
    (<seg> ^current-word <old-w>)
    (<seg> ^prior-word <pw>)
    (<seg> ^unknown-word <uw>)
    (<i> ^spelling { << |?| |!| |.| >> <s*1> })
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^failure <is> +)
    (<is> ^type unknown-word +)
    (<is> ^word <uw> +)
}

sp {comprehension*apply*next-word*end-of-sentence-failure*internal
    (state <s> ^top-state <ts>)
    (<ts> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^input-sentence <i>)
    (<i> ^next nil)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^complete-sentence <os>)
    (<seg> ^original-sentence <cs>)
    (<seg> ^current-word <old-w>)
    (<seg> ^prior-word <pw>)
    (<i> ^spelling { << |?| |!| |.| >> <s*1> })
    -->
    (<seg> ^parse-failed-end-of-sentence true +)
}

sp {comprehension*apply*next-word*end-of-sentence-failure*external
    (state <s> ^top-state <ts>)
    (<ts> ^world-usage external)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^input-sentence <i>)
    (<i> ^next nil)
    (<seg> ^original-sentence <cs>)
    (<seg> ^current-word <old-w>)
    (<seg> ^prior-word <pw>)
    (<i> ^spelling { << |?| |!| |.| >> <s*1> })
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<ts> ^io <i*2>)
    (<i*2> ^input-link <i*3>)
    (<i*3> ^language <l*1>)
    (<l*1> ^sentence <sentence>)
    -->
    (<cs> ^processing-result failure +)
    (<cs> ^processed-sentence true +)
    (<status> ^failure <f*1> +)
    (<f*1> ^type failed-to-interpret-message +)
}

sp {comprehension*apply*next-word*no-prior
    (state <s> ^segment <seg>)
    (<seg> -^prior-word <pw>)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<seg> ^input-sentence <i>)
    (<seg> ^current-word <old-w>)
    (<i> ^next <n>)
    -->
    (<seg> ^input-sentence <i> -)
    (<seg> ^input-sentence <n> +)
    (<seg> ^current-word <n> +)
    (<seg> ^current-word <old-w> -)
    (<seg> ^prior-word <old-w> +)
}

sp {comprehension*apply*next-word
    (state <s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^input-sentence <i>)
    (<seg> ^current-word <old-w>)
    (<seg> ^prior-word <pw>)
    (<i> ^next { <> nil <n> })
    -->
    (<seg> ^input-sentence <i> -)
    (<seg> ^input-sentence <n> +)
    (<seg> ^current-word <n> +)
    (<seg> ^current-word <old-w> -)
    (<seg> ^prior-word <pw> -)
    (<seg> ^prior-word <old-w> +)
}

sp {comprehension*apply*next-word*decision-count-threshold
    (state <s> ^operator <o*1>)
    (<o*1> ^name next-word)
    (<s> ^segment <seg>)
    (<seg> ^decision-count-threshold <dct>)
    -->
    (<seg> ^decision-count-threshold <dct> -)
    (<seg> ^decision-count-threshold (+ 300 (int (cmd stats |-d|))) +)
}

sp {comprehension*apply*next-word*decision-count-threshold*initial
    (state <s> ^segment <seg>)
    (<seg> -^decision-count-threshold <d*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name next-word)
    -->
    (<seg> ^decision-count-threshold (+ 300 (int (cmd stats |-d|))) +)
}

sp {comprehension*propose*next-word
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^input-sentence <sent>)
    (<sent> -^processing-result failure)
    (<seg> ^current-word <cw>)
    (<cw> ^processed true)
    (<sent> ^spelling <s*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> <)
    (<o> ^name next-word +)
}

sp {comprehension*compare*merge*prefer*probable
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator { <> <op2> <op1> } +)
    (<op1> ^name merge)
    (<op2> ^receiver <rec1>)
    (<op1> ^receiver <rec1>)
    (<op2> ^assigner <ass2>)
    (<op1> ^assigner { <> <ass2> <ass1> })
    (<s> ^segment <seg>)
   -{ (<seg> ^probable-merge <npm2>)
      (<npm2> ^assigner <ass1>)
      (<npm2> ^receiver { <> <rec1> <r*2> })}
    (<seg> ^probable-merge <npm>)
    (<npm> ^assigner <ass2>)
    (<npm> ^receiver { <> <rec1> <r*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*prefer*predicate
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator { <> <op2> <op1> } +)
    (<op1> ^name merge)
    (<op2> ^assigner <ass2>)
    (<ass2> ^parent-receiver <rec1>)
    (<op1> ^receiver <rec1>)
    (<ass2> ^lt <l*2>)
    (<l*2> ^syntactic-structure predicate)
    (<op1> ^assigner { <> <ass2> <ass1> })
    (<ass1> ^lt <l*1>)
    (<l*1> ^syntactic-structure head)
    (<op2> ^receiver { <> <rec1> <rec2> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*merge*prefer*most-recent*first-word*prefer
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
   -{ (<op2> ^receiver <r*2>)
      (<r*2> ^current-word <c*2>)
      (<c*2> ^first-word true)}
    (<op2> ^name merge)
    (<s> ^operator { <> <op2> <op1> } +)
    (<op1> ^name merge)
    (<op1> ^receiver <r*1>)
    (<r*1> ^current-word <c*1>)
    (<c*1> ^first-word true)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*prefer*attachment-immediate*follow
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator { <> <op2> <op1> } +)
    (<op1> ^name merge)
    (<op2> ^receiver <rec>)
    (<op1> ^receiver <rec>)
    (<op2> ^assigner <ass2>)
    (<ass2> ^decision-count <d*1>)
    (<op1> ^assigner <ass1>)
    (<ass1> ^lt <l*1>)
    (<l*1> ^attachment immediately-follow)
    (<ass1> ^decision-count { > <d*1> <dc> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*prefer*most-recent*attachment-immediate
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator { <> <op2> <op1> } +)
    (<op1> ^name merge)
    (<op1> ^assigner <ass1>)
   -{ (<ass1> ^lt <l*1>)
      (<l*1> ^required true)}
    (<op2> ^receiver <rec>)
    (<op1> ^receiver <rec>)
    (<rec> ^lt <l*2>)
    (<l*2> ^attachment immediate)
    (<ass1> ^decision-count <dc>)
    (<op2> ^assigner <ass2>)
    (<ass2> ^decision-count { > <dc> <d*1> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*merge*prefer*most-recent*PP-shared-parent-receiver
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<op2> ^receiver <rec>)
    (<rec> ^structure-type PP)
    (<s> ^operator <op1> +)
    (<op1> ^receiver <rec>)
    (<op1> ^name merge)
    (<op2> ^assigner <ass2>)
    (<ass2> ^parent-receiver <pr>)
    (<op1> ^assigner <ass1>)
    (<ass1> ^parent-receiver <pr>)
    (<ass2> ^decision-count <dc>)
    (<ass1> ^decision-count <dc>)
    (<ass2> ^lt <ltass2>)
    (<ass1> ^lt <lt1>)
    (<ltass2> -^{ << after before >> <a*2> } <lt1>)
    (<lt1> -^{ << after before >> <a*1> } <ltass2>)
    -->
    (<s> ^operator <op2> = <op1>)
}

sp {comprehension*compare*merge*prefer*most-recent*not-pp*before2
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<op2> ^receiver <rec>)
    (<rec> -^structure-type PP)
    (<s> ^operator <op1> +)
    (<op1> ^receiver <rec>)
    (<op1> ^name merge)
    (<op2> ^assigner <ass2>)
    (<ass2> ^parent-receiver <pr>)
    (<op1> ^assigner <ass1>)
    (<ass1> ^parent-receiver <pr>)
    (<ass2> ^decision-count <d*1>)
    (<ass1> ^decision-count { < <d*1> <dc> })
    (<ass2> ^lt <ltass2>)
    (<ass1> ^lt <lt1>)
    (<lt1> ^before <ltass2>)
    -->
    (<s> ^operator <op2> -)
}

sp {comprehension*compare*merge*prefer*most-recent*not-pp*before
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<op2> ^receiver <rec>)
    (<rec> -^structure-type PP)
    (<s> ^operator <op1> +)
    (<op1> ^receiver <rec>)
    (<op1> ^name merge)
    (<op2> ^parent-receiver <pr>)
    (<op1> ^assigner <ass1>)
    (<ass1> ^parent-receiver <pr>)
    (<ass1> ^lt <lt1>)
    (<lt1> ^required true)
    (<lt1> ^before <ltass2>)
    (<ltass2> ^optional true)
    (<op2> ^assigner <ass2>)
    (<ass2> ^lt <ltass2>)
    (<ass2> ^decision-count <dc>)
    (<ass1> ^decision-count <dc>)
    -->
    (<s> ^operator <op2> -)
}

sp {comprehension*compare*merge*prefer*most-recent*not-pp2
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<op2> ^receiver <rec>)
   -{ (<rec> ^lt <l*1>)
      (<l*1> ^attachment immediate)}
    (<rec> -^structure-type PP)
    (<s> ^operator <op1> +)
    (<op1> ^receiver <rec>)
    (<op1> ^name merge)
    (<op2> ^assigner <ass2>)
    (<ass2> ^decision-count <d*1>)
    (<op1> ^assigner <ass1>)
    (<ass1> ^decision-count { < <d*1> <dc> })
    (<ass2> ^lt <ltass2>)
    (<ass1> ^lt <lt1>)
    (<lt1> -^before <ltass2>)
    -->
    (<s> ^operator <op1> -)
}

sp {comprehension*compare*merge*prefer*most-recent*same-parent-receiver2
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op2> ^assigner <ass2>)
    (<ass2> ^parent-receiver <ps>)
    (<op1> ^assigner <ass1>)
    (<ass1> ^parent-receiver <ps>)
    (<op2> ^receiver <r*1>)
    (<op1> ^receiver { <> <r*1> <rec> })
    (<ass2> ^lt <l*1>)
    (<ass1> ^lt <ltass1>)
    (<l*1> ^after <ltass1>)
    (<ass2> ^structure-type <bt>)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*prefer*most-recent*same-parent-receiver
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op2> ^assigner <ass2>)
    (<ass2> ^parent-receiver <ps>)
    (<op1> ^assigner <ass1>)
    (<ass1> ^parent-receiver <ps>)
    (<op2> ^receiver <r*1>)
    (<op1> ^receiver { <> <r*1> <rec> })
    (<ass2> ^lt <ltass2>)
    (<ass1> ^lt <l*1>)
    (<l*1> ^before <ltass2>)
    (<ass2> ^structure-type <bt>)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*prefer*first*same-receiver
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op2> ^receiver <rec>)
    (<op1> ^receiver <rec>)
    (<op2> ^assigner <ass2>)
    (<ass2> ^parent-receiver <ps>)
    (<op1> ^assigner <ass1>)
    (<ass1> ^parent-receiver <ps>)
    (<ass2> ^lt <ltass2>)
    (<ass1> ^lt <l*1>)
    (<l*1> ^before <ltass2>)
    (<ass2> ^structure-type <bt>)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*prefer*directional-verb-convert
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
   -{ (<op2> ^assigner <a*2>)
      (<a*2> ^parent-receiver <p*2>)
      (<p*2> ^structure-type { << V VP G GP >> <s*2> })}
    (<op2> ^name merge)
    (<op2> ^receiver <r1>)
    (<r1> ^structure-type PP)
    (<r1> ^lt <l*1>)
    (<l*1> ^directional true)
    (<s> ^operator <op1> +)
    (<op1> ^receiver <r1>)
    (<op1> ^name merge)
    (<op1> ^assigner <a*1>)
    (<a*1> ^parent-receiver <p*1>)
    (<p*1> ^structure-type { << UV V VP G GP >> <s*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*prefer*directional-verb
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
   -{ (<op2> ^assigner <a*2>)
      (<a*2> ^parent-receiver <p*2>)
      (<p*2> ^structure-type { << V VP G GP >> <s*2> })}
    (<op2> ^name merge)
    (<op2> ^receiver <r1>)
    (<r1> ^structure-type PP)
    (<r1> ^lt <l*1>)
    (<l*1> ^directional true)
    (<s> ^operator <op1> +)
    (<op1> ^receiver <r1>)
    (<op1> ^name merge)
    (<op1> ^assigner <a*1>)
    (<a*1> ^parent-receiver <p*1>)
    (<p*1> ^structure-type { << V VP G GP >> <s*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*avoid-terminator
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
   -{ (<op2> ^assigner <a*2>)
      (<a*2> ^syntactic-type terminator)}
    (<op2> ^name merge)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op1> ^assigner <a*1>)
    (<a*1> ^syntactic-type terminator)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*merge*indifferent-different-receiver
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op2> ^receiver <r*1>)
    (<op1> ^receiver { <> <r*1> <receiver> })
    -->
    (<s> ^operator <op1> = <op2>)
}

sp {comprehension*compare*merge*terminate*next-word
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<s> ^operator <op2> +)
    (<op2>
          ^name { << next-word next-retrieved-stack termination-processing >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-word*process-missing-assigner
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<s> ^operator <op2> +)
    (<op2> ^name { << failed-comprehension process-missing-assigner >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-word
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name comprehend-word)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*merge*prefer-lexical
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<op2> ^type lexical)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op1> ^type normal)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*merge*prefer-directional-maybe
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op1> ^assigner <assigner>)
    (<assigner> ^parent-receiver <p*1>)
    (<p*1> ^lt <l*1>)
    (<l*1> ^directional true)
    (<op1> ^receiver <receiver>)
    (<receiver> ^lt <l*2>)
    (<l*2> ^directional maybe)
    -->
    (<s> ^operator <op1> >)
}

sp {comprehension*reject*possible-merge*exclusive-earlier
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op1> ^receiver <receiver>)
   -{ (<receiver> ^lt <l*1>)
      (<l*1> ^attachment immediate)}
    (<s> ^possible-future-merge <pm>)
    (<pm> ^receiver <receiver2>)
   -{ (<s> ^possible-future-merge { <> <pm> <pfm> })
      (<pfm> ^receiver <receiver2>)}
    (<receiver2> ^decision-count <d*1>)
    (<receiver> ^decision-count { > <d*1> <dc> })
    (<pm> ^assigner <assigner2>)
    (<assigner2> ^parent-receiver <pr>)
    (<op1> ^assigner { <> <assigner2> <assigner> })
    (<assigner> ^parent-receiver <pr>)
    (<assigner2> ^lt <lt2>)
    (<assigner> ^lt <l*2>)
    (<l*2> ^exclusive <lt2>)
    -->
    (<s> ^operator <op1> -)
}

sp {comprehension*reject*merge*left-noun
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
   -{ (<op1> ^receiver <r*1>)
      (<r*1> ^lt <l*2>)
      (<l*2> ^spelling of)}
    (<op1> ^name merge)
    (<op1> ^assigner <a*1>)
    (<a*1> ^parent-receiver <p*1>)
    (<p*1> ^head <h*1>)
    (<h*1> ^lt <l*1>)
    (<l*1> ^spelling { << left-noun right-noun >> <s*1> })
    -->
    (<s> ^operator <op1> -)
}

sp {comprehension*reject*merge*for-failed-grounding
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op1> ^assigner <ur>)
    (<ur> ^parent-receiver <p*1>)
    (<op1> ^receiver <ai>)
    (<ai> ^structure-type <pos>)
    (<p*1> ^referent <lg>)
    (<s> ^segment <seg>)
    (<seg> ^failed-grounding <fg>)
    (<fg> ^lost-grounding <lg>)
    (<fg> ^structure-type <pos>)
    (<fg> ^receiver-word <rw>)
    (<ai> ^relation <sr>)
    (<fg> ^relation <sr>)
    -->
    (<s> ^operator <op1> -)
}

sp {comprehension*reject*possible-merge
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op1> ^assigner <assigner>)
    (<op1> ^receiver <receiver>)
   -{ (<s> ^possible-merge <pm>)
      (<pm> ^receiver <receiver>)
      (<pm> ^assigner { <> <assigner> <a*1> })}
    (<assigner> ^lt <lt>)
    (<lt> -^required true)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-assigner <nma>)
    (<nma> ^lt <ass2>)
    (<ass2> ^required true)
    (<ass2> ^before <lt>)
    -->
    (<s> ^operator <op1> -)
}

sp {comprehension*propose*merge
    (state <s> ^name comprehension)
    (<s> ^possible-merge <pm>)
    (<pm> ^assigner <assigner>)
    (<pm> ^receiver <receiver>)
    (<pm> ^type <type>)
    -->
    (<s> ^operator <op> +)
    (<op> ^name merge +)
    (<op> ^receiver <receiver> +)
    (<op> ^assigner <assigner> +)
    (<op> ^type <type> +)
}

sp {comprehension*elaborate*possible-merge*lexical-item*match*required*any
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
   -{ (<seg> ^not-merged-assigner <nma>)
      (<nma> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<nma> ^lt <after>)
      (<assigner> ^lt <l*3>)
      (<l*3> ^after <after>)}
    (<assigner> ^structure-type ANY)
    (<seg> ^not-merged-receiver <receiver>)
   -{ (<receiver> ^lt <l*7>)
      (<l*7> ^directional <d*3>)
      (<assigner> ^lt <l*6>)
      (<l*6> ^directional { <> <d*3> <x> })}
   -{ (<assigner> ^lt <l*5>)
      (<l*5> ^relative-position after)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { < <dl-dc> <d*2> })}
   -{ (<assigner> ^lt <l*4>)
      (<l*4> ^relative-position before)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { > <dl-dc> <d*1> })}
   -{ (<assigner> ^parent-receiver <parent>)
      (<receiver> ^{ << DP GP VP PP CP CONJP >> <a*1> } <parent>)}
    (<assigner> -^parent-receiver <receiver>)
    (<receiver> -^dont-merge true)
    (<receiver> ^lt <l*2>)
    (<assigner> ^lt <l*1>)
    (<l*1> ^lexical-item-spelling <lex-item-spell>)
    (<l*2> ^spelling <lex-item-spell>)
    (<receiver> ^structure-type <stype>)
    -->
    (<s> ^possible-merge <pm> +)
    (<pm> ^receiver <receiver> +)
    (<pm> ^assigner <assigner> +)
    (<pm> ^type lexical +)
}

sp {comprehension*elaborate*possible-merge*any
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
   -{ (<seg> ^not-merged-assigner <nma>)
      (<nma> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<nma> ^lt <after>)
      (<assigner> ^lt <l*3>)
      (<l*3> ^after <after>)}
   -{ (<assigner> ^lt <l*1>)
      (<l*1> ^lexical-item-spelling <l*2>)}
    (<assigner> ^structure-type ANY)
    (<seg> ^not-merged-receiver <receiver>)
   -{ (<receiver> ^lt <l*7>)
      (<l*7> ^directional <d*3>)
      (<assigner> ^lt <l*6>)
      (<l*6> ^directional { <> <d*3> <x> })}
   -{ (<assigner> ^lt <l*5>)
      (<l*5> ^relative-position after)
      (<assigner> ^decision-count <dl-dc2>)
      (<receiver> ^decision-count { < <dl-dc2> <d*2> })}
   -{ (<assigner> ^lt <l*4>)
      (<l*4> ^relative-position before)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { > <dl-dc> <d*1> })}
    (<assigner> -^parent-receiver <receiver>)
    (<receiver> -^dont-merge true)
    (<assigner> ^lt <lt>)
    (<receiver> ^structure-type <stype>)
    -->
    (<s> ^possible-merge <pm> +)
    (<pm> ^receiver <receiver> +)
    (<pm> ^assigner <assigner> +)
    (<pm> ^type normal +)
}

sp {comprehension*elaborate*possible-merge*lexical-item*match*required*unknown
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
   -{ (<seg> ^not-merged-assigner <nma>)
      (<nma> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<nma> ^lt <after>)
      (<assigner> ^lt <l*3>)
      (<l*3> ^after <after>)}
    (<assigner> ^structure-type U)
    (<seg> ^not-merged-receiver <receiver>)
   -{ (<assigner> ^lt <l*5>)
      (<l*5> ^relative-position after)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { < <dl-dc> <d*2> })}
   -{ (<assigner> ^lt <l*4>)
      (<l*4> ^relative-position before)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { > <dl-dc> <d*1> })}
   -{ (<assigner> ^parent-receiver <parent>)
      (<receiver> ^{ << DP VP PP CP CONJP >> <a*1> } <parent>)}
    (<assigner> -^parent-receiver <receiver>)
    (<receiver> -^dont-merge true)
    (<receiver> -^structure-type <s*1>)
    (<receiver> ^lt <l*2>)
    (<assigner> ^lt <l*1>)
    (<l*1> ^lexical-item-spelling <lex-item-spell>)
    (<l*2> ^spelling <lex-item-spell>)
    -->
    (<s> ^possible-merge <pm> +)
    (<pm> ^receiver <receiver> +)
    (<pm> ^assigner <assigner> +)
    (<pm> ^type lexical +)
}

sp {comprehension*elaborate*possible-merge*unknown
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
   -{ (<seg> ^not-merged-assigner <nma>)
      (<nma> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<nma> ^lt <after>)
      (<assigner> ^lt <l*3>)
      (<l*3> ^after <after>)}
   -{ (<assigner> ^lt <l*1>)
      (<l*1> ^lexical-item-spelling <l*2>)}
    (<assigner> ^structure-type U)
    (<seg> ^not-merged-receiver <receiver>)
   -{ (<assigner> ^lt <l*5>)
      (<l*5> ^relative-position after)
      (<assigner> ^decision-count <dl-dc2>)
      (<receiver> ^decision-count { < <dl-dc2> <d*2> })}
   -{ (<assigner> ^lt <l*4>)
      (<l*4> ^relative-position before)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { > <dl-dc> <d*1> })}
    (<assigner> -^parent-receiver <receiver>)
    (<receiver> -^dont-merge true)
    (<receiver> -^structure-type <s*1>)
    -->
    (<s> ^possible-merge <pm> +)
    (<pm> ^receiver <receiver> +)
    (<pm> ^assigner <assigner> +)
    (<pm> ^type normal +)
}

sp {comprehension*elaborate*possible-merge*lexical-item*match*required
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
   -{ (<seg> ^not-merged-assigner <nma>)
      (<nma> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<nma> ^lt <after>)
      (<assigner> ^lt <l*3>)
      (<l*3> ^after <after>)}
    (<seg> ^not-merged-receiver <receiver>)
   -{ (<receiver> ^lt <l*7>)
      (<l*7> ^directional <d*3>)
      (<assigner> ^lt <l*6>)
      (<l*6> ^directional { <> <d*3> <x> })}
   -{ (<assigner> ^lt <l*5>)
      (<l*5> ^relative-position after)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { < <dl-dc> <d*2> })}
   -{ (<assigner> ^lt <l*4>)
      (<l*4> ^relative-position before)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { > <dl-dc> <d*1> })}
   -{ (<assigner> ^parent-receiver <parent>)
      (<receiver> ^{ << DP GP VP PP CP CONJP >> <a*1> } <parent>)}
    (<assigner> -^parent-receiver <receiver>)
    (<receiver> -^dont-merge true)
    (<receiver> ^structure-type <stype>)
    (<assigner> ^structure-type <stype>)
    (<receiver> ^lt <l*2>)
    (<assigner> ^lt <l*1>)
    (<l*1> ^lexical-item-spelling <lex-item-spell>)
    (<l*2> ^spelling <lex-item-spell>)
    -->
    (<s> ^possible-merge <pm> +)
    (<pm> ^receiver <receiver> +)
    (<pm> ^assigner <assigner> +)
    (<pm> ^type lexical +)
}

sp {comprehension*elaborate*possible-merge*directional-maybe
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
   -{ (<seg> ^not-merged-assigner <nma>)
      (<nma> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<nma> ^lt <after>)
      (<assigner> ^lt <l*3>)
      (<l*3> ^after <after>)}
   -{ (<assigner> ^lt <l*1>)
      (<l*1> ^lexical-item-spelling <l*2>)}
    (<seg> ^not-merged-receiver <receiver>)
   -{ (<assigner> ^lt <l*5>)
      (<l*5> ^relative-position after)
      (<assigner> ^decision-count <dl-dc2>)
      (<receiver> ^decision-count { < <dl-dc2> <d*2> })}
   -{ (<assigner> ^lt <l*4>)
      (<l*4> ^relative-position before)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { > <dl-dc> <d*1> })}
    (<assigner> -^parent-receiver <receiver>)
    (<receiver> -^dont-merge true)
    (<receiver> ^lt <l*6>)
    (<l*6> ^directional maybe)
    (<receiver> ^structure-type <stype>)
    (<assigner> ^structure-type <stype>)
    (<assigner> ^lt <lt>)
    -->
    (<s> ^possible-merge <pm> +)
    (<pm> ^receiver <receiver> +)
    (<pm> ^assigner <assigner> +)
    (<pm> ^type normal +)
    (write (crlf) |Possible Merge (directional maybe): | <stype>)
}

sp {comprehension*elaborate*possible-merge
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner>)
   -{ (<seg> ^not-merged-assigner <nma>)
      (<nma> ^parent-receiver <pr>)
      (<assigner> ^parent-receiver <pr>)
      (<nma> ^lt <after>)
      (<assigner> ^lt <l*3>)
      (<l*3> ^after <after>)}
    (<assigner> -^dont-merge true)
   -{ (<assigner> ^lt <l*1>)
      (<l*1> ^lexical-item-spelling <l*2>)}
    (<seg> ^not-merged-receiver <receiver>)
   -{ (<receiver> ^lt <l*7>)
      (<l*7> ^directional <d*3>)
      (<assigner> ^lt <l*6>)
      (<l*6> ^directional { <> <d*3> <x> })}
   -{ (<assigner> ^lt <l*5>)
      (<l*5> ^relative-position after)
      (<assigner> ^decision-count <dl-dc2>)
      (<receiver> ^decision-count { < <dl-dc2> <d*2> })}
   -{ (<assigner> ^lt <l*4>)
      (<l*4> ^relative-position before)
      (<assigner> ^decision-count <dl-dc>)
      (<receiver> ^decision-count { > <dl-dc> <d*1> })}
    (<assigner> -^parent-receiver <receiver>)
    (<receiver> -^dont-merge true)
    (<receiver> ^structure-type <stype>)
    (<assigner> ^structure-type <stype>)
    (<assigner> ^lt <lt>)
    -->
    (<s> ^possible-merge <pm> +)
    (<pm> ^receiver <receiver> +)
    (<pm> ^assigner <assigner> +)
    (<pm> ^type normal +)
}

sp {comprehension*elaborate*dont-merge-if-required-literal-before
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <assigner2>)
    (<assigner2> ^lt <lt2>)
    (<lt2> ^required true)
    (<lt2> ^lexical-item-spelling <l*1>)
    (<seg> ^not-merged-assigner { <> <assigner2> <assigner> })
    (<assigner2> ^parent-receiver <pr>)
    (<assigner> ^parent-receiver <pr>)
    (<assigner> ^lt <lt>)
    (<lt2> ^before <lt>)
    -->
    (<assigner> ^dont-merge true +)
}

sp {comprehension*elaborate*delay-possible-merge
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <receiver1>)
    (<receiver1> ^delay-merge true)
    (<receiver1> ^decision-count <after>)
    (<seg> ^not-merged-receiver { <> <receiver1> <receiver2> })
    (<receiver2> ^decision-count { < <after> <d*1> })
    -->
    (<receiver2> ^dont-merge true +)
}

sp {comprehension*apply*failure-end-of-sentence2
    (state <s> ^operator <o*1>)
    (<o*1> ^name failure-end-of-sentence2)
    (<s> ^segment <seg>)
    (<seg> ^original-sentence <os>)
    -->
    (<os> ^processing-result failure +)
}

sp {comprehension*propose*failure-end-of-sentence2
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> -^retry <r*2>)
    (<seg> -^retry-sentence <r*1>)
   -{ (<seg> ^original-sentence <o*1>)
      (<o*1> ^processing-result failure)}
    (<seg> ^parse-failed-end-of-sentence true)
    (<seg> ^semantics <s*1>)
    (<seg> ^not-merged-receiver <nmr>)
    (<s*1> ^interaction-status <i*1>)
    (<i*1> ^failure <f*1>)
    (<f*1> ^type unknown-word)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name failure-end-of-sentence2 +)
}

sp {comprehension*apply*failure-end-of-sentence*retried*failure2
    (state <s> ^operator <o*1>)
    (<o*1> ^name failure-end-of-sentence)
    (<s> ^segment <seg>)
    (<seg> ^retried <x>)
    (<seg> ^alternative-structure-receiver <x>)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <os>)
    (<seg> ^current-word <c*1>)
    (<c*1> ^spelling <spell>)
    -->
    (<os> ^processing-result failure +)
    (<sem> ^interaction-status <i*1> +)
    (<i*1> ^failure <is> +)
    (<is> ^type failed-to-interpret-message +)
    (<is> ^word <spell> +)
}

sp {comprehension*apply*failure-end-of-sentence*retried*failure
    (state <s> ^segment <seg>)
    (<seg> -^alternative-structure-receiver <a*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name failure-end-of-sentence)
    (<seg> ^retried <r*1>)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <os>)
    (<seg> ^current-word <c*1>)
    (<c*1> ^spelling <spell>)
    -->
    (<os> ^processing-result failure +)
    (<sem> ^interaction-status <i*1> +)
    (<i*1> ^failure <is> +)
    (<is> ^type failed-to-interpret-message +)
    (<is> ^word <spell> +)
}

sp {comprehension*apply*failure-end-of-sentence*unknown-word
    (state <s> ^operator <o*1>)
    (<o*1> ^name failure-end-of-sentence)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <os>)
    (<seg> ^unknown-word <spell>)
    -->
    (<os> ^processing-result failure +)
    (<sem> ^interaction-status <i*1> +)
    (<i*1> ^failure <is> +)
    (<is> ^type failed-to-interpret-message +)
    (<is> ^word <spell> +)
}

sp {comprehension*apply*failure-end-of-sentence
    (state <s> ^segment <seg>)
    (<seg> -^unknown-word <u*1>)
    (<seg> -^alternative-structure-receiver <a*3>)
   -{ (<seg> ^merged-receiver <m*1>)
      (<m*1> ^lt <l*2>)
      (<l*2> ^alternative-structure <a*2>)}
   -{ (<seg> ^not-merged-receiver <n*1>)
      (<n*1> ^lt <l*1>)
      (<l*1> ^alternative-structure <a*1>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name failure-end-of-sentence)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <os>)
    (<seg> ^current-word <c*1>)
    (<c*1> ^spelling <spell>)
    -->
    (<os> ^processing-result failure +)
    (<sem> ^interaction-status <i*1> +)
    (<i*1> ^failure <is> +)
    (<is> ^type failed-to-interpret-message +)
    (<is> ^word <spell> +)
}

sp {comprehension*apply*failure-end-of-sentence*saved-alternative*retried
    (state <s> ^segment <seg>)
    (<seg> -^unknown-word <u*1>)
    (<seg> ^retried <asr>)
    (<seg> ^alternative-structure-receiver <asr>)
    (<s> ^operator <o*1>)
    (<o*1> ^name failure-end-of-sentence)
    -->
    (<seg> ^retry-sentence <asr> +)
    (<asr> ^retried true +)
}

sp {comprehension*apply*failure-end-of-sentence*saved-alternative
    (state <s> ^segment <seg>)
    (<seg> -^unknown-word <u*1>)
   -{ (<seg> ^not-merged-receiver <n*1>)
      (<n*1> ^lt <l*1>)
      (<l*1> ^alternative-structure <structure-new>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name failure-end-of-sentence)
    (<seg> ^alternative-structure-receiver <asr>)
    -->
    (<seg> ^retry-sentence <asr> +)
}

sp {comprehension*apply*failure-end-of-sentence*retry
    (state <s> ^segment <seg>)
    (<seg> -^unknown-word <u*1>)
    (<seg> -^retried <r*1>)
    (<seg> ^not-merged-receiver <nmr>)
    (<seg> -^retry-sentence <nmr>)
    (<s> ^operator <o*1>)
    (<o*1> ^name failure-end-of-sentence)
    (<nmr> ^lt <l*1>)
    (<l*1> ^alternative-structure <structure-new>)
    -->
    (<seg> ^retry <nmr> +)
}

sp {comprehension*propose*failure-end-of-sentence
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> -^retry <r*2>)
    (<seg> -^retry-sentence <r*1>)
   -{ (<seg> ^original-sentence <o*1>)
      (<o*1> ^processing-result failure)}
   -{ (<seg> ^semantics <s*1>)
      (<s*1> ^interaction-status <i*1>)
      (<i*1> ^failure <f*1>)
      (<f*1> ^type unknown-word)}
    (<seg> ^parse-failed-end-of-sentence true)
    (<seg> ^not-merged-receiver <nmr>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name failure-end-of-sentence +)
}

sp {comprehension*elaborate*failed-referent-grounding*semantics
    (state <s> ^operator <op>)
    (<op> ^name failed-referent-grounding)
    (<op> ^semantics <is>)
    (<op> ^value <v*1>)
    (<v*1> ^failed-constraint <f*1>)
    (<f*1> ^constraint <c>)
    (<op> ^attribute <ss>)
    -->
    (<is> ^<ss> <c> +)
}

sp {comprehension*apply*failed-referent-grounding
    (state <s> ^operator <op>)
    (<op> ^name failed-referent-grounding)
    (<op> ^semantics <semantics>)
    (<op> ^value <fg>)
    (<op> ^attribute <ss>)
    -->
    (<semantics> ^interaction-status <i*1> +)
    (<i*1> ^failure <is> +)
    (<is> ^type index-object-failure +)
    (<is> ^target-object <fg> +)
}

sp {comprehension*apply*failed-receiver-alternative-structure*sentence
    (state <s> ^operator <op>)
    (<op> ^name failed-receiver-alternative-structure)
    (<op> ^not-merged-assigner <nma>)
    (<op> ^not-merged-receiver <nmr>)
    (<s> ^segment <seg>)
    (<seg> ^alternative-structure-receiver <nmr>)
    (<nmr> ^lt <lt>)
    (<lt> ^alternative-structure <structure-new>)
    (<lt> ^structure-type <structure-old>)
    -->
    (<seg> ^retry-sentence <nmr> +)
}

sp {comprehension*apply*failed-receiver-alternative-structure
    (state <s> ^operator <op>)
    (<op> ^name failed-receiver-alternative-structure)
    (<op> ^not-merged-receiver <nmr>)
    (<nmr> ^lt <lt>)
    (<lt> ^alternative-structure <structure-new>)
    (<lt> ^structure-type <structure-old>)
    (<s> ^segment <seg>)
    -->
    (<seg> ^retry <nmr> +)
}

sp {comprehension*compare*failed-receiver-alternative-structure*prefer-most-recent2
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name failed-receiver-alternative-structure)
    (<s> ^operator <op1> +)
    (<op1> ^name failed-receiver-alternative-structure)
    (<op2> ^not-merged-assigner <n*6>)
    (<op1> ^not-merged-assigner <n*3>)
    (<n*6> ^lt <l*4>)
    (<n*3> ^lt <l*2>)
    (<op2> ^not-merged-receiver <n*5>)
    (<n*5> ^lt <l*3>)
    (<l*3> ^alternative-structure <structure2>)
    (<l*4> ^structure-type <structure2>)
    (<op2> ^not-merged-receiver <n*4>)
    (<n*4> ^decision-count <dc>)
    (<op1> ^not-merged-receiver <n*2>)
    (<n*2> ^lt <l*1>)
    (<l*1> ^alternative-structure <structure1>)
    (<l*2> ^structure-type <structure1>)
    (<op1> ^not-merged-receiver <n*1>)
    (<n*1> ^decision-count { > <dc> <d*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*failed-receiver-alternative-structure*prefer-matched-type
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name failed-receiver-alternative-structure)
    (<s> ^operator <op1> +)
    (<op1> ^name failed-receiver-alternative-structure)
    (<op1> ^not-merged-assigner <n*4>)
    (<n*4> ^lt <l*4>)
    (<l*4> ^structure-type <structure>)
   -{ (<op2> ^not-merged-assigner <n*2>)
      (<n*2> ^lt <l*2>)
      (<l*2> ^structure-type <structure>)
      (<op2> ^not-merged-receiver <n*1>)
      (<n*1> ^lt <l*1>)
      (<l*1> ^alternative-structure <structure>)}
    (<op1> ^not-merged-receiver <n*3>)
    (<n*3> ^lt <l*3>)
    (<l*3> ^alternative-structure <structure>)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*propose*failed-receiver-alternative-structure2
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> -^retried-sentence true)
    (<seg> -^retried <r*1>)
    (<seg> ^parse-failed-receiver <nmr>)
   -{ (<nmr> ^lt <l*1>)
      (<l*1> ^alternative-structure <structure-new>)}
    (<seg> -^retry-sentence <nmr>)
    (<seg> ^alternative-structure-receiver <asr>)
    (<seg> -^retry-sentence <asr>)
    (<seg> ^not-merged-assigner <nma>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name failed-receiver-alternative-structure +)
    (<op> ^not-merged-receiver <asr> +)
    (<op> ^not-merged-assigner <nma> +)
}

sp {comprehension*propose*failed-assigner-alternative-structure
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> -^retried-sentence true)
    (<seg> -^retried <r*1>)
    (<seg> ^alternative-structure-receiver <nmr>)
    (<seg> -^retry-sentence <nmr>)
    (<seg> ^parse-failed-assigner <nma>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name failed-receiver-alternative-structure +)
    (<op> ^not-merged-receiver <nmr> +)
    (<op> ^not-merged-assigner <nma> +)
}

sp {comprehension*compare*failed-receiver-alternative-structure
    (state <s> ^operator <op2> +)
    (<op2> ^name failed-comprehension)
    (<s> ^operator <op> +)
    (<op> ^name failed-receiver-alternative-structure)
    -->
    (<s> ^operator <op> > <op2>)
}

sp {comprehension*propose*failed-receiver-alternative-structure
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> -^retried-sentence true)
    (<seg> -^retried <r*1>)
    (<seg> ^parse-failed-receiver <nmr>)
    (<seg> -^retry-sentence <nmr>)
    (<seg> ^not-merged-assigner <nma>)
    (<nmr> ^lt <l*1>)
    (<l*1> ^alternative-structure <structure-new>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name failed-receiver-alternative-structure +)
    (<op> ^not-merged-receiver <nmr> +)
    (<op> ^not-merged-assigner <nma> +)
}

sp {apply*failed-comprehension-interaction-status
    (state <s> ^operator <o*1>)
    (<o*1> ^name failed-comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    (<sem> ^interaction-status <i*2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<i*2> ^<att> <value>)
    -->
    (<status> ^<att> <value> +)
}

sp {apply*failed-comprehension2
    (state <s> ^name comprehension)
    (<s> ^operator <o*1>)
    (<o*1> ^name failed-comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    (<sem> ^message-type <message>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^new-message <sem> +)
}

sp {apply*failed-comprehension*external
    (state <s> ^operator <o*1>)
    (<o*1> ^name failed-comprehension)
    (<s> ^segment <seg>)
    (<seg> ^original-sentence <os>)
    -->
    (<os> ^processed-sentence true +)
    (<os> ^processing-result failure +)
}

sp {comprehension*apply*failed-comprehension*new-word
    (state <s> ^name comprehension)
    (<s> ^operator <op>)
    (<op> ^name failed-comprehension)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<sem> ^interaction-status <i*1>)
    (<i*1> ^type unknown-word)
    (<seg> ^original-sentence <is>)
    -->
    (<sem> ^message-type unknown-word +)
}

sp {comprehension*apply*failed-comprehension*no-new-word
    (state <s> ^name comprehension)
    (<s> ^operator <op>)
    (<op> ^name failed-comprehension)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<sem> ^interaction-status <status>)
   -{ (<status> ^failure <f*1>)
      (<f*1> ^type unknown-word)}
    (<seg> ^original-sentence <is>)
    -->
    (<sem> ^message-type failed-comprehension +)
    (<status> ^failure <f*2> +)
    (<f*2> ^type unknown-word +)
}

sp {comprehension*apply*failed-comprehension*failed-parse
    (state <s> ^name comprehension)
    (<s> ^operator <op>)
    (<op> ^name failed-comprehension)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<sem> -^interaction-status <i*1>)
    (<seg> ^original-sentence <is>)
    -->
    (<sem> ^interaction-status <i*2> +)
    (<i*2> ^failure <f*1> +)
    (<f*1> ^type failed-to-interpret-message +)
}

sp {comprehension*apply*failed-comprehension*external*remove-old-message-type
    (state <s> ^name comprehension)
    (<s> ^operator <op>)
    (<op> ^name failed-comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    (<sem> -^message-type { << failed-comprehension unknown-word >> <m*1> })
    (<sem> ^message-type <mes>)
    -->
    (<sem> ^message-type <mes> -)
}

sp {comprehension*propose*failed-comprehension2
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^retried-sentence true)
    (<seg> ^{ << parse-failed-receiver parse-failed-assigner >> <a*1> } <v*1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name failed-comprehension +)
}

sp {comprehension*propose*failed-comprehension
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^original-sentence <is>)
    (<is> -^processed-sentence true)
    (<is> ^processing-result failure)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name failed-comprehension +)
}

sp {comprehension*apply*clean-up-retrieved-stack
    (state <s> ^operator <o*1>)
    (<o*1> ^name clean-up-retrieved-stack)
    (<s> ^segment <seg>)
    (<seg> ^retrieved-stack <rs>)
    (<rs> ^prior <p>)
    (<p> ^item <x>)
    (<rs> ^item <x>)
    -->
    (<seg> ^retrieved-stack <rs> -)
    (<seg> ^retrieved-stack <p> +)
}

sp {comprehension*propose*clean-up-retrieved-stack
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    (<rs> ^prior <p*1>)
    (<p*1> ^item <x>)
    (<rs> ^item <x>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name clean-up-retrieved-stack +)
}

sp {termination-processing*apply*create-new-verb2*996
    (state <s> ^operator <op>)
    (<op> ^name create-new-verb2)
    (<op> ^word <nv>)
    (<nv> ^spelling <nw>)
    (<s> ^top-state <t*1>)
    (<t*1> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<s> ^new-verb <nv> +)
    (<s> ^checked <nw> +)
    (<cmd> ^store <nv> +)
    (<nv> ^new-action true +)
}

sp {termination-processing*propose*create-new-verb*named-action
    (state <s> ^name termination-processing)
    (<s> -^new-verb <nv>)
   -{ (<s> ^top-state <t*2>)
      (<t*2> ^dialog-context <d*1>)}
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^game-scripting <g*1>)}
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    (<sem> ^message-type object-description)
    (<sem> ^arg1 <arg1>)
    (<arg1> ^handle of1)
    (<arg1> ^2 <arg2>)
    (<arg2> ^handle name1)
    (<arg2> ^2 <two>)
    (<two> ^handle action)
    (<sem> ^predicate <pred>)
    (<pred> ^word-structure <ws>)
    (<ws> ^spelling <spell>)
    (<pred> ^handle <handle>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name create-new-verb2 +)
    (<op> ^word <ws> +)
}

sp {termination-processing*apply*create-new-verb*moveable*arg2*995
    (state <s> ^operator <op>)
    (<op> ^name create-new-verb)
    (<op> ^verb <nv>)
    (<nv> ^spelling <nw>)
    (<s> ^segment <s*2>)
    (<s*2> ^semantics <sem>)
    (<sem> -^arg1 <a*1>)
    (<sem> ^arg2 <a*2>)
    (<op> ^action <action>)
    (<s> ^top-state <t*1>)
    (<t*1> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<s> ^new-verb <nv> +)
    (<s> ^checked <nw> +)
    (<cmd> ^store <nv> +)
    (<nv> ^new-action true +)
}

sp {termination-processing*apply*create-new-verb*moveable*arg1*999
    (state <s> ^operator <op>)
    (<op> ^name create-new-verb)
    (<op> ^verb <nv>)
    (<nv> ^spelling <nw>)
    (<s> ^segment <s*2>)
    (<s*2> ^semantics <sem>)
    (<sem> ^arg2 <a*2>)
    (<sem> ^arg1 <a*1>)
    (<op> ^action <action>)
    (<action> ^handle <name>)
    (<s> ^top-state <t*1>)
    (<t*1> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<s> ^new-verb <nv> +)
    (<s> ^checked <nw> +)
    (<cmd> ^store <nv> +)
    (<nv> ^new-action true +)
}

sp {termination-processing*apply*create-new-verb*moveable*arg1*998
    (state <s> ^operator <op>)
    (<op> ^name create-new-verb)
    (<op> ^verb <nv>)
    (<nv> ^spelling <nw>)
    (<s> ^segment <s*2>)
    (<s*2> ^semantics <sem>)
    (<sem> -^arg2 <a*2>)
    (<sem> ^arg1 <a*1>)
    (<op> ^action <action>)
    (<action> ^handle <name>)
    (<s> ^top-state <t*1>)
    (<t*1> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<s> ^new-verb <nv> +)
    (<s> ^checked <nw> +)
    (<cmd> ^store <nv> +)
    (<nv> ^new-action true +)
}

sp {termination-processing*propose*create-new-verb
    (state <s> ^name termination-processing)
    (<s> ^quiescence t)
    (<s> ^segment <s*2>)
    (<s*2> ^semantics <sem>)
    (<sem> ^message-type new-verb)
    (<s> ^segment <s*1>)
    (<s*1> ^new-verb <nv>)
    (<s> -^new-verb <nv>)
    (<sem> ^action <action>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name create-new-verb +)
    (<op> ^action <action> +)
    (<op> ^verb <nv> +)
}

sp {termination-processing*apply*detect-used-but-unknown-word
    (state <s> ^operator <op>)
    (<op> ^name detect-used-but-unknown-word)
    (<op> ^unknown-word <word>)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    -->
    (<s> ^checked <word> +)
    (<sem> ^interaction-status <i*1> +)
    (<i*1> ^failure <fail> +)
    (<fail> ^type unknown-word +)
    (<fail> ^word <word> +)
}

sp {termination-processing*compare*detect-used-but-unknown-word2
    (state <s> ^name termination-processing)
    (<s> ^operator <op2> +)
    (<op2> ^name create-new-verb)
    (<s> ^operator <op1> +)
    (<op1> ^name detect-used-but-unknown-word)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {termination-processing*compare*detect-used-but-unknown-word
    (state <s> ^name termination-processing)
    (<s> ^operator <op2> +)
    (<op2> ^name create-new-adjective)
    (<s> ^operator <op1> +)
    (<op1> ^name detect-used-but-unknown-word)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {termination-processing*propose*detect-used-but-unknown-word2
    (state <s> ^name termination-processing)
    (<s> ^quiescence t)
    (<s> ^segment <s*1>)
    (<s*1> ^unknown-word <word>)
   -{ (<s> ^segment <s*2>)
      (<s*2> ^semantics <s*3>)
      (<s*3> ^interaction-status <i*1>)
      (<i*1> ^failure <f*1>)
      (<f*1> ^word <word>)}
    (<s> -^checked <word>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name detect-used-but-unknown-word +)
    (<op> ^unknown-word <word> +)
}

sp {termination-processing*propose*detect-used-but-unknown-word
    (state <s> ^name termination-processing)
    (<s> ^quiescence t)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <s*2>)
    (<s*2> ^<arg> <uw>)
    (<uw> -^new-action true)
    (<uw> -^structure-type <s*5>)
    (<uw> ^spelling <word>)
   -{ (<s> ^segment <s*3>)
      (<s*3> ^semantics <s*4>)
      (<s*4> ^interaction-status <i*1>)
      (<i*1> ^failure <f*1>)
      (<f*1> ^word <word>)}
   -{ (<s> ^new-verb <n*1>)
      (<n*1> ^spelling <word>)}
    (<s> -^checked <word>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name detect-used-but-unknown-word +)
    (<op> ^unknown-word <word> +)
}

sp {termination-processing*apply*remove-interaction-status
    (state <s> ^operator <op>)
    (<op> ^name create-new-adjective)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    (<sem> ^interaction-status <status>)
    (<status> ^failure <failure>)
    (<failure> ^type { << unknown-word index-word-failure >> <t*1> })
    -->
    (<sem> ^interaction-status <status> -)
    (<status> ^failure <failure> -)
}

sp {termination-processing*apply*create-new-adjective
    (state <s> ^operator <op>)
    (<op> ^name create-new-adjective)
    (<op> ^structure-type <type>)
    (<op> ^item-type <item>)
    (<op> ^word <nw>)
    (<nw> ^referent <ref>)
    (<nw> ^spelling <dd>)
    (<s> ^top-state <ss>)
    (<ss> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<s> ^checked <dd> +)
    (<cmd> ^store <nw> +)
    (<cmd> ^store <ref> +)
    (<nw> ^structure-type <type> +)
    (<ref> ^item-type <item> +)
}

sp {termination-processing*propose*create-new-noun*not-shape
    (state <s> ^name termination-processing)
    (<s> ^quiescence t)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    (<s> -^stored-message <sem>)
    (<sem> ^message-type adjective-definition)
    (<sem> ^arg1 <a*1>)
    (<a*1> ^word-structure <nw>)
    (<nw> -^structure-type <s*2>)
    (<sem> ^property <p*1>)
    (<p*1>
          ^handle { <> predicate <> relation <> action <> color <> size <> shape <h*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name create-new-adjective +)
    (<op> ^word <nw> +)
    (<op> ^structure-type N +)
    (<op> ^item-type concept +)
}

sp {termination-processing*propose*create-new-noun*shape
    (state <s> ^name termination-processing)
    (<s> ^quiescence t)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    (<s> -^stored-message <sem>)
    (<sem> ^message-type adjective-definition)
    (<sem> ^arg1 <a*1>)
    (<a*1> ^word-structure <nw>)
    (<nw> -^structure-type <s*2>)
    (<sem> ^property <p*1>)
    (<p*1> ^handle shape)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name create-new-adjective +)
    (<op> ^word <nw> +)
    (<op> ^structure-type N +)
    (<op> ^item-type object +)
}

sp {termination-processing*propose*create-new-relation
    (state <s> ^name termination-processing)
    (<s> ^quiescence t)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    (<s> -^stored-message <sem>)
    (<sem> ^message-type adjective-definition)
    (<sem> ^arg1 <a*1>)
    (<a*1> ^word-structure <nw>)
    (<nw> -^structure-type <s*2>)
    (<sem> ^property <p*1>)
    (<p*1> ^handle { << relation predicate >> <h*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name create-new-adjective +)
    (<op> ^word <nw> +)
    (<op> ^structure-type P +)
    (<op> ^item-type predicate +)
}

sp {termination-processing*propose*create-new-adjective-verb
    (state <s> ^name termination-processing)
    (<s> ^quiescence t)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    (<s> -^stored-message <sem>)
    (<sem> ^message-type adjective-definition)
    (<sem> ^arg1 <a*1>)
    (<a*1> ^word-structure <nw>)
    (<nw> -^structure-type <s*2>)
    (<sem> ^property <p*1>)
    (<p*1> ^handle action)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name create-new-adjective +)
    (<op> ^word <nw> +)
    (<op> ^structure-type V +)
    (<op> ^item-type action +)
}

sp {termination-processing*propose*create-new-adjective
    (state <s> ^name termination-processing)
    (<s> ^quiescence t)
    (<s> ^segment <s*1>)
    (<s*1> ^semantics <sem>)
    (<s> -^stored-message <sem>)
    (<sem> ^message-type adjective-definition)
    (<sem> ^arg1 <a*1>)
    (<a*1> ^word-structure <nw>)
    (<nw> -^structure-type <s*2>)
    (<sem> ^property <p*1>)
    (<p*1> ^handle { << color size >> <h*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name create-new-adjective +)
    (<op> ^word <nw> +)
    (<op> ^structure-type ADJ +)
    (<op> ^item-type predicate +)
}

sp {apply*check-expectation-interaction-status
    (state <s> ^name termination-processing)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<s> ^segment <seg>)
    (<seg> ^checked-expectation true)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^semantics <sem>)
    (<sem> ^interaction-status <i*2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<i*2> ^<att> <value>)
    -->
    (<status> ^<att> <value> +)
}

sp {apply*check-expectation*new-message
    (state <s> ^name termination-processing)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<s> ^segment <seg>)
    (<seg> ^checked-expectation true)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^semantics <sem>)
    (<sem> ^message-type <ms-type>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^new-message <sem> +)
}

sp {check-failure*apply*check-expectation*failure
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^failed-expectation true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<s> ^top-state <ts>)
    (<ts> ^current-sentence-number <csn>)
    -->
    (<ts> ^expectation-failure <csn> +)
}

sp {check-failure*apply*check-expectation*done
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^checked-expectation true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<s> ^top-state <ts>)
    (<ts> ^success-count <sc>)
    (<ts> ^current-sentence-number <csn>)
    -->
    (<seg> ^processed-terminator true +)
    (<ts> ^terminated-sentence <csn> +)
    (<ts> ^success-count <sc> -)
    (<ts> ^success-count (+ <sc> 1) +)
}

sp {check-failure*apply*check-expectation
    (state <s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<s> ^segment <seg>)
    -->
    (<seg> ^checked-expectation true +)
}

sp {check-failure*apply*check-expectation*l3-identifier-fail
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^processed-sentence true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^expected <expected>)
    (<seg> ^semantics <sem>)
    (<expected> ^<attr1> <a*1>)
    (<a*1> ^<attr2> <a*2>)
    (<a*2> ^<attr3> { <=> <s> <a*3> })
   -{ (<sem> ^<attr1> <a*4>)
      (<a*4> ^<attr2> <a*5>)
      (<a*5> ^<attr3> { <=> <s> <a*6> })}
    -->
    (<seg> ^failed-expectation true +)
}

sp {check-failure*apply*check-expectation*l3-constant-fail
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^processed-sentence true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^expected <expected>)
    (<seg> ^semantics <sem>)
    (<sem> ^<attr1> <a*3>)
    (<expected> ^<attr1> <a*1>)
    (<a*3> ^<attr2> <a*4>)
    (<a*1> ^<attr2> <expected3>)
    (<a*4> ^<attr3> <a*5>)
    (<expected3> -^<attr3> { <=> <s> <a*2> })
    (<expected3> ^<attr3> <value>)
   -{ (<sem> ^<attr1> <a*6>)
      (<a*6> ^<attr2> <a*7>)
      (<a*7> ^<attr3> <value>)}
    -->
    (<seg> ^failed-expectation true +)
}

sp {check-failure*apply*check-expectation*l3-attribute-missing
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^processed-sentence true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^expected <expected>)
    (<seg> ^semantics <sem>)
    (<expected> ^<attr1> <a*1>)
    (<a*1> ^<attr2> <a*2>)
    (<a*2> ^<attr3> <a*3>)
   -{ (<sem> ^<attr1> <a*4>)
      (<a*4> ^<attr2> <a*5>)
      (<a*5> ^<attr3> <a*6>)}
    -->
    (<seg> ^checked-expectation true +)
    (<seg> ^failed-expectation true +)
}

sp {check-failure*apply*check-expectation*l2-identifier-fail
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^processed-sentence true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^expected <expected>)
    (<seg> ^semantics <sem>)
    (<expected> ^<attr1> <a*1>)
    (<a*1> ^<attr2> { <=> <s> <value> })
   -{ (<sem> ^<attr1> <a*2>)
      (<a*2> ^<attr2> { <=> <s> <a*3> })}
    -->
    (<seg> ^failed-expectation true +)
}

sp {check-failure*apply*check-expectation*l2-constant-fail
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^processed-sentence true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^expected <expected>)
    (<seg> ^semantics <sem>)
    (<expected> ^<attr1> <expected2>)
    (<expected2> ^<attr2> <value>)
    (<expected2> -^<attr2> { <=> <s> <a*2> })
   -{ (<sem> ^<attr1> <a*1>)
      (<a*1> ^<attr2> <value>)}
    -->
    (<seg> ^failed-expectation true +)
}

sp {check-failure*apply*check-expectation*l2-attribute-missing
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^processed-sentence true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^expected <e*1>)
    (<seg> ^semantics <sem>)
    (<e*1> ^<attr1> <a*1>)
    (<a*1> ^<attr2> <a*2>)
   -{ (<sem> ^<attr1> <a*3>)
      (<a*3> ^<attr2> <a*4>)}
    -->
    (<seg> ^failed-expectation true +)
}

sp {check-failure*apply*check-expectation*l1-identifier-fail
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^processed-sentence true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^expected <expected>)
    (<seg> ^semantics <sem>)
    (<expected> ^<attr> { <=> <s> <a*1> })
    (<sem> -^<attr> { <=> <s> <a*2> })
    -->
    (<seg> ^failed-expectation true +)
}

sp {check-failure*apply*check-expectation*l1-constant-fail
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^processed-sentence true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^expected <expected>)
    (<seg> ^semantics <sem>)
    (<sem> ^<attr> <a*2>)
    (<expected> -^<attr> { <=> <s> <a*1> })
    (<expected> ^<attr> <value>)
    (<sem> -^<attr> <value>)
    -->
    (<seg> ^failed-expectation true +)
}

sp {check-failure*apply*check-expectation*l1-attribute-missing
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^processed-sentence true)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<seg> ^expected <e*1>)
    (<e*1> ^<attr> <a*1>)
   -{ (<seg> ^semantics <s*1>)
      (<s*1> ^<attr> <a*2>)}
    -->
    (<seg> ^failed-expectation true +)
}

sp {check-failure*apply*check-expectation*no-expectation
    (state <s> ^segment <seg>)
    (<seg> -^expected <e*1>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<s> ^top-state <ts>)
    (<ts> ^success-count <sc>)
    (<ts> ^current-sentence-number <csn>)
    -->
    (<seg> ^processed-terminator true +)
    (<ts> ^terminated-sentence <csn> +)
    (<ts> ^success-count <sc> -)
    (<ts> ^success-count (+ <sc> 1) +)
}

sp {check-failure*apply*check-expectation*expectation-nil
    (state <s> ^segment <seg>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<seg> ^expected nil)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage internal)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-expectation)
    (<s> ^top-state <ts>)
    (<ts> ^success-count <sc>)
    (<ts> ^current-sentence-number <csn>)
    -->
    (<seg> ^processed-terminator true +)
    (<ts> ^terminated-sentence <csn> +)
    (<ts> ^success-count <sc> -)
    (<ts> ^success-count (+ <sc> 1) +)
}

sp {check-failure*propose*check-expectation
    (state <s> ^checked-not-merged-assigners true)
    (<s> ^checked-not-merged-receivers true)
    (<s> ^name termination-processing)
    (<s> ^superstate <s*1>)
    (<s*1> ^segment <seg>)
    (<seg> -^processed-terminator true)
    (<seg> -^parse-failed-assigner <p*2>)
    (<seg> -^parse-failed-receiver <p*1>)
    (<seg> ^original-sentence <o*1>)
    (<o*1> ^processed-sentence true)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name check-expectation +)
}

sp {apply*check-not-merged-receivers2
    (state <s> ^operator <o*1>)
    (<o*1> ^name check-not-merged-receivers)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-receiver <item>)
    (<item> ^lt <lt>)
    (<lt> ^structure-type { <> C <> CP <> S <s*2> })
    (<lt> ^{ << construction spelling >> <a*1> } { <> * <spell> })
    -->
    (<s> ^failed-receiver <item> +)
    (<s> ^checked-not-merged-receivers true +)
}

sp {apply*check-not-merged-receivers
    (state <s> ^operator <o*1>)
   -{ (<s> ^segment <s*1>)
      (<s*1> ^not-merged-receiver <n*1>)
      (<n*1> ^lt <l*1>)
      (<l*1> ^structure-type { <> CP <> C <> S <s*2> })}
    (<o*1> ^name check-not-merged-receivers)
    -->
    (<s> ^checked-not-merged-receivers true +)
}

sp {termination-processing*propose*check-not-merged-receivers
    (state <s> ^checked-not-merged-assigners true)
    (<s> -^checked-not-merged-receivers true)
    (<s> ^name termination-processing)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name check-not-merged-receivers +)
}

sp {apply*check-not-merged-assigners-neither
    (state <s> ^operator <op>)
    (<op> ^name check-not-merged-assigners)
    (<s> ^segment <sp>)
    (<sp> ^not-merged-assigner <item>)
    (<item> ^lt <lla>)
    (<lla> -^optional true)
    (<lla> -^required true)
    (<item> ^structure-type <pos>)
    -->
    (<s> ^checked-not-merged-assigners true +)
}

sp {apply*check-not-merged-assigners-required
    (state <s> ^operator <op>)
    (<op> ^name check-not-merged-assigners)
    (<s> ^segment <sp>)
    (<sp> ^not-merged-assigner <item>)
    (<item> ^lt <l*1>)
    (<l*1> ^required true)
    (<item> ^structure-type <pos>)
    -->
    (<s> ^failed-assigner <item> +)
    (<s> ^checked-not-merged-assigners true +)
}

sp {apply*check-not-merged-assigners-optional
    (state <s> ^operator <op>)
    (<op> ^name check-not-merged-assigners)
    (<s> ^segment <sp>)
    (<sp> ^not-merged-assigner <item>)
    (<item> ^lt <l*2>)
    (<l*2> ^optional true)
    (<item> ^parent-receiver <p*1>)
    (<p*1> ^lt <l*1>)
    (<item> ^structure-type <stype>)
    (<l*1> ^{ << construction spelling >> <a*1> } <spelling>)
    -->
    (<s> ^checked-not-merged-assigners true +)
}

sp {apply*check-not-merged-assigners
    (state <s> ^segment <ss>)
    (<ss> -^not-merged-assigner <item>)
    (<s> ^operator <op>)
    (<op> ^name check-not-merged-assigners)
    -->
    (<s> ^checked-not-merged-assigners true +)
}

sp {termination-processing*propose*check-not-merged-assigners
    (state <s> ^name termination-processing)
    (<s> -^checked-not-merged-assigners true)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name check-not-merged-assigners +)
}

sp {apply*check-failure*new-message
    (state <s> ^segment <s*1>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^parser-testing true)}
    (<s> ^operator <o*1>)
    (<o*1> ^name check-failure)
    (<s*1> ^semantics <sem>)
    (<sem> ^message-type <ms-type>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^new-message <sem> +)
}

sp {apply*check-failure*success*internal
    (state <s> ^segment <sp>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^parser-testing true)
    (<s> ^operator <op>)
    (<op> ^name check-failure)
    (<sp> ^original-sentence <cs>)
    (<s> ^top-state <ts>)
    (<ts> ^success-count <sc>)
    -->
    (<cs> ^processed-sentence true +)
    (<cs> ^processing-result success +)
}

sp {apply*check-failure*success
    (state <s> ^segment <sp>)
    (<s> -^failed-assigner <f*2>)
    (<s> -^failed-receiver <f*1>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^parser-testing true)}
    (<s> ^operator <o*1>)
    (<o*1> ^name check-failure)
    (<sp> ^semantics <s*1>)
    (<sp> ^original-sentence <cs>)
    (<s*1> ^message-type <mt>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type process-sentence +)
    (<de> ^originator agent +)
    (<sp> ^processed-terminator true +)
    (<cs> ^processed-sentence true +)
    (<cs> ^processing-result success +)
}

sp {apply*check-failure*failure*retry*assigner
    (state <s> ^operator <o*1>)
    (<o*1> ^name check-failure)
    (<s> ^failed-assigner <item>)
    (<s> ^segment <seg>)
    (<seg> ^original-sentence <os>)
    -->
    (<seg> ^parse-failed-assigner <item> +)
    (<os> ^processing-result failure +)
}

sp {apply*check-failure*failure*retry*receiver
    (state <s> ^operator <o*1>)
    (<o*1> ^name check-failure)
    (<s> ^failed-receiver <item>)
    (<s> ^segment <seg>)
    -->
    (<seg> ^parse-failed-receiver <item> +)
}

sp {apply*check-failure*monitor*no-number
    (state <s> ^name termination-processing)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^current-sentence-number <csn>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name check-failure)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^complete-sentence <os>)
    -->
    
}

sp {apply*check-failure*monitor*to-file
    (state <s> ^name termination-processing)
    (<s> ^top-state <t*1>)
    (<t*1> ^create-trace-file true)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-failure)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <os>)
    -->
    (cmd command-to-file |-a| |rosie-sentence-processing.trace| echo =======================================)
    (cmd command-to-file |-a| |rosie-sentence-processing.trace| print <os>)
    (cmd command-to-file |-a| |rosie-sentence-processing.trace| print |-d| 3 <sem>)
}

sp {apply*check-failure*monitor
    (state <s> ^name termination-processing)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-failure)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <o*2>)
    (<o*2> ^complete-sentence <os>)
    (<s> ^top-state <t*1>)
    (<t*1> ^current-sentence-number <csn>)
    -->
    
}

sp {termination-processing*propose*check-failure
    (state <s> ^checked-not-merged-assigners true)
    (<s> ^checked-not-merged-receivers true)
    (<s> ^name termination-processing)
    (<s> ^superstate <s*1>)
    (<s*1> ^segment <seg>)
   -{ (<seg> ^original-sentence <o*1>)
      (<o*1> ^processed-sentence true)}
    (<seg> -^processed-terminator true)
    (<seg> -^parse-failed-assigner <p*2>)
    (<seg> -^parse-failed-receiver <p*1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name check-failure +)
}

sp {comprehension*compare*termination-processing
    (state <s> ^operator <op2> +)
    (<op2> ^name comprehend-construction)
    (<s> ^operator <op1> +)
    (<op1> ^name termination-processing)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {apply*termination-processing*message-type*st
    (state <s> ^operator <o*1>)
    (<o*1> ^name termination-processing)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <rec>)
    (<rec> ^structure-type S)
    (<seg> ^semantics <sem>)
    (<rec> ^message-type <ms-type>)
    -->
    (<sem> ^message-type <ms-type> +)
}

sp {apply*termination-processing*semantics*sentence
    (state <s> ^operator <o*1>)
    (<o*1> ^name termination-processing)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^not-merged-receiver <uri>)
    (<uri> ^lt <l*1>)
    (<l*1> ^structure-type S)
    (<uri> ^sentence <s*1>)
    (<s*1> ^semantics <sem2>)
    (<sem2> ^<att> <val>)
    -->
    (<sem> ^<att> <val> +)
}

sp {apply*termination-processing*semantics
    (state <s> ^operator <o*1>)
    (<o*1> ^name termination-processing)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^not-merged-receiver <uri>)
    (<uri> ^lt <l*1>)
    (<l*1> ^structure-type S)
    (<uri> ^semantics <sem2>)
    (<sem2> ^<att> <val>)
    -->
    (<sem> ^<att> <val> +)
}

sp {apply*termination-processing*message-type
    (state <s> ^operator <o*1>)
    (<o*1> ^name termination-processing)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^not-merged-receiver <n*1>)
    (<n*1> ^lt <lt>)
    (<lt> ^structure-type S)
    (<lt> ^message-type <ms-type>)
    -->
    (<sem> ^message-type <ms-type> +)
}

sp {comprehension*propose*termination-processing
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> -^parse-failed-assigner <p*3>)
    (<seg> -^parse-failed-receiver <p*2>)
    (<seg> -^processed-terminator <p*1>)
    (<seg> ^not-merged-receiver <ua>)
    (<ua> ^terminator <term>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name termination-processing +)
}

sp {ground-referent*apply*finish-ground-referent
    (state <s> ^quiescence t)
    (<s> ^operator <op>)
    (<op> ^name finish-ground-referent)
    (<s> ^segment <s*1>)
    (<s*1> ^last-merge <l*1>)
    (<l*1> ^assigner <a*1>)
    (<a*1> ^parent-receiver <as>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <so>)
    (<so> ^parameter <p>)
    (<so> ^{ << double-constraints constraints >> <a*2> } <c>)
    -->
    (<as> ^ground-tested <p> +)
}

sp {propose*finish-ground-referent
    (state <s> ^name ground-referent)
   -{ (<s> ^candidate-set <c*1>)
      (<c*1> ^proto-referent <p*1>)
      (<p*1> ^object <obj>)
     -{ (<s> ^constraints <c*2>)
        (<c*2> ^referent <obj>)}}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name finish-ground-referent +)
}

sp {ground-referent*apply*create-hypothetical*location
    (state <s> ^constraint <ref>)
   -{ (<ref> ^visibility not-visible)
      (<ref> ^predicates <p*1>)}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^operator <o*1>)
    (<o*1> ^name create-hypothetical)
    (<ref> ^item-type <item-type>)
    (<ref> ^handle <handle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    (<ref> ^property <prop>)
    (<prop> ^handle { << location name >> <h*1> })
    -->
    (<s> ^proto-referent <ref2> +)
    (<objs> ^object <ref2> +)
    (<ref2> ^handle <handle> +)
    (<ref2> ^property <prop> +)
    (<ref2> ^item-type <item-type> +)
    (<ref2> ^visibility not-visible +)
    (<ref2> ^predicates <pred> +)
    (<pred> ^dialog-object true +)
    (<pred> ^category object +)
    (write (crlf) |Hypothetical referent. Creating ^visibility not-visible object:| <ref2>)
}

sp {ground-referent*apply*create-hypothetical*category
    (state <s> ^constraint <con>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^operator <o*1>)
    (<o*1> ^name create-hypothetical)
    (<con> ^handle <cat>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    (<con> ^property <p*1>)
    (<p*1> ^handle category)
    -->
    (<s> ^proto-referent <pr> +)
    (<objs> ^object <pr> +)
    (<pr> ^predicates <pred> +)
    (<pr> ^handle (make-constant-symbol new-object-id) +)
    (<pr> ^item-type <cat> +)
    (<pred> ^visibility not-visible +)
    (<pred> ^dialog-object true +)
    (<pred> ^category <cat> +)
    (write (crlf) |Hypothetical referent. Creating ^visibility not-visible object:| <pr>)
}

sp {ground-referent*apply*create-hypothetical
    (state <s> ^top-state <t*1>)
   -{ (<s> ^constraint <c*1>)
      (<c*1> ^property <p*1>)
      (<p*1> ^handle { << name location category >> <h*1> })}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^operator <o*1>)
    (<o*1> ^name create-hypothetical)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    -->
    (<s> ^proto-referent <pr> +)
    (<objs> ^object <pr> +)
    (<pr> ^predicates <pred> +)
    (<pr> ^handle (make-constant-symbol new-object-id) +)
    (<pr> ^item-type object +)
    (<pred> ^visibility not-visible +)
    (<pred> ^dialog-object true +)
    (<pred> ^category object +)
    (write (crlf) |Hypothetical referent. Creating ^visibility not-visible object:| <pr>)
}

sp {ground-referent*compare*create-hypothetical
    (state <s> ^name ground-referent)
    (<s> ^operator <op1> +)
    (<op1> ^name create-hypothetical)
    (<s> ^operator <op2> +)
    (<op2>
          ^name { << index-object-properties index-scene-objects index-scene-relation >> <n*1> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {ground-referent*propose*create-hypothetical
    (state <s> ^name ground-referent-x)
   -{ (<s> ^constraint-lt <c*1>)
      (<c*1> ^specifier { << it personal >> <s*1> })}
    (<s> ^segment <s*2>)
    (<s*2> ^hypothetical true)
    (<s> ^proto-referents <p*1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name create-hypothetical +)
}

sp {ground-referent*apply*index-semantic-memory*smem*fail*no-change
    (state <ss> ^impasse no-change)
    (<ss> ^superstate <s>)
    (<s> ^operator <o*1>)
    (<o*1> ^name index-semantic-memory)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    -->
    (<s> ^failed-semantic-retrieval true +)
    (<s> ^indexed-semantic-memory true +)
}

sp {ground-referent*apply*index-semantic-memory*smem*fail
    (state <s> ^operator <o*1>)
    (<o*1> ^name index-semantic-memory)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^failure <t>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    -->
    (write (crlf) |No lexical item found in semantic memory.|)
    (<s> ^failed-semantic-retrieval true +)
    (<s> ^indexed-semantic-memory true +)
}

sp {ground-referent*apply*index-semantic-memory*smem*success
    (state <s> ^operator <o*1>)
    (<o*1> ^name index-semantic-memory)
    (<s> ^constraints <cons>)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<smem> ^command <com>)
    (<com> ^query <q>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^parameter <p>)
    (<so> ^{ << double-constraints constraints >> <a*1> } <c>)
    -->
    (<s> ^indexed-semantic-memory true +)
    (<cons> ^referent <rli> +)
    (<c> ^ground-tested <p> +)
    (<com> ^query <q> -)
    (<com> ^depth 9 -)
}

sp {ground-referent*apply*index-semantic-memory*smem
    (state <s> ^operator <op>)
    (<op> ^name index-semantic-memory)
    (<s> ^smem <s*1>)
    (<s*1> ^command <com>)
    (<s> ^{ << sm-proto-referent proto-referent >> <a*1> } <ref>)
    (<ref> ^predicates-copied true)
    (<ref> ^predicates <pred>)
    -->
    (<com> ^query <pred> +)
    (<com> ^depth 9 +)
}

sp {ground-referent*apply*index-semantic-memory*location-name
    (state <s> ^constraint <con>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^operator <o*1>)
    (<o*1> ^name index-semantic-memory)
    (<con> ^item-type <item-type>)
    (<con> ^property <prop>)
    (<prop> ^handle { << location name >> <h*1> })
    -->
    (<s> ^sm-proto-referent <pr> +)
    (<pr> ^predicates <pred> +)
    (<pred> ^item-type <item-type> +)
    (<pred> ^object-instance true +)
}

sp {ground-referent*apply*index-semantic-memory*not-cat-loc-name
    (state <s> ^operator <o*1>)
   -{ (<s> ^constraint <c*1>)
      (<c*1> ^property <p*1>)
      (<p*1> ^handle { << name location category >> <h*1> })}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<o*1> ^name index-semantic-memory)
    -->
    (<s> ^sm-proto-referent <pr> +)
    (<pr> ^predicates <pred> +)
    (<pr> ^item-type object +)
    (<pred> ^object-instance true +)
}

sp {ground-referent*compare*index-semantic-memory
    (state <s> ^name ground-referent)
    (<s> ^operator <op2> +)
    (<op2> ^name failed-grounding)
    (<s> ^operator <op1> +)
    (<op1> ^name index-semantic-memory)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {ground-referent*propose*index-semantic-memory
    (state <s> ^proto-referents none)
    (<s> -^indexed-semantic-memory true)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^name ground-referent)
    (<s> ^quiescence t)
    (<s> ^constraint-lt <c*1>)
    (<c*1> ^specifier definite)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name index-semantic-memory +)
}

sp {ground-referent*apply*index-dialog-properties*succeeds
    (state <s> ^operator <o>)
    (<o> ^name index-dialog-properties)
    (<o> ^property-constraint <pc>)
    (<s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr>)
    (<pr> ^object <o*1>)
    (<o*1> ^predicates <p*1>)
    (<p*1> ^dialog-object true)
    -->
    (<pr> ^passes <pc> +)
    (<cs> ^success-tested <pc> +)
}

sp {ground-referent*apply*index-dialog-properties*violates
    (state <s> ^operator <o>)
    (<o> ^name index-dialog-properties)
    (<o> ^property-constraint <pc>)
    (<s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr>)
   -{ (<pr> ^object <o*1>)
      (<o*1> ^predicates <p*1>)
      (<p*1> ^dialog-object true)}
    -->
    (<pr> ^violates <pc> +)
    (<cs> ^fail-tested <pc> +)
}

sp {ground-referent*propose*index-dialog-properties
    (state <s> ^name ground-referent)
    (<s> ^candidate-set <cs>)
    (<cs> ^generated-candidates true)
    (<s> ^property-constraint <pc>)
    (<cs> -^satisfied-property <pc>)
    (<pc> ^property grammatical-property)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name index-dialog-properties +)
    (<op> ^property-constraint <pc> +)
}

sp {ground-referent*apply*index-object-multiple
    (state <s> ^operator <op>)
    (<op> ^name index-object-multiple)
    (<s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr>)
   -{ (<pr> ^object <o*1>)
      (<o*1> ^predicates <p*1>)
      (<p*1> ^multiple true)}
    -->
    (<cs> ^proto-referent <pr> -)
    (<s> ^processed-multiple <pr> +)
}

sp {ground-referent*compare*index-object-properties
    (state <s> ^name ground-referent)
    (<s> ^operator <op1> +)
    (<op1> ^name index-object-multiple)
    (<s> ^operator <op2> +)
    (<op2> ^name { <> index-object-multiple <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {ground-referent*propose*index-object-multiple
    (state <s> ^name ground-referent)
    (<s> ^constraint <con>)
    (<con> ^multiple true)
    (<s> ^candidate-set <cs>)
    (<cs> ^generated-candidates true)
    (<cs> ^proto-referent <pr>)
   -{ (<pr> ^object <o*2>)
      (<o*2> ^predicates <p*3>)
      (<p*3> ^multiple true)}
    (<s> -^processed-mulitple <pr>)
    (<cs> ^proto-referent <p*1>)
    (<p*1> ^object <o*1>)
    (<o*1> ^predicates <p*2>)
    (<p*2> ^multiple true)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name index-object-multiple +)
}

sp {ground-referent*compare*prefer-real-to-not-visible
    (state <s> ^name ground-referent)
    (<s> ^operator <op2> +)
    (<op2> ^name tested-referent)
    (<s> ^operator <op1> +)
    (<op1> ^name prefer-real-to-not-visible)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehend*apply*process-multiple-groundings
    (state <s> ^operator <op>)
    (<op> ^name prefer-real-to-not-visible)
    (<s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr2>)
    (<pr2> ^object <pr-d>)
   -{ (<pr-d> ^predicates <p*2>)
      (<p*2> ^status live)}
    (<pr-d> ^predicates <p*1>)
    (<p*1> ^visible { << false unknown >> <v*1> })
    -->
    (<cs> ^proto-referent <pr2> -)
}

sp {ground-referent*apply*quantifier3
    (state <s> ^superstate <s*2>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^operator <op>)
    (<op> ^name quantifier)
    (<op> ^quantifier <quant>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <con>)
    (<con> -^multiple true)
    (<con> ^handle <obj-type>)
    (<quant> -^handle <obj-type>)
    -->
    (<s> ^proto-referent <pr> +)
    (<pr> ^predicates <pred> +)
    (<pr> ^handle (make-constant-symbol new-object-id) +)
    (<pr> ^item-type <obj-type> +)
    (<pred> ^quantified <quant> +)
    (<pred> ^visibility unknown-visible +)
    (<pred> ^dialog-object true +)
    (<pred> ^category <obj-type> +)
}

sp {ground-referent*apply*quantifier2
    (state <s> ^superstate <s*2>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^operator <op>)
    (<op> ^name quantifier)
    (<op> ^quantifier <quant>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <con>)
    (<con> ^handle <obj-type>)
    (<con> ^property <p*1>)
    (<p*1> ^handle category)
    -->
    (<s> ^proto-referent <pr> +)
    (<pr> ^predicates <pred> +)
    (<pr> ^handle (make-constant-symbol new-object-id) +)
    (<pr> ^item-type <obj-type> +)
    (<pred> ^quantified <quant> +)
    (<pred> ^visibility unknown-visible +)
    (<pred> ^dialog-object true +)
    (<pred> ^category <obj-type> +)
}

sp {ground-referent*apply*quantifier
    (state <s> ^operator <op>)
   -{ (<s> ^superstate <s*2>)
      (<s*2> ^operator <o*1>)
      (<o*1> ^{ << double-constraints constraints >> <a*1> } <v*1>)
      (<v*1> ^constraint <con>)
      (<con> ^handle <obj-type>)
      (<con> ^property <p*1>)
      (<p*1> ^handle category)}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<op> ^name quantifier)
    (<op> ^quantifier <quant>)
    -->
    (<s> ^proto-referent <pr> +)
    (<pr> ^predicates <pred> +)
    (<pr> ^handle (make-constant-symbol new-object-id) +)
    (<pr> ^item-type object +)
    (<pred> ^quantified <quant> +)
    (<pred> ^visibility unknown-visible +)
    (<pred> ^dialog-object true +)
    (<pred> ^category object +)
}

sp {ground-referent*propose*quantifier
    (state <s> ^name ground-referent)
    (<s> ^quiescence t)
    (<s> ^constraints <c*1>)
    (<c*1> ^quantifier <q*1>)
    (<q*1> ^lt-referent <quant>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name quantifier +)
    (<op> ^quantifier <quant> +)
}

sp {ground-referent*apply*process-plural
    (state <s> ^proto-referents one)
    (<s> ^operator <o*1>)
    (<o*1> ^name process-plural)
    -->
    (<s> ^proto-referents one -)
    (<s> ^proto-referents none +)
}

sp {ground-referent*propose*process-plural
    (state <s> ^proto-referents one)
    (<s> ^constraint-processing-finished true)
    (<s> ^name ground-referent)
    (<s> ^constraint <c*1>)
    (<c*1> ^multiple true)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name process-plural +)
}

sp {ground-referent*apply*non-visual-referent
    (state <s> ^operator <op>)
    (<op> ^name non-visual-referent)
    (<op> ^constraints <cs>)
    (<s> ^referent <r>)
    (<r> ^<prop> <p*1>)
    -->
    (<cs> ^referent <r> +)
    (<cs> ^ground-tested <cs> +)
}

sp {ground-referent*apply*non-visual-referent*copy-constraint
    (state <s> ^operator <op>)
    (<op> ^name non-visual-referent)
    (<op> ^constraints <c*1>)
    (<c*1> ^constraint <c>)
    (<s> ^referent <r>)
    (<c> ^handle <value>)
    (<c> ^property <p*1>)
    (<p*1> ^{ << name handle >> <a*1> } <prop>)
    -->
    (<r> ^<prop> <value> +)
}

sp {ground-referent*apply*non-visual-referent*referent
    (state <s> ^operator <op>)
    (<op> ^name non-visual-referent)
    -->
    (<s> ^referent <r> +)
}

sp {ground-referent*propose*non-visual-referent
    (state <s> ^name ground-referent)
    (<s> ^constraint-lt <cl>)
    (<cl> -^demonstrative true)
    (<cl> -^specifier { << personal it >> <s*2> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^constraints <cs>)
   -{ (<cs> ^constraint <c*2>)
      (<c*2> ^relation <rel>)
      (<rel> ^2 <item>)
      (<item> ^item-type { << object location >> <i*1> })}
   -{ (<cs> ^constraint <c*1>)
      (<c*1> ^property <p*1>)
      (<p*1> ^type visual)}
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name non-visual-referent +)
    (<op> ^constraints <cs> +)
}

sp {ground-referent*apply*failed-grounding*evaluate-operator
    (state <s> ^quiescence t)
    (<s> ^superstate <ss>)
    (<ss> ^name evaluate-operator)
    (<ss> ^superstate <sss>)
    (<sss> ^operator <o*2>)
    (<o*2> ^evaluation <e>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding >> <n*1> })
    -->
    (<e> ^final-referent-count 0 +)
}

sp {apply*failed-grounding*remove-current-referent
    (state <s> ^quiescence t)
    (<s> ^constraints <cs>)
    (<cs> ^referent <obj>)
    (<s> -^proto-referent <obj>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^parameter <p>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding >> <n*1> })
    (<so> ^{ << double-constraints constraints >> <a*1> } <cs>)
    -->
    (<cs> ^referent <obj> -)
}

sp {ground-referent*apply*failed-grounding*finish3
    (state <s> ^quiescence t)
    (<s> ^proto-referent <ref>)
    (<ref> ^predicates-copied true)
    (<s> ^segment <ss>)
    (<ss> ^dialog-object-list-access <dol>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding >> <n*1> })
    -->
    (<ss> ^dialog-object-list-access <dol> -)
    (<ss> ^dialog-object-list-access <ndol> +)
    (<objs> ^object <ref> +)
    (<ndol> ^referent <ref> +)
    (<ndol> ^next <dol> +)
}

sp {ground-referent*apply*failed-grounding*finish2
    (state <s> ^quiescence t)
    (<s> ^proto-referent <ref>)
    (<ref> ^predicates-copied true)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-object-list <dol>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding >> <n*1> })
    -->
    (<ts> ^dialog-object-list <dol> -)
    (<ts> ^dialog-object-list <ndol> +)
    (<objs> ^object <ref> +)
    (<ndol> ^referent <ref> +)
    (<ndol> ^next <dol> +)
}

sp {ground-referent*apply*failed-grounding*finish
    (state <s> ^quiescence t)
    (<s> ^proto-referent <ref>)
    (<ref> ^predicates-copied true)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <c>)
    -->
    (<c> ^ground-tested <c> +)
    (<c> ^referent <ref> +)
}

sp {ground-referent*apply*failed-grounding*copy-specifier-distinct
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^constraint-lt <c*1>)
    (<c*1> ^specifier distinct)
    (<s> ^operator <o*1>)
    (<o*1> ^name failed-grounding)
    -->
    (<pr> ^specifier distinct +)
}

sp {ground-referent*apply*failed-grounding*copy-possessive-flag
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^constraint-lt <c*1>)
      (<c*1> ^specifier indefinite)}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^candidate-set <c*2>)
    (<c*2> ^possessive true)
    (<s> ^operator <o*1>)
    (<o*1> ^name failed-grounding)
    -->
    (<pr> ^possessive true +)
}

sp {ground-referent*apply*failed-grounding*relation2
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^constraints <c*1>)
    (<c*1> ^complement <comp>)
   -{ (<comp> ^lt <l*1>)
      (<l*1> ^directional true)}
    (<comp> ^lt <l*2>)
    (<comp> ^head <h*1>)
    (<h*1> ^referent <ref>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<l*2> ^relation <r*1>)
    (<r*1> ^handle <arg>)
   -{ (<s> ^superstate <s*2>)
      (<s*2> ^operator <o*2>)
      (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
      (<v*1> ^constraint <c*2>)
      (<c*2> ^relation <value>)
      (<value> ^2 <ref>)
      (<value> ^handle <arg>)}
    -->
    (<pr> ^predicates-copied true +)
    (<pr> ^relation <rel> +)
    (<rel> ^2 <ref> +)
    (<rel> ^handle <arg> +)
}

sp {ground-referent*apply*failed-grounding*relation*multiple-constraint
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <constraint>)
    (<constraint> ^handle <h*1>)
    (<constraint> ^relation <value>)
    -->
    (<pr> ^predicates-copied true +)
    (<pr> ^predicates <constraint> +)
    (write (crlf) |Add predicates and relation structure: | <constraint>)
}

sp {ground-referent*apply*failed-grounding*relation
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <constraint>)
    (<constraint> -^handle <h*1>)
    (<constraint> ^relation <value>)
    -->
    (<pr> ^predicates-copied true +)
    (<pr> ^relation <value> +)
}

sp {ground-referent*apply*failed-grounding*property45
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <so>)
    (<so> ^constraint-count 1)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<so> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <constraint>)
   -{ (<s> ^constraints <c*1>)
      (<c*1> ^quantifier <q*1>)
      (<q*1> ^lt-referent <constraint>)}
   -{ (<pr> ^predicates <p*3>)
      (<constraint>
            ^{ << movable category number quantity type multiple >> <prop> } <value>)}
   -{ (<constraint> ^referent <r*1>)
      (<r*1> ^handle <value>)
      (<constraint> ^property <p*1>)
      (<p*1> ^{ << name handle >> <a*2> } <prop>)}
    (<constraint> ^handle <h*1>)
    (<constraint> ^property <p*2>)
    (<p*2> ^handle name)
    -->
    (<pr> ^predicates-copied true +)
}

sp {ground-referent*apply*failed-grounding*property4
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <constraint>)
   -{ (<s> ^constraints <c*1>)
      (<c*1> ^quantifier <q*1>)
      (<q*1> ^lt-referent <constraint>)}
   -{ (<constraint> ^handle <value>)
      (<constraint> ^property <p*3>)
      (<p*3> ^{ << name handle >> <a*3> } { <> category <prop> })}
   -{ (<pr> ^predicates <p*2>)
      (<constraint>
            ^{ << movable category number quantity type multiple >> <prop> } <value>)}
   -{ (<constraint> ^referent <r*1>)
      (<r*1> ^handle <value>)
      (<constraint> ^property <p*1>)
      (<p*1> ^{ << name handle >> <a*2> } <prop>)}
    (<constraint> ^handle <h*1>)
    -->
    (<pr> ^predicates-copied true +)
}

sp {ground-referent*apply*failed-grounding*property3
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <constraint>)
    (<constraint>
          -^{ << movable category type number quantity multiple handle >> <a*3> } <v*2>)
   -{ (<constraint> ^referent <r*1>)
      (<r*1> ^handle <value>)
      (<constraint> ^property <p*1>)
      (<p*1> ^{ << name handle >> <a*2> } <prop>)}
    -->
    (<pr> ^predicates-copied true +)
}

sp {ground-referent*apply*failed-grounding*property2
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<pr> ^predicates <pred>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <c*1>)
    (<c*1>
          ^{ << movable category number quantity type multiple >> <prop> } <value>)
    -->
    (<pr> ^predicates-copied true +)
    (<pred> ^<prop> <value> +)
}

sp {ground-referent*apply*failed-grounding*property17
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<pr> ^predicates <pred>)
    (<pred> ^category <value>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <constraint>)
   -{ (<constraint> ^property <p*1>)
      (<p*1> ^handle { << property >> <h*1> })}
    (<constraint> -^item-type { << predicate property >> <i*1> })
    (<constraint>
          -^{ << movable category number quantity type multiple >> <a*2> } <x>)
    (<constraint> ^handle <value>)
    -->
    (<pr> ^predicates-copied true +)
}

sp {ground-referent*apply*failed-grounding*property16-2*modi*property
    (state <s> ^proto-referent <pr>)
    (<pr> -^predicates-copied true)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<pr> ^predicates <pred>)
    (<s> ^superstate <s*3>)
    (<s> ^superstate <s*2>)
    (<s*3> ^operator <o*3>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding >> <n*1> })
    (<o*3> ^{ << double-constraints constraints >> <a*2> } <v*2>)
    (<v*2> ^constraint <constraint2>)
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint { <> <constraint2> <constraint> })
    (<constraint> -^relation <r*1>)
   -{ (<constraint> ^property <p*1>)
      (<p*1> ^handle { << property shape >> <h*1> })}
    (<constraint> -^item-type { << predicate property >> <i*1> })
    (<constraint> ^modifier true)
    (<constraint> ^handle { <> all <> some <> many <> your <> one <value> })
    (<pr> -^{ << handle name >> <a*3> } <value>)
    (<pred> -^category <value>)
    (<constraint2> ^property <value2>)
    (<value2> ^handle property)
    -->
    (<pr> ^predicates-copied true +)
    (<pred> ^property-modifier <constraint> +)
    (<constraint> ^modifying <constraint2> +)
    (write (crlf) |Add predicate 16-mod-property: | <pred> | ^property-modifier | <constraint>)
}

sp {ground-referent*apply*failed-grounding*property16-2*modi*relation
    (state <s> ^proto-referent <pr>)
    (<pr> -^predicates-copied true)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<pr> ^predicates <pred>)
    (<s> ^superstate <s*3>)
    (<s> ^superstate <s*2>)
    (<s*3> ^operator <o*3>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding >> <n*1> })
    (<o*3> ^{ << double-constraints constraints >> <a*2> } <v*2>)
    (<v*2> ^constraint <constraint2>)
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint { <> <constraint2> <constraint> })
    (<constraint> -^relation <r*1>)
   -{ (<constraint> ^property <p*1>)
      (<p*1> ^handle { << property shape >> <h*1> })}
    (<constraint> -^item-type { << predicate property >> <i*1> })
    (<constraint> ^modifier true)
    (<constraint> ^handle { <> all <> some <> many <> your <> one <value> })
    (<pr> -^{ << handle name >> <a*3> } <value>)
    (<pred> -^category <value>)
    (<constraint2> ^relation <value2>)
    -->
    (<pr> ^predicates-copied true +)
    (<value2> ^predicates <constraint> +)
    (write (crlf) |Add predicate 16-mod: | <value2> | ^property | <constraint>)
}

sp {ground-referent*apply*failed-grounding*property16
    (state <s> ^proto-referent <pr>)
    (<pr> -^predicates-copied true)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<pr> ^predicates <pred>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <constraint>)
    (<constraint> -^modifier true)
    (<constraint> -^relation <r*1>)
   -{ (<constraint> ^property <p*1>)
      (<p*1> ^handle { << property shape >> <h*1> })}
    (<constraint> -^item-type { << predicate property >> <i*1> })
    (<constraint> ^handle { <> all <> some <> many <> your <> one <value> })
    (<pr> -^{ << handle name >> <a*2> } <value>)
    (<pred> -^category <value>)
    -->
    (<pr> ^predicates-copied true +)
    (<pred> ^handle <value> +)
}

sp {ground-referent*apply*failed-grounding*property15
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<pr> ^predicates <pred>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <constraint>)
    (<constraint> ^referent <ref>)
    (<ref> -^property <p*1>)
    (<ref> ^handle <value>)
    (<pr> -^{ << handle name >> <a*2> } <value>)
    -->
    (<pr> ^predicates-copied true +)
    (<pred> ^handle <value> +)
}

sp {ground-referent*apply*failed-grounding*property1
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<pr> ^predicates <pred>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <constraint>)
    (<constraint> ^referent <ref>)
    (<ref> ^handle <value>)
    (<pr> -^{ << handle name >> <a*3> } <value>)
    (<ref> ^property <p*1>)
    (<p*1> ^{ << name handle >> <a*2> } <prop>)
    -->
    (<pr> ^predicates-copied true +)
    (<pred> ^<prop> <value> +)
}

sp {ground-referent*apply*failed-grounding*property
    (state <s> ^proto-referent <pr>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<pr> ^predicates <pred>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << create-hypothetical quantifier failed-grounding index-semantic-memory >> <n*1> })
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <constraint>)
    (<constraint> ^handle <value>)
    (<pr> -^{ << handle name category >> <a*3> } <value>)
    (<constraint> ^property <p*1>)
    (<p*1> ^{ << name handle >> <a*2> } { <> category <prop> })
    (<pred> -^<prop> <p*2>)
    -->
    (<pr> ^predicates-copied true +)
    (<pred> ^<prop> <value> +)
}

sp {ground-referent*apply*failed-grounding*indefinite*category
    (state <s> ^constraint-lt <c*1>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<c*1> ^specifier indefinite)
    (<s> ^operator <o*1>)
    (<o*1> ^name failed-grounding)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*2>)
    (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
    (<v*1> ^constraint <con>)
    (<con> ^handle <obj-type>)
    (<con> ^property <p*1>)
    (<p*1> ^handle category)
    -->
    (<s> ^proto-referent <pr> +)
    (<pr> ^predicates <pred> +)
    (<pr> ^handle (make-constant-symbol new-object-id) +)
    (<pr> ^item-type <obj-type> +)
    (<pred> ^visibility unknown-visible +)
    (<pred> ^dialog-object true +)
    (<pred> ^category <obj-type> +)
}

sp {ground-referent*apply*failed-grounding*indefinite*non-category
    (state <s> ^constraint-lt <c*1>)
   -{ (<s> ^superstate <s*2>)
      (<s*2> ^operator <o*2>)
      (<o*2> ^{ << double-constraints constraints >> <a*1> } <v*1>)
      (<v*1> ^constraint <c*2>)
      (<c*2> ^property <p*1>)
      (<p*1> ^handle category)}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<c*1> ^specifier indefinite)
    (<s> ^operator <o*1>)
    (<o*1> ^name failed-grounding)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    -->
    (<s> ^proto-referent <pr> +)
    (<pr> ^predicates <pred> +)
    (<pr> ^handle (make-constant-symbol new-object-id) +)
    (<pr> ^item-type object +)
    (<pred> ^visibility unknown-visible +)
    (<pred> ^dialog-object true +)
    (<pred> ^category object +)
}

sp {ground-referent*apply*failed-grounding*location2
    (state <s> ^constraint <ref>)
   -{ (<s> ^constraint-lt <c*1>)
      (<c*1> ^specifier indefinite)}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<ref> ^visibility not-visible)
    (<s> ^operator <o*1>)
    (<o*1> ^name failed-grounding)
    (<ref> ^predicates <p*2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    (<ref> ^property <p*1>)
    (<p*1> ^handle { << location name >> <h*1> })
    -->
    (<s> ^proto-referent <ref> +)
}

sp {ground-referent*apply*failed-grounding*location
    (state <s> ^constraint <ref>)
   -{ (<ref> ^visibility not-visible)
      (<ref> ^predicates <p*1>)}
   -{ (<s> ^constraint-lt <c*1>)
      (<c*1> ^specifier indefinite)}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^operator <o*1>)
    (<o*1> ^name failed-grounding)
    (<ref> ^item-type <item-type>)
    (<ref> ^handle <handle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    (<ref> ^property <prop>)
    (<prop> ^handle { << location name >> <h*1> })
    -->
    (<s> ^proto-referent <ref2> +)
    (<ref2> ^handle <handle> +)
    (<ref2> ^property <prop> +)
    (<ref2> ^item-type <item-type> +)
    (<ref2> ^visibility not-visible +)
    (<ref2> ^predicates <pred> +)
    (<pred> ^dialog-object true +)
    (<pred> ^category object +)
}

sp {ground-referent*apply*failed-grounding*category
    (state <s> ^constraint <con>)
   -{ (<s> ^constraint-lt <c*1>)
      (<c*1> ^specifier indefinite)}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^operator <o*1>)
    (<o*1> ^name failed-grounding)
    (<con> ^handle <cat>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    (<con> ^property <p*1>)
    (<p*1> ^handle category)
    -->
    (<s> ^proto-referent <pr> +)
    (<pr> ^predicates <pred> +)
    (<pr> ^handle (make-constant-symbol new-object-id) +)
    (<pr> ^item-type <cat> +)
    (<pred> ^visibility not-visible +)
    (<pred> ^dialog-object true +)
    (<pred> ^category <cat> +)
}

sp {ground-referent*apply*failed-grounding
    (state <s> ^top-state <t*1>)
   -{ (<s> ^constraint <c*2>)
      (<c*2> ^property <p*1>)
      (<p*1> ^handle { << name location category >> <h*1> })}
   -{ (<s> ^constraint-lt <c*1>)
      (<c*1> ^specifier indefinite)}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name evaluate-operator)}
    (<s> ^operator <o*1>)
    (<o*1> ^name failed-grounding)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <objs>)
    -->
    (<s> ^proto-referent <pr> +)
    (<pr> ^predicates <pred> +)
    (<pr> ^handle (make-constant-symbol new-object-id) +)
    (<pr> ^item-type object +)
    (<pred> ^visibility not-visible +)
    (<pred> ^dialog-object true +)
    (<pred> ^category object +)
}

sp {ground-referent*propose*failed-grounding
    (state <s> ^proto-referents none)
    (<s> ^name ground-referent)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name failed-grounding +)
}

sp {apply*tested-referent*monitor*fail*remove-current-referent
    (state <s> ^operator <o*1>)
    (<o*1> ^name tested-referent)
    (<s> ^constraints <cs>)
    (<cs> ^referent <obj>)
   -{ (<s> ^candidate-set <c*1>)
      (<c*1> ^proto-referent <p*1>)
      (<p*1> ^object <obj>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^parameter <p>)
    (<so> ^{ << double-constraints constraints >> <a*1> } <cs>)
    -->
    (<cs> ^referent <obj> -)
}

sp {apply*tested-referent*copy-proto-referent*no-multiple
    (state <s> ^operator <o>)
    (<o> ^name tested-referent)
    (<o> ^proto-referent <p*1>)
    (<s> ^constraints <cons>)
    (<p*1> ^object <obj>)
    -->
    (<cons> ^referent <obj> +)
}

sp {apply*tested-referent*monitor
    (state <s> ^operator <o>)
    (<o> ^name tested-referent)
    (<o> ^proto-referent <p*1>)
    (<p*1> ^object <obj>)
    (<obj> ^handle <id>)
    -->
    
}

sp {apply*tested-referent
    (state <s> ^superstate <s*1>)
   -{ (<s> ^candidate-set <c*1>)
      (<c*1> ^proto-referent <p*1>)
      (<p*1> ^object <obj>)
     -{ (<s> ^constraints <c*2>)
        (<c*2> ^referent <obj>)}}
    (<s> ^operator <o*1>)
    (<o*1> ^name tested-referent)
    (<s*1> ^operator <so>)
    (<so> ^parameter <p>)
    (<so> ^{ << double-constraints constraints >> <a*1> } <c>)
    -->
    (<c> ^ground-tested <p> +)
}

sp {ground-referent*propose*tested-referent
    (state <s> ^name ground-referent)
    (<s> ^candidate-set <c*1>)
    (<c*1> ^proto-referent <p>)
    (<p> ^constraint-count 0)
    (<p> ^object <r>)
   -{ (<s> ^constraints <c*2>)
      (<c*2> ^referent <r>)}
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name tested-referent +)
    (<op> ^proto-referent <p> +)
}

sp {ground-referent*apply*index-scene-objects*demonstrative*create*candidates*failure
    (state <s> ^candidate-set <cand>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^world <w*1>)
      (<w*1> ^{ << robot objects >> <a*1> } <v*1>)
      (<v*1> ^object <obj>)
      (<obj> ^predicates <p*1>)
      (<p*1> ^indicated pointed)}
    (<s> ^operator <o>)
    (<o> ^specifier demonstrative)
    (<o> ^name index-scene-objects)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^constraints <c>)
    (<so> ^parameter <p>)
    -->
    (<c> ^failed-grounding <p> +)
    (<cand> ^generated-candidates true +)
}

sp {ground-referent*apply*index-scene-objects*demonstrative*create*candidates
    (state <s> ^operator <o>)
    (<o> ^specifier demonstrative)
    (<o> ^name index-scene-objects)
    (<s> ^constraint-count <cc>)
    (<s> ^candidate-set <cand>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^{ << robot objects >> <a*1> } <v*1>)
    (<v*1> ^object <obj>)
    (<obj> ^predicates <p*1>)
    (<p*1> ^indicated pointed)
    -->
    (<cand> ^proto-referent <pr> +)
    (<pr> ^constraint-count <cc> +)
    (<pr> ^object <obj> +)
}

sp {ground-referent*apply*index-scene-objects*create*candidates*parallel
    (state <s> ^operator <o>)
    (<o> ^name index-scene-objects)
    (<s> ^constraint-count <cc>)
    (<s> ^candidate-set <cand>)
    -->
    (<cand> ^generated-candidates true +)
}

sp {ground-referent*apply*index-scene-objects*create*candidate*indefinite
    (state <s> ^operator <o>)
    (<o> ^specifier indefinite)
    (<o> ^name index-scene-objects)
    (<s> ^constraint-count <cc>)
    (<s> ^candidate-set <cand>)
    -->
    (<cand> ^proto-referent <pr> +)
    (<pr> ^constraint-count <cc> +)
}

sp {ground-referent*apply*index-scene-objects*create*candidates*dialog*it*failed
    (state <s> ^constraint-count <cc>)
   -{ (<s> ^segment <s*5>)
      (<s*5> ^dialog-object-list-access <d*2>)
      (<d*2> ^next <n*1>)
      (<n*1> ^referent <r*2>)
      (<r*2> ^predicates <p*3>)
      (<p*3> ^category { << block object >> <c*2> })}
   -{ (<s> ^segment <s*4>)
      (<s*4> ^dialog-object-list-access <d*1>)
      (<d*1> ^referent <r*1>)
      (<r*1> ^predicates <p*2>)
      (<p*2> ^category { << block object >> <c*1> })}
   -{ (<s> ^segment <s*2>)
      (<s*2> ^merged-assigner <m*1>)
      (<m*1> ^parent-receiver <p*1>)
      (<p*1> ^semantics <s*3>)
      (<s*3> ^{ << agent arg1 >> <a*1> } <obj>)}
    (<s> ^operator <o>)
    (<o> ^specifier it)
    (<o> ^name index-scene-objects)
    (<s> ^candidate-set <cand>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^constraints <c>)
    (<so> ^parameter <p>)
    -->
    (<c> ^ground-tested <p> +)
}

sp {ground-referent*apply*index-scene-objects*create*candidates*dialog*it*next*predicate
    (state <s> ^operator <o>)
    (<o> ^specifier it)
    (<o> ^name index-scene-objects)
    (<s> ^constraint-count <cc>)
    (<s> ^candidate-set <cand>)
    (<s> ^segment <s*2>)
    (<s*2> ^dialog-object-list-access <d*2>)
    (<s> ^segment <s*1>)
    (<s*1> ^dialog-object-list-access <d*1>)
    (<d*1> ^referent <r*1>)
    (<r*1> ^predicates <p*1>)
    (<p*1> ^category location)
    (<d*2> ^next <n*1>)
    (<n*1> ^referent <obj>)
   -{ (<obj> ^property <p*3>)
      (<p*3> ^handle category)}
    (<s> -^possible-it <obj>)
    (<obj> ^predicates <p*2>)
    (<p*2> ^category { << block object >> <c*1> })
    -->
    (<cand> ^proto-referent <pr> +)
    (<pr> ^constraint-count <cc> +)
    (<pr> ^object <obj> +)
}

sp {ground-referent*apply*index-scene-objects*create*candidates*dialog*it*next
    (state <s> ^operator <o>)
    (<o> ^specifier it)
    (<o> ^name index-scene-objects)
    (<s> ^constraint-count <cc>)
    (<s> ^candidate-set <cand>)
    (<s> ^segment <s*2>)
    (<s*2> ^dialog-object-list-access <d*2>)
    (<s> ^segment <s*1>)
    (<s*1> ^dialog-object-list-access <d*1>)
    (<d*1> ^referent <r*1>)
    (<r*1> ^predicates <p*1>)
    (<p*1> ^category { << location location1 >> <c*1> })
    (<d*2> ^next <n*1>)
    (<n*1> ^referent <obj>)
    (<s> -^possible-it <obj>)
    (<obj> ^property <p*2>)
    (<p*2> ^handle category)
    -->
    (<cand> ^proto-referent <pr> +)
    (<pr> ^constraint-count <cc> +)
    (<pr> ^object <obj> +)
}

sp {ground-referent*apply*index-scene-objects*create*candidates*dialog*it*predicate
    (state <s> ^constraint-count <cc>)
    (<s> -^possible-it <p*1>)
    (<s> ^operator <o>)
    (<o> ^specifier it)
    (<o> ^name index-scene-objects)
    (<s> ^candidate-set <cand>)
    (<s> ^segment <s*1>)
    (<s*1> ^dialog-object-list-access <d*1>)
    (<d*1> ^referent <obj>)
    (<obj> ^predicates <p*2>)
    (<p*2> ^category { <> concept <> location <> location1 <c*1> })
    -->
    (<cand> ^proto-referent <pr> +)
    (<pr> ^constraint-count <cc> +)
    (<pr> ^object <obj> +)
}

sp {ground-referent*apply*index-scene-objects*create*candidates*dialog*it
    (state <s> ^constraint-count <cc>)
    (<s> -^possible-it <p*1>)
    (<s> ^operator <o>)
    (<o> ^specifier it)
    (<o> ^name index-scene-objects)
    (<s> ^candidate-set <cand>)
    (<s> ^segment <s*1>)
    (<s*1> ^dialog-object-list-access <d*1>)
    (<d*1> ^referent <obj>)
    (<obj> ^property <p*2>)
    (<p*2> ^handle category)
    -->
    (<cand> ^proto-referent <pr> +)
    (<pr> ^constraint-count <cc> +)
    (<pr> ^object <obj> +)
}

sp {ground-referent*apply*index-scene-objects*create*candidates*dialog*it*arg1
    (state <s> ^operator <o>)
    (<o> ^specifier it)
    (<o> ^name index-scene-objects)
    (<s> ^possible-it <obj>)
    (<s> ^constraint-count <cc>)
    (<s> ^candidate-set <cand>)
    -->
    (<cand> ^proto-referent <pr> +)
    (<pr> ^constraint-count <cc> +)
    (<pr> ^object <obj> +)
}

sp {ground-referent*apply*index-scene-objects*it-agent-subclause
    (state <s> ^name ground-referent)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <ma>)
    (<ma> ^parent-receiver <p*1>)
    (<p*1> ^semantics <s*1>)
    (<s*1> ^{ << arg1 agent >> <a*1> } <obj>)
   -{ (<seg> ^merged-assigner { < <ma> <ma2> })
      (<ma2> ^parent-receiver <p*2>)
      (<p*2> ^semantics <s*2>)
      (<s*2> ^{ << arg1 agent >> <a*2> } <obj>)}
    (<obj> ^predicates <p*3>)
    (<p*3> ^category <c*1>)
    -->
    (<s> ^possible-it <obj> +)
}

sp {ground-referent*apply*index-scene-objects*subclause-it-arg1-2
    (state <s> ^name ground-referent)
    (<s> ^segment <seg>)
    (<seg> ^merged-assigner <ma>)
    (<ma> ^parent-receiver <p*2>)
    (<p*2> ^semantics <s*2>)
    (<s*2> ^if-subclause <i*1>)
    (<i*1> ^{ << arg1 agent >> <a*2> } <obj>)
   -{ (<seg> ^merged-assigner { < <ma> <ma2> })
      (<ma2> ^parent-receiver <p*3>)
      (<p*3> ^semantics <s*3>)
      (<s*3> ^{ << arg1 agent >> <a*3> } <obj>)}
   -{ (<ma> ^parent-receiver <p*1>)
      (<p*1> ^semantics <s*1>)
      (<s*1> ^{ << arg1 agent >> <a*1> } <obj>)}
    (<obj> ^object-instance true)
    (<obj> ^handle <h*1>)
    -->
    (<s> ^possible-it <obj> +)
}

sp {ground-referent*apply*index-scene-objects*subclause-it-arg1
    (state <s> ^name ground-referent)
    (<s> ^segment <seg>)
    (<seg> ^merged-assigner <ma>)
    (<ma> ^parent-receiver <p*2>)
    (<p*2> ^semantics <s*2>)
    (<s*2> ^if-subclause <i*1>)
    (<i*1> ^{ << arg1 agent >> <a*2> } <obj>)
   -{ (<seg> ^merged-assigner { < <ma> <ma2> })
      (<ma2> ^parent-receiver <p*3>)
      (<p*3> ^semantics <s*3>)
      (<s*3> ^{ << arg1 agent >> <a*3> } <obj>)}
   -{ (<ma> ^parent-receiver <p*1>)
      (<p*1> ^semantics <s*1>)
      (<s*1> ^{ << arg1 agent >> <a*1> } <obj>)}
    (<obj> ^predicates <p*4>)
    (<p*4> ^category <c*1>)
    -->
    (<s> ^possible-it <obj> +)
}

sp {ground-referent*apply*index-scene-objects*it-arg1
    (state <s> ^name ground-referent)
    (<s> ^segment <seg>)
    (<seg> ^merged-assigner <ma>)
    (<ma> ^parent-receiver <p*1>)
    (<p*1> ^semantics <s*1>)
    (<s*1> ^{ << arg1 agent >> <a*1> } <obj>)
   -{ (<seg> ^merged-assigner { < <ma> <ma2> })
      (<ma2> ^parent-receiver <p*2>)
      (<p*2> ^semantics <s*2>)
      (<s*2> ^{ << arg1 agent >> <a*2> } <obj>)}
    (<obj> ^predicates <p*3>)
    (<p*3> ^category <c*1>)
    -->
    (<s> ^possible-it <obj> +)
}

sp {ground-referent*apply*index-scene-objects*create*candidates*dialog
    (state <s> ^operator <o>)
    (<o> -^possessive true)
    (<o> -^specifier distinct)
    (<o> ^name index-scene-objects)
    (<s> ^constraint-count <cc>)
    (<s> ^candidate-set <cand>)
    (<o> ^specifier { << definite universal >> <s*1> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^objects <o*1>)
    (<o*1> ^object <obj>)
   -{ (<s> ^constraint-lt <c*1>)
      (<c*1> ^number singular)
      (<obj> ^predicates <p*1>)
      (<p*1> ^multiple true)}
    (<obj> -^dialog-ignore true)
    -->
    (<cand> ^proto-referent <pr> +)
    (<pr> ^constraint-count <cc> +)
    (<pr> ^object <obj> +)
}

sp {ground-referent*apply*index-scene-objects*create*object*possessive
    (state <s> ^operator <o>)
    (<o> ^possessive true)
    (<o> ^name index-scene-objects)
    (<s> ^constraint-count <cc>)
    (<s> ^candidate-set <cand>)
    (<o> ^specifier { << definite universal >> <s*1> })
    -->
    (<cand> ^proto-referent none +)
    (<cand> ^possessive true +)
}

sp {ground-referent*apply*index-scene-objects*create*candidates
    (state <s> ^constraint-count <cc>)
   -{ (<s> ^segment <s*1>)
      (<s*1> ^hypothetical true)}
    (<s> ^operator <o>)
    (<o> -^possessive true)
    (<o> ^name index-scene-objects)
    (<s> ^candidate-set <cand>)
    (<o> ^specifier { << definite universal >> <s*2> })
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*1> ^object <obj>)
    -->
    (<cand> ^proto-referent <pr> +)
    (<pr> ^constraint-count <cc> +)
    (<pr> ^object <obj> +)
}

sp {ground-referent*apply*index-scene-objects*personal*create*robot
    (state <s> ^operator <o>)
    (<o> ^specifier personal)
    (<o> ^name index-scene-objects)
    (<s> ^constraint-count <cc>)
    (<s> ^candidate-set <cand>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <obj>)
    -->
    (<cand> ^proto-referent <pr> +)
    (<pr> ^constraint-count <cc> +)
    (<pr> ^object <obj> +)
}

sp {ground-referent*propose*index-scene-object*possessive
    (state <s> ^name ground-referent)
    (<s> ^constraint-lt <c*1>)
    (<c*1> ^possessive true)
    (<s> ^operator <op> +)
    (<op> ^name index-scene-objects)
    -->
    (<op> ^possessive true +)
}

sp {ground-referent*propose*index-scene-object*multiple
    (state <s> ^name ground-referent)
    (<s> ^constraint <c*1>)
    (<c*1> ^multiple true)
    (<s> ^operator <op> +)
    (<op> ^name index-scene-objects)
    -->
    (<op> ^multiple true +)
}

sp {ground-referent*propose*index-scene-object*no-specifier
    (state <s> ^name ground-referent)
    (<s> ^constraint-lt <lli>)
    (<lli> -^specifier <s*1>)
    (<lli> -^demonstrative true)
    (<s> ^candidate-set <cand>)
    (<cand> -^generated-candidates true)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name index-scene-objects +)
    (<op> ^specifier definite +)
}

sp {ground-referent*propose*index-scene-object*demonstrative
    (state <s> ^name ground-referent)
    (<s> ^constraint-lt <lli>)
    (<lli> ^demonstrative true)
    (<s> ^candidate-set <cand>)
    (<cand> -^generated-candidates true)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name index-scene-objects +)
    (<op> ^specifier demonstrative +)
}

sp {ground-referent*propose*index-scene-object
    (state <s> ^name ground-referent)
    (<s> ^constraint-lt <lli>)
    (<lli> -^demonstrative true)
    (<s> ^candidate-set <cand>)
    (<cand> -^generated-candidates true)
    (<lli> ^specifier <specifier>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name index-scene-objects +)
    (<op> ^specifier <specifier> +)
}

sp {ground-referent*apply*index-object-scene-relation*remove-violated
    (state <s> ^operator <o>)
    (<o> ^name index-object-scene-relation)
    (<o> ^relation-constraint <pc>)
    (<s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr>)
    (<pr> ^violates <pc>)
    -->
    (<cs> ^proto-referent <pr> -)
}

sp {ground-referent*apply*index-object-scene-relationmark*satisfied
    (state <s> ^operator <o>)
    (<o> ^name index-object-scene-relation)
    (<o> ^relation-constraint <pc>)
    (<s> ^candidate-set <c*1>)
    (<c*1> ^proto-referent <pr>)
    (<pr> ^passes <pc>)
    (<pr> ^constraint-count <cc>)
    -->
    (<pr> ^constraint-count <cc> -)
    (<pr> ^constraint-count (- <cc> 1) +)
}

sp {ground-referent*apply*index-object-scene-relation*mark*checked*failed
    (state <s> ^operator <o>)
    (<o> ^name index-object-scene-relation)
    (<o> ^relation-constraint <pc>)
    (<s> ^candidate-set <cs>)
    (<cs> -^success-tested <pc>)
    (<cs> ^fail-tested <pc>)
    -->
    (<cs> ^satisfied-property <pc> +)
}

sp {ground-referent*apply*index-object-scene-relation*mark*checked
    (state <s> ^operator <o>)
    (<o> ^name index-object-scene-relation)
    (<o> ^relation-constraint <pc>)
    (<s> ^candidate-set <cs>)
    (<cs> ^success-tested <pc>)
    -->
    (<cs> ^satisfied-property <pc> +)
}

sp {apply*index-object-scene-relation*passes
    (state <s> ^operator <op>)
    (<op> ^name index-object-scene-relation)
    (<op> ^relation-constraint <rc>)
    (<s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr>)
    (<rc> ^2 <r-2>)
    (<rc> ^handle <sr>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <wsr>)
    (<wsr> ^handle <sr>)
    (<wsr> ^instance <pwsr>)
    (<pwsr> ^2 <r-2>)
    (<pwsr> ^1 <r-1>)
    (<pr> ^object <r-1>)
    -->
    (<pr> ^passes <rc> +)
    (<cs> ^success-tested <rc> +)
}

sp {ground-referent*apply*index-object-scene-relation*violates
    (state <s> ^operator <o>)
    (<o> ^name index-object-scene-relation)
    (<o> ^relation-constraint <rc>)
    (<s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr>)
    (<rc> ^2 <r-2>)
    (<rc> ^handle <sr>)
    (<pr> ^object <r-1>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^world <w*1>)
      (<w*1> ^predicates <p*1>)
      (<p*1> ^predicate <wsr>)
      (<wsr> ^handle <sr>)
      (<wsr> ^instance <pwsr>)
      (<pwsr> ^2 <r-2>)
      (<pwsr> ^1 <r-1>)}
    -->
    (<pr> ^violates <rc> +)
    (<cs> ^fail-tested <rc> +)
}

sp {ground-referent*propose*index-scene-relation
    (state <s> ^name ground-referent)
    (<s> ^candidate-set <cs>)
    (<cs> ^generated-candidates true)
    (<s> ^constraint <c*1>)
    (<c*1> ^relation <r>)
    (<cs> -^satisfied-property <r>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name index-object-scene-relation +)
    (<op> ^relation-constraint <r> +)
}

sp {ground-referent*apply*index-object-properties*remove-violated
    (state <s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr>)
    (<pr> ^violates <pc>)
    (<s> ^operator <o>)
    (<o> ^property-constraint <pc>)
    (<o> ^name { << index-object-properties index-dialog-properties >> <n*1> })
    -->
    (<cs> ^proto-referent <pr> -)
}

sp {ground-referent*apply*index-object-properties*mark*satisfied
    (state <s> ^candidate-set <c*1>)
    (<c*1> ^proto-referent <pr>)
    (<pr> ^passes <pc>)
    (<s> ^operator <o>)
    (<o> ^property-constraint <pc>)
    (<pr> ^constraint-count <cc>)
    (<o> ^name { << index-object-properties index-dialog-properties >> <n*1> })
    -->
    (<pr> ^constraint-count <cc> -)
    (<pr> ^constraint-count (- <cc> 1) +)
}

sp {ground-referent*apply*index-object-properties*mark*checked*failed
    (state <s> ^candidate-set <cs>)
    (<cs> ^fail-tested <pc>)
    (<cs> -^success-tested <pc>)
    (<s> ^operator <o>)
    (<o> ^property-constraint <pc>)
    (<o> ^name { << index-object-properties index-dialog-properties >> <n*1> })
    -->
    (<cs> ^satisfied-property <pc> +)
}

sp {ground-referent*apply*index-object-properties*mark*checked
    (state <s> ^candidate-set <cs>)
    (<cs> ^success-tested <pc>)
    (<s> ^operator <o>)
    (<o> ^property-constraint <pc>)
    (<o> ^name { << index-object-properties index-dialog-properties >> <n*1> })
    -->
    (<cs> ^satisfied-property <pc> +)
}

sp {ground-referent*apply*index-object-properties*passes*named
    (state <s> ^operator <o>)
    (<o> ^name index-object-properties)
    (<o> ^property-constraint <pc>)
    (<s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr>)
    (<pc> ^value <prop-val>)
    (<pr> ^object <o*1>)
    (<o*1> ^handle <prop-val>)
    -->
    (<pr> ^passes <pc> +)
    (<cs> ^success-tested <pc> +)
}

sp {ground-referent*apply*index-object-properties*passes
    (state <s> ^operator <o>)
    (<o> ^name index-object-properties)
    (<o> ^property-constraint <pc>)
    (<s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr>)
    (<pc> ^value <prop-val>)
    (<pc> ^property <prop-name>)
    (<pr> ^object <o*1>)
    (<o*1> ^predicates <p*1>)
    (<p*1> ^<prop-name> <prop-val>)
    -->
    (<pr> ^passes <pc> +)
    (<cs> ^success-tested <pc> +)
}

sp {ground-referent*apply*index-object-properties*violates
    (state <s> ^operator <o>)
    (<o> ^name index-object-properties)
    (<o> ^property-constraint <pc>)
    (<s> ^candidate-set <cs>)
    (<cs> ^proto-referent <pr>)
    (<pc> ^value <prop-val>)
    (<pc> ^property { <> generic <prop-name> })
    (<pr> ^object <obj>)
    (<obj> -^handle <prop-val>)
    (<obj> ^predicates <preds>)
   -{ (<pc> ^value <p-value>)
      (<preds> ^<prop-name> <p-value>)}
    (<preds> -^<prop-name> <prop-val>)
    -->
    (<pr> ^violates <pc> +)
    (<cs> ^fail-tested <pc> +)
}

sp {ground-referent*compare*index-object-properties2
    (state <s> ^name ground-referent)
    (<s> ^operator <op2> +)
    (<op2> ^name index-object-properties)
    (<s> ^operator <op1> +)
    (<op1> ^name index-object-properties)
    (<op2> ^property-constraint <p*2>)
    (<op1> ^property-constraint <p*1>)
    (<p*2> ^value <v*1>)
    (<p*1> ^value { > <v*1> <pc> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {ground-referent*propose*index-object-properties
    (state <s> ^name ground-referent)
    (<s> ^property-constraint <pc>)
    (<pc> -^property grammatical-property)
    (<s> ^candidate-set <cs>)
    (<cs> -^satisfied-property <pc>)
    (<cs> ^generated-candidates true)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name index-object-properties +)
    (<op> ^property-constraint <pc> +)
}

sp {ground-referent*elaborate*no-proto-referents*multiple
    (state <s> ^name ground-referent)
    (<s> -^proto-referents none)
    (<s> ^candidate-set <cs>)
   -{ (<cs> ^proto-referent <p*1>)
      (<p*1> ^object <obj>)
     -{ (<cs> ^proto-referent <p*2>)
        (<p*2> ^object { <> <obj> <o*1> })}}
    (<cs> ^generated-candidates true)
    -->
    (<s> ^proto-referents multiple +)
}

sp {ground-referent*elaborate*no-proto-referents*one
    (state <s> ^name ground-referent)
    (<s> ^candidate-set <cs>)
    (<cs> ^generated-candidates true)
    (<cs> ^proto-referent <p*1>)
    (<p*1> ^object <obj>)
   -{ (<cs> ^proto-referent <p*2>)
      (<p*2> ^object { <> <obj> <o*1> })}
    -->
    (<s> ^proto-referents one +)
}

sp {ground-referent*elaborate*proto-referents*none
    (state <s> ^name ground-referent)
    (<s> ^candidate-set <cs>)
   -{ (<cs> ^proto-referent <p*1>)
      (<p*1> ^object <obj>)}
    (<cs> ^generated-candidates true)
    -->
    (<s> ^proto-referents none +)
}

sp {ground-referent*elaborate*constraint-processing-finished
    (state <s> ^name ground-referent)
    (<s> ^candidate-set <c*1>)
    (<c*1> ^proto-referent <p*1>)
    (<p*1> ^constraint-count 0)
    -->
    (<s> ^constraint-processing-finished true +)
}

sp {ground-referent*elaborate*substate4
    (state <s> ^name ground-referent)
    (<s> ^constraint <con>)
    (<con> ^{ << movable category type >> <type> } <value>)
    -->
    (<s> ^property-constraint <pc> +)
    (<pc> ^property <type> +)
    (<pc> ^value <value> +)
}

sp {ground-referent*elaborate*substate3
    (state <s> ^name ground-referent)
    (<s> ^constraint <con>)
    (<con> ^property <p>)
    (<p> ^handle <property>)
    (<p> ^value <value>)
    -->
    (<s> ^property-constraint <pc> +)
    (<pc> ^property <property> +)
    (<pc> ^value <value> +)
}

sp {ground-referent*elaborate*substate2*subcategory
    (state <s> ^name ground-referent)
    (<s> ^property-constraint <pc>)
    (<s> ^constraint <con>)
    (<con> ^handle <value>)
    (<pc> ^value <value>)
    (<con> ^subcategory <s*1>)
    (<s*1> ^handle <x>)
    (<con> ^property <prop>)
    (<prop> ^{ << name handle >> <a*1> } <property>)
    (<pc> ^property <property>)
    -->
    (<pc> ^value <x> +)
}

sp {ground-referent*elaborate*substate2
    (state <s> ^name ground-referent)
    (<s> ^constraint <con>)
    (<con> ^handle <value>)
    (<con> ^property <prop>)
    (<prop> ^{ << name handle >> <a*1> } <property>)
    -->
    (<s> ^property-constraint <pc> +)
    (<pc> ^property <property> +)
    (<pc> ^value <value> +)
}

sp {ground-referent*elaborate*substate1
    (state <s> ^name ground-referent)
    (<s> ^constraint <con>)
    (<con> ^referent <r*1>)
    (<r*1> ^handle <value>)
    -->
    (<s> ^property-constraint <pc> +)
    (<pc> ^property handle +)
    (<pc> ^value <value> +)
}

sp {ground-referent*elaborate*substate0
    (state <s> ^name ground-referent)
    (<s> ^constraint <con>)
    (<con> ^name <value>)
    (<con> ^property <p*1>)
    (<p*1> ^name <name>)
    -->
    (<s> ^property-constraint <pc> +)
    (<pc> ^property <name> +)
    (<pc> ^value <value> +)
}

sp {ground-referent*elaborate*substate*constraint
    (state <s> ^name ground-referent)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^name ground-referent)
    (<so> ^constraints <c*1>)
    (<c*1> ^constraint <con>)
    -->
    (<s> ^constraint <con> +)
}

sp {ground-referent*constraint-lt2
    (state <s> ^name ground-referent)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name ground-referent)
    (<o> ^double-constraints <d*1>)
    (<d*1> ^lt <x>)
    -->
    (<s> ^constraint-lt <x> +)
}

sp {ground-referent*constraint-lt
    (state <s> ^name ground-referent)
    (<s> ^constraints <c*1>)
    (<c*1> ^lt <x>)
    -->
    (<s> ^constraint-lt <x> +)
}

sp {ground-referent*elaborate*substate*constraints
    (state <s> ^name ground-referent)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^name ground-referent)
    (<so> ^constraints <cons>)
    -->
    (<s> ^constraints <cons> +)
}

sp {ground-referent*elaborate*substate*count
    (state <s> ^name ground-referent)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^name ground-referent)
    (<so> ^constraint-count <cc>)
    -->
    (<s> ^constraint-count <cc> +)
    (<s> ^candidate-set <cs> +)
}

sp {comprehension*apply*ground-referent*zero-constraints
    (state <s> ^name comprehension)
    (<s> ^operator <op1>)
    (<op1> ^constraint-count 0)
    (<op1> ^name ground-referent)
    (<op1> ^parameter <p>)
   -{ (<p> ^lt <l*2>)
      (<l*2> ^demonstrative <d*1>)}
   -{ (<p> ^lt <l*1>)
      (<l*1> ^specifier { << it personal >> <s*1> })}
    (<op1> ^{ << double-constraints constraints >> <a*1> } <c>)
    -->
    (<c> ^failed-grounding <p> +)
    (<c> ^ground-tested <p> +)
    (<p> ^failed-constraint <c> +)
}

sp {comprehension*elaborate*ground-referent*count-constraints*lots
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<op1> ^constraints <con>)
    (<con> ^constraint <c6>)
    (<con> ^constraint { < <c6> <c5> })
    (<con> ^constraint { < <c5> < <c6> <c4> })
    (<con> ^constraint { < <c4> < <c5> < <c6> <c3> })
    (<con> ^constraint { < <c3> < <c4> < <c5> < <c6> <c2> })
    (<con> ^constraint { < <c2> < <c3> < <c4> < <c5> < <c6> <c1> })
    -->
    (<op1> ^constraint-count 6 +)
}

sp {comprehension*elaborate*ground-referent*count-constraints*5
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<op1> ^constraints <con>)
    (<con> ^constraint <c5>)
    (<con> ^constraint { < <c5> <c4> })
    (<con> ^constraint { < <c4> < <c5> <c3> })
    (<con> ^constraint { < <c3> < <c4> < <c5> <c2> })
    (<con> ^constraint { < <c2> < <c3> < <c4> < <c5> <c1> })
    (<con> -^constraint { <> <c1> <> <c2> <> <c3> <> <c4> <> <c5> <c*1> })
    -->
    (<op1> ^constraint-count 5 +)
}

sp {comprehension*elaborate*ground-referent*count-constraints*4
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<op1> ^constraints <con>)
    (<con> ^constraint <c4>)
    (<con> ^constraint { < <c4> <c3> })
    (<con> ^constraint { < <c3> < <c4> <c2> })
    (<con> ^constraint { < <c2> < <c3> < <c4> <c1> })
    (<con> -^constraint { <> <c1> <> <c2> <> <c3> <> <c4> <c*1> })
    -->
    (<op1> ^constraint-count 4 +)
}

sp {comprehension*elaborate*ground-referent*count-constraints*3
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<op1> ^constraints <con>)
    (<con> ^constraint <c3>)
    (<con> ^constraint { < <c3> <c2> })
    (<con> ^constraint { < <c2> < <c3> <c1> })
    (<con> -^constraint { <> <c1> <> <c2> <> <c3> <c*1> })
    -->
    (<op1> ^constraint-count 3 +)
}

sp {comprehension*elaborate*ground-referent*count-constraints*2
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<op1> ^constraints <con>)
    (<con> ^constraint <c2>)
    (<con> ^constraint { < <c2> <c1> })
    (<con> -^constraint { <> <c1> <> <c2> <c*1> })
    -->
    (<op1> ^constraint-count 2 +)
}

sp {comprehension*elaborate*ground-referent*count-constraints*1
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<op1> ^constraints <con>)
    (<con> ^constraint <c1>)
    (<con> -^constraint { <> <c1> <c*1> })
    -->
    (<op1> ^constraint-count 1 +)
}

sp {comprehension*elaborate*ground-referent*count-constraints*0
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<op1> ^constraints <con>)
    (<con> -^constraint <c*1>)
    -->
    (<op1> ^constraint-count 0 +)
}

sp {comprehension*compare*ground-referent*process-semantics
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<s> ^operator <op2> +)
    (<op2> ^name { << ground-new-constraint process-semantics >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*ground-referent*merge*not
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<op1> ^constraints <c*1>)
    (<c*1> ^structure-type DP)
    (<op2> ^assigner <ass>)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*ground-referent*merge*literal
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<op2> ^assigner <ass>)
    (<ass> ^structure-type DP)
    (<ass> ^lt <l*1>)
    (<l*1> ^referent-type literal)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<op1> ^constraints <c*1>)
    (<c*1> ^structure-type DP)
    -->
    (<s> ^operator <op1> -)
}

sp {comprehension*compare*ground-referent*merge
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name merge)
    (<op2> ^assigner <ass>)
    (<ass> ^structure-type DP)
    (<ass> ^lt <l*1>)
    (<l*1> ^referent nil)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    (<op1> ^constraints <c*1>)
    (<c*1> ^structure-type DP)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*ground-referent
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name process-phrase-end)
    (<s> ^operator <op1> +)
    (<op1> ^name ground-referent)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*elaborate-operator*ground-referent
    (state <s> ^name comprehension)
    (<s> ^operator <o> +)
    (<o> ^name ground-referent)
    (<o> ^double-constraints <d*1>)
    (<o> ^constraints <con>)
    (<d*1> ^constraint <x>)
    -->
    (<con> ^constraint <x> +)
}

sp {comprehension*elaborate-operator*ground-referent*parameter-complement
    (state <s> ^name comprehension)
    (<s> ^operator <o> +)
    (<o> ^name ground-referent)
    (<o> ^constraints <con>)
    (<o> ^parameter <p*1>)
    (<p*1> ^complement <c*1>)
    (<c*1> ^constraint <x>)
    -->
    (<con> ^constraint <x> +)
}

sp {comprehension*elaborate-operator*ground-referent*parameter-constraint
    (state <s> ^name comprehension)
    (<s> ^operator <o> +)
    (<o> ^name ground-referent)
    (<o> ^constraints <con>)
    (<o> ^parameter <p*1>)
    (<p*1> ^constraint <x>)
    (<x> ^relation <r*1>)
    -->
    (<con> ^constraint <x> +)
}

sp {comprehension*elaborate-operator*ground-referent*lt
    (state <s> ^name comprehension)
    (<s> ^operator <o> +)
    (<o> ^name ground-referent)
    (<o> ^constraints <con>)
    (<con> ^lt <l*1>)
    (<l*1> ^constraint <x>)
    -->
    (<con> ^constraint <x> +)
}

sp {comprehension*propose*ground-referent*push*complement3
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^new-constraint <n*1>)
    (<seg> ^last-merge <lm>)
    (<lm> ^assigner <as>)
    (<as> ^structure-type PP)
    (<as> ^parent-receiver <obj>)
    (<obj> -^referent <r*1>)
    (<lm> ^receiver <r1>)
    (<r1> ^structure-type PP)
    (<n*1> ^object <obj>)
    (<obj> ^{ << complement complement2 >> <a*1> } <c2>)
    (<c2> ^head <head>)
   -{ (<head> ^constraint <c*1>)
      (<c*1> ^property <p*1>)
      (<p*1> ^type conceptual)}
    (<obj> -^ground-tested <head>)
    (<head> ^structure-type DP)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name ground-referent +)
    (<op> ^constraints <obj> +)
    (<op> ^parameter <head> +)
}

sp {comprehension*propose*ground-referent*push*complement2
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^last-merge <lm>)
    (<lm> ^receiver <r1>)
    (<r1> ^structure-type PP)
    (<lm> ^assigner <as>)
    (<as> ^parent-receiver <a1>)
    (<as> ^structure-type <s*2>)
    (<a1> ^{ << complement complement2 >> <a*1> } <c2>)
    (<c2> ^head <head>)
   -{ (<head> ^ground-tested <head2>)
      (<head> ^head <head2>)}
   -{ (<head> ^head <h*1>)
      (<h*1> ^lt <l*1>)
      (<l*1> ^semantic-entity-type relation)}
    (<head> -^ground-tested <head>)
   -{ (<head> ^constraint <c*1>)
      (<c*1> ^property <p*1>)
      (<p*1> ^type conceptual)}
    (<a1> -^ground-tested <head>)
    (<r1> -^ground-tested <head>)
    (<head> ^structure-type DP)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name ground-referent +)
    (<op> ^constraints <cons> +)
    (<op> ^double-constraints <c2> +)
    (<op> ^double-constraints <head> +)
    (<op> ^parameter <head> +)
}

sp {comprehension*propose*ground-referent*push*complement
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^last-merge <lm>)
    (<lm> ^assigner <as>)
    (<as> ^parent-receiver <a1>)
    (<a1> ^complement <head>)
   -{ (<head> ^ground-tested <head2>)
      (<head> ^head <head2>)}
    (<head> -^ground-tested <head>)
   -{ (<head> ^constraint <c*1>)
      (<c*1> ^property <p*1>)
      (<p*1> ^type conceptual)}
    (<a1> -^ground-tested <head>)
    (<lm> ^receiver <r1>)
    (<r1> -^ground-tested <head>)
    (<head> ^structure-type { << THIS THAT DP >> <st> })
    (<r1> ^structure-type <st>)
    (<as> ^structure-type <s*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name ground-referent +)
    (<op> ^constraints <head> +)
    (<op> ^parameter <head> +)
}

sp {comprehension*propose*ground-referent*push*head
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^last-merge <lm>)
    (<lm> ^assigner <as>)
   -{ (<as> ^lt <l*1>)
      (<l*1> ^referent-type literal)}
    (<as> ^parent-receiver <a1>)
    (<a1> ^head <head>)
    (<head> -^ground-tested <g*1>)
   -{ (<head> ^constraint <c*1>)
      (<c*1> ^property <p*1>)
      (<p*1> ^type conceptual)}
    (<a1> -^ground-tested <head>)
    (<lm> ^receiver <r1>)
    (<r1> -^ground-tested <head>)
    (<head> ^structure-type { << THIS THAT DP >> <st> })
    (<r1> ^structure-type <st>)
    (<as> ^structure-type <s*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name ground-referent +)
    (<op> ^constraints <head> +)
    (<op> ^parameter <head> +)
}

sp {comprehension*propose*ground-referent
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^last-merge <lm>)
    (<lm> ^assigner <as>)
   -{ (<as> ^lt <l*1>)
      (<l*1> ^referent-type literal)}
    (<as> ^parent-receiver <a1>)
    (<a1> -^ground-tested <a1>)
   -{ (<a1> ^constraint <c*1>)
      (<c*1> ^property <p*2>)
      (<p*2> ^type conceptual)}
    (<a1> ^structure-type DP)
    (<lm> ^receiver { <> <a1> <r1> })
    (<a1> -^ground-tested <r1>)
   -{ (<r1> ^lt-referent <l*2>)
      (<l*2> ^property <p*1>)
      (<p*1> ^type conceptual)}
    (<as> ^structure-type <s*2>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name ground-referent +)
    (<op> ^constraints <a1> +)
    (<op> ^parameter <r1> +)
}

sp {apply*ground-new-constraint*referent-nil
    (state <s> ^operator <op>)
    (<op> ^name ground-new-constraint)
    (<op> ^constraint <nc>)
    (<s> ^segment <seg>)
    (<seg> ^new-constraint <nc>)
    (<nc> ^constraint <c*1>)
    (<seg> ^last-merge <l*1>)
    (<l*1> ^receiver <lmr>)
    (<seg> ^semantics <sem>)
    (<c*1> ^relation <rel>)
    (<rel> ^lt <l*2>)
    (<rel> ^head <h*2>)
    (<h*2> ^head <h*3>)
    (<h*3> ^lt-referent <r-2>)
    (<l*2> ^relation <r>)
    (<nc> ^object <pword>)
    (<pword> ^head <h*1>)
    (<h*1> ^lt-referent <sv>)
    -->
    (<seg> ^new-constraint <nc> -)
    (<pword> ^ground-tested <nc> +)
    (<pword> ^ground-tested <lmr> +)
    (<sem> ^relation <rx> +)
    (<rx> ^entity1 <sv> +)
    (<rx> ^relation <r> +)
    (<rx> ^entity2 <r-2> +)
}

sp {apply*ground-new-constraint*remove-no-referent3
    (state <s> ^operator <op>)
    (<op> ^name ground-new-constraint)
    (<op> ^constraint <nc>)
    (<s> ^segment <seg>)
    (<seg> ^new-constraint <nc>)
    (<nc> ^constraint <c>)
    (<seg> ^last-merge <l*1>)
    (<l*1> ^receiver <lmr>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w>)
    (<c> ^relation <spr>)
    (<spr> ^2 <r-2>)
    (<spr> ^handle <sr>)
   -{ (<w> ^predicates <p*1>)
      (<p*1> ^predicate <wsr>)
      (<wsr> ^handle <sr>)
      (<wsr> ^instance <pwsr>)
      (<pwsr> ^2 <r-2>)
      (<pwsr> ^1 <r-1>)}
    (<nc> ^object <pword>)
    (<pword> -^referent <r-1>)
    -->
    (<seg> ^new-constraint <nc> -)
    (<pword> ^ground-tested <nc> +)
    (<pword> ^ground-tested <lmr> +)
}

sp {apply*ground-new-constraint*remove-no-referent2
    (state <s> ^operator <op>)
    (<op> ^name ground-new-constraint)
    (<op> ^constraint <nc>)
    (<s> ^segment <seg>)
    (<seg> ^new-constraint <nc>)
    (<nc> ^constraint <c>)
    (<seg> ^last-merge <l*1>)
    (<l*1> ^receiver <lmr>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w>)
    (<c> ^relation <spr>)
    (<spr> ^2 <r-2>)
    (<spr> ^handle <sr>)
    (<nc> ^object <pword>)
    (<pword> ^referent <r-1>)
   -{ (<w> ^predicates <p*1>)
      (<p*1> ^predicate <wsr>)
      (<wsr> ^handle <sr>)
      (<wsr> ^instance <pwsr>)
      (<pwsr> ^2 <r-2>)
      (<pwsr> ^1 <r-1>)}
    -->
    (<seg> ^new-constraint <nc> -)
    (<pword> ^ground-tested <nc> +)
    (<pword> ^ground-tested <lmr> +)
}

sp {apply*ground-new-constraint*remove-no-referent
    (state <s> ^operator <op>)
    (<op> ^name ground-new-constraint)
    (<op> ^constraint <nc>)
    (<s> ^segment <seg>)
    (<seg> ^new-constraint <nc>)
    (<nc> ^constraint <c>)
    (<seg> ^last-merge <l*1>)
    (<l*1> ^receiver <lmr>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w>)
    (<w> ^predicates <p*1>)
    (<p*1> ^predicate <wsr>)
    (<wsr> ^instance <pwsr>)
    (<pwsr> ^2 <r-2>)
    (<wsr> ^handle <sr>)
    (<pwsr> ^1 <r-1>)
    (<c> ^relation <spr>)
    (<spr> ^2 <r-2>)
    (<spr> ^handle <sr>)
    (<nc> ^object <pword>)
    (<pword> -^referent <r-1>)
    -->
    (<seg> ^new-constraint <nc> -)
    (<pword> ^ground-tested <nc> +)
    (<pword> ^ground-tested <lmr> +)
}

sp {apply*ground-new-constraint*failure*V
    (state <s> ^operator <op>)
    (<op> ^name ground-new-constraint)
    (<op> ^constraint <nc>)
    (<s> ^segment <seg>)
    (<seg> ^new-constraint <nc>)
    (<nc> ^constraint <c>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w>)
    (<c> ^relation <spr>)
    (<spr> ^2 <r-2>)
    (<spr> ^handle <sr>)
    (<nc> ^object <o*1>)
    (<o*1> ^PP <P*1>)
    (<P*1> ^DP <pword>)
    (<pword> ^referent <r-1>)
   -{ (<w> ^predicates <p*2>)
      (<p*2> ^predicate <wsr>)
      (<wsr> ^handle <sr>)
      (<wsr> ^instance <pwsr>)
      (<pwsr> ^2 <r-2>)
      (<pwsr> ^1 <r-1>)}
    (<pword> ^spelling <spelling>)
    -->
    (<seg> ^new-constraint <nc> -)
    (<pword> ^ground-tested <nc> +)
    (<pword> ^failed-constraint <f*1> +)
    (<f*1> ^object <r-1> +)
    (<pword> ^failed-grounding <fg> +)
    (<fg> ^assigner-word <spelling> +)
    (<fg> ^structure-type P +)
    (<fg> ^relation <sr> +)
    (<fg> ^lost-grounding <r-1> +)
    (<pword> ^referent <ref> -)
}

sp {apply*ground-new-constraint*dialog-object
    (state <s> ^operator <op>)
    (<op> ^name ground-new-constraint)
    (<op> ^constraint <nc>)
    (<s> ^segment <seg>)
    (<seg> ^new-constraint <nc>)
    (<nc> ^constraint <c>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w>)
    (<c> ^relation <spr>)
    (<spr> ^2 <r-2>)
    (<r-2> ^predicates <p*1>)
    (<p*1> ^dialog-object true)
    (<spr> ^handle <sr>)
    (<nc> ^object <pword>)
    (<pword> ^lt <l*1>)
    (<pword> ^referent <r-1>)
    (<l*1> ^spelling <spelling>)
    -->
    (<seg> ^new-constraint <nc> -)
    (<pword> ^ground-tested <nc> +)
    (<r-1> ^relation <spr> +)
}

sp {apply*ground-new-constraint*failure
    (state <s> ^operator <op>)
    (<op> ^name ground-new-constraint)
    (<op> ^constraint <nc>)
    (<s> ^segment <seg>)
    (<seg> ^new-constraint <nc>)
    (<nc> ^constraint <c>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w>)
    (<c> ^relation <spr>)
    (<spr> ^2 <r-2>)
   -{ (<r-2> ^predicates <p*2>)
      (<p*2> ^dialog-object true)}
    (<spr> ^handle <sr>)
    (<nc> ^object <pword>)
    (<pword> ^referent <r-1>)
   -{ (<w> ^predicates <p*1>)
      (<p*1> ^predicate <wsr>)
      (<wsr> ^handle <sr>)
      (<wsr> ^instance <pwsr>)
      (<pwsr> ^2 <r-2>)
      (<pwsr> ^1 <r-1>)}
    (<pword> ^lt <l*1>)
    (<l*1> ^spelling <spelling>)
    -->
    (<seg> ^new-constraint <nc> -)
    (<pword> ^ground-tested <nc> +)
    (<pword> ^failed-constraint <fc> +)
    (<pword> ^failed-grounding <fg> +)
    (<fc> ^constraint <c> +)
    (<fc> ^object <r-1> +)
    (<fg> ^assigner-word <spelling> +)
    (<fg> ^structure-type P +)
    (<fg> ^relation <sr> +)
    (<fg> ^lost-grounding <r-1> +)
    (<pword> ^referent <obj1> -)
}

sp {apply*ground-new-constraint*removed-semantics-failed
    (state <s> ^operator <op>)
    (<op> ^name ground-new-constraint)
    (<op> ^constraint <nc>)
    (<s> ^segment <seg>)
    (<seg> ^new-constraint <nc>)
    (<nc> ^constraint <c>)
    (<seg> ^semantics <sem>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w>)
    (<c> ^relation <spr>)
    (<spr> ^2 <r-2>)
    (<spr> ^handle <sr>)
    (<sem> ^<anything> <r-1>)
   -{ (<w> ^predicates <p*1>)
      (<p*1> ^predicate <wsr>)
      (<wsr> ^handle <sr>)
      (<wsr> ^instance <pwsr>)
      (<pwsr> ^2 <r-2>)
      (<pwsr> ^1 <r-1>)}
    (<nc> ^object <pword>)
    (<pword> ^referent <r-1>)
    -->
    (<sem> ^<anything> <x> -)
}

sp {apply*ground-new-constraint*removed-failed
    (state <s> ^operator <op>)
    (<op> ^name ground-new-constraint)
    (<op> ^constraint <nc>)
    (<s> ^segment <s*1>)
    (<s*1> ^new-constraint <nc>)
    (<nc> ^constraint <c>)
    (<s> ^segment <s*2>)
    (<s*2> ^not-merged-receiver <rec>)
    (<rec> ^complement <obj>)
    (<rec> ^semantics <sem>)
    (<obj> ^referent <r-1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w>)
    (<nc> ^object <obj>)
    (<sem> ^object <r-1>)
    (<c> ^relation <spr>)
    (<spr> ^2 <r-2>)
    (<spr> ^handle <sr>)
   -{ (<w> ^predicates <p*1>)
      (<p*1> ^predicate <wsr>)
      (<wsr> ^handle <sr>)
      (<wsr> ^instance <pwsr>)
      (<pwsr> ^2 <r-2>)
      (<pwsr> ^1 <r-1>)}
    -->
    (<sem> ^object <object> -)
    (<obj> ^referent <object> -)
    (<obj> ^failed-constraint <fc> +)
    (<fc> ^constraint <c> +)
    (<fc> ^object <r-1> +)
}

sp {apply*ground-new-constraint*success
    (state <s> ^operator <op>)
    (<op> ^name ground-new-constraint)
    (<op> ^constraint <nc>)
    (<s> ^segment <seg>)
    (<seg> ^new-constraint <nc>)
    (<nc> ^constraint <c>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <wsr>)
    (<wsr> ^instance <pwsr>)
    (<pwsr> ^2 <r-2>)
    (<wsr> ^handle <sr>)
    (<pwsr> ^1 <r-1>)
    (<c> ^relation <spr>)
    (<spr> ^2 <r-2>)
    (<spr> ^handle <sr>)
    (<nc> ^object <pword>)
    (<pword> ^referent <r-1>)
    -->
    (<seg> ^new-constraint <nc> -)
    (<pword> ^ground-tested <nc> +)
}

sp {comprehension*propose*ground-new-constraint
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^new-constraint <nc>)
   -{ (<nc> ^constraint <c*2>)
      (<c*2> ^relation <r*1>)
      (<r*1> ^2 <v*1>)
      (<v*1> ^property <p*1>)
      (<p*1> ^handle concept)}
    (<nc> ^constraint <c*1>)
    (<c*1> ^relation <rel>)
    (<nc> ^object <obj>)
    (<obj> -^ground-tested <nc>)
    (<obj> ^referent <x>)
    (<x> -^relation <rel>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name ground-new-constraint +)
    (<op> ^constraint <nc> +)
}

sp {comprehend-word*apply*process-string
    (state <s> ^operator <o>)
    (<o> ^name process-string)
    (<o> ^current-word <cw>)
    (<cw> ^quoted true)
    (<o> ^spell <x>)
    (<s> ^comprehension-structure <cs>)
    -->
    (<cs> ^not-merged-receiver <item> +)
    (<s> ^receiver-created <item> +)
    (<s> ^created-receiver true +)
    (<s> ^retrieved-lexical-item <item> +)
    (<item> ^current-word <cw> +)
    (<item> ^lt-referent <ref> +)
    (<item> ^structure-type DP +)
    (<item> ^lt <id> +)
    (<item> ^semantics <sem> +)
    (<id> ^structure-type DP +)
    (<id> ^spelling <x> +)
    (<id> ^referent <ref> +)
    (<ref> ^handle (make-constant-symbol string-object-handle) +)
    (<ref> ^sentence <x> +)
}

sp {comprehend-word*propose*process-string
    (state <s> ^name comprehend-word)
    (<s> -^single-word true)
    (<s> -^failed-single-word-retrieval true)
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^segment <seg>)
    (<seg> ^current-word <cw>)
    (<cw> ^quoted true)
    (<cw> ^spelling <spell>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<s> ^operator <op> =)
    (<op> ^name process-string +)
    (<op> ^spell <spell> +)
    (<op> ^current-word <cw> +)
}

sp {apply*return-receiver
    (state <s> ^operator <o*1>)
    (<o*1> ^name return-receiver)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<s> ^segment <seg>)
    -->
    (<seg> ^not-merged-receiver <item> +)
}

sp {elaborate*detect-created-not-merged-receiver
    (state <s> ^operator <o*1>)
    (<o*1> ^name return-receiver)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^created-receiver true +)
}

sp {comprehend-word*compare*return-receiver2
    (state <s> ^operator <op2> +)
    (<op2> ^name retrieve-semantic-substructure)
    (<s> ^operator <op1> +)
    (<op1> ^name return-receiver)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehend-word*compare*return-receiver
    (state <s> ^operator <op1> +)
    (<op1> ^name return-receiver)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    (<s> ^operator <op2> +)
    (<op2> ^name { << retry-create-receiver create-receiver >> <n*2> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehend-word*apply*add-to-perception-monitor*complete
    (state <s> ^name comprehend-word)
    (<s> ^operator <o>)
    (<o> ^name add-to-perception-monitor)
    (<o> ^relation-handle <rhandle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <pm>)
    (<pm> ^predicate-info <p*2>)
    (<p*2> ^predicate-handle <rhandle>)
    (<o> ^retrieved <ri>)
    -->
    (<s> ^added-to-monitor true +)
}

sp {comprehend-word*apply*add-to-perception-monitor
    (state <s> ^name comprehend-word)
    (<s> ^operator <o>)
    (<o> ^name add-to-perception-monitor)
    (<o> ^relation-handle <rhandle>)
    (<s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <pm>)
   -{ (<pm> ^predicate-info <p*2>)
      (<p*2> ^predicate-handle <rhandle>)}
    (<o> ^retrieved <ri>)
    -->
    (<pm> ^predicate-info <pi> +)
    (<pi> ^predicate-handle <rhandle> +)
    (<pi> ^smem-info <ri> +)
}

sp {comprehend-word*propose*add-to-perception-monitor*linear
    (state <s> ^name comprehend-word)
   -{ (<s> ^segment <s*1>)
      (<s*1> ^retry <r*2>)}
    (<s> -^added-to-monitor true)
    (<s> -^failed-retrieval true)
   -{ (<s> ^top-state <t*2>)
      (<t*2> ^world-usage internal)}
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^game-scripting true)}
    (<s> ^current-word <c*1>)
    (<c*1> ^spelling linear)
    (<s> ^retrieved-lexical-item <r*1>)
    (<r*1> ^referent <ri>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name add-to-perception-monitor +)
    (<o> ^relation-handle linear +)
    (<o> ^retrieved <ri> +)
}

sp {comprehend-word*propose*add-to-perception-monitor
    (state <s> ^name comprehend-word)
   -{ (<s> ^segment <s*1>)
      (<s*1> ^retry <r*2>)}
    (<s> -^added-to-monitor true)
    (<s> -^failed-retrieval true)
   -{ (<s> ^top-state <t*2>)
      (<t*2> ^world-usage internal)}
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^game-scripting true)}
    (<s> ^retrieved-lexical-item <r*1>)
    (<s> ^current-word <cw>)
    (<r*1> ^relation <ri>)
    (<ri> -^handle of1)
    (<ri> ^type relation)
    (<ri> ^handle <rhandle>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name add-to-perception-monitor +)
    (<o> ^relation-handle <rhandle> +)
    (<o> ^retrieved <ri> +)
}

sp {comprehend-word*apply*process-single-word*quoted
    (state <s> ^operator <o>)
    (<o> ^name process-single-word)
    (<o> ^current-word <cw>)
    (<cw> ^quoted true)
    (<o> ^spell <x>)
    (<s> ^comprehension-structure <cs>)
    -->
    (<cs> ^not-merged-receiver <item> +)
    (<s> ^receiver-created <item> +)
    (<s> ^created-receiver true +)
    (<s> ^retrieved-lexical-item <item> +)
    (<item> ^current-word <cw> +)
    (<item> ^lt-referent <ref> +)
    (<item> ^structure-type CP +)
    (<item> ^lt <id> +)
    (<item> ^semantics <sem> +)
    (<id> ^structure-type CP +)
    (<id> ^spelling <x> +)
    (<id> ^message-type quoted-sentence +)
    (<id> ^semantic-structure arg1 +)
    (<id> ^referent <ref> +)
    (<ref> ^handle (make-constant-symbol string-object-handle) +)
    (<ref> ^sentence <x> +)
}

sp {comprehend-word*apply*process-single-word*fail
    (state <s> ^operator <o*1>)
    (<o*1> ^name process-single-word)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <os>)
    (<s> ^smem <s*2>)
    (<s*2> ^result <r*1>)
    (<r*1> ^failure <t>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    -->
    (<s> ^failed-single-word-retrieval true +)
    (<s> ^failed-retrieval true +)
    (<sem> ^interaction-status <i*1> +)
    (<i*1> ^failure <f*1> +)
    (<f*1> ^type failed-to-interpret-message +)
    (<sem> ^message-type failed-comprehension +)
    (<os> ^processed-sentence true +)
    (<os> ^processing-result failure +)
}

sp {comprehend-word*apply*process-single-word*success
    (state <s> ^operator <o*1>)
    (<o*1> ^name process-single-word)
    (<s> ^comprehension-structure <cs>)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<rli> ^spelling-single-word <x>)
    (<smem> ^command <c>)
    (<c> ^query <q>)
    (<q> ^spelling-single-word <x>)
    -->
    (<c> ^query <q> -)
    (<c> ^depth 9 -)
    (<cs> ^retrieved-lexical-item <rli> +)
}

sp {comprehend-word*apply*process-single-word
    (state <s> ^operator <o>)
   -{ (<o> ^current-word <c*1>)
      (<c*1> ^quoted true)}
    (<o> ^name process-single-word)
    (<o> ^spell <x>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^query <q> +)
    (<cmd> ^depth 9 +)
    (<q> ^spelling-single-word <x> +)
}

sp {comprehend-word*propose*process-single-wordx
    (state <s> ^single-word true)
    (<s> -^failed-single-word-retrieval true)
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^name comprehend-word)
    (<s> ^segment <seg>)
    (<seg> ^current-word <cw>)
    (<cw> ^spelling <spell>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<s> ^operator <op> =)
    (<op> ^name process-single-word +)
    (<op> ^spell <spell> +)
    (<op> ^current-word <cw> +)
}

sp {comprehend-word*elaborate*single-wordx
    (state <s> ^name comprehend-word)
    (<s> ^segment <seg>)
    (<seg> ^prior-word <p*1>)
    (<p*1> ^spelling *)
    (<seg> ^current-word <cw>)
    (<cw> ^next <n*1>)
    (<n*1> ^spelling |.|)
    (<cw> ^spelling <spell>)
    -->
    (<s> ^single-word true +)
}

sp {apply*retry-create-receiver*create-item*delete*retrieved-lexical-item
    (state <s> ^retrieved-lexical-item <id>)
    (<id> -^constraint <c*1>)
    (<s> -^name comprehend-construction)
    (<s> ^operator <op>)
    (<op> ^name retry-create-receiver)
    (<op> ^retry <retry>)
    (<retry> ^structure-type <stype>)
    (<id> ^structure-type <stype>)
    (<s> ^segment <seg>)
    (<seg> ^retry <retry>)
    (<s> ^comprehension-structure <cs>)
    (<retry> ^lt <old-id>)
    (<s> ^current-word <cw>)
    -->
    (<s> ^retrieved-lexical-item <id> -)
}

sp {apply*retry-create-receiver*create-item*parse-failed-receiver
    (state <s> ^operator <op>)
    (<op> ^name retry-create-receiver)
    (<s> ^segment <seg>)
    (<seg> ^parse-failed-receiver <pfr>)
    -->
    (<seg> ^parse-failed-receiver <pfr> -)
    (<seg> ^parse-failed-end-of-sentence true -)
}

sp {apply*retry-create-receiver*create-item
    (state <s> ^retrieved-lexical-item <id>)
    (<id> -^constraint <c*1>)
    (<s> -^name comprehend-construction)
    (<s> ^operator <op>)
    (<op> ^name retry-create-receiver)
    (<op> ^retry <retry>)
    (<s> ^segment <seg>)
    (<seg> ^retry <retry>)
    (<s> ^comprehension-structure <cs>)
    (<retry> ^lt <old-id>)
    (<s> ^current-word <cw>)
    (<retry> ^structure-type <old-type>)
    (<id> ^structure-type { <> <old-type> <stype> })
    -->
    (<seg> ^retry <retry> -)
    (<seg> ^parse-failed-end-of-sentence true -)
    (<seg> ^retried <retry> +)
    (<cw> ^processed true +)
    (<retry> ^lt <id> +)
    (<retry> ^lt <old-id> -)
    (<retry> ^structure-type <stype> +)
    (<retry> ^structure-type <old-type> -)
}

sp {comprehend-word*compare*retry-create-receiver
    (state <s> ^operator <op1> +)
    (<op1> ^name retry-create-receiver)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    (<s> ^operator <op2> +)
    (<op2>
          ^name { << retrieve-semantic-substructure remove-stale-receiver retrieve-semantic-substructure >> <n*2> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehend-word*propose*retry-create-receiver
    (state <s> ^retrieved-lexical-item <id>)
    (<s> ^current-word <cw>)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^not-merged-receiver <uri>)
      (<uri> ^lt <id>)
      (<uri> ^current-word <cw>)}
    (<s> ^segment <seg>)
    (<seg> ^retry <retry>)
    (<retry> -^lt <id>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name retry-create-receiver +)
    (<op> ^retry <retry> +)
}

sp {comprehend-word*apply*retry-smem-lexical-retrieval*fail
    (state <s> ^operator <o*1>)
    (<o*1> ^name retry-smem-lexical-retrieval)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^failure <t>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    -->
    (<s> ^failed-retrieval true +)
}

sp {comprehend-word*apply*retry-smem-lexical-retrieval*success*monitor
    (state <s> ^operator <o*1>)
    (<o*1> ^name retry-smem-lexical-retrieval)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<smem> ^command <c>)
    (<c> ^query <q>)
    (<q> ^spelling <x>)
    -->
    (<s> ^retry-success true +)
}

sp {comprehend-word*apply*retry-smem-lexical-retrieval*success
    (state <s> ^operator <o*1>)
    (<o*1> ^name retry-smem-lexical-retrieval)
    (<s> ^comprehension-structure <cs>)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<smem> ^command <c>)
    (<c> ^query <q>)
    -->
    (<c> ^query <q> -)
    (<s> ^retrieved-lexical-item <rli> +)
    (<cs> ^retrieved-lexical-item <rli> +)
}

sp {comprehend-word*apply*retry-smem-lexical-retrieval*sentence2
    (state <s> ^operator <o>)
    (<o> ^name retry-smem-lexical-retrieval)
    (<o> ^retry-receiver <rec>)
    (<s> ^segment <s*1>)
    (<s*1> ^retried <rec>)
    (<rec> ^lt <l*1>)
    (<l*1> ^structure-type <as>)
    (<o> ^word <w*1>)
    (<w*1> ^spelling <x>)
    (<s> ^smem <s*2>)
    (<s*2> ^command <cmd>)
    -->
    (<cmd> ^query <q> +)
    (<q> ^spelling <x> +)
    (<q> ^structure-type <as> +)
}

sp {comprehend-word*apply*retry-smem-lexical-retrieval*sentence
    (state <s> ^operator <o>)
    (<o> ^name retry-smem-lexical-retrieval)
    (<o> ^retry-receiver <rec>)
   -{ (<s> ^segment <s*1>)
      (<s*1> ^retried <rec>)}
    (<rec> ^lt <l*1>)
    (<l*1> ^alternative-structure <as>)
    (<o> ^word <w*1>)
    (<w*1> ^spelling <x>)
    (<s> ^smem <s*2>)
    (<s*2> ^command <cmd>)
    -->
    (<cmd> ^query <q> +)
    (<q> ^spelling <x> +)
    (<q> ^structure-type <as> +)
}

sp {comprehend-word*propose*retry-smem-lexical-retrieval*sentence
    (state <s> ^current-word <cw>)
    (<s> -^failed-retrieval true)
    (<s> -^retry-success true)
    (<cw> ^spelling <spell>)
    (<s> ^segment <seg>)
   -{ (<seg> ^retry-receiver <r>)
      (<r> ^retried true)
      (<r> ^lt <l*2>)
      (<l*2> ^spelling <spell>)}
    (<seg> ^retry-receiver <retry>)
    (<retry> ^lt <l*1>)
    (<l*1> ^spelling <spell>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
    (<o> ^name retry-smem-lexical-retrieval +)
    (<o> ^word <cw> +)
    (<o> ^retry-receiver <retry> +)
}

sp {comprehend-word*apply*retry-smem-lexical-retrieval
    (state <s> ^operator <o>)
    (<o> ^name retry-smem-lexical-retrieval)
    (<o> ^retry <r*1>)
    (<r*1> ^lt <l*1>)
    (<l*1> ^alternative-structure <as>)
    (<o> ^word <w*1>)
    (<w*1> ^spelling <x>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^query <q> +)
    (<q> ^spelling <x> +)
    (<q> ^structure-type <as> +)
}

sp {comprehend-word*propose*retry-smem-lexical-retrieval
    (state <s> ^current-word <cw>)
    (<s> -^failed-retrieval true)
    (<s> -^retry-success true)
    (<s> ^segment <seg>)
    (<seg> -^retried-sentence true)
    (<seg> ^retry <retry>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name retry-smem-lexical-retrieval +)
    (<o> ^word <cw> +)
    (<o> ^retry <retry> +)
}

sp {comprehend-word*apply*smem-lexical-retrieval-proprogate-first-word
    (state <s> ^operator <o>)
    (<o> ^prior-word-stale true)
    (<o> ^name smem-lexical-retrieval-cw-pw)
    (<s> ^comprehension-structure <cs>)
    (<s> ^segment <seg>)
    (<seg> ^prior-word <pw>)
    (<pw> ^first-word true)
    (<pw> ^spelling <pick>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<rli> ^prior-word <pick>)
    -->
    (<cs> ^first-word true +)
}

sp {comprehend-word*apply*smem-lexical-retrieval-receiver-prior-word-stale
    (state <s> ^operator <o>)
    (<o> ^prior-word-stale true)
    (<s> ^comprehension-structure <cs>)
    (<o> ^prior-word <pw>)
    (<s> ^segment <seg>)
    (<seg> ^retrieved-stack <r*2>)
    (<seg> ^not-merged-receiver <uai>)
    (<r*2> ^item <uai>)
    (<uai> ^lt <lt>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<rli> -^consumes-prior-word false)
    (<rli> ^prior-word <pw>)
    -->
    (<cs> ^remove-receiver <uai> +)
}

sp {comprehend-word*apply*smem-lexical-retrieval-assigner-prior-word-stale
    (state <s> ^operator <o>)
    (<o> ^prior-word-stale true)
    (<s> ^comprehension-structure <cs>)
    (<o> ^prior-word <pw>)
    (<s> ^segment <seg>)
    (<seg> ^retrieved-stack <r*2>)
    (<seg> ^not-merged-assigner <uai>)
    (<uai> ^parent-receiver <prior-receiver>)
    (<r*2> ^item <prior-receiver>)
    (<uai> ^current-word <c*1>)
    (<c*1> ^spelling <pw>)
    (<uai> ^lt <lt>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<rli> -^consumes-prior-word false)
    (<rli> ^prior-word <pw>)
    -->
    (<seg> ^not-merged-assigner <uai> -)
}

sp {comprehend-word*apply*smem-lexical-retrieval-cw-pw*success
    (state <s> ^comprehension-structure <cs>)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<rli> ^current-word <cw>)
    (<rli> ^prior-word <pw>)
    (<smem> ^command <c>)
    (<c> ^query <q>)
    (<q> ^current-word <cw>)
    (<q> ^prior-word <pw>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << smem-lexical-retrieval-cw-pw smem-lexical-retrieval-cw-pw-type >> <n*1> })
    -->
    (<c> ^query <q> -)
    (<c> ^depth 9 -)
    (<cs> ^retrieved-lexical-item <rli> +)
}

sp {comprehend-construction*apply*smem-lexical-retrieval-cw-pw
    (state <s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<s> ^operator <o>)
    (<o> ^current-word <up>)
    (<o> ^prior-word <pick>)
    (<o>
          ^name { << smem-lexical-retrieval-cw-pw smem-lexical-retrieval-cw-pw-type >> <n*1> })
    -->
    (<cmd> ^query <x> +)
    (<cmd> ^depth 9 +)
    (<x> ^current-word <up> +)
    (<x> ^prior-word <pick> +)
}

sp {comprehend-word*compare*smem-lexical-retrieval-cw-pw*smem-lexical-retrieval-cw-pw-type
    (state <s> ^name comprehend-word)
    (<s> ^operator <op2> +)
    (<op2> ^name smem-lexical-retrieval-cw-pw-type)
    (<s> ^operator <op1> +)
    (<op1> ^name smem-lexical-retrieval-cw-pw)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehend-word*compare*smem-lexical-retrieval-cw-pw*smem-lexical-retrieval
    (state <s> ^name comprehend-word)
    (<s> ^operator <op2> +)
    (<op2> ^name smem-lexical-retrieval)
    (<s> ^operator <op1> +)
    (<op1>
          ^name { << smem-lexical-retrieval-cw-pw smem-lexical-retrieval-cw-pw-type >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehend-word*propose*smem-lexical-retrieval-cw-pw-type*reject
    (state <s> ^name comprehend-word)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^segment <seg>)
    (<seg> -^retry <r*4>)
    (<s> ^operator <o> +)
    (<o> ^name smem-lexical-retrieval-cw-pw-type)
    (<s> ^failed-retrieval <fr>)
    (<o> ^current-word <up>)
    (<fr> ^current-word <up>)
    (<s> ^current-word <c*1>)
    (<c*1> ^spelling <up>)
    (<o> ^prior-word <pick-type>)
    (<fr> ^prior-word <pick-type>)
    (<seg> ^retrieved-stack <r*3>)
    (<r*3> ^item <i*1>)
    (<i*1> ^lt <l*1>)
    (<l*1> ^structure-type <pick-type>)
    -->
    (<s> ^operator <o> -)
}

sp {comprehend-word*propose*smem-lexical-retrieval-cw-pw-type
    (state <s> ^failed-operator smem-lexical-retrieval-cw-pw)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^name comprehend-word)
    (<s> ^segment <seg>)
    (<seg> -^retry <r*4>)
    (<seg> ^retrieved-stack <r*3>)
    (<s> ^current-word <c*1>)
    (<c*1> ^spelling <up>)
    (<r*3> ^item <i*1>)
    (<i*1> ^lt <lt>)
    (<lt> ^structure-type <pick-type>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-lexical-retrieval-cw-pw-type +)
    (<o> ^current-word <up> +)
    (<o> ^prior-word <pick-type> +)
}

sp {comprehend-word*propose*smem-lexical-retrieval-cw-pw*reject2
    (state <s> ^name comprehend-word)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^retrieved-lexical-item <r*3>)}
   -{ (<s> ^segment <s*1>)
      (<s*1> ^retry <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^operator <o> +)
    (<o> ^prior-word-stale true)
    (<o> ^name smem-lexical-retrieval-cw-pw)
    (<s> ^failed-retrieval <fr>)
    (<o> ^current-word <up>)
    (<fr> ^current-word <up>)
    (<s> ^current-word <c*1>)
    (<c*1> ^spelling <up>)
    (<o> ^prior-word <pick>)
    (<fr> ^prior-word <pick>)
    (<s> ^segment <seg>)
    (<seg> ^retrieved-stack <r*4>)
    (<r*4> ^item <i*1>)
    (<i*1> ^lt <l*1>)
    (<l*1> ^spelling <pick>)
    -->
    (<s> ^operator <o> -)
}

sp {comprehend-word*propose*smem-lexical-retrieval-cw-pw*reject
    (state <s> ^name comprehend-word)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^retrieved-lexical-item <r*3>)}
   -{ (<s> ^segment <s*1>)
      (<s*1> ^retry <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^operator <o> +)
    (<o> ^prior-word-stale true)
    (<o> ^name smem-lexical-retrieval-cw-pw)
    (<s> ^failed-retrieval <fr>)
    (<o> ^current-word <up>)
    (<fr> ^current-word <up>)
    (<s> ^current-word <c*1>)
    (<c*1> ^spelling <up>)
    (<o> ^prior-word <pick>)
    (<fr> ^prior-word <pick>)
    (<s> ^segment <seg>)
    (<seg> ^prior-word <p*1>)
    (<p*1> ^spelling <pick>)
    -->
    (<s> ^operator <o> -)
}

sp {comprehend-word*propose*smem-lexical-retrieval-cw-pw2
    (state <s> ^name comprehend-word)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^retrieved-lexical-item <r*3>)}
   -{ (<s> ^segment <s*1>)
      (<s*1> ^retry <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^current-word <c*1>)
    (<c*1> ^spelling <up>)
    (<s> ^segment <seg>)
    (<seg> ^retrieved-stack <r*4>)
    (<r*4> ^item <item>)
    (<item> -^merged-with true)
    (<item> ^lt <l*1>)
    (<l*1> ^spelling <pick>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-lexical-retrieval-cw-pw +)
    (<o> ^current-word <up> +)
    (<o> ^prior-word <pick> +)
    (<o> ^prior-word-stale true +)
}

sp {comprehend-word*propose*smem-lexical-retrieval-cw-pw
    (state <s> ^name comprehend-word)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^retrieved-lexical-item <r*3>)}
   -{ (<s> ^segment <s*1>)
      (<s*1> ^retry <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^current-word <c*1>)
    (<c*1> ^spelling <up>)
    (<s> ^segment <seg>)
    (<seg> ^prior-word <p*1>)
    (<p*1> ^spelling <pick>)
   -{ (<seg> ^retrieved-stack <r*4>)
      (<r*4> ^item <i*1>)
      (<i*1> ^lt <l*1>)
      (<l*1> ^spelling <pick>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-lexical-retrieval-cw-pw +)
    (<o> ^current-word <up> +)
    (<o> ^prior-word <pick> +)
    (<o> ^prior-word-stale true +)
}

sp {comprehend-word*apply*smem-lexical-retrieval*fail
    (state <s> ^operator <o*1>)
    (<o*1> ^name smem-lexical-retrieval)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^failure <t>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    -->
    (<s> ^failed-retrieval true +)
}

sp {comprehend-word*apply*smem-lexical-retrieval*success
    (state <s> ^comprehension-structure <cs>)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<rli> ^spelling <x>)
    (<smem> ^command <c>)
    (<c> ^query <q>)
    (<q> ^spelling <x>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << smem-lexical-retrieval smem-lexical-retrieval-cw-pw-type >> <n*1> })
    -->
    (<c> ^query <q> -)
    (<c> ^depth 9 -)
    (<cs> ^retrieved-lexical-item <rli> +)
}

sp {comprehend-word*apply*smem-lexical-retrieval*first-word
    (state <s> ^operator <o>)
    (<o> ^name smem-lexical-retrieval)
    (<o> ^word <word>)
    (<word> ^first-word true)
    (<word> ^spelling <x>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^query <q> +)
    (<cmd> ^depth 9 +)
    (<q> ^spelling <x> +)
}

sp {comprehend-word*apply*smem-lexical-retrieval*not-first-word
    (state <s> ^operator <o>)
    (<o> ^name smem-lexical-retrieval)
    (<o> ^word <word>)
    (<word> -^first-word true)
    (<word> ^spelling <x>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^query <q> +)
    (<cmd> ^depth 9 +)
    (<q> ^spelling <x> +)
}

sp {comprehend-word*propose*smem-lexical-retrieval2
    (state <s> ^current-word <cw>)
   -{ (<s> ^retrieved-stack <r*4>)
      (<r*4> ^item <i*1>)
      (<i*1> ^lt <l*1>)
      (<l*1> ^structure-type <pick-type>)}
   -{ (<s> ^segment <s*1>)
      (<s*1> ^retry <r*3>)}
    (<s> -^failed-retrieval true)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> -^failed-operator smem-lexical-retrieval-cw-pw-type)
    (<s> ^segment <seg>)
   -{ (<seg> ^prior-word <p*1>)
      (<p*1> ^spelling *)
      (<cw> ^next <n*2>)
      (<n*2> ^spelling |.|)}
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-lexical-retrieval +)
    (<o> ^word <cw> +)
}

sp {comprehend-word*propose*smem-lexical-retrieval
    (state <s> ^current-word <cw>)
   -{ (<s> ^segment <s*1>)
      (<s*1> ^retry <r*3>)}
    (<s> -^failed-retrieval true)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^segment <seg>)
   -{ (<seg> ^prior-word <p*1>)
      (<p*1> ^spelling *)
      (<cw> ^next <n*2>)
      (<n*2> ^spelling |.|)}
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-lexical-retrieval +)
    (<o> ^word <cw> +)
}

sp {apply*process-new-word*clean-up
    (state <s> ^operator <op>)
    (<op> ^name process-new-word)
    (<op> ^word <cw>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^query <q>)
    -->
    (<cmd> ^query <q> -)
}

sp {apply*process-new-word*mark-on-segment
    (state <s> ^operator <op>)
    (<op> ^name process-new-word)
    (<op> ^spell <spell>)
    (<op> ^handle <name>)
    (<s> ^segment <seg>)
    (<seg> ^current-word <cw>)
    -->
    (<seg> ^unknown-word <spell> +)
}

sp {apply*process-new-word*failure*external
    (state <s> ^top-state <t*1>)
    (<t*1> ^world-usage external)
    (<s> ^operator <op>)
    (<op> ^fail true)
    (<op> ^name process-new-word)
    (<op> ^spell <spell>)
    (<op> ^handle <name>)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <cs>)
    (<seg> ^current-word <cw>)
    -->
    (<s> ^store-concept <nw> +)
    (<s> ^store-concept <ref> +)
    (<nw> ^spelling <spell> +)
    (<nw> ^referent <ref> +)
    (<ref> ^handle <name> +)
    (<ref> ^word-structure <nw> +)
    (<cw> ^processed true +)
    (<sem> ^interaction-status <i*1> +)
    (<i*1> ^new-message <is> +)
    (<is> ^type unknown-word +)
    (<is> ^word <spell> +)
    (<cs> ^processing-result failure +)
}

sp {apply*process-new-word*failure*internal
    (state <s> ^top-state <ts>)
    (<ts> ^world-usage internal)
    (<s> ^operator <op>)
    (<op> ^fail true)
    (<op> ^name process-new-word)
    (<op> ^spell <spell>)
    (<op> ^handle <name>)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <cs>)
    (<seg> ^current-word <cw>)
    -->
    (<s> ^store-concept <nw> +)
    (<s> ^store-concept <ref> +)
    (<nw> ^spelling <spell> +)
    (<nw> ^referent <ref> +)
    (<ref> ^handle <name> +)
    (<ref> ^word-structure <nw> +)
    (<cw> ^processed true +)
    (<sem> ^interaction-status <i*1> +)
    (<i*1> ^new-message <is> +)
    (<is> ^type unknown-word +)
    (<is> ^word <spell> +)
    (<cs> ^processing-result failure +)
}

sp {apply*process-new-word*assign*U
    (state <s> ^operator <op>)
    (<op> ^name process-new-word)
    (<op> ^type U)
    (<op> ^spell <spell>)
    (<s> ^comprehension-structure <cs>)
    (<op> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cs> ^retrieved-lexical-item <nw> +)
    (<s> ^store-concept <nw> +)
    (<s> ^store-concept <ref> +)
    (<s> ^new-word true +)
    (<s> ^retrieved-lexical-item <nw> +)
    (<nw> ^spelling <spell> +)
    (<nw> ^referent <ref> +)
    (<ref> ^handle <name> +)
    (<ref> ^word-structure <nw> +)
}

sp {apply*process-new-word*assign
    (state <s> ^operator <op>)
    (<op> ^name process-new-word)
    (<op> ^spell <spell>)
    (<op> ^handle <name>)
    (<s> ^segment <seg>)
    (<seg> ^semantics <sem>)
    (<seg> ^original-sentence <cs>)
    (<seg> ^current-word <cw>)
    (<op> ^type { <> U <st> })
    -->
    (<s> ^store-concept <nw> +)
    (<s> ^store-concept <ref> +)
    (<nw> ^spelling <spell> +)
    (<nw> ^referent <ref> +)
    (<ref> ^handle <name> +)
    (<ref> ^word-structure <nw> +)
    (<cw> ^processed true +)
    (<sem> ^interaction-status <i*1> +)
    (<i*1> ^new-message <is> +)
    (<is> ^type unknown-word +)
    (<is> ^word <spell> +)
    (<cs> ^processing-result failure +)
}

sp {comprehend-word*compare*process-new-word*prefer-most-recent-unknown
    (state <s> ^name comprehend-word)
    (<s> ^operator <op2> +)
    (<op2> ^name process-new-word)
    (<op2> ^assigner <ass2>)
    (<ass2> ^structure-type U)
    (<s> ^operator { <> <op2> <op1> } +)
    (<op1> ^name process-new-word)
    (<op1> ^assigner <ass1>)
    (<ass1> ^structure-type U)
    (<ass2> ^decision-count <d*1>)
    (<ass1> ^decision-count { > <d*1> <n> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehend-word*reject*process-new-word*reject-failure-if-shallow-U
    (state <s> ^name comprehend-word)
    (<s> ^operator <op1> +)
    (<op1> ^name process-new-word)
    (<op1> ^type U)
    (<op1> ^assigner <a*1>)
    (<a*1> ^parent-receiver <pr>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <ass3>)
    (<ass3> ^parent-receiver <pr>)
    (<ass3> ^structure-type DP)
    (<seg> ^not-merged-assigner { <> <ass3> <ass2> })
    (<ass2> ^structure-type N)
    (<ass2> ^parent-receiver <nmr>)
    (<seg> ^not-merged-receiver <nmr>)
    (<nmr> ^structure-type D)
    -->
    (<s> ^operator <op1> -)
}

sp {comprehend-word*reject*process-new-word*reject-failure-if-U
    (state <s> ^name comprehend-word)
    (<s> ^operator <op2> +)
    (<op2> ^name process-new-word)
    (<op2> ^type U)
    (<s> ^operator <op1> +)
    (<op1> ^fail true)
    (<op1> ^name process-new-word)
    (<s> ^segment <s*1>)
    (<s*1> ^not-merged-assigner <n*1>)
    (<n*1> ^structure-type U)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehend-word*propose*process-new-word*U
    (state <s> ^failed-retrieval true)
    (<s> -^failed-new-word true)
    (<s> ^name comprehend-word)
    (<s> ^quiescence t)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <ass>)
    (<ass> ^structure-type U)
    (<seg> ^current-word <cw>)
    (<cw> ^spelling <spell>)
   -{ (<s> ^retrieved-lexical-item <r*1>)
      (<r*1> ^spelling <spell>)}
    -->
    (<s> ^operator <op> +)
    (<op> ^name process-new-word +)
    (<op> ^type U +)
    (<op> ^spell <spell> +)
    (<op> ^handle (make-constant-symbol <spell>) +)
}

sp {comprehend-word*propose*process-new-word*single-primitive-assigner*guess
    (state <s> ^failed-retrieval true)
    (<s> -^failed-new-word true)
    (<s> ^name comprehend-word)
    (<s> ^quiescence t)
    (<s> ^segment <seg>)
    (<seg> -^retry-sentence <r*2>)
    (<seg> ^not-merged-assigner <ass>)
   -{ (<seg> ^not-merged-assigner { <> <ass> <ass2> })
      (<ass2> ^structure-type { << V ADJ N ADV PN U >> <s*1> })}
    (<s> ^current-word <cw>)
    (<cw> ^spelling <spell>)
   -{ (<s> ^retrieved-lexical-item <r*1>)
      (<r*1> ^spelling <spell>)}
    (<ass> ^structure-type { << V ADJ N ADV PN >> <st> })
    -->
    (<s> ^operator <op> +)
    (<op> ^name process-new-word +)
    (<op> ^type <st> +)
    (<op> ^spell <spell> +)
    (<op> ^handle (make-constant-symbol <spell>) +)
}

sp {comprehend-word*propose*process-new-word*multiple-non-U-primitive-assigner*fail
    (state <s> ^failed-retrieval true)
    (<s> -^failed-new-word true)
    (<s> ^name comprehend-word)
    (<s> ^quiescence t)
    (<s> ^segment <seg>)
   -{ (<seg> ^not-merged-assigner <n*1>)
      (<n*1> ^structure-type U)}
    (<seg> ^not-merged-assigner <ass2>)
    (<seg> ^not-merged-assigner { > <ass2> <ass> })
    (<seg> ^current-word <cw>)
    (<cw> ^spelling <spell>)
   -{ (<s> ^retrieved-lexical-item <r*1>)
      (<r*1> ^spelling <spell>)}
    (<ass2> ^structure-type { << V ADJ N ADV PN >> <s*2> })
    (<ass> ^structure-type { << V ADJ N ADV PN >> <s*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name process-new-word +)
    (<op> ^spell <spell> +)
    (<op> ^fail true +)
    (<op> ^handle (make-constant-symbol <spell>) +)
}

sp {comprehend-word*propose*process-new-word*no-primitive-assigner*unknown
    (state <s> ^failed-retrieval true)
    (<s> -^failed-new-word true)
    (<s> ^name comprehend-word)
    (<s> ^quiescence t)
    (<s> ^segment <seg>)
   -{ (<seg> ^not-merged-assigner <ass2>)
      (<ass2> ^structure-type { << V ADJ N ADV PN U >> <s*1> })}
    (<seg> ^current-word <c*1>)
    (<c*1> ^spelling <spell>)
   -{ (<s> ^retrieved-lexical-item <r*1>)
      (<r*1> ^spelling <spell>)}
    -->
    (<s> ^operator <op> +)
    (<op> ^name process-new-word +)
    (<op> ^type U +)
    (<op> ^fail true +)
    (<op> ^spell <spell> +)
    (<op> ^handle (make-constant-symbol <spell>) +)
}

sp {apply*finish-comprehend*construction
    (state <s> ^created-receiver true)
    (<s> ^name comprehend-construction)
    (<s> ^operator <op>)
    (<op> ^name finish-comprehend)
    (<s> ^prior-item <p-item>)
    (<s> ^current-item <c-item>)
    (<s> ^comprehension-structure <cs>)
    (<cs> ^retrieved-lexical-item <cw>)
    (<s> ^segment <ss>)
    -->
    (<ss> ^comprehension-structure <cs> +)
    (<ss> ^construction-comprehended <cc> +)
    (<cc> ^current-item <c-item> +)
    (<cc> ^prior-item <p-item> +)
    (<cs> ^processed true +)
    (<cw> ^processed true +)
}

sp {apply*finish-comprehend
    (state <s> ^created-receiver true)
    (<s> ^name comprehend-word)
    (<s> ^operator <op>)
    (<op> ^name finish-comprehend)
    (<s> ^comprehension-structure <cs>)
    (<s> ^current-word <cw>)
    (<s> ^segment <ss>)
    -->
    (<ss> ^comprehension-structure <cs> +)
    (<cs> ^processed true +)
    (<cw> ^processed true +)
}

sp {comprehend-word*compare*finish-comprehend*better
    (state <s> ^name comprehend-word)
    (<s> ^operator <op2> +)
    (<op2>
          ^name { << smem-lexical-retrieval-cw-pw smem-lexical-retrieval-cw-pw-type >> <n*2> })
    (<s> ^operator <op1> +)
    (<op1> ^name { << return-receiver finish-comprehend >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehend-word*compare*finish-comprehend
    (state <s> ^operator <op1> +)
    (<op1> ^name finish-comprehend)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    (<s> ^operator <op2> +)
    (<op2>
          ^name { << remove-stale-receiver process-new-word create-assigner create-receiver remove-stale-assigner >> <n*2> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehend-word*propose*finish-comprehend*new-word
    (state <s> ^new-word true)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> <)
    (<op> ^name finish-comprehend +)
}

sp {comprehend-word*propose*finish-comprehend*success
    (state <s> ^created-receiver true)
    (<s> ^retrievals <m>)
    (<s> ^created-assigners <n>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> <)
    (<op> ^name finish-comprehend +)
}

sp {apply*create-receiver*create-item*finish*referent
    (state <s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<op> ^item <item>)
    (<item> ^lt-referent <l*1>)
    -->
    (<s> ^receiver-created <item> +)
}

sp {apply*create-receiver*create-item*finish*no-referent
    (state <s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<op> ^item <item>)
    (<item> ^lt <lt>)
    (<lt> -^referent <r*1>)
    -->
    (<s> ^receiver-created <item> +)
}

sp {apply*create-receiver*copy*first-word-true
    (state <s> ^current-word <c*1>)
    (<s> -^name comprehend-construction)
    (<c*1> ^first-word true)
    (<s> ^operator <op>)
    (<op> ^name create-receiver)
    (<op> ^item <item>)
    -->
    (<item> ^first-word true +)
}

sp {apply*create-receiver*copy-constraint
    (state <s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<item> ^lt <l*1>)
    (<l*1> ^constraint <stype>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<item> ^constraint <stype> +)
}

sp {apply*create-receiver*copy-structure-type
    (state <s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<item> ^lt <l*1>)
    (<l*1> ^structure-type <stype>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<item> ^structure-type <stype> +)
}

sp {apply*create-receiver*create-item*construction*none
    (state <s> ^name comprehend-construction)
    (<s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^retrieved-lexical-item <id>)
    (<s> ^comprehension-structure <cs>)
    (<cs> ^remove-receiver <r*1>)
    (<r*1> ^decision-count <dc>)
   -{ (<cs> ^remove-receiver <r*2>)
      (<r*2> ^decision-count { < <dc> <d*1> })}
    (<s> ^current-word <cw>)
    (<op> ^item <item>)
    -->
    (<s> ^created-receiver true +)
    (<cs> ^not-merged-receiver <item> +)
    (<item> ^current-word <cw> +)
    (<item> ^lt <id> +)
    (<item> ^decision-count <dc> +)
}

sp {apply*create-receiver*create-item*construction
    (state <s> ^name comprehend-construction)
    (<s> ^comprehension-structure <cs>)
    (<cs> -^remove-receiver <r*1>)
    (<s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^retrieved-lexical-item <id>)
    (<s> ^current-word <cw>)
    (<op> ^item <item>)
    -->
    (<s> ^created-receiver true +)
    (<cs> ^not-merged-receiver <item> +)
    (<item> ^current-word <cw> +)
    (<item> ^lt <id> +)
}

sp {apply*create-receiver*create-item*copy-lt*referent2*substructure
    (state <s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<op> ^item <item>)
    (<item> ^lt-referent2 <ref2>)
    (<item> ^lt <l*1>)
    (<l*1> ^referent2 <ref>)
    (<ref> ^<att> <value>)
    -->
    (<ref2> ^<att> <value> +)
}

sp {apply*create-receiver*create-item*copy-lt*referent*substructure
    (state <s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<op> ^item <item>)
    (<item> ^lt-referent <ref2>)
    (<item> ^lt <l*1>)
    (<l*1> ^referent <ref>)
    (<ref> ^<att> <value>)
    -->
    (<ref2> ^<att> <value> +)
}

sp {apply*create-receiver*create-item*copy-lt*referent2
    (state <s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<op> ^item <item>)
    (<item> ^lt <l*1>)
    (<l*1> ^referent2 <ref>)
    -->
    (<item> ^lt-referent2 <nref> +)
}

sp {apply*create-receiver*create-item*copy-lt*referent
    (state <s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<op> ^item <item>)
    (<item> ^lt <l*1>)
    (<l*1> ^referent <ref>)
    -->
    (<item> ^lt-referent <nref> +)
}

sp {apply*create-receiver*create-item*super-type*finish
    (state <s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<op> ^item <item>)
    (<item> ^proto-lt <plt>)
    (<plt> ^copied yes)
    (<item> ^super-type <st>)
    -->
    (<item> ^lt <plt> +)
}

sp {apply*create-receiver*create-item*super-type*copy-can-be-part-of
    (state <s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^retrieved-lexical-item <id>)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<op> ^item <item>)
    (<item> ^proto-lt <proto>)
    (<id>
          ^{ << attachment can-be-part-of constraint relation referent referent2 quantity semantic-structure semantic-structure2 directional directional-maybe alternative-structure number tense possessive specifier >> <att> } <cbpo>)
    -->
    (<proto> ^<att> <cbpo> +)
}

sp {apply*create-receiver*create-item*super-type*copy-lt
    (state <s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    (<op> ^item <item>)
    (<item> ^proto-lt <plt>)
    (<item> ^super-type <st>)
    (<st> ^<att> <val>)
    -->
    (<plt> ^<att> <val> +)
    (<plt> ^copied yes +)
}

sp {apply*create-receiver*create-item*super-type
    (state <s> ^retrieved-lexical-item <id>)
    (<s> -^name comprehend-construction)
    (<s> ^operator <op>)
    (<op> ^name create-receiver)
    (<id> ^super-type <st>)
    (<s> ^comprehension-structure <cs>)
    (<s> ^current-word <cw>)
    (<id> ^spelling <spell>)
    (<op> ^item <item>)
    -->
    (<s> ^created-receiver true +)
    (<cs> ^not-merged-receiver <item> +)
    (<item> ^current-word <cw> +)
    (<item> ^original-id <id> +)
    (<item> ^super-type <st> +)
    (<item> ^proto-lt <proto-lt> +)
    (<item> ^semantics <sem> +)
    (<proto-lt> ^spelling <spell> +)
}

sp {apply*create-receiver*mark-hypothetical
    (state <s> ^retrieved-lexical-item <id>)
    (<id> ^hypothetical true)
    (<s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^current-word <cw>)
    (<s> ^segment <seg>)
    (<op> ^item <item>)
    -->
    (<seg> ^hypothetical true +)
}

sp {apply*create-receiver*create-item
    (state <s> ^retrieved-lexical-item <id>)
    (<id> -^super-type <s*1>)
    (<s> -^name comprehend-construction)
    (<s> ^operator <op>)
    (<op> ^name create-receiver)
    (<s> ^comprehension-structure <cs>)
    (<s> ^current-word <cw>)
    (<op> ^item <item>)
    -->
    (<s> ^created-receiver true +)
    (<cs> ^not-merged-receiver <item> +)
    (<item> ^current-word <cw> +)
    (<item> ^lt <id> +)
    (<item> ^semantics <sem> +)
}

sp {comprehend-word*compare*create-receiver2
    (state <s> ^operator <op1> +)
    (<op1> ^name create-receiver)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    (<s> ^operator <op2> +)
    (<op2> ^name { << remove-stale-receiver >> <n*2> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehend-word*compare*elaborations
    (state <s> ^name comprehend-word)
    (<s> ^operator <op2> +)
    (<op2> ^name create-receiver)
    (<s> ^operator <op1> +)
    (<op1> ^feature super-type)
    (<op1> ^name retrieve-semantic-substructure)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehend-word*compare*create-receiver
    (state <s> ^operator <op2> +)
    (<op2> -^feature super-type)
    (<op2> ^name retrieve-semantic-substructure)
    (<s> ^operator <op1> +)
    (<op1> ^name create-receiver)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehend-word*propose*create-receiver*alternative-structure
    (<ss> -^retry <r*1>)
    (state <s> ^quiescence t)
    (<s> ^current-word <cw>)
   -{ (<s> ^receiver-created <uri>)
      (<uri> ^current-word <cw>)
      (<s> ^comprehension-structure <c*1>)
      (<c*1> ^not-merged-receiver <uri>)}
    (<s> ^retrieved-lexical-item <id>)
    (<id> ^alternative-structure <a*1>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name create-receiver +)
    (<op> ^item <item> +)
}

sp {comprehend-word*propose*create-receiver
    (state <s> ^retrieved-lexical-item <id>)
    (<id> -^alternative-structure <a*1>)
    (<s> ^current-word <cw>)
   -{ (<s> ^receiver-created <uri>)
      (<uri> ^current-word <cw>)
      (<s> ^comprehension-structure <c*1>)
      (<c*1> ^not-merged-receiver <uri>)}
    (<s> ^superstate <ss>)
    (<ss> -^retry <r*1>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name create-receiver +)
    (<op> ^item <item> +)
}

sp {apply*create-assigner*create-item*use-old-time
    (state <s> ^name comprehend-construction)
    (<s> ^operator <op>)
    (<op> ^name create-assigner)
    (<s> ^created-assigners <cax>)
    (<s> ^comprehension-structure <cs>)
    (<cs> ^remove-assigner <r*1>)
    (<r*1> ^decision-count <dc>)
   -{ (<cs> ^remove-assigner <r*2>)
      (<r*2> ^decision-count { < <dc> <d*1> })}
    (<op> ^parent-receiver <r-item>)
    (<op> ^lt <lt>)
    (<s> ^current-word <cw>)
    (<lt> ^structure-type <stype>)
    -->
    (<s> ^created-assigners <cax> -)
    (<s> ^created-assigners (+ 1 <cax>) +)
    (<cs> ^not-merged-assigner <new-assigner> +)
    (<new-assigner> ^current-word <cw> +)
    (<new-assigner> ^lt <lt> +)
    (<new-assigner> ^parent-receiver <r-item> +)
    (<new-assigner> ^structure-type <stype> +)
    (<new-assigner> ^decision-count <dc> +)
}

sp {apply*create-assigner*create-item*no-remove
    (state <s> ^name comprehend-construction)
    (<s> ^comprehension-structure <cs>)
    (<cs> -^remove-assigner <r*1>)
    (<s> ^operator <op>)
    (<op> ^name create-assigner)
    (<s> ^created-assigners <cax>)
    (<op> ^parent-receiver <r-item>)
    (<op> ^lt <lt>)
    (<s> ^current-word <cw>)
    (<lt> ^structure-type <stype>)
    -->
    (<s> ^created-assigners <cax> -)
    (<s> ^created-assigners (+ 1 <cax>) +)
    (<cs> ^not-merged-assigner <new-assigner> +)
    (<new-assigner> ^current-word <cw> +)
    (<new-assigner> ^lt <lt> +)
    (<new-assigner> ^parent-receiver <r-item> +)
    (<new-assigner> ^structure-type <stype> +)
}

sp {apply*create-assigner*create-item
    (state <s> ^created-assigners <cax>)
    (<s> -^name comprehend-construction)
    (<s> ^operator <op>)
    (<op> ^name create-assigner)
    (<s> ^comprehension-structure <cs>)
    (<op> ^parent-receiver <r-item>)
    (<op> ^lt <lt>)
    (<s> ^current-word <cw>)
    (<lt> ^structure-type <stype>)
    -->
    (<s> ^created-assigners <cax> -)
    (<s> ^created-assigners (+ 1 <cax>) +)
    (<cs> ^not-merged-assigner <new-assigner> +)
    (<new-assigner> ^current-word <cw> +)
    (<new-assigner> ^lt <lt> +)
    (<new-assigner> ^parent-receiver <r-item> +)
    (<new-assigner> ^structure-type <stype> +)
}

sp {comprehend-word*propose*create-assigner*super-type
    (state <s> ^retrieved-lexical-item <r*1>)
    (<r*1> ^super-type <super-t>)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <r-item>)
    (<r-item> ^super-type <super-t>)
    (<r-item> ^current-word <cw>)
    (<s> ^current-word <cw>)
    (<super-t> ^assigners <id>)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^not-merged-assigner <item>)
      (<item> ^parent-receiver <r-item>)
      (<item> ^lt <id>)
      (<item> ^current-word <cw>)}
    (<id> ^structure-type <stype>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name create-assigner +)
    (<op> ^lt <id> +)
    (<op> ^parent-receiver <r-item> +)
}

sp {comprehend-word*propose*create-assigner
    (state <s> ^retrieved-lexical-item <a-lt>)
    (<a-lt> -^super-type <s*1>)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <r-item>)
    (<r-item> ^lt <a-lt>)
    (<r-item> ^current-word <cw>)
    (<s> ^current-word <cw>)
    (<a-lt> ^assigners <id>)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^not-merged-assigner <item>)
      (<item> ^parent-receiver <r-item>)
      (<item> ^lt <id>)
      (<item> ^current-word <cw>)}
    (<id> ^structure-type <stype>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name create-assigner +)
    (<op> ^lt <id> +)
    (<op> ^parent-receiver <r-item> +)
}

sp {comprehend-word*expand-structure*retrieved-lexical-item
    (state <s> ^comprehension-structure <c*1>)
    (<c*1> ^retrieved-lexical-item <x>)
    (<s> ^name { << comprehend-word comprehend-construction >> <n*1> })
    -->
    (<s> ^retrieved-lexical-item <x> +)
}

sp {comprehend-word*elaborate*substate2
    (state <s> ^name comprehend-word)
    (<s> -^name comprehend-construction)
    -->
    (<s> ^comprehension-structure <cs> +)
    (<cs> ^type word +)
}

sp {comprehend-word*elaborate*substate
    (state <s> ^name comprehend-word)
    (<s> -^name comprehend-construction)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^name comprehend-word)
    (<so> ^current-word <cw>)
    -->
    (<s> ^current-word <cw> +)
    (<s> ^created-assigners 0 +)
    (<s> ^retrievals 0 +)
}

sp {comprehension*compare*comprehend-word
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name process-phrase-end)
    (<s> ^operator <op1> +)
    (<op1> ^name comprehend-word)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {apply*comprehend-word*skip-*
    (state <s> ^operator <op>)
    (<op> ^name comprehend-word)
    (<s> ^segment <seg>)
    (<seg> ^current-word <cw>)
    (<cw> ^spelling *)
    -->
    (<seg> ^comprehension-structure <cs> +)
    (<cw> ^processed true +)
    (<cs> ^processed true +)
}

sp {comprehension*propose*comprehend-word*retry
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^retry <retry>)
    (<retry> ^current-word <cw>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name comprehend-word +)
    (<o> ^current-word <cw> +)
    (<o> ^retry <retry> +)
}

sp {comprehension*propose*comprehend-word
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^current-word <cw>)
    (<cw> -^processed true)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name comprehend-word +)
    (<o> ^current-word <cw> +)
}

sp {comprehend-word*apply*smem-construction-retrieval*failure-complete*ooth
    (state <s> ^name comprehend-construction)
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^failed-retrieval <fr>)
    (<fr> ^prior-word-first false)
    (<fr> ^current-word U)
    (<fr> ^prior-word U)
    (<s> ^prior-item <p-item>)
    (<p-item> -^structure-type <pick-type>)
    (<s> ^current-item <c-item>)
    (<c-item> -^structure-type <up-type>)
    (<s> ^comprehension-structure <cs>)
    (<s> ^segment <seg>)
    -->
    (<seg> ^comprehension-structure <cs> +)
    (<cs> ^processed true +)
    (<cs> ^failed true +)
}

sp {comprehend-word*apply*smem-construction-retrieval*failure-complete*unknown-prior
    (state <s> ^name comprehend-construction)
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^failed-retrieval <fr>)
    (<fr> ^prior-word-first false)
    (<fr> ^prior-word U)
    (<s> ^prior-item <p-item>)
    (<p-item> -^structure-type <s*1>)
    (<s> ^current-item <c-item>)
    (<fr> ^current-word <up-type>)
    (<c-item> ^structure-type <up-type>)
    (<s> ^comprehension-structure <cs>)
    (<s> ^segment <seg>)
    -->
    (<seg> ^comprehension-structure <cs> +)
    (<cs> ^processed true +)
    (<cs> ^failed true +)
}

sp {comprehend-word*apply*smem-construction-retrieval*failure-complete*unknown-current
    (state <s> ^name comprehend-construction)
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^failed-retrieval <fr>)
    (<fr> ^current-word U)
    (<s> ^current-item <c-item>)
    (<c-item> -^structure-type <s*1>)
    (<s> ^prior-item <p-item>)
    (<fr> ^prior-word <pick-type>)
    (<p-item> ^structure-type <pick-type>)
    (<s> ^comprehension-structure <cs>)
    (<s> ^segment <seg>)
    -->
    (<seg> ^comprehension-structure <cs> +)
    (<cs> ^processed true +)
    (<cs> ^failed true +)
}

sp {comprehend-word*apply*smem-construction-retrieval*failure-complete2
    (state <s> ^name comprehend-construction)
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^failed-retrieval <fr>)
    (<fr> ^prior-word-first true)
    (<s> ^prior-item <p-item>)
    (<p-item> ^current-word <c*1>)
    (<c*1> ^first-word true)
    (<fr> ^prior-word <pick-type>)
    (<p-item> ^structure-type <pick-type>)
    (<s> ^current-item <c-item>)
    (<fr> ^current-word <up-type>)
    (<c-item> ^structure-type <up-type>)
    (<s> ^comprehension-structure <cs>)
    (<s> ^segment <seg>)
    -->
    (<seg> ^comprehension-structure <cs> +)
    (<cs> ^processed true +)
    (<cs> ^failed true +)
}

sp {comprehend-word*apply*smem-construction-retrieval*failure-complete
    (state <s> ^name comprehend-construction)
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^failed-retrieval <fr>)
    (<fr> ^prior-word-first false)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*1>)
      (<c*1> ^first-word true)}
    (<fr> ^prior-word <pick-type>)
    (<p-item> ^structure-type <pick-type>)
    (<s> ^current-item <c-item>)
    (<fr> ^current-word <up-type>)
    (<c-item> ^structure-type <up-type>)
    (<s> ^comprehension-structure <cs>)
    (<s> ^segment <seg>)
    -->
    (<seg> ^comprehension-structure <cs> +)
    (<cs> ^processed true +)
    (<cs> ^failed true +)
}

sp {comprehend-word*apply*smem-construction-retrieval*fail
    (state <s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^failure <t>)
    (<smem> ^command <cmd>)
    (<cmd> ^query <query>)
    (<s> ^superstate <s*1>)
    (<s> ^operator <o*1>)
    (<o*1>
          ^name { << smem-construction-retrieval smem-lexical-retrieval-cw-pw smem-lexical-retrieval-cw-pw-type >> <opname> })
    (<s*1> ^operator <so>)
    -->
    (<s> ^failed-retrieval <query> +)
    (<s> ^failed-operator <opname> +)
    (<cmd> ^query <query> -)
    (<cmd> ^depth 9 -)
}

sp {comprehend-construction*apply*smem-construction-retrieval*success*words-from-constructions
    (state <s> ^operator <o>)
    (<o> ^name smem-construction-retrieval)
    (<o> ^words <words>)
    (<s> ^comprehension-structure <cs>)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<rli> ^construction <sp>)
    (<smem> ^command <c>)
    (<c> ^query <q>)
    -->
    (<cs> ^words <words> +)
}

sp {comprehend-construction*apply*smem-construction-retrieval*success*construction
    (state <s> ^operator <o*1>)
    (<o*1> ^name smem-construction-retrieval)
    (<s> ^comprehension-structure <cs>)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<rli> ^construction <sp>)
    (<rli> ^current-word <up>)
    (<rli> ^prior-word <pick>)
    (<smem> ^command <c>)
    (<c> ^query <q>)
    (<q> ^current-word <up>)
    (<q> ^prior-word <pick>)
    -->
    (<c> ^query <q> -)
    (<c> ^depth 9 -)
    (<cs> ^retrieved-lexical-item <rli> +)
    (<cs> ^successful-query <q> +)
}

sp {comprehend-construction*apply*smem-construction-retrieval*success
    (state <s> ^operator <o*1>)
    (<o*1> ^name smem-construction-retrieval)
    (<s> ^comprehension-structure <cs>)
    (<s> ^smem <smem>)
    (<smem> ^result <r*1>)
    (<r*1> ^retrieved <rli>)
    (<rli> ^current-word <up>)
    (<rli> ^prior-word <pick>)
    (<rli> ^spelling <sp>)
    (<smem> ^command <c>)
    (<c> ^query <q>)
    (<q> ^current-word <up>)
    (<q> ^prior-word <pick>)
    -->
    (<c> ^query <q> -)
    (<c> ^depth 9 -)
    (<cs> ^retrieved-lexical-item <rli> +)
    (<cs> ^successful-query <q> +)
}

sp {comprehend-construction*apply*smem-construction-retrieval*receiver
    (state <s> ^operator <o>)
    (<o> ^prior-word-first false)
    (<o> ^name smem-construction-retrieval)
    (<o> ^prior-structure <pick>)
    (<o> ^current-structure <up>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^query <x> +)
    (<cmd> ^depth 9 +)
    (<x> ^current-word <up> +)
    (<x> ^prior-word <pick> +)
    (<x> ^prior-word-first false +)
}

sp {comprehend-construction*apply*smem-construction-retrieval*receiver*first-word-true
    (state <s> ^operator <o>)
    (<o> ^prior-word-first true)
    (<o> ^name smem-construction-retrieval)
    (<o> ^prior-structure <pick>)
    (<o> ^current-structure <up>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^query <x> +)
    (<cmd> ^depth 9 +)
    (<x> ^current-word <up> +)
    (<x> ^prior-word <pick> +)
    (<x> ^prior-word-first true +)
}

sp {comprehend-construction*compare*smem-construction-retrieval
    (state <s> ^name comprehend-construction)
    (<s> ^operator <op2> +)
    (<op2> ^name smem-construction-retrieval)
    (<s> ^operator <op1> +)
    (<op1> ^name smem-construction-retrieval)
    (<op2> ^priority <p*1>)
    (<op1> ^priority { < <p*1> <p> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-structure-type*both-unknown
    (state <s> ^name comprehend-construction)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first false)
      (<fr2> ^current-word U)
      (<fr2> ^prior-word U)}
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*2>)
      (<c*2> ^first-word true)}
    (<p-item> -^structure-type <s*2>)
    (<s> ^current-item <c-item>)
    (<c-item> -^structure-type <s*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure U +)
    (<o> ^prior-structure U +)
    (<o> ^prior-word-first false +)
    (<o> ^priority 8 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-structure-type*current-unknown*missing
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*2>)
      (<c*2> ^first-word true)}
    (<s> ^current-item <c-item>)
    (<c-item> -^structure-type <s*1>)
    (<p-item> ^structure-type <pick-type>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first false)
      (<fr2> ^current-word U)
      (<fr2> ^prior-word <pick-type>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure U +)
    (<o> ^prior-structure <pick-type> +)
    (<o> ^prior-word-first false +)
    (<o> ^priority 8 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-structure-type*current-unknown
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*2>)
      (<c*2> ^first-word true)}
    (<s> ^current-item <c-item>)
    (<c-item> ^structure-type U)
    (<p-item> ^structure-type <pick-type>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first false)
      (<fr2> ^current-word U)
      (<fr2> ^prior-word <pick-type>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure U +)
    (<o> ^prior-structure <pick-type> +)
    (<o> ^prior-word-first false +)
    (<o> ^priority 8 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-structure-type*prior-unknown
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*2>)
      (<c*2> ^first-word true)}
    (<p-item> -^structure-type <s*1>)
    (<s> ^current-item <c-item>)
    (<c-item> ^structure-type <up-type>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first false)
      (<fr2> ^current-word <up-type>)
      (<fr2> ^prior-word U)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-type> +)
    (<o> ^prior-structure U +)
    (<o> ^prior-word-first false +)
    (<o> ^priority 8 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-structure-type
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*2>)
      (<c*2> ^first-word true)}
    (<s> ^current-item <c-item>)
    (<p-item> ^structure-type <pick-type>)
    (<c-item> ^structure-type <up-type>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first false)
      (<fr2> ^current-word <up-type>)
      (<fr2> ^prior-word <pick-type>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-type> +)
    (<o> ^prior-structure <pick-type> +)
    (<o> ^prior-word-first false +)
    (<o> ^priority 8 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-structure-type*prior-word-first*both-Unknown
    (state <s> ^name comprehend-construction)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first true)
      (<fr2> ^current-word U)
      (<fr2> ^prior-word U)}
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
    (<p-item> -^structure-type <s*2>)
    (<s> ^current-item <c-item>)
    (<c-item> -^structure-type <s*1>)
    (<p-item> ^current-word <c*2>)
    (<c*2> ^first-word true)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure U +)
    (<o> ^prior-structure U +)
    (<o> ^prior-word-first true +)
    (<o> ^priority 7 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-structure-type*prior-word-first*current-Unknown
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^current-item <c-item>)
    (<c-item> -^structure-type <s*1>)
    (<s> ^prior-item <p-item>)
    (<p-item> ^current-word <c*2>)
    (<c*2> ^first-word true)
    (<p-item> ^structure-type <pick-type>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first true)
      (<fr2> ^current-word U)
      (<fr2> ^prior-word <pick-type>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure U +)
    (<o> ^prior-structure <pick-type> +)
    (<o> ^prior-word-first true +)
    (<o> ^priority 7 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-structure-type*prior-word-first*unknown*prior
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
    (<p-item> -^structure-type <s*1>)
    (<p-item> ^current-word <c*2>)
    (<c*2> ^first-word true)
    (<s> ^current-item <c-item>)
    (<c-item> ^structure-type <up-type>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first true)
      (<fr2> ^current-word <up-type>)
      (<fr2> ^prior-word U)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-type> +)
    (<o> ^prior-structure U +)
    (<o> ^prior-word-first true +)
    (<o> ^priority 7 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-structure-type*prior-word-first
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
    (<p-item> ^current-word <c*2>)
    (<c*2> ^first-word true)
    (<s> ^current-item <c-item>)
    (<p-item> ^structure-type <pick-type>)
    (<c-item> ^structure-type <up-type>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first true)
      (<fr2> ^current-word <up-type>)
      (<fr2> ^prior-word <pick-type>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-type> +)
    (<o> ^prior-structure <pick-type> +)
    (<o> ^prior-word-first true +)
    (<o> ^priority 7 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-word*unknown
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*2>)
      (<c*2> ^first-word true)}
    (<s> ^current-item <c-item>)
    (<c-item> -^structure-type <s*2>)
    (<p-item> ^lt <lli>)
    (<lli> ^spelling <pick-word>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first false)
      (<fr2> ^current-word U)
      (<fr2> ^prior-word <pick-word>)}
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure U +)
    (<o> ^prior-structure <pick-word> +)
    (<o> ^prior-word-first false +)
    (<o> ^words prior-word +)
    (<o> ^priority 6 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-word
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*2>)
      (<c*2> ^first-word true)}
    (<s> ^current-item <c-item>)
    (<p-item> ^lt <lli>)
    (<c-item> ^structure-type <up-type>)
    (<lli> ^spelling <pick-word>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first false)
      (<fr2> ^current-word <up-type>)
      (<fr2> ^prior-word <pick-word>)}
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-type> +)
    (<o> ^prior-structure <pick-word> +)
    (<o> ^prior-word-first false +)
    (<o> ^words prior-word +)
    (<o> ^priority 6 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-word*first*unknown
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^current-item <c-item>)
    (<c-item> -^structure-type <s*2>)
    (<s> ^prior-item <p-item>)
    (<p-item> ^current-word <c*2>)
    (<c*2> ^first-word true)
    (<p-item> ^lt <lli>)
    (<lli> ^spelling <pick-word>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first true)
      (<fr2> ^current-word U)
      (<fr2> ^prior-word <pick-word>)}
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure U +)
    (<o> ^prior-structure <pick-word> +)
    (<o> ^prior-word-first true +)
    (<o> ^words prior-word +)
    (<o> ^priority 5 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-type-word*first
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
    (<p-item> ^current-word <c*2>)
    (<c*2> ^first-word true)
    (<s> ^current-item <c-item>)
    (<p-item> ^lt <lli>)
    (<c-item> ^structure-type <up-type>)
    (<lli> ^spelling <pick-word>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first true)
      (<fr2> ^current-word <up-type>)
      (<fr2> ^prior-word <pick-word>)}
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-type> +)
    (<o> ^prior-structure <pick-word> +)
    (<o> ^prior-word-first true +)
    (<o> ^words prior-word +)
    (<o> ^priority 5 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-word-not-phrase*unknown
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*3>)
      (<c*3> ^first-word true)}
    (<p-item> -^structure-type <s*2>)
   -{ (<p-item> ^lt <l*1>)
      (<l*1> ^converts-to <c*2>)}
    (<s> ^current-item <c-item>)
    (<c-item> ^lt <lli>)
    (<lli> ^spelling <up-word>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first false)
      (<fr2> ^current-word <up-word>)
      (<fr2> ^prior-word U)}
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-word> +)
    (<o> ^prior-structure U +)
    (<o> ^words current-word +)
    (<o> ^prior-word-first false +)
    (<o> ^priority 4 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-word-not-phrase
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*3>)
      (<c*3> ^first-word true)}
   -{ (<p-item> ^lt <l*1>)
      (<l*1> ^converts-to <c*2>)}
    (<s> ^current-item <c-item>)
    (<c-item> ^lt <lli>)
    (<p-item> ^structure-type <pick-type>)
    (<lli> ^spelling <up-word>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first false)
      (<fr2> ^current-word <up-word>)
      (<fr2> ^prior-word <pick-type>)}
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-word> +)
    (<o> ^prior-structure <pick-type> +)
    (<o> ^words current-word +)
    (<o> ^prior-word-first false +)
    (<o> ^priority 4 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-word-not-phrase*first-word*unknown-type
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
    (<p-item> -^structure-type <s*2>)
   -{ (<p-item> ^lt <l*1>)
      (<l*1> ^converts-to <c*2>)}
    (<p-item> ^current-word <c*3>)
    (<c*3> ^first-word true)
    (<s> ^current-item <c-item>)
    (<c-item> ^lt <lli>)
    (<lli> ^spelling <up-word>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first true)
      (<fr2> ^current-word <up-word>)
      (<fr2> ^prior-word U)}
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-word> +)
    (<o> ^prior-structure U +)
    (<o> ^words current-word +)
    (<o> ^prior-word-first true +)
    (<o> ^priority 3 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-word-not-phrase*first-word
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^lt <l*1>)
      (<l*1> ^converts-to <c*2>)}
    (<p-item> ^current-word <c*3>)
    (<c*3> ^first-word true)
    (<s> ^current-item <c-item>)
    (<c-item> ^lt <lli>)
    (<p-item> ^structure-type <pick-type>)
    (<lli> ^spelling <up-word>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first true)
      (<fr2> ^current-word <up-word>)
      (<fr2> ^prior-word <pick-type>)}
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-word> +)
    (<o> ^prior-structure <pick-type> +)
    (<o> ^words current-word +)
    (<o> ^prior-word-first true +)
    (<o> ^priority 3 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-word-phrase
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
   -{ (<p-item> ^current-word <c*2>)
      (<c*2> ^first-word true)}
    (<s> ^current-item <c-item>)
    (<p-item> ^lt <l*1>)
    (<l*1> ^converts-to <pick-type>)
    (<p-item> ^structure-type <pick-type>)
    (<c-item> ^lt <lli>)
    (<lli> ^spelling <up-word>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first false)
      (<fr2> ^current-word <up-word>)
      (<fr2> ^prior-word <pick-type>)}
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-word> +)
    (<o> ^prior-structure <pick-type> +)
    (<o> ^words current-word +)
    (<o> ^prior-word-first false +)
    (<o> ^priority 2 +)
}

sp {comprehend-construction*propose*smem-construction-retrieval*structure-word-phrase*first-word
    (state <s> ^name comprehend-construction)
   -{ (<s> ^comprehension-structure <c*1>)
      (<c*1> ^retrieved-lexical-item <r*2>)}
    (<s> -^retrieved-lexical-item <r*1>)
    (<s> ^prior-item <p-item>)
    (<p-item> ^current-word <c*2>)
    (<c*2> ^first-word true)
    (<s> ^current-item <c-item>)
    (<p-item> ^lt <l*1>)
    (<l*1> ^converts-to <pick-type>)
    (<p-item> ^structure-type <pick-type>)
    (<c-item> ^lt <lli>)
    (<lli> ^spelling <up-word>)
   -{ (<s> ^failed-retrieval <fr2>)
      (<fr2> ^prior-word-first true)
      (<fr2> ^current-word <up-word>)
      (<fr2> ^prior-word <pick-type>)}
    (<s> ^segment <s*1>)
    (<s*1> ^retrieved-stack <rs>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-construction-retrieval +)
    (<o> ^current-structure <up-word> +)
    (<o> ^prior-structure <pick-type> +)
    (<o> ^words current-word +)
    (<o> ^prior-word-first true +)
    (<o> ^priority 1 +)
}

sp {apply*remove-stale-receiver
    (state <s> ^operator <o>)
    (<o> ^name remove-stale-receiver)
    (<o> ^stale-receiver <uri1>)
    (<s> ^comprehension-structure <cs>)
    (<uri1> ^current-word <c*1>)
    (<uri1> ^structure-type <st>)
    (<c*1> ^spelling <pw>)
    -->
    (<cs> ^remove-receiver <uri1> +)
}

sp {comprehend-construction*propose*remove-stale-receiver-second-most-recent
    (state <s> ^name comprehend-construction)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^words prior-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <uri1>)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^remove-receiver <uri1>)}
    (<seg> ^retrieved-stack <r*1>)
    (<r*1> ^prior <p*1>)
    (<p*1> ^item <uri1>)
    (<uri1> ^lt <l*1>)
    (<uri1> ^structure-type <type>)
    (<l*1> ^spelling <spelling>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> <)
    (<op> ^name remove-stale-receiver +)
    (<op> ^stale-receiver <uri1> +)
}

sp {comprehend-construction*propose*remove-stale-receiver-most-recent
    (state <s> ^name comprehend-construction)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^words current-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <uri1>)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^remove-receiver <uri1>)}
    (<seg> ^retrieved-stack <r*1>)
    (<r*1> ^item <uri1>)
    (<uri1> ^lt <l*1>)
    (<uri1> ^structure-type <type>)
    (<l*1> ^spelling <spelling>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> <)
    (<op> ^name remove-stale-receiver +)
    (<op> ^stale-receiver <uri1> +)
}

sp {apply*remove-stale-assigner
    (state <s> ^operator <op>)
    (<op> ^name remove-stale-assigner)
    (<s> ^comprehension-structure <cs>)
    (<op> ^assigner <uai>)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <uai>)
    (<uai> ^structure-type <st>)
    (<op> ^word <pw>)
    -->
    (<cs> ^remove-assigner <uai> +)
}

sp {comprehend-construction*propose*remove-stale-assigner2
    (state <s> ^name comprehend-construction)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^words prior-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <uai>)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^remove-assigner <uai>)}
    (<seg> ^retrieved-stack <r*1>)
    (<r*1> ^prior <p*1>)
    (<uai> ^parent-receiver <pr>)
    (<pr> ^structure-type <pst>)
    (<pr> ^spelling <pw>)
    (<p*1> ^item <i*1>)
    (<i*1> ^current-word <c*3>)
    (<c*3> ^spelling <pw>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> <)
    (<op> ^name remove-stale-assigner +)
    (<op> ^assigner <uai> +)
    (<op> ^word <pw> +)
}

sp {comprehend-construction*propose*remove-stale-assigner
    (state <s> ^name comprehend-construction)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^words current-word)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-assigner <uai>)
   -{ (<s> ^comprehension-structure <c*2>)
      (<c*2> ^remove-assigner <uai>)}
    (<seg> ^retrieved-stack <r*1>)
    (<uai> ^parent-receiver <pr>)
    (<pr> ^structure-type <pst>)
    (<pr> ^spelling <pw>)
    (<r*1> ^item <i*1>)
    (<i*1> ^current-word <c*3>)
    (<c*3> ^spelling <pw>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> <)
    (<op> ^name remove-stale-assigner +)
    (<op> ^assigner <uai> +)
    (<op> ^word <pw> +)
}

sp {comprehend-construction*current-word
    (state <s> ^name comprehend-construction)
    (<s> ^comprehension-structure <c*1>)
    (<c*1> ^retrieved-lexical-item <x>)
    -->
    (<s> ^current-word <x> +)
}

sp {comprehend-construction*elaborate*substate2
    (state <s> ^name comprehend-construction)
    -->
    (<s> ^comprehension-structure <cs> +)
    (<cs> ^type construction +)
}

sp {comprehend-construction*elaborate*substate
    (state <s> ^name comprehend-construction)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^name comprehend-construction)
    (<so> ^prior-item <p-item>)
    (<so> ^current-item <c-item>)
    -->
    (<s> ^current-item <c-item> +)
    (<s> ^prior-item <p-item> +)
    (<s> ^created-assigners 0 +)
    (<s> ^retrievals 0 +)
}

sp {comprehension*compare*comprehend-construction*process-phrase-end
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name comprehend-construction)
    (<s> ^operator <op2> +)
    (<op2> ^name { << process-phrase-end >> <n*1> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*comprehend-construction*process-semantics
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name comprehend-construction)
    (<s> ^operator <op2> +)
    (<op2> ^name { << process-semantics >> <n*1> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*merge*comprehend-construction*diff*pi
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op1> ^receiver <pi>)
    (<s> ^operator <op2> +)
    (<op2> -^prior-item <pi>)
    (<op2> ^name { << comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-construction*prefer-merge-to-terminal
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name comprehend-construction)
    (<op2> ^current-item <c*1>)
    (<c*1> ^structure-type T)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-construction3
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op1> ^assigner <a*1>)
    (<a*1> ^lt <l*1>)
    (<l*1> ^delay-merge true)
    (<op1> ^receiver <pi>)
    (<s> ^operator <op2> +)
    (<op2> ^prior-item <pi>)
    (<op2> ^current-item <c*1>)
    (<c*1> ^lt <l*2>)
    (<l*2> ^delay-retry true)
    (<op2> ^name { << comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-construction2
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
   -{ (<op2> ^current-item <c*1>)
      (<c*1> ^lt <l*2>)
      (<l*2> ^delay-retry true)}
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op2> ^prior-item <pi>)
    (<op1> ^receiver <pi>)
    (<op1> ^assigner <a*1>)
    (<a*1> ^lt <l*1>)
    (<l*1> ^delay-merge true)
    (<op2> ^name { << comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op1> -)
}

sp {comprehension*compare*merge*comprehend-construction
    (state <s> ^name comprehension)
   -{ (<s> ^operator <op3> +)
      (<op3> ^name merge)
      (<op3> ^assigner <a*1>)
      (<a*1> ^lt <l*1>)
      (<l*1> ^delay-merge true)}
    (<s> ^operator <op1> +)
   -{ (<op1> ^assigner <a*2>)
      (<a*2> ^lt <l*2>)
      (<l*2> ^delay-merge true)}
    (<op1> ^name merge)
    (<op1> ^receiver <pi>)
    (<s> ^operator <op2> +)
    (<op2> ^prior-item <pi>)
    (<op2> ^name { << comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*compare*merge*comprehend-construction*avoid-tie
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name comprehend-construction)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<op2> ^prior-item <pi>)
    (<op1> ^receiver <pi>)
    -->
    (<s> ^operator <op1> = <op2>)
}

sp {comprehension*compare*merge*comprehend-word*comprehend-completion
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name merge)
    (<s> ^operator <op2> +)
    (<op2> ^name { << comprehend-completion >> <n*1> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {comprehension*compare*comprehend-construction
    (state <s> ^name comprehension)
    (<s> ^operator <op2> +)
    (<op2> ^name next-word)
    (<s> ^operator <op1> +)
    (<op1> ^name comprehend-construction)
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {comprehension*propose*comprehend-construction*failed-merge
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
   -{ (<seg> ^comprehension-structure <cs>)
      (<cs> ^processed true)
      (<cs> ^type construction)}
    (<seg> -^failed-construction true)
   -{ (<seg> ^current-word <c*2>)
      (<c*2> ^comprehend-completed true)}
    (<seg> ^not-merged-assigner <ass>)
    (<ass> ^failed merge)
    (<seg> ^current-word <c*1>)
    (<c*1> ^processed true)
    (<seg> ^retrieved-stack <rs>)
    (<seg> ^not-merged-receiver <c-item>)
    (<rs> ^item <c-item>)
    (<rs> ^prior <p*1>)
    (<seg> ^not-merged-receiver <p-item>)
    (<p*1> ^item <p-item>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name comprehend-construction +)
    (<op> ^failed-assigner <ass> +)
    (<op> ^current-item <c-item> +)
    (<op> ^prior-item <p-item> +)
}

sp {comprehension*propose*comprehend-construction2*unknown
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
   -{ (<seg> ^comprehension-structure <cs>)
      (<cs> ^processed true)
      (<cs> ^type construction)}
   -{ (<seg> ^not-merged-assigner <n*1>)
      (<n*1> ^structure-type U)}
    (<seg> -^failed-construction true)
   -{ (<seg> ^current-word <c*2>)
      (<c*2> ^comprehend-completed true)}
    (<seg> ^not-merged-receiver <c-item>)
   -{ (<c-item> ^lt <l*2>)
      (<l*2> ^structure CP)}
    (<c-item> -^structure-type <s*1>)
    (<seg> ^retrieved-stack <rs>)
    (<rs> ^item <c-item>)
    (<seg> ^current-word <c*1>)
    (<c*1> ^processed true)
    (<rs> ^prior <p*1>)
    (<seg> ^not-merged-receiver { <> nil <p-item> })
    (<p*1> ^item <p-item>)
    (<c-item> ^lt <l*1>)
    (<l*1> ^converts-to { <> CP <dp> })
   -{ (<seg> ^not-merged-assigner <n*2>)
      (<n*2> ^structure-type <dp>)}
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name comprehend-construction +)
    (<op> ^current-item <c-item> +)
    (<op> ^prior-item <p-item> +)
}

sp {comprehension*propose*comprehend-construction2
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
   -{ (<seg> ^comprehension-structure <cs>)
      (<cs> ^processed true)
      (<cs> ^type construction)}
    (<seg> -^failed-construction true)
   -{ (<seg> ^current-word <c*2>)
      (<c*2> ^comprehend-completed true)}
    (<seg> ^not-merged-receiver <c-item>)
   -{ (<c-item> ^lt <l*2>)
      (<l*2> ^structure CP)}
    (<seg> ^retrieved-stack <rs>)
    (<rs> ^item <c-item>)
    (<seg> ^current-word <c*1>)
    (<c*1> ^processed true)
    (<c-item> ^structure-type <p>)
   -{ (<seg> ^not-merged-assigner <n*1>)
      (<n*1> ^structure-type <p>)}
    (<rs> ^prior <p*1>)
    (<seg> ^not-merged-receiver { <> nil <p-item> })
    (<p*1> ^item <p-item>)
    (<c-item> ^lt <l*1>)
    (<l*1> ^converts-to { <> CP <dp> })
   -{ (<seg> ^not-merged-assigner <n*2>)
      (<n*2> ^structure-type <dp>)}
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name comprehend-construction +)
    (<op> ^current-item <c-item> +)
    (<op> ^prior-item <p-item> +)
}

sp {comprehension*propose*comprehend-construction*unknown
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
   -{ (<seg> ^comprehension-structure <cs>)
      (<cs> ^processed true)
      (<cs> ^type construction)}
   -{ (<seg> ^not-merged-assigner <n*1>)
      (<n*1> ^structure-type U)}
    (<seg> -^failed-construction true)
   -{ (<seg> ^current-word <c*2>)
      (<c*2> ^comprehend-completed true)}
    (<seg> ^not-merged-receiver <c-item>)
   -{ (<c-item> ^lt <l*2>)
      (<l*2> ^structure CP)}
   -{ (<c-item> ^lt <l*1>)
      (<l*1> ^converts-to <c*3>)}
    (<c-item> -^structure-type <s*1>)
    (<seg> ^retrieved-stack <rs>)
    (<rs> ^item <c-item>)
    (<seg> ^current-word <c*1>)
    (<c*1> ^processed true)
    (<rs> ^prior <p*1>)
    (<seg> ^not-merged-receiver { <> nil <p-item> })
    (<p*1> ^item <p-item>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name comprehend-construction +)
    (<op> ^current-item <c-item> +)
    (<op> ^prior-item <p-item> +)
}

sp {comprehension*propose*comprehend-construction*after-success-assigner
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
   -{ (<seg> ^comprehension-structure <cs>)
      (<cs> ^processed true)
      (<cs> ^type construction)}
    (<seg> -^failed-construction true)
   -{ (<seg> ^current-word <c*2>)
      (<c*2> ^comprehend-completed true)}
    (<seg> ^not-merged-receiver <c-item>)
   -{ (<c-item> ^lt <l*2>)
      (<l*2> ^structure CP)}
   -{ (<c-item> ^lt <l*1>)
      (<l*1> ^converts-to <dp>)
      (<c-item> -^structure-type <dp>)}
    (<seg> ^retrieved-stack <rs>)
    (<rs> ^item <c-item>)
    (<seg> ^not-merged-receiver { <> nil <p-item> })
   -{ (<seg> ^construction-comprehended <cc>)
      (<cc> ^prior-item <p-item>)
      (<cc> ^current-item <c-item>)}
    (<rs> ^prior <p*1>)
    (<p*1> ^item <p-item>)
    (<seg> ^current-word <c*1>)
    (<c*1> ^processed true)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name comprehend-construction +)
    (<op> ^current-item <c-item> +)
    (<op> ^prior-item <p-item> +)
}

sp {apply*comprehend-completion*failed-without-stack
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <c*1>)
    (<c*1> ^failed true)
    (<seg> ^retrieved-stack <rs>)
    (<rs> ^prior <p>)
    (<p> ^prior nil)
    -->
    (<seg> ^failed-construction true +)
}

sp {apply*comprehend-completion*failed-with-stack
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <c*1>)
    (<c*1> ^failed true)
    (<seg> ^retrieved-stack <rs>)
    (<rs> ^prior <p>)
    (<p> ^prior { <> nil <p2> })
    -->
    (<rs> ^prior <p> -)
    (<rs> ^prior <p2> +)
}

sp {apply*comprehend-completion*stale-receiver-prior-word
    (state <s> ^quiescence t)
    (<s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <ss>)
    (<ss> ^comprehension-structure <cs>)
    (<cs> ^words prior-word)
    (<ss> ^retrieved-stack <rc>)
    (<rc> ^prior <prior>)
    (<cs> ^remove-receiver <item>)
    (<prior> ^item <item>)
    (<prior> ^prior <prior2>)
    -->
    (<rc> ^prior <prior> -)
    (<rc> ^prior <prior2> +)
}

sp {apply*comprehend-completion*create-receiver*push-retrieved-stack*skip2*stale-receiver
    (state <s> ^quiescence t)
    (<s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <ss>)
    (<ss> ^retrieved-stack <rc>)
    (<rc> ^prior <prior>)
    (<prior> ^prior <prior2>)
    (<ss> ^comprehension-structure <cs>)
    (<cs> ^remove-receiver <rr2>)
    (<prior> ^item <rr2>)
    (<cs> ^remove-receiver <rr>)
    (<rc> ^item <rr>)
    (<cs> ^not-merged-receiver { <> <rr> <item> })
    -->
    (<ss> ^retrieved-stack <rc> -)
    (<ss> ^retrieved-stack <nrc> +)
    (<nrc> ^item <item> +)
    (<nrc> ^prior <prior2> +)
}

sp {apply*comprehend-completion*save-most-recent-alternative-structure
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <nmr>)
    (<nmr> ^lt <l*1>)
    (<l*1> ^alternative-structure <a*1>)
    -->
    (<seg> ^alternative-structure-receiver <nmr> +)
}

sp {apply*comprehend-completion*create-receiver*push-retrieved-stack*skip1*stale-receiver
    (state <s> ^quiescence t)
    (<s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <ss>)
    (<ss> ^retrieved-stack <rc>)
    (<rc> ^prior <prior>)
    (<ss> ^comprehension-structure <cs>)
    (<cs> ^remove-receiver <rr>)
    (<rc> ^item <rr>)
    (<prior> ^item <rr2>)
    (<cs> -^remove-receiver <rr2>)
    (<cs> ^not-merged-receiver { <> <rr> <item> })
    -->
    (<rc> ^item <rr> -)
    (<rc> ^item <item> +)
}

sp {apply*comprehend-completion*create-receiver*push-retrieved-stack*replace*stale-receiver
    (state <s> ^quiescence t)
    (<s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <ss>)
    (<ss> ^retrieved-stack <rc>)
    (<rc> ^prior nil)
    (<ss> ^comprehension-structure <cs>)
    (<cs> ^type word)
    (<cs> ^remove-receiver <rr>)
    (<rc> ^item <rr>)
    (<cs> ^not-merged-receiver { <> <rr> <item> })
    -->
    (<rc> ^item <rr> -)
    (<rc> ^item <item> +)
}

sp {apply*comprehend-completion*create-receiver*push-retrieved-stack*noskip
    (state <s> ^quiescence t)
    (<s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <ss>)
    (<ss> ^comprehension-structure <cs>)
    (<cs> ^type word)
    (<ss> ^retrieved-stack <rc>)
    (<rc> ^item <rr>)
    (<cs> -^remove-receiver <rr>)
    (<cs> ^not-merged-receiver { <> <rr> <item> })
    -->
    (<ss> ^retrieved-stack <rc> -)
    (<ss> ^retrieved-stack <nrc> +)
    (<nrc> ^item <item> +)
    (<nrc> ^prior <rc> +)
}

sp {apply*comprehend-completion*create-receiver*init-retrieved-stack
    (state <s> ^segment <ss>)
    (<ss> -^retrieved-stack <x>)
    (<s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<ss> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    -->
    (<ss> ^retrieved-stack <stack> +)
    (<stack> ^item <item> +)
    (<stack> ^prior nil +)
}

sp {apply*comprehend-completion*remove-comprehension-structure*snip-assigner
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <c*1>)
    (<c*1> ^remove-assigner <rr>)
    (<seg> ^not-merged-assigner <rr>)
    -->
    (<seg> ^not-merged-assigner <rr> -)
}

sp {apply*comprehend-completion*remove-comprehension-structure*snip-receiver
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <c*1>)
    (<c*1> ^remove-receiver <rr>)
    (<seg> ^not-merged-receiver <rr>)
    -->
    (<seg> ^not-merged-receiver <rr> -)
}

sp {comprehension*compare*comprehend-completion*comprehend-construction
    (state <s> ^name comprehension)
    (<s> ^operator <op1> +)
    (<op1> ^name comprehend-completion)
    (<s> ^operator <op2> +)
    (<op2> ^name { << failed-comprehension comprehend-construction >> <n*1> })
    -->
    (<s> ^operator <op1> > <op2>)
}

sp {apply*comprehend-completion*new-word*verb
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <c*1>)
    (<c*1> ^new-word <nw>)
    (<nw> ^structure-type V)
    (<seg> ^semantics <sem>)
    (<nw> ^spelling <spelling>)
    -->
    (<sem> ^new-word <nw> +)
}

sp {apply*comprehend-completion*new-word
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <c*1>)
    (<c*1> ^new-word <nw>)
    (<seg> ^semantics <sem>)
    (<nw> ^structure-type { <> V <> UV <s*1> })
    (<nw> ^spelling <spelling>)
    -->
    (<sem> ^new-word <nw> +)
    (<sem> ^interaction-status <i*1> +)
    (<i*1> ^failure <failure> +)
    (<failure> ^type unknown-word +)
    (<failure> ^word <spelling> +)
}

sp {apply*comprehend-completion*remove-comprehension-structure*assigner
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-assigner <item>)
    -->
    (<seg> ^not-merged-assigner <item> +)
}

sp {apply*comprehend-completion*remove-comprehension-structure*receiver*still-first-word
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <cs>)
    (<cs> ^first-word true)
    (<cs> ^not-merged-receiver <item>)
    (<item> ^current-word <cw>)
    -->
    (<cw> ^first-word true +)
}

sp {apply*comprehend-completion*remove-comprehension-structure*receiver
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <c*1>)
    (<c*1> ^not-merged-receiver <item>)
    -->
    (<seg> ^not-merged-receiver <item> +)
}

sp {apply*comprehend-completion*remove-comprehension-structure-word
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <c*1>)
    (<c*1> ^failed true)
    (<seg> ^current-word <cw>)
    -->
    (<cw> ^comprehend-completed true +)
}

sp {apply*comprehend-completion*remove-comprehension-structure
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehend-completion)
    (<s> ^segment <seg>)
    (<seg> ^comprehension-structure <cs>)
    -->
    (<seg> ^comprehension-structure <cs> -)
}

sp {comprehension*propose*comprehend-completion
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^comprehension-structure <c*1>)
    (<c*1> ^processed true)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name comprehend-completion +)
}

sp {comprehension*elaborate*state*sentence
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^original-sentence <o*1>)
    (<o*1> ^complete-sentence <w>)
    -->
    
}

sp {comprehension*elaborate*state
    (state <s> ^name comprehension)
    (<s> ^segment <s*1>)
    (<s*1> ^current-word <c*1>)
    (<c*1> ^spelling <w>)
    -->
    
}

sp {evaluate-operator*apply*count-grounded-verbs*5
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^structure-type { << V VP G GP >> <s*2> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    (<aps> ^{ << complement complement2 >> <a*1> } <comp>)
    (<comp> ^referent <r*1>)
    (<comp> ^referent { > <r*1> <sg4> })
    (<comp> ^referent { > <sg4> > <r*1> <sg3> })
    (<comp> ^referent { > <sg3> > <sg4> > <r*1> <sg2> })
    (<comp> ^referent { > <sg2> > <sg3> > <sg4> > <r*1> <sg> })
    -->
    (<e> ^final-referent-count 5 +)
}

sp {evaluate-operator*apply*count-grounded-verbs*4
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^structure-type { << V VP G GP >> <s*2> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    (<aps> ^{ << complement complement2 >> <a*1> } <comp>)
    (<comp> ^referent <sg4>)
    (<comp> ^referent { > <sg4> <sg3> })
    (<comp> ^referent { > <sg3> > <sg4> <sg2> })
    (<comp> ^referent { > <sg2> > <sg3> > <sg4> <sg> })
    (<comp> -^referent { <> <sg> <> <sg2> <> <sg3> <> <sg4> <r*1> })
    -->
    (<e> ^final-referent-count 4 +)
}

sp {evaluate-operator*apply*count-grounded-verbs*3
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^structure-type { << V VP G GP >> <s*2> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    (<aps> ^{ << complement complement2 >> <a*1> } <comp>)
    (<comp> ^referent <sg3>)
    (<comp> ^referent { > <sg3> <sg2> })
    (<comp> ^referent { > <sg2> > <sg3> <sg> })
    (<comp> -^referent { <> <sg> <> <sg2> <> <sg3> <r*1> })
    -->
    (<e> ^final-referent-count 3 +)
}

sp {evaluate-operator*apply*count-grounded-verbs*2
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^structure-type { << V VP G GP >> <s*2> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    (<aps> ^{ << complement complement2 >> <a*1> } <comp>)
    (<comp> ^referent <sg2>)
    (<comp> ^referent { > <sg2> <sg> })
    (<comp> -^referent { <> <sg> <> <sg2> <r*1> })
    -->
    (<e> ^final-referent-count 2 +)
}

sp {evaluate-operator*apply*count-grounded-verbs*1
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^structure-type { << V VP G GP >> <s*2> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    (<aps> ^{ << complement complement2 >> <a*1> } <comp>)
    (<comp> ^referent <sg>)
    (<comp> -^referent { <> <sg> <r*1> })
    -->
    (<e> ^final-referent-count 1 +)
}

sp {evaluate-operator*apply*count-grounded-verbs*0
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^structure-type { << V VP G GP >> <s*2> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    (<aps> ^{ << complement complement2 >> <a*1> } <comp>)
    (<comp> -^referent <r*1>)
    -->
    (<e> ^final-referent-count 0 +)
}

sp {evaluate-operator*apply*count-referents*5
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^referent <r*1>)
    (<aps> ^referent { > <r*1> <sg4> })
    (<aps> ^referent { > <sg4> > <r*1> <sg3> })
    (<aps> ^referent { > <sg3> > <sg4> > <r*1> <sg2> })
    (<aps> ^referent { > <sg2> > <sg3> > <sg4> > <r*1> <sg> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    -->
    (<e> ^final-referent-count 5 +)
}

sp {evaluate-operator*apply*count-referents*4
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^referent <sg4>)
    (<aps> ^referent { > <sg4> <sg3> })
    (<aps> ^referent { > <sg3> > <sg4> <sg2> })
    (<aps> ^referent { > <sg2> > <sg3> > <sg4> <sg> })
    (<aps> -^referent { <> <sg> <> <sg2> <> <sg3> <> <sg4> <r*1> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    -->
    (<e> ^final-referent-count 4 +)
}

sp {evaluate-operator*apply*count-referents*3
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^referent <sg3>)
    (<aps> ^referent { > <sg3> <sg2> })
    (<aps> ^referent { > <sg2> > <sg3> <sg> })
    (<aps> -^referent { <> <sg> <> <sg2> <> <sg3> <r*1> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    -->
    (<e> ^final-referent-count 3 +)
}

sp {evaluate-operator*apply*count-referents*2
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^referent <sg2>)
    (<aps> ^referent { > <sg2> <sg> })
    (<aps> -^referent { <> <sg> <> <sg2> <r*1> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    -->
    (<e> ^final-referent-count 2 +)
}

sp {evaluate-operator*apply*count-referents*1
    (state <s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^assigner-parent-receiver <aps>)
    (<aps> ^referent <sg>)
    (<aps> -^referent { <> <sg> <r*1> })
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    -->
    (<e> ^final-referent-count 1 +)
}

sp {evaluate-operator*apply*count-referents*0
    (state <s> ^assigner-parent-receiver <aps>)
    (<aps> -^structure-type { << V VP G GP >> <s*2> })
    (<aps> -^referent <r*1>)
    (<s> ^operator <o>)
    (<o> ^name count-referents)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e>)
    (<e> -^final-referent-count <f*1>)
    -->
    (<e> ^final-referent-count 0 +)
}

sp {evaluate-operator*propose*count-referents
    (state <s> ^name evaluate-operator)
    (<s> ^segment <seg>)
   -{ (<seg> ^last-merge <lm>)
      (<lm> ^assigner <a*1>)
      (<a*1> ^parent-receiver <a1>)
      (<a1> ^structure-type DP)
      (<lm> ^receiver <r1>)
      (<a1> -^ground-tested <r1>)}
    (<seg> -^not-merged-receiver <receiver>)
    (<seg> -^new-constraint <nc>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name count-referents +)
}

sp {evaluate-operator*elaborate*state*receiver*parent
    (state <s> ^name evaluate-operator)
    (<s> ^id-mapping <im>)
    (<s> ^superstate <ss>)
    (<ss> ^superstate <s*2>)
    (<s*2> ^segment <sss>)
    (<sss> ^not-merged-assigner <uai>)
    (<uai> ^parent-receiver <aps>)
    (<ss> ^operator <o*1>)
    (<o*1> ^superoperator <s*1>)
    (<s*1> ^name merge)
    (<im> ^<uai> <nai>)
    (<im> ^<aps> <apsi>)
    (<aps> ^<att> <value>)
    -->
    (<apsi> ^<att> <value> +)
}

sp {evaluate-operator*elaborate*state*assigner
    (state <s> ^name evaluate-operator)
    (<s> ^id-mapping <im>)
    (<s> ^superstate <ss>)
    (<ss> ^superstate <s*2>)
    (<s*2> ^segment <sss>)
    (<sss> ^not-merged-assigner <assigner>)
    (<ss> ^operator <o*1>)
    (<o*1> ^superoperator <s*1>)
    (<s*1> ^name merge)
    (<im> ^<assigner> <ai>)
    (<assigner> ^{ <> parent-receiver <att> } <value>)
    -->
    (<ai> ^<att> <value> +)
}

sp {evaluate-operator*elaborate*state*receiver
    (state <s> ^name evaluate-operator)
    (<s> ^id-mapping <im>)
    (<s> ^superstate <ss>)
    (<ss> ^superstate <s*2>)
    (<s*2> ^segment <sss>)
    (<sss> ^not-merged-receiver <receiver>)
    (<ss> ^operator <o*1>)
    (<o*1> ^superoperator <s*1>)
    (<s*1> ^name merge)
    (<im> ^<receiver> <ri>)
    (<receiver> ^<att> <value>)
    -->
    (<ri> ^<att> <value> +)
}

sp {evaluate-operator*elaborate*state*merge
    (state <s> ^name evaluate-operator)
    (<s> ^superstate <ss>)
    (<ss> ^top-state <t*1>)
    (<t*1> ^world <world>)
    (<ss> ^superstate <sss>)
    (<sss> ^segment <s*1>)
    (<s*1> ^last-merge <lm>)
    (<lm> ^assigner <a1>)
    (<lm> ^receiver <r1>)
    (<lm> ^structure-type <st>)
    (<ss> ^operator <o*1>)
    (<o*1> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <assigner>)
    (<assigner> ^parent-receiver <aps>)
    (<so> ^receiver <receiver>)
    -->
    (<s> ^world <world> +)
    (<s> ^id-mapping <im> +)
    (<s> ^assigner-parent-receiver <apsi> +)
    (<s> ^segment <seg> +)
    (<seg> ^last-merge <lmx> +)
    (<seg> ^not-merged-receiver <ri> +)
    (<seg> ^not-merged-assigner <ni> +)
    (<lmx> ^receiver <r1> +)
    (<lmx> ^assigner <a1> +)
    (<lmx> ^structure-type <st> +)
    (<im> ^<assigner> <ni> +)
    (<im> ^<receiver> <ri> +)
    (<im> ^<aps> <apsi> +)
    (<ni> ^parent-receiver <apsi> +)
}

sp {elaborate*top-state*pass-down-evaluate
    (state <s> ^name evaluate-operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^top-state <ts>)
    -->
    (<s> ^top-state <ts> +)
}

sp {evaluate-operator*elaborate*substate*verb*4
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <ass>)
    (<ass> ^structure-type PP)
    (<ass> ^parent-receiver <aps>)
    (<aps> -^referent <r*1>)
    (<aps> ^complement <comp>)
    (<aps> ^structure-type { << V VP G GP >> <s*1> })
    (<comp> ^referent <sg4>)
    (<comp> ^referent { > <sg4> <sg3> })
    (<comp> ^referent { > <sg3> > <sg4> <sg2> })
    (<comp> ^referent { > <sg2> > <sg3> > <sg4> <sg> })
    (<comp> -^referent { <> <sg> <> <sg2> <> <sg3> <> <sg4> <r*2> })
    -->
    (<e> ^initial-referent-count 4 +)
}

sp {evaluate-operator*elaborate*substate*verb*3
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <ass>)
    (<ass> ^structure-type PP)
    (<ass> ^parent-receiver <aps>)
    (<aps> -^referent <r*1>)
    (<aps> ^complement <comp>)
    (<aps> ^structure-type { << V VP G GP >> <s*1> })
    (<comp> ^referent <sg3>)
    (<comp> ^referent { > <sg3> <sg2> })
    (<comp> ^referent { > <sg2> > <sg3> <sg> })
    (<comp> -^referent { <> <sg> <> <sg2> <> <sg3> <r*2> })
    -->
    (<e> ^initial-referent-count 3 +)
}

sp {evaluate-operator*elaborate*substate*verb*2
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <ass>)
    (<ass> ^structure-type PP)
    (<ass> ^parent-receiver <aps>)
    (<aps> -^referent <r*1>)
    (<aps> ^complement <comp>)
    (<aps> ^structure-type { << V VP G GP >> <s*1> })
    (<comp> ^referent <sg2>)
    (<comp> ^referent { > <sg2> <sg> })
    (<comp> -^referent { <> <sg> <> <sg2> <r*2> })
    -->
    (<e> ^initial-referent-count 2 +)
}

sp {evaluate-operator*elaborate*substate*verb*1
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <ass>)
    (<ass> ^structure-type PP)
    (<ass> ^parent-receiver <aps>)
    (<aps> -^referent <r*1>)
    (<aps> ^complement <comp>)
    (<comp> ^referent <sg>)
    (<comp> -^referent { <> <sg> <r*2> })
    (<aps> ^structure-type { << V VP G GP >> <s*1> })
    -->
    (<e> ^initial-referent-count 1 +)
}

sp {evaluate-operator*elaborate*substate*verb*0
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <ass>)
    (<ass> ^structure-type PP)
    (<ass> ^parent-receiver <aps>)
    (<aps> -^referent <r*1>)
    (<aps> ^complement <comp>)
    (<comp> -^referent <sg>)
    (<aps> ^structure-type { << V VP G GP >> <s*1> })
    -->
    (<e> ^initial-referent-count 1 +)
}

sp {evaluate-operator*elaborate*substate*verb
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <ass>)
    (<ass> ^structure-type PP)
    (<ass> ^parent-receiver <aps>)
    (<aps> -^complement <c*1>)
    (<aps> -^referent <r*1>)
    (<aps> ^structure-type { << V VP G GP >> <s*1> })
    -->
    (<e> ^initial-referent-count 1 +)
    (<e> ^final-referent-count 1 +)
    (<e> ^count-difference 0 +)
    (<e> ^value true +)
}

sp {apply*evaluate-operator*count-difference2
    (state <s> ^operator <op>)
    (<op> ^name evaluate-operator)
    (<op> ^superoperator <s*1>)
    (<s*1> ^name merge)
    (<op> ^evaluation <e>)
    (<e> ^initial-referent-count <ic>)
    (<e> ^final-referent-count { > <ic> <fc> })
    -->
    (<e> ^count-difference (- <fc> <ic>) +)
    (<e> ^value true +)
}

sp {apply*evaluate-operator*count-difference
    (state <s> ^operator <op>)
    (<op> ^name evaluate-operator)
    (<op> ^superoperator <s*1>)
    (<s*1> ^name merge)
    (<op> ^evaluation <e>)
    (<e> ^initial-referent-count <ic>)
    (<e> ^final-referent-count { <= <ic> <fc> })
    -->
    (<e> ^count-difference (- <ic> <fc>) +)
    (<e> ^value true +)
}

sp {evaluate-operator*elaborate*substate*5
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <a*1>)
    (<a*1> ^parent-receiver <aps>)
    (<aps> -^structure-type { << V VP G GP >> <s*1> })
    (<aps> ^referent <r*1>)
    (<aps> ^referent { > <r*1> <sg4> })
    (<aps> ^referent { > <sg4> > <r*1> <sg3> })
    (<aps> ^referent { > <sg3> > <sg4> > <r*1> <sg2> })
    (<aps> ^referent { > <sg2> > <sg3> > <sg4> > <r*1> <sg> })
    -->
    (<e> ^initial-referent-count 5 +)
}

sp {evaluate-operator*elaborate*substate*4
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <a*1>)
    (<a*1> ^parent-receiver <aps>)
    (<aps> -^structure-type { << V VP G GP >> <s*1> })
    (<aps> ^referent <sg4>)
    (<aps> ^referent { > <sg4> <sg3> })
    (<aps> ^referent { > <sg3> > <sg4> <sg2> })
    (<aps> ^referent { > <sg2> > <sg3> > <sg4> <sg> })
    (<aps> -^referent { <> <sg> <> <sg2> <> <sg3> <> <sg4> <r*1> })
    -->
    (<e> ^initial-referent-count 4 +)
}

sp {evaluate-operator*elaborate*substate*3
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <a*1>)
    (<a*1> ^parent-receiver <aps>)
    (<aps> -^structure-type { << V VP G GP >> <s*1> })
    (<aps> ^referent <sg3>)
    (<aps> ^referent { > <sg3> <sg2> })
    (<aps> ^referent { > <sg2> > <sg3> <sg> })
    (<aps> -^referent { <> <sg> <> <sg2> <> <sg3> <r*1> })
    -->
    (<e> ^initial-referent-count 3 +)
}

sp {evaluate-operator*elaborate*substate*2
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <a*1>)
    (<a*1> ^parent-receiver <aps>)
    (<aps> -^structure-type { << V VP G GP >> <s*1> })
    (<aps> ^referent <sg2>)
    (<aps> ^referent { > <sg2> <sg> })
    (<aps> -^referent { <> <sg> <> <sg2> <r*1> })
    -->
    (<e> ^initial-referent-count 2 +)
}

sp {evaluate-operator*elaborate*substate*1
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <a*1>)
    (<a*1> ^parent-receiver <aps>)
    (<aps> -^structure-type { << V VP G GP >> <s*1> })
    (<aps> ^referent <sg>)
    (<aps> -^referent { <> <sg> <r*1> })
    -->
    (<e> ^initial-referent-count 1 +)
}

sp {evaluate-operator*elaborate*substate*0
    (state <s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    (<e> -^initial-referent-count <i*1>)
    (<o> ^superoperator <so>)
    (<so> ^name merge)
    (<so> ^assigner <a*1>)
    (<a*1> ^parent-receiver <aps>)
    (<aps> -^structure-type { << V VP G GP >> <s*1> })
    (<aps> -^referent <r*1>)
    -->
    (<e> ^initial-referent-count 0 +)
}

sp {apply*compare-count-differences*one*prefer-larger-change
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count { <> 0 <f*2> })
    (<e2> ^count-difference <c*1>)
    (<op> ^evaluation <e1>)
    (<e1> ^final-referent-count { <> 0 <f*1> })
    (<e1> ^count-difference { < <c*1> <cd1> })
    (<e2> ^superoperator <so2>)
    (<e1> ^superoperator <so1>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> < <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*one-goes-to-zero*other-doesnt
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e1>)
   -{ (<e1> ^superoperator <s*1>)
      (<s*1> ^assigner <a*1>)
      (<a*1> ^parent-receiver <p*1>)
      (<p*1> ^lt <l*1>)
      (<l*1> ^referent nil)}
    (<e1> ^final-referent-count 0)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count { <> 0 <f*1> })
    (<e2> ^superoperator <so2>)
    (<e1> ^superoperator <so1>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> < <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*one-isnt-zero*other-doesnt*not-grounded2
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count { <> 0 <f*1> })
    (<op> ^evaluation <e1>)
    (<e2> ^superoperator <so2>)
    (<so2> ^assigner <a*3>)
    (<a*3> ^decision-count <d*1>)
    (<e1> ^superoperator <so1>)
    (<so1> ^assigner <a*2>)
    (<a*2> ^decision-count { < <d*1> <dc> })
    (<e1> ^superoperator <s*1>)
    (<s*1> ^assigner <a*1>)
    (<a*1> ^parent-receiver <p*1>)
    (<p*1> ^lt <l*1>)
    (<l*1> ^referent nil)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> < <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*one-isnt-zero*other-doesnt*not-grounded
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count { <> 0 <f*1> })
    (<op> ^evaluation <e1>)
    (<e2> ^superoperator <so2>)
    (<so2> ^assigner <a*3>)
    (<a*3> ^decision-count <d*1>)
    (<e1> ^superoperator <so1>)
    (<so1> ^assigner <a*2>)
    (<a*2> ^decision-count { > <d*1> <dc> })
    (<e1> ^superoperator <s*1>)
    (<s*1> ^assigner <a*1>)
    (<a*1> ^parent-receiver <p*1>)
    (<p*1> ^lt <l*1>)
    (<l*1> ^referent nil)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-go-to-zero*both-required*before
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count 0)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-referent-count 0)
    (<e2> ^superoperator <so2>)
    (<so2> ^assigner <ass2>)
    (<ass2> ^lt <l*3>)
    (<l*3> ^required true)
    (<ass2> ^parent-receiver <pr>)
    (<ass2> ^decision-count <dc>)
    (<ass2> ^lt <solt>)
    (<e1> ^superoperator <so1>)
    (<so1> ^assigner <ass1>)
    (<ass1> ^parent-receiver <pr>)
    (<so1> ^assigner <a*1>)
    (<a*1> ^decision-count <dc>)
    (<ass1> ^lt <l*2>)
    (<l*2> ^required true)
    (<ass1> ^lt <l*1>)
    (<l*1> ^before <solt>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-go-to-zero*both-required*equal
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count 0)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-referent-count 0)
    (<e2> ^superoperator <so2>)
    (<so2> ^assigner <a*4>)
    (<a*4> ^lt <l*2>)
    (<l*2> ^required true)
    (<so2> ^assigner <a*3>)
    (<a*3> ^decision-count <dc>)
    (<e1> ^superoperator <so1>)
    (<so1> ^assigner <a*1>)
    (<a*1> ^decision-count <dc>)
    (<so1> ^assigner <a*2>)
    (<a*2> ^lt <l*1>)
    (<l*1> ^required true)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> = <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-go-to-zero*both-required
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count 0)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-referent-count 0)
    (<e2> ^superoperator <so2>)
    (<so2> ^assigner <a*4>)
    (<a*4> ^lt <l*2>)
    (<l*2> ^required true)
    (<so2> ^assigner <a*3>)
    (<a*3> ^decision-count <d*1>)
    (<e1> ^superoperator <so1>)
    (<so1> ^assigner <a*2>)
    (<a*2> ^lt <l*1>)
    (<l*1> ^required true)
    (<so1> ^assigner <a*1>)
    (<a*1> ^decision-count { > <d*1> <dc> })
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-go-to-zero*no-required*equal
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count 0)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-referent-count 0)
    (<e2> ^superoperator <so2>)
   -{ (<so2> ^assigner <a*5>)
      (<a*5> ^lt <l*3>)
      (<l*3> ^exclusive <e*1>)}
   -{ (<so2> ^assigner <a*4>)
      (<a*4> ^lt <l*2>)
      (<l*2> ^required true)}
    (<e1> ^superoperator <so1>)
   -{ (<so1> ^assigner <a*2>)
      (<a*2> ^lt <l*1>)
      (<l*1> ^required true)}
    (<so2> ^assigner <a*3>)
    (<a*3> ^decision-count <dc>)
    (<so1> ^assigner <a*1>)
    (<a*1> ^decision-count <dc>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> = <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-go-to-zero*no-required
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count 0)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-referent-count 0)
    (<e2> ^superoperator <so2>)
   -{ (<so2> ^assigner <a*5>)
      (<a*5> ^lt <l*3>)
      (<l*3> ^exclusive <e*1>)}
   -{ (<so2> ^assigner <a*4>)
      (<a*4> ^lt <l*2>)
      (<l*2> ^required true)}
    (<e1> ^superoperator <so1>)
   -{ (<so1> ^assigner <a*2>)
      (<a*2> ^lt <l*1>)
      (<l*1> ^required true)}
    (<so2> ^assigner <a*3>)
    (<a*3> ^decision-count <d*1>)
    (<so1> ^assigner <a*1>)
    (<a*1> ^decision-count { > <d*1> <dc> })
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-go-to-zero*both-exclusive
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count 0)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-referent-count 0)
    (<e2> ^superoperator <so2>)
   -{ (<so2> ^assigner <a*3>)
      (<a*3> ^lt <l*3>)
      (<l*3> ^required true)}
    (<e1> ^superoperator <so1>)
   -{ (<so1> ^assigner <a*2>)
      (<a*2> ^lt <l*2>)
      (<l*2> ^required true)}
    (<so2> ^assigner <a*4>)
    (<so1> ^assigner <a*1>)
    (<a*4> ^lt <l*4>)
    (<l*4> ^exclusive <e*2>)
    (<a*1> ^lt <l*1>)
    (<l*1> ^exclusive <e*1>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> = <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-go-to-zero*one-exclusive
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count 0)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-referent-count 0)
    (<e2> ^superoperator <so2>)
   -{ (<so2> ^assigner <a*3>)
      (<a*3> ^lt <l*3>)
      (<l*3> ^exclusive <e*2>)}
   -{ (<so2> ^assigner <a*2>)
      (<a*2> ^lt <l*2>)
      (<l*2> ^required true)}
    (<e1> ^superoperator <so1>)
    (<so1> ^assigner <a*1>)
    (<a*1> ^lt <l*1>)
    (<l*1> ^exclusive <e*1>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-go-to-zero*one-required
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count 0)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-referent-count 0)
    (<e2> ^superoperator <so2>)
   -{ (<so2> ^assigner <a*2>)
      (<a*2> ^lt <l*2>)
      (<l*2> ^required true)}
    (<e1> ^superoperator <so1>)
    (<so1> ^assigner <a*1>)
    (<a*1> ^lt <l*1>)
    (<l*1> ^required true)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-equal*not-zero*both-required
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^final-referent-count { <> 0 <f*2> })
    (<e2> ^count-difference <cd1>)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^count-difference <cd1>)
    (<e1> ^final-referent-count { <> 0 <f*1> })
    (<e2> ^superoperator <so2>)
    (<so2> ^assigner <a*4>)
    (<a*4> ^lt <l*2>)
    (<l*2> ^required true)
    (<so2> ^assigner <a*3>)
    (<a*3> ^decision-count <d*1>)
    (<e1> ^superoperator <so1>)
    (<so1> ^assigner <a*2>)
    (<a*2> ^lt <l*1>)
    (<l*1> ^required true)
    (<so1> ^assigner <a*1>)
    (<a*1> ^decision-count { > <d*1> <dc> })
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-equal*not-zero*not-required
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^superoperator <so2>)
   -{ (<so2> ^assigner <a*4>)
      (<a*4> ^lt <l*2>)
      (<l*2> ^required true)}
    (<e2> ^final-referent-count { <> 0 <f*2> })
    (<e2> ^count-difference <cd1>)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^count-difference <cd1>)
    (<e1> ^superoperator <so1>)
   -{ (<so1> ^assigner <a*2>)
      (<a*2> ^lt <l*1>)
      (<l*1> ^required true)}
    (<e1> ^final-referent-count { <> 0 <f*1> })
    (<so2> ^assigner <a*3>)
    (<a*3> ^decision-count <d*1>)
    (<so1> ^assigner <a*1>)
    (<a*1> ^decision-count { > <d*1> <dc> })
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {apply*compare-count-differences*both-equal*one-required
    (state <s> ^operator <op>)
    (<op> ^name compare-count-differences)
    (<op> ^evaluation <e2>)
    (<e2> ^superoperator <so2>)
   -{ (<so2> ^assigner <a*2>)
      (<a*2> ^lt <l*2>)
      (<l*2> ^required true)}
    (<e2> ^count-difference <cd1>)
    (<op> ^evaluation { <> <e2> <e1> })
    (<e1> ^count-difference <cd1>)
    (<e1> ^superoperator <so1>)
    (<so1> ^assigner <a*1>)
    (<a*1> ^lt <l*1>)
    (<l*1> ^required true)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
    (<e1> ^compared <e2> +)
    (<e2> ^compared <e1> +)
}

sp {selection*propose*compare-count-differences
    (state <s> ^name selection)
    (<s> ^evaluation <e2>)
    (<s> ^evaluation { > <e2> <e1> })
    (<e2> -^compared <e1>)
    (<e1> -^compared <e2>)
    (<e2> ^count-difference <c*2>)
    (<e1> ^count-difference <c*1>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name compare-count-differences +)
    (<op> ^evaluation <e1> +)
    (<op> ^evaluation <e2> +)
}

sp {selection*compare*merge*prefer*most-recent
    (state <s> ^name selection)
    (<s> ^operator <op2> +)
    (<op2> ^name evaluate-operator)
    (<op2> ^superoperator <sop2>)
    (<sop2> ^name merge)
    (<s> ^operator <op1> +)
    (<op1> ^name evaluate-operator)
    (<op1> ^superoperator <sop1>)
    (<sop1> ^name merge)
    (<sop2> ^assigner <a*2>)
    (<a*2> ^decision-count <d*1>)
    (<sop1> ^assigner <a*1>)
    (<a*1> ^decision-count { < <d*1> <dc> })
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {elaborate*comprehend*hypothetical*game-learning
    :o-support
    (state <s> ^segment <seg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning true)
    -->
    (<seg> ^hypothetical true +)
}

sp {elaborate*comprehend*dialog-object-list-access*copy
    (state <s> ^name comprehension)
    (<s> ^segment <seg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-object-list-saved <dol>)
    -->
    (<seg> ^dialog-object-list-access <dol> +)
}

sp {top-state*elaborate*objects*property
    (state <s> ^superstate nil)
    (<s> ^world <w>)
    (<w> ^object <obj>)
    (<obj> ^property <prop>)
    (<prop> ^value <value>)
    (<value> ^label <label>)
    (<prop> ^name <name>)
    -->
    (<obj> ^<name> <label> +)
}

sp {comprehension*elaborate-segment
    (state <s> ^name comprehension)
    (<s> -^name evaluate-operator)
    -->
    (<s> ^segment <seg> +)
    (<seg> ^semantics <sem> +)
    (<seg> ^last-merge <lm> +)
    (<lm> ^receiver nil +)
    (<lm> ^assigner nil +)
    (<lm> ^structure-type none +)
}

sp {comprehension*elaborate-problem-space
    (state <s> ^name comprehension)
    -->
    (<s> ^problem-space <ps> +)
    (<s> ^desired <d> +)
    (<ps> ^default-operator-copy no +)
    (<ps> ^default-state-copy no +)
    (<ps> ^dont-copy-anything true +)
    (<ps> ^name comprehend +)
}

sp {pass-down-world*elaborate*substate*ground-referent
    (state <s> ^name ground-referent)
    (<s> ^impasse no-change)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage external)
    (<s> ^superstate <ss>)
    (<ss> ^world <world>)
    -->
    (<s> ^world <world> +)
}

sp {pass-down-world*elaborate*substate
    (state <s> ^name comprehension)
    (<s> ^impasse no-change)
    (<s> ^top-state <t*1>)
    (<t*1> ^world-usage external)
    (<s> ^superstate <ss>)
    -->
    (<s> ^world <ss> +)
}

sp {pass-down-segment*elaborate*substate
    (state <s> ^impasse no-change)
    (<s>
          ^name { << print-semantics termination-processing comprehend-word comprehend-construction ground-referent process-multiple-groundings >> <n*1> })
    (<s> ^superstate <s*1>)
    (<s*1> ^segment <seg>)
    -->
    (<s> ^segment <seg> +)
}

sp {comprehension*elaborate*sentence
    (state <s> ^segment <seg>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^sentence <sentence>)
    -->
    (<seg> ^input-sentence (deep-copy <sentence>) +)
    (<seg> ^current-word (deep-copy <sentence>) +)
    (<seg> ^original-sentence (deep-copy <sentence>) +)
}

sp {apply*comprehension*save-most-recent-alternative-meaning
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^merged-receiver <nmr>)
    (<nmr> ^lt <l*1>)
    (<l*1> ^alternative-meaning <a*1>)
    -->
    (<seg> ^alternative-meaning-receiver <nmr> +)
}

sp {apply*performed-event*clean*dialog-world
    (state <s1> ^name interaction)
    (<s1> ^operator <o>)
   -{ (<o> ^event <e*2>)
      (<e*2> ^dialog-event <d*3>)
      (<d*3> ^type process-sentence)}
   -{ (<o> ^event <e*1>)
      (<e*1> ^dialog-event <d*2>)
      (<d*2> ^type process-unknown-word)}
    (<o> ^name performed-event)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-world <d*1>)
    (<d*1> ^{ << objects predicates >> <a*1> } <dw>)
    (<dw> ^<something> <obj>)
    -->
    (<dw> ^<something> <obj> -)
}

sp {apply*comprehension*save-most-recent-alternative-structure
    (state <s> ^operator <o*1>)
    (<o*1> ^name comprehension)
    (<s> ^segment <seg>)
    (<seg> ^not-merged-receiver <nmr>)
    (<nmr> ^lt <l*1>)
    (<l*1> ^alternative-structure <a*1>)
    -->
    (<seg> ^alternative-structure-receiver <nmr> +)
}

sp {dialog-event*propose*comprehension
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type process-sentence)
    (<p> ^parameters <p*1>)
    (<p*1> ^sentence <sentence>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name comprehension +)
    (<o> ^sentence <sentence> +)
}

sp {rosie*apply*process-new-sentence*copy*new-segment-info*from-input-link
    (state <s> ^name rosie)
    (<s> ^operator <op>)
    (<op> ^name process-new-sentence)
    (<op> ^original-sentence <os>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<os> ^segment-proposed true +)
    (<c> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type process-sentence +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^sentence (deep-copy <os>) +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^dialog-event <de> +)
    (<de> ^type process-sentence +)
    (<de> ^originator agent +)
}

sp {rosie*apply*process-new-sentence*copy*new-segment-info*from-script
    (state <s> ^name rosie)
    (<s> ^operator <op>)
    (<op> ^name process-new-sentence)
    (<op> ^sentence <sentence>)
    (<sentence> ^original-sentence <os>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<sentence> ^segment-proposed true +)
    (<c> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type process-sentence +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^sentence (deep-copy <os>) +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^dialog-event <de> +)
    (<de> ^type process-sentence +)
    (<de> ^originator agent +)
}

sp {rosie*propose*process-new-sentence*input-link
    (state <s> ^name rosie)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^language <l*1>)
    (<l*1> ^sentence <sentence>)
    (<sentence> -^segment-proposed true)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<op> ^name process-new-sentence +)
    (<op> ^original-sentence <sentence> +)
}

sp {rosie*propose*process-new-sentence*scripted
    (state <s> ^world-usage internal)
    (<s> -^terminated-sentence <cs>)
    (<s> ^current-sentence <sentence>)
    (<sentence> -^segment-proposed true)
    (<s> ^current-sentence-number <csn>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> >)
    (<op> ^name process-new-sentence +)
    (<op> ^sentence <sentence> +)
}

sp {language-comprehension*elaborate-operator*language-comprehension-init
    (state <s> ^superstate nil)
    -->
    (<s> ^world-usage internal +)
    (<s> ^create-trace-file false +)
    (<s> ^dialog-world <world> +)
    (<s> ^dialog-object-list nil +)
    (<s> ^dialog-object-list-saved nil +)
    (<world> ^objects <objects> +)
    (<world> ^predicates <predicates> +)
}

sp {selection*iterative-deepening*operator-tie*prefer*init*over*increment
    (state <s> ^top-selection true)
    (<s> ^name selection)
    (<s> ^operator <o2> +)
    (<o2> ^name increment-current-evaluation-depth)
    (<s> ^operator <o1> +)
    (<o1>
          ^name { << init-current-evaluation-depth init-remaining-operators >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {apply*init-remaining-operators
    (state <s> ^operator <op>)
    (<op> ^name init-remaining-operators)
    (<op> ^value <toc>)
    -->
    (<s> ^remaining-operators <toc> +)
}

sp {selection*propose*init-remaining-operators
    (state <s> ^name selection)
    (<s> -^remaining-operators <r*1>)
    (<s> ^item-count <toc>)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^learning <l*1>)
    (<l*1> ^type exploration)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name init-remaining-operators +)
    (<op> ^value <toc> +)
}

sp {apply*init-current-evaluation-depth*io*output
    (state <s> ^operator <op>)
    (<op> ^name init-current-evaluation-depth)
    (<op> ^value { <> 0 <v> })
    (<s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    -->
    (<ol> ^send-message <msg> +)
    (<msg> ^type begin-exploration +)
}

sp {apply*init-current-evaluation-depth
    (state <s> ^operator <op>)
    (<op> ^name init-current-evaluation-depth)
    (<op> ^value <v>)
    -->
    (<s> ^current-evaluation-depth <v> +)
}

sp {selection*propose*init-current-evaluation-depth*top-selection
    (state <s> ^top-selection true)
    (<s> -^current-evaluation-depth <c*1>)
    (<s> ^name selection)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^learning <l*1>)
    (<l*1> ^type exploration)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name init-current-evaluation-depth +)
    (<op> ^value 1 +)
}

sp {Impasse__Operator_Tie*compare*increment-current-evaluation-depth
    (state <s> ^operator <op2> +)
    (<op2> ^name init-current-evaluation-depth)
    (<s> ^operator <op1> +)
    (<op1> ^name increment-current-evaluation-depth)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {apply*increment-current-evalaution*clean-up-evaluations
    (state <s> ^evaluation <e2>)
    (<e2> ^value true)
    (<s> ^operator <op>)
    (<op> ^name increment-current-evaluation-depth)
    (<op> ^current-evaluation-depth <ced>)
    -->
    (<s> ^evaluation <e2> -)
}

sp {apply*increment-current-evaluation-depth
    (state <s> ^operator <op>)
    (<op> ^name increment-current-evaluation-depth)
    (<op> ^next-evaluation-depth <ned>)
    (<op> ^current-evaluation-depth <ced>)
    (<s> ^item-count <toc>)
    -->
    (<s> ^remaining-operators 0 -)
    (<s> ^remaining-operators <toc> +)
    (<s> ^current-evaluation-depth <ced> -)
    (<s> ^current-evaluation-depth <ned> +)
}

sp {selection*propose*increment-current-evaluation-depth*45
    (state <s> ^top-selection true)
    (<s> -^current-evaluation-depth { <> 4 <c*1> })
    (<s> -^remaining-operators { <> 0 <r*1> })
    (<s> ^name selection)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^learning <l*1>)
    (<l*1> ^type exploration)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name increment-current-evaluation-depth +)
    (<op> ^current-evaluation-depth 4 +)
    (<op> ^next-evaluation-depth 5 +)
}

sp {selection*propose*increment-current-evaluation-depth*34
    (state <s> ^top-selection true)
    (<s> -^current-evaluation-depth { <> 3 <c*1> })
    (<s> -^remaining-operators { <> 0 <r*1> })
    (<s> ^name selection)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^learning <l*1>)
    (<l*1> ^type exploration)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name increment-current-evaluation-depth +)
    (<op> ^current-evaluation-depth 3 +)
    (<op> ^next-evaluation-depth 4 +)
}

sp {selection*propose*increment-current-evaluation-depth*23
    (state <s> ^top-selection true)
    (<s> -^current-evaluation-depth { <> 2 <c*1> })
    (<s> -^remaining-operators { <> 0 <r*1> })
    (<s> ^name selection)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^learning <l*1>)
    (<l*1> ^type exploration)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name increment-current-evaluation-depth +)
    (<op> ^current-evaluation-depth 2 +)
    (<op> ^next-evaluation-depth 3 +)
}

sp {selection*propose*increment-current-evaluation-depth*12
    (state <s> ^top-selection true)
    (<s> -^current-evaluation-depth { > 1 <c*1> })
    (<s> -^remaining-operators { <> 0 <r*1> })
    (<s> ^name selection)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^learning <l*1>)
    (<l*1> ^type exploration)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name increment-current-evaluation-depth +)
    (<op> ^current-evaluation-depth 1 +)
    (<op> ^next-evaluation-depth 2 +)
}

sp {evalaute-operator*propose*init-current-evaluation-depth
    (state <s> ^current-evaluation-depth <ced>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name evaluate-operator)
    (<s> ^operator <o>)
    (<o> ^name { <> exceed-depth <n*1> })
    -->
    (<s> ^current-evaluation-depth (- <ced> 1) +)
    (<s> ^current-evaluation-depth <ced> -)
}

sp {apply*exceed-depth
    (state <s> ^operator <op>)
    (<op> ^name exceed-depth)
    (<s> ^desired <d>)
    -->
    (<s> ^depth-exceeded <d> +)
}

sp {evaluate-operator*compare*exceed-depth
    (state <s> ^name evaluate-operator)
    (<s> ^look-ahead-operator <op2>)
    (<s> ^operator <op2> +)
    (<s> ^operator <op1> +)
    (<op1> ^name exceed-depth)
    -->
    (<s> ^operator <op1> < <op2>)
}

sp {evaluate-operator*propose*exceed-depth
    (state <s> ^tried-tied-operator <o>)
    (<s> ^look-ahead-operator <o>)
    (<s> ^current-evaluation-depth { <= 0 <c*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name exceed-depth +)
}

sp {apply*increment-no-more-evaluations
    (state <s> ^operator <op>)
    (<op> ^name no-more-evaluations)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    -->
    (<e> ^symbolic-value depth-exceeded +)
}

sp {selection*propose*no-more-evaluations
    (state <s> ^remaining-operators 0)
    (<s> -^top-selection true)
    (<s> ^name selection)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name no-more-evaluations +)
}

sp {apply*all-evaluations-failed
    (state <s> ^operator <op>)
    (<op> ^name all-evaluations-failed)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e>)
    -->
    (<e> ^symbolic-value failure +)
}

sp {selection*propose*all-evaluations-failed6
    (state <s> ^name selection)
    (<s> -^top-selection true)
    (<s> ^item-count 6)
    (<s> ^evaluation <e6>)
    (<e6> ^symbolic-value { << failure depth-exceeded >> <s*6> })
    (<s> ^evaluation { > <e6> <e5> })
    (<e5> ^symbolic-value { << failure depth-exceeded >> <s*5> })
    (<s> ^evaluation { > <e5> > <e6> <e4> })
    (<e4> ^symbolic-value { << failure depth-exceeded >> <s*4> })
    (<s> ^evaluation { > <e4> > <e5> > <e6> <e3> })
    (<e3> ^symbolic-value { << failure depth-exceeded >> <s*3> })
    (<s> ^evaluation { > <e3> > <e4> > <e5> > <e6> <e2> })
    (<e2> ^symbolic-value { << failure depth-exceeded >> <s*2> })
    (<s> ^evaluation { > <e2> > <e3> > <e4> > <e5> > <e6> <e1> })
    (<e1> ^symbolic-value { << failure depth-exceeded >> <s*1> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name all-evaluations-failed +)
}

sp {selection*propose*all-evaluations-failed5
    (state <s> ^remaining-operators 0)
    (<s> -^top-selection true)
    (<s> ^name selection)
    (<s> ^item-count 5)
    (<s> ^evaluation <e5>)
    (<e5> ^symbolic-value failure)
    (<s> ^evaluation { > <e5> <e4> })
    (<e4> ^symbolic-value failure)
    (<s> ^evaluation { > <e4> > <e5> <e3> })
    (<e3> ^symbolic-value failure)
    (<s> ^evaluation { > <e3> > <e4> > <e5> <e2> })
    (<e2> ^symbolic-value failure)
    (<s> ^evaluation { > <e2> > <e3> > <e4> > <e5> <e1> })
    (<e1> ^symbolic-value failure)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name all-evaluations-failed +)
}

sp {selection*propose*all-evaluations-failed4
    (state <s> ^remaining-operators 0)
    (<s> -^top-selection true)
    (<s> ^name selection)
    (<s> ^item-count 4)
    (<s> ^evaluation <e4>)
    (<e4> ^symbolic-value failure)
    (<s> ^evaluation { > <e4> <e3> })
    (<e3> ^symbolic-value failure)
    (<s> ^evaluation { > <e3> > <e4> <e2> })
    (<e2> ^symbolic-value failure)
    (<s> ^evaluation { > <e2> > <e3> > <e4> <e1> })
    (<e1> ^symbolic-value failure)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name all-evaluations-failed +)
}

sp {selection*propose*all-evaluations-failed3
    (state <s> ^remaining-operators 0)
    (<s> -^top-selection true)
    (<s> ^name selection)
    (<s> ^item-count 3)
    (<s> ^evaluation <e3>)
    (<e3> ^symbolic-value failure)
    (<s> ^evaluation { > <e3> <e2> })
    (<e2> ^symbolic-value failure)
    (<s> ^evaluation { > <e2> > <e3> <e1> })
    (<e1> ^symbolic-value failure)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name all-evaluations-failed +)
}

sp {selection*propose*all-evaluations-failed2
    (state <s> ^remaining-operators 0)
    (<s> -^top-selection true)
    (<s> ^name selection)
    (<s> ^item-count 2)
    (<s> ^evaluation <e2>)
    (<e2> ^symbolic-value failure)
    (<s> ^evaluation { > <e2> <e1> })
    (<e1> ^symbolic-value failure)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name all-evaluations-failed +)
}

sp {selection*propose*init-current-evaluation-depth*middle-selection
    (state <s> ^name { << selection evaluate-operator >> <n*1> })
    (<s> -^top-selection true)
    (<s> ^superstate <s*1>)
    (<s*1> ^current-evaluation-depth <ced>)
    -->
    (<s> ^current-evaluation-depth <ced> +)
}

sp {evaluate-operator*elaborate*state
    (state <s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^evaluation <e*1>)
    (<e*1> ^current-evaluation-depth <ced>)
    -->
    (<s> ^current-evaluation-depth <ced> +)
}

sp {selection*compare*evaluate-operator
    (state <s> ^name selection)
    (<s> ^operator <op1> +)
    (<op1> -^current-evaluation-depth <c*1>)
    (<op1> ^name evaluate-operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^problem-space <p*1>)
    (<p*1> ^learning <l*1>)
    (<l*1> ^type exploration)
    -->
    (<s> ^operator <op1> -)
}

sp {apply*evaluate-operator*clean-up-evaluations2
    :o-support
    (state <s> ^operator <op>)
    (<op> ^name evaluate-operator)
    (<op> ^current-evaluation-depth <ced>)
    (<op> ^evaluation <e2>)
    (<e2> ^current-evaluation-depth { <> <ced> <c*1> })
    -->
    (<op> ^evaluation <e2> -)
}

sp {apply*evaluate-operator*clean-up-evaluations
    (state <s> ^evaluation <e2>)
    (<e2> ^value true)
    (<s> ^operator <op>)
    (<op> ^name evaluate-operator)
    (<op> ^current-evaluation-depth <ced>)
    (<e2> -^current-evaluation-depth <ced>)
    -->
    (<s> ^evaluation <e2> -)
}

sp {apply*decrement-remaining-operators
    (state <s> ^operator <op>)
    (<op> ^name decrement-remaining-operators)
    (<s> ^remaining-operators <ro>)
    -->
    (<s> ^remaining-operators (- <ro> 1) +)
    (<s> ^remaining-operators <ro> -)
}

sp {selection*propose*decrement-remaining-operators
    (state <s> ^name selection)
    (<s> ^evaluation <e>)
    (<e> ^value true)
    (<e> ^remaining-operators <ro>)
    (<s> ^remaining-operators <ro>)
    (<e> ^current-evaluation-depth <ced>)
    (<s> ^current-evaluation-depth <ced>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name decrement-remaining-operators +)
}

sp {apply*exceed-depth*report*interaction
    (state <s> ^operator <op>)
    (<op> ^name achieved-max-depth)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    -->
    (<ol> ^send-message <msg> +)
    (<msg> ^type failure-exploration +)
}

sp {selection*propose*achieved-max-depth*more
    (state <s> ^name selection)
    (<s> ^max-evaluation-depth <med>)
    (<s> ^current-evaluation-depth { > <med> <med2> })
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> !)
    (<op> ^name achieved-max-depth +)
}

sp {selection*propose*achieved-max-depth
    (state <s> ^remaining-operators 0)
    (<s> ^name selection)
    (<s> ^max-evaluation-depth <med>)
    (<s> ^current-evaluation-depth <med>)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> !)
    (<op> ^name achieved-max-depth +)
}

sp {selection*monitor*depth
    (state <s> ^top-selection true)
    (<s> ^name selection)
    (<s> ^remaining-operators <ro>)
    (<s> ^current-evaluation-depth <ced>)
    -->
    
}

sp {selection*elaboration*top-selection
    (state <s> ^name selection)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^superstate <s*2>)
      (<s*2> ^name selection)}
    (<s> -^problemspace games)
    -->
    (<s> ^top-selection true +)
}

sp {evaluate-operator*reject*next-waypoint*operator*visited*on*state
    (state <s> ^name evaluate-operator)
    (<s> ^quiescence t)
    (<s> ^visited <v>)
    (<s> ^operator <op1> +)
    (<op1> ^next-waypoint <v>)
    -->
    (<s> ^operator <op1> -)
}

sp {evaluate-operator*reject*next-waypoint*operator*visited*on*evaluation
    (state <s> ^name evaluate-operator)
    (<s> ^quiescence t)
    (<s> ^superstate <s*1>)
    (<s> ^operator <op1> +)
    (<op1> ^next-waypoint <v>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^evaluation <e*1>)
    (<e*1> ^visited <v>)
    -->
    (<s> ^operator <op1> -)
}

sp {apply*compute-evaluations
    (state <s> ^operator <op>)
    (<op> ^name compute-evaluations)
    (<op> ^op2 <so2>)
    (<op> ^op1 <so1>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^operator <so1> > <so2>)
    (<s> ^compared <com> +)
    (<com> ^op1 <so1> +)
    (<com> ^op2 <so2> +)
}

sp {selection*propose*compute-evaluations2
    (state <s> ^name selection)
    (<s> ^evaluation <e2>)
    (<e2> ^total-estimated-cost <t*1>)
    (<s> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-cost { < <t*1> <fc> })
    (<e2> ^superoperator <so2>)
    (<e1> ^superoperator <so1>)
   -{ (<s> ^compared <com>)
      (<com> ^op2 <so2>)
      (<com> ^op1 <so1>)}
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name compute-evaluations +)
    (<op> ^op1 <so1> +)
    (<op> ^op2 <so2> +)
}

sp {selection*propose*compute-evaluations
    (state <s> ^name selection)
    (<s> ^evaluation <e2>)
    (<e2> ^final-cost <f*1>)
    (<s> ^evaluation { <> <e2> <e1> })
    (<e1> ^final-cost { < <f*1> <fc> })
    (<e2> ^superoperator <so2>)
    (<e1> ^superoperator <so1>)
   -{ (<s> ^compared <com>)
      (<com> ^op2 <so2>)
      (<com> ^op1 <so1>)}
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<s> ^operator <op> >)
    (<op> ^name compute-evaluations +)
    (<op> ^op1 <so1> +)
    (<op> ^op2 <so2> +)
}

sp {prefer*complete-location-question*over*describe-object*describe-object-location
    (state <s> ^name describe-object-location)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-location-question)
    (<s> ^operator <o1> +)
    (<o1> ^name describe-object)
    -->
    (<s> ^operator <o2> > <o1>)
}

sp {describe-object-location*elaborate*copy-down-attrs
    (state <s> ^name describe-object-location)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^object <obj>)
    -->
    (<s> ^obj <obj> +)
    (<s> ^descriptions <d> +)
}

sp {describe-object-location*apply*end-location-question
    (state <s> ^name describe-object-location)
    (<s> ^operator <o>)
    (<o> ^name end-location-question)
    (<s> ^top-state <t*2>)
    (<s> ^top-state <t*1>)
    (<t*2> ^status <status>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type location-unknown +)
    (<msg> ^fields <f> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <d*1> +)
    (<d*1> ^type explanation +)
}

sp {describe-object-location*propose*end-location-question*no-preps
    (state <s> ^name describe-object-location)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^prepositions <p*1>)
      (<p*1> ^prep <p*2>)
      (<p*2> ^pair <p*3>)
      (<p*3> ^a <obj>)}
    (<s> ^obj <o*1>)
    (<o*1> ^id <objid>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name end-location-question +)
}

sp {describe-object-location*apply*complete-location-question
    (state <s> ^name describe-object-location)
    (<s> ^operator <o>)
    (<o> ^name complete-location-question)
    (<o> ^obj2 <desc2>)
    (<o> ^obj1 <desc1>)
    (<s> ^top-state <t*2>)
    (<s> ^top-state <t*1>)
    (<t*2> ^status <status>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<o> ^relation <rel>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type describe-scene +)
    (<msg> ^fields <f> +)
    (<f> ^object1 <desc1> +)
    (<f> ^object2 <desc2> +)
    (<f> ^prep <rel> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <d*1> +)
    (<d*1> ^type explanation +)
}

sp {describe-object-location*propose*complete-location-question
    (state <s> ^name describe-object-location)
    (<s> ^obj2 <obj2>)
    (<s> ^obj <obj1>)
    (<s> ^descriptions <d>)
    (<d> ^obj-desc <objd2>)
    (<objd2> ^desc <desc2>)
    (<d> ^obj-desc <objd1>)
    (<objd1> ^desc <desc1>)
    (<objd2> ^object <obj2>)
    (<objd1> ^object <obj1>)
    (<s> ^relation <rel>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete-location-question +)
    (<o> ^obj1 <desc2> +)
    (<o> ^obj2 <desc1> +)
    (<o> ^relation <rel> +)
}

sp {describe-object-location*apply*find-a-relation
    (state <s> ^name describe-object-location)
    (<s> ^operator <o>)
    (<o> ^name find-a-relation)
    (<o> ^obj <obj>)
    (<s> ^obj <obj>)
    (<o> ^obj2 <obj2>)
    (<o> ^relation <rel>)
    -->
    (<s> ^obj2 <obj2> +)
    (<s> ^relation <rel> +)
}

sp {describe-object-location*propose*find-a-relation
    (state <s> ^name describe-object-location)
    (<s> -^relation <r*1>)
    (<s> ^described <obj>)
    (<s> ^obj <obj>)
    (<s> ^top-state <t*2>)
    (<t*2> ^prepositions <p*1>)
    (<p*1> ^prep <p>)
    (<p> ^pair <pair>)
    (<pair> ^b <id2>)
    (<pair> ^a <id1>)
    (<s> ^top-state <t*1>)
    (<obj> ^id <id>)
    (<p> ^name <prep>)
    (<t*1> ^object <obj2>)
    (<obj2> ^id <id2>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name find-a-relation +)
    (<o> ^obj <obj> +)
    (<o> ^obj2 <obj2> +)
    (<o> ^relation <prep> +)
}

sp {describe-object-location*apply*describe-object
    (state <s> ^name describe-object-location)
    (<s> ^operator <o>)
    (<o> ^name describe-object)
    (<s> ^descriptions <d>)
    (<o> ^description <desc>)
    (<o> ^object <obj>)
    -->
    (<s> ^described <obj> +)
    (<d> ^obj-desc <objd> +)
    (<objd> ^desc <desc> +)
    (<objd> ^object <obj> +)
}

sp {describe-object-location*propose*describe-object
    (state <s> ^name describe-object-location)
    (<s> ^{ << obj obj2 >> <a*1> } <obj>)
    (<s> -^described <obj>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name describe-object +)
    (<o> ^object <obj> +)
}

sp {query-relation*apply*complete-query-relation*preposition-unknown
    (state <s> ^name query-relation)
    (<s> -^described <d*1>)
    (<s> ^relationships <r*1>)
    (<r*1> ^failure prep-not-found)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-query-relation)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type no-prep +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^object failure +)
}

sp {query-relation*apply*complete-query-relation
    (state <s> ^name query-relation)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-query-relation)
    (<s> ^relationships <r>)
    (<s> ^descriptions <d>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*2>)
    (<i*2> ^status <status>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type list-objects +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^objects <d> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <d*1> +)
    (<d*1> ^type describe +)
}

sp {query-relation*propose*complete-query-relation
    (state <s> ^name query-relation)
    (<s> ^relationships <r>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name complete-query-relation +)
    (<o> ^category svs +)
}

sp {query-relation*apply*describe-object*record
    (state <s> ^name query-relation)
    (<s> ^operator <o>)
    (<o> ^name describe-object)
    (<s> ^relationships <r>)
    (<s> ^descriptions <d>)
    (<o> ^description <desc>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    (<o> ^object <obj>)
    -->
    (<s> ^described <obj> +)
    (<d> ^object <desc> +)
}

sp {query-relation*propose*describe-object
    (state <s> ^name query-relation)
    (<s> ^relationships <r*1>)
    (<r*1> ^relations <r*2>)
    (<r*2> ^obj <obj-id>)
    (<s> ^top-state <t*1>)
    (<t*1> ^object <obj>)
    (<s> -^described <obj>)
    (<obj> ^id <obj-id>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name describe-object +)
    (<o> ^category svs +)
    (<o> ^object <obj> +)
}

sp {query-relation*propose*find-relations
    (state <s> ^name query-relation)
    (<s> -^relationships <r*1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <so>)
    (<so> ^message <m*1>)
    (<m*1> ^fields <f*1>)
    (<f*1> ^objects <objs>)
    (<objs> ^obj <object>)
    (<object> ^id <id>)
    (<objs> ^type <prep>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name find-relations +)
    (<o> ^category svs +)
    (<o> ^interaction true +)
    (<o> ^obj <id> +)
    (<o> ^ind 2 +)
    (<o> ^prep <prep> +)
}

sp {query-relation*elaborate*copy-down-attrs*
    (state <s> ^name query-relation)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^descriptions <d>)
    -->
    (<s> ^descriptions <d> +)
}

sp {prefer*respond*with*description*over*find-relations
    (state <s> ^name query-relation)
    (<s> ^operator <o2> +)
    (<o2> ^name find-relations)
    (<s> ^operator <o1> +)
    (<o1> ^name describe-object)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*describe-object*over*complete-describe-objs
    (state <s> ^name query-relation)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-describe-objs)
    (<s> ^operator <o1> +)
    (<o1> ^name describe-object)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*describe-object*over*complete-query-relation
    (state <s> ^name query-relation)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-query-relation)
    (<s> ^operator <o1> +)
    (<o1> ^name describe-object)
    (<s> ^relationships <r>)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-preposition*apply*store-predicate*mark*stored
    (state <s> ^name learn-preposition)
    (<s> ^operator <o>)
    (<o> ^name store-predicate)
    (<o> ^predicate <p>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<s> ^stored <p> +)
}

sp {learn-preposition*apply*store-predicate*store*relation
    (state <s> ^name learn-preposition)
    (<s> ^operator <o>)
    (<o> ^name store-predicate)
    (<o> ^predicate <p*1>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<p*1> ^relation <r>)
    -->
    (<cmd> ^store <r> +)
}

sp {learn-preposition*apply*store-predicate*store*predicate
    (state <s> ^name learn-preposition)
    (<s> ^operator <o>)
    (<o> ^name store-predicate)
    (<o> ^predicate <p>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <p> +)
}

sp {learn-preposition*propose*store-predicate
    (state <s> ^name learn-preposition)
    (<s> ^predicate <p>)
    (<s> -^stored <p>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name store-predicate +)
    (<o> ^predicate <p> +)
}

sp {learn-preposition*apply*update-relation-distance*first*distance
    (state <s> ^name learn-preposition)
    (<s> ^operator <o>)
    (<o> ^name update-relation-distance)
    (<o> ^axis <a*1>)
    (<a*1> ^distance <d>)
    (<o> ^relation <rel>)
    (<rel> ^count 0)
    -->
    (<rel> ^count 0 -)
    (<rel> ^count 1 +)
    (<rel> ^bottom 0.000000 +)
    (<rel> ^top 100.000000 +)
    (<rel> ^avg <d> +)
    (<rel> ^dist <d> +)
    (<rel> ^sum <d> +)
    (<rel> ^squaredsum (* <d> <d>) +)
}

sp {learn-preposition*apply*update-relation-distance*mark*added
    (state <s> ^name learn-preposition)
    (<s> ^operator <o>)
    (<o> ^name update-relation-distance)
    (<o> ^axis <axis>)
    -->
    (<axis> ^added true +)
}

sp {learn-preposition*elaborate*update-relation-distance*new-std-dev
    (state <s> ^name learn-preposition)
    (<s> ^operator <o> +)
    (<o> ^name update-relation-distance)
    (<o> ^new-sq-avg <sq-avg>)
    (<o> ^new-avg <avg>)
    -->
    (<o> ^new-std-dev (sqrt (abs (- <sq-avg> (* <avg> <avg>)))) +)
    (interrupt)
}

sp {learn-preposition*elaborate*update-relation-distance*new-avg
    (state <s> ^name learn-preposition)
    (<s> ^operator <o> +)
    (<o> ^name update-relation-distance)
    (<o> ^new-count <count>)
    (<o> ^new-squaredsum <sqsum>)
    (<o> ^new-sum <sum>)
    -->
    (<o> ^new-avg (|/| <sum> <count>) +)
    (<o> ^new-sq-avg (|/| <sqsum> <count>) +)
}

sp {learn-preposition*elaborate*update-relation-distance*new-info
    (state <s> ^name learn-preposition)
    (<s> ^operator <o> +)
   -{ (<o> ^axis <a*2>)
      (<a*2> ^added <a*3>)}
    (<o> ^name update-relation-distance)
    (<o> ^axis <a*1>)
    (<a*1> ^distance <d>)
    (<o> ^relation <rel>)
    (<rel> ^squaredsum <sqsum>)
    (<rel> ^sum <sum>)
    (<rel> ^count <count>)
    -->
    (<o> ^new-sum (+ <sum> <d>) +)
    (<o> ^new-squaredsum (+ <sqsum> (* <d> <d>)) +)
    (<o> ^new-count (+ <count> 1) +)
}

sp {learn-preposition*propose*update-relation-distance
    (state <s> ^name learn-preposition)
    (<s> ^instance-info <i*1>)
    (<i*1> ^axis <axis>)
    (<axis> -^added <a*1>)
    (<axis> ^case { << greater less >> <c*1> })
    (<s> ^predicate <p*1>)
    (<axis> ^name <axis-name>)
    (<p*1> ^relation <rel>)
    (<rel> ^axis <axis-name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name update-relation-distance +)
    (<o> ^relation <rel> +)
    (<o> ^axis <axis> +)
}

sp {learn-preposition*apply*add-case-type
    (state <s> ^name learn-preposition)
    (<s> ^operator <o>)
    (<o> ^name add-case-type)
    (<o> ^case-type <type>)
    (<o> ^relation <rel>)
    -->
    (<rel> ^type <type> +)
}

sp {learn-preposition*propose*add-case-type
    (state <s> ^name learn-preposition)
    (<s> ^instance-info <i*1>)
    (<i*1> ^axis <axis>)
    (<axis> ^case <type>)
    (<s> ^predicate <p*1>)
    (<axis> ^name <axis-name>)
    (<p*1> ^relation <rel>)
    (<rel> -^type <type>)
    (<rel> ^axis <axis-name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name add-case-type +)
    (<o> ^relation <rel> +)
    (<o> ^case-type <type> +)
}

sp {learn-preposition*apply*check-new-relation*false*copy*predicate
    (state <s> ^name learn-preposition)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-new-relation)
    (<s> ^relation-lti <rlti>)
    (<rlti> ^relation <r*1>)
    (<r*1> ^axis z)
    -->
    (<s> ^predicate <rlti> +)
}

sp {learn-preposition*check-new-relation*true*create*predicate
    (state <s> ^name learn-preposition)
    (<s> ^relation-lti <rlti>)
    (<rlti> -^relation <r*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name check-new-relation)
    -->
    (<s> ^predicate <rlti> +)
    (<rlti> ^relation <px> +)
    (<rlti> ^relation <py> +)
    (<rlti> ^relation <pz> +)
    (<px> ^axis x +)
    (<px> ^count 0 +)
    (<py> ^axis y +)
    (<py> ^count 0 +)
    (<pz> ^axis z +)
    (<pz> ^count 0 +)
}

sp {learn-preposition*propose*check-new-relation
    (state <s> ^name learn-preposition)
    (<s> -^predicate <p*1>)
    (<s> ^smem-result <s*1>)
    (<s> ^relation-lti <r>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name check-new-relation +)
    (<o> ^relation <r> +)
}

sp {learn-preposition*propose*smem-retrieve-full
    (state <s> ^name learn-preposition)
    (<s> -^smem-result <s*1>)
    (<s> -^predicate <p*1>)
    (<s> ^relation-lti <r>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name smem-retrieve-full +)
    (<o> ^lti <r> +)
}

sp {learn-preposition*elaboroate*preposition-list
    (state <s> ^name learn-preposition)
    (<s> ^top-state <t*1>)
    (<t*1> ^prepositions <p>)
    -->
    (<s> ^prep-list <p> +)
}

sp {learn-preposition*elaborate*axis-info
    (state <s> ^name learn-preposition)
    -->
    (<s> ^axis-info <i> +)
    (<i> ^axis <a*1> +)
    (<a*1> ^name x +)
    (<i> ^axis <a*2> +)
    (<a*2> ^name y +)
    (<i> ^axis <a*3> +)
    (<a*3> ^name z +)
}

sp {learn-preposition*elaborate*obj2
    (state <s> ^name learn-preposition)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg2 <obj>)
    -->
    (<s> ^obj2 <obj> +)
}

sp {learn-preposition*elaborate*obj1
    (state <s> ^name learn-preposition)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^arg1 <obj>)
    -->
    (<s> ^obj1 <obj> +)
}

sp {learn-preposition*elaborate*relation
    (state <s> ^name learn-preposition)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^relation-lti <rel>)
    -->
    (<s> ^relation-lti <rel> +)
}

sp {learn-preposition*apply*complete-learn-preposition*store*preps
    (state <s> ^name learn-preposition)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-learn-preposition)
    (<s> ^predicate <p*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^prepositions <preps>)
    (<p*1> ^name <name>)
   -{ (<preps> ^prep <p*2>)
      (<p*2> ^name <name>)}
    -->
    (<preps> ^prep <p*3> +)
    (<p*3> ^name <name> +)
}

sp {learn-preposition*apply*complete-learn-preposition*mark*performed
    (state <s> ^name learn-preposition)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-learn-preposition)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*2>)
    (<i*2> ^status <status>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <l*1> +)
    (<l*1> ^type relation +)
    (<ol> ^send-message <msg> +)
    (<msg> ^type confirmation +)
}

sp {learn-preposition*propose*complete-learn-preposition
    (state <s> ^name learn-preposition)
    -->
    (<s> ^operator <o> +)
    (<o> ^name complete-learn-preposition +)
}

sp {learn-preposition*prefer*store*over*complete
    (state <s> ^name learn-preposition)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-learn-preposition)
    (<s> ^operator <o1> +)
    (<o1> ^name store-predicate)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-preposition*prefer*learning*over*store*complete
    (state <s> ^name learn-preposition)
    (<s> ^operator <o2> +)
    (<o2> ^name { << store-predicate complete-learn-preposition >> <n*2> })
    (<s> ^operator <o1> +)
    (<o1>
          ^name { << smem-retrieve-full add-case-type update-relation-distance >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-preposition*prefer*check-new-relation*first
    (state <s> ^name learn-preposition)
    (<s> ^operator <o1> +)
    (<o1> ^name check-new-relation)
    (<s> ^operator <o2> +)
    (<o2> ^name { <> check-new-relation <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-preposition*elaborate*instance-info*case*less
    (state <s> ^name learn-preposition)
    (<s> ^instance-info <i*1>)
    (<i*1> ^axis <a>)
    (<a> ^raw-value { < 0 <r*1> })
    -->
    (<a> ^case less +)
}

sp {learn-preposition*elaborate*instance-info*case*aligned
    (state <s> ^name learn-preposition)
    (<s> ^instance-info <i*1>)
    (<i*1> ^axis <a>)
    (<a> ^raw-value 0.000000)
    -->
    (<a> ^case aligned +)
}

sp {learn-preposition*elaborate*instance-info*case*greater
    (state <s> ^name learn-preposition)
    (<s> ^instance-info <i*1>)
    (<i*1> ^axis <a>)
    (<a> ^raw-value { > 0.000000 <r*1> })
    -->
    (<a> ^case greater +)
}

sp {learn-preposition*elaborate*instance-info*distance
    (state <s> ^name learn-preposition)
    (<s> ^instance-info <i*1>)
    (<i*1> ^axis <a>)
    (<a> ^raw-value <v>)
    -->
    (<a> ^distance (abs <v>) +)
}

sp {learn-prepsition*extract-relations*copy*results
    (state <s> ^name learn-preposition)
    (<s> ^instance-info <i>)
    (<s> ^axis-filter <f>)
    (<f> ^axis <axis>)
    (<f> ^result <r>)
    (<r> ^record <r*1>)
    (<r*1> ^value <v>)
    -->
    (<i> ^axis <a> +)
    (<a> ^name <axis> +)
    (<a> ^raw-value <v> +)
}

sp {learn-preposition*elaborate*instance-info
    (state <s> ^name learn-preposition)
    -->
    (<s> ^instance-info <i> +)
}

sp {learn-preposition*extract-relations*extract_once*axis-distance
    (state <s> ^name learn-preposition)
    (<s> ^axis-info <a*1>)
    (<a*1> ^axis <a*2>)
    (<s> ^obj2 <o*2>)
    (<o*2> ^belief-id <id2>)
    (<s> ^obj1 <o*1>)
    (<o*1> ^belief-id <id1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<a*2> ^name <axis>)
    -->
    (<cmd> ^extract_once <f> +)
    (<s> ^axis-filter <f> +)
    (<f> ^a <NA> +)
    (<f> ^b <NB> +)
    (<f> ^type axis_distance +)
    (<f> ^axis <axis> +)
    (<NA> ^type node +)
    (<NA> ^id <id2> +)
    (<NB> ^type node +)
    (<NB> ^id <id1> +)
}

sp {find-projection*apply*report-failure*copy*superstate
    (state <s> ^name find-projection)
    (<s> ^operator <o>)
    (<o> ^name report-failure)
    (<o> ^failure-type <type>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^projection-result failure +)
    (<ss> ^find-projection-failure <type> +)
}

sp {find-projection*propose*report-failure*no-object
    (state <s> ^name find-projection)
    (<s> ^argument-list <a*1>)
    (<s> ^svs-link <s*1>)
    (<s*1> ^spatial-scene <scene>)
    (<a*1> ^<arg-num> <arg>)
   -{ (<arg> ^svs-obj <s*2>)
      (<s*2> ^id <id>)
      (<scene> ^child <c*1>)
      (<c*1> ^id <id>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<s> ^operator <o> =)
    (<o> ^name report-failure +)
    (<o> ^failure-type no-object +)
}

sp {find-projection*propose*report-failure*no-relation
    (state <s> ^name find-projection)
    (<s> ^retrieved-lti <rel>)
    (<rel> -^type <t*1>)
    (<s> ^predicate <p*1>)
    (<p*1> ^relation <rel>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<s> ^operator <o> =)
    (<o> ^name report-failure +)
    (<o> ^failure-type no-relation +)
}

sp {find-projection*propose*report-failure*no-predicate*retrieved
    (state <s> ^predicate failure)
    (<s> ^name find-projection)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<s> ^operator <o> =)
    (<o> ^name report-failure +)
    (<o> ^failure-type no-predicate +)
}

sp {find-projection*propose*report-failure*no-predicate
    (state <s> ^name find-projection)
    (<s> -^predicate-handle <p*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<s> ^operator <o> =)
    (<o> ^name report-failure +)
    (<o> ^failure-type no-predicate +)
}

sp {find-projection*project*svs*complete-projection
    (state <s> ^name find-projection)
    (<s> ^calculate-placement-filter <f>)
    (<f> ^type calculate_placement)
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate-placement)
    (<f> ^b <b*1>)
    (<f> ^a <a*1>)
    (<b*1> ^id <idb>)
    (<a*1> ^id <ida>)
    (<f> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<s> ^result <res>)
    (<r*2> ^value <pos>)
    (<pos> ^z <z>)
    (<pos> ^y <y>)
    (<pos> ^x <x>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^projection-result <result> +)
    (<result> ^x <x> +)
    (<result> ^y <y> +)
    (<result> ^z <z> +)
    (<result> ^1 <ida> +)
    (<result> ^2 <idb> +)
}

sp {find-projection*project*svs*create-projection*2-args
    (state <s> ^name find-projection)
    (<s> ^operator <o>)
    (<o> ^name calculate-placement)
    (<o> ^distances <d>)
    (<s> ^arg-list <a*2>)
    (<s> ^arg-list <a*1>)
    (<s> ^svs-link <s*3>)
    (<d> ^z <dz>)
    (<d> ^y <dy>)
    (<d> ^x <dx>)
    (<a*2> ^2 <v*2>)
    (<v*2> ^svs-obj <s*2>)
    (<a*1> ^1 <v*1>)
    (<v*1> ^svs-obj <s*1>)
    (<s*2> ^id <id2>)
    (<s*1> ^id <id1>)
    (<s> ^result <res>)
    (<s*3> ^command <cmd>)
    -->
    (<cmd> ^extract_once <e> +)
    (<e> ^type calculate_placement +)
    (<e> ^a <nodea> +)
    (<e> ^b <nodeb> +)
    (<e> ^x_axis_separation <dx> +)
    (<e> ^y_axis_separation <dy> +)
    (<e> ^z_axis_separation <dz> +)
    (<nodea> ^type node +)
    (<nodea> ^id <id1> +)
    (<nodeb> ^type node +)
    (<nodeb> ^id <id2> +)
    (<s> ^calculate-placement-filter <e> +)
}

sp {find-projection*elaborate*axis*distance*less
    (state <s> ^name find-projection)
    (<s> ^operator <o> +)
    (<o> ^name calculate-placement)
    (<o> ^distances <dists>)
    (<o> ^types <t*1>)
    (<s> ^predicate <p*1>)
    (<t*1> ^<axis> less)
    (<p*1> ^relation <rel>)
    (<rel> ^axis <axis>)
    (<rel> ^avg <dist>)
    -->
    (<dists> ^<axis> (- <dist>) +)
}

sp {find-projection*elaborate*axis*distance*aligned
    (state <s> ^name find-projection)
    (<s> ^operator <o> +)
    (<o> ^name calculate-placement)
    (<o> ^distances <dists>)
    (<o> ^types <t*1>)
    (<t*1> ^<axis> aligned)
    -->
    (<dists> ^<axis> 0.000000 +)
}

sp {find-projection*elaborate*axis*distance*greater
    (state <s> ^name find-projection)
    (<s> ^operator <o> +)
    (<o> ^name calculate-placement)
    (<o> ^distances <dists>)
    (<o> ^types <t*1>)
    (<s> ^predicate <p*1>)
    (<t*1> ^<axis> greater)
    (<p*1> ^relation <rel>)
    (<rel> ^axis <axis>)
    (<rel> ^avg <dist>)
    -->
    (<dists> ^<axis> <dist> +)
}

sp {find-projection*propose*calculate-placement
    (state <s> ^name find-projection)
    (<s> ^predicate <p*1>)
    (<p*1> ^relation <rz>)
    (<rz> ^axis z)
    (<rz> ^type <ztype>)
    (<p*1> ^relation <ry>)
    (<ry> ^axis y)
    (<ry> ^type <ytype>)
    (<p*1> ^relation <rx>)
    (<rx> ^axis x)
    (<rx> ^type <xtype>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name calculate-placement +)
    (<o> ^types <types> +)
    (<o> ^distances <dists> +)
    (<types> ^x <xtype> +)
    (<types> ^y <ytype> +)
    (<types> ^z <ztype> +)
}

sp {find-projection*elaborate*predicate*from*query-result
    (state <s> ^name find-projection)
    (<s> ^predicate-handle <pred-handle>)
    (<s> ^smem-query <query>)
    (<query> ^cue <c*1>)
    (<c*1> ^handle <pred-handle>)
    (<query> ^result <id>)
    -->
    (<s> ^predicate <id> +)
}

sp {find-projection*elaborate*smem-query-cue*predicate
    (state <s> ^name find-projection)
    (<s> ^predicate-handle <pred-handle>)
    -->
    (<s> ^smem-query <query> +)
    (<query> ^cue <cue> +)
    (<query> ^depth 2 +)
    (<cue> ^handle <pred-handle> +)
}

sp {find-projection*elaborate*svs-link*top-state
    (state <s> ^name find-projection)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <svs>)
    -->
    (<s> ^svs-link <svs> +)
}

sp {find-projection*elaborate*result
    (state <s> ^name find-projection)
    -->
    (<s> ^result <res> +)
}

sp {find-projection*elaborate*attributes*superoperator
    (state <s> ^name find-projection)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^arg-list <args>)
    (<o> ^predicate-handle <pred-handle>)
    -->
    (<s> ^arg-list <args> +)
    (<s> ^predicate-handle <pred-handle> +)
}

sp {find-relations*apply*complete-relations-search
    (state <s> ^name find-relations)
    (<s> ^operator <o>)
    (<o> ^name complete-relations-search)
    (<s> ^relationships <rels>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^relationships <rels> +)
}

sp {find-relations*propose*complete-relations-search
    (state <s> ^name find-relations)
    (<s> ^relationships <rels>)
    (<s> ^prep <name>)
    (<rels> ^preposition <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete-relations-search +)
    (<o> ^type true +)
    (<o> ^category svs +)
}

sp {find-relations*apply*copy-relationship*three-args
    (state <s> ^name find-relations)
    (<s> ^operator <o>)
    (<o> ^name copy-relationships)
    (<o> ^rel <rels>)
    (<s> ^relationships <rels>)
    (<s> ^prep-link <p*1>)
    (<p*1> ^prep2 <p>)
    (<s> ^prep { << linear-with >> <name> })
    (<p> ^name <name>)
    (<s> ^prep-link <pl>)
    (<p> ^pair <pair>)
    (<pair> ^a <id>)
    (<s> ^obj <id>)
    (<pair> ^c <id3>)
    (<pair> ^b <id2>)
    -->
    (<rels> ^relations <r> +)
    (<r> ^name <name> +)
    (<r> ^obj1 <id2> +)
    (<r> ^obj2 <id3> +)
    (<r> ^matched true +)
}

sp {find-relations*apply*copy-relationship
    (state <s> ^name find-relations)
    (<s> ^operator <o>)
    (<o> ^name copy-relationships)
    (<o> ^rel <rels>)
    (<s> ^relationships <rels>)
    (<s> ^extract-prepositions <e*1>)
    (<s> ^other <ind2>)
    (<e*1> ^extract-info <e*2>)
    (<s> ^ind <ind>)
    (<s> ^prep <name>)
    (<s> ^obj <id>)
    (<s> ^top-state <t*1>)
    (<e*2> ^result <r*1>)
    (<r*1> ^pair <pair>)
    (<pair> ^<ind> <id>)
    (<pair> ^<ind2> <bid2>)
    (<t*1> ^object <obj>)
    (<obj> ^belief-id <bid2>)
    (<obj> ^id <id2>)
    -->
    (<rels> ^relations <r> +)
    (<r> ^name <name> +)
    (<r> ^obj <id2> +)
    (<r> ^matched true +)
}

sp {find-relations*apply*copy-relationship*name
    (state <s> ^name find-relations)
    (<s> ^operator <o>)
    (<o> ^name copy-relationships)
    (<o> ^rel <rels>)
    (<s> ^relationships <rels>)
    (<s> ^prep <name>)
    -->
    (<rels> ^preposition <name> +)
}

sp {find-relations*propose*copy-relationship
    (state <s> ^name find-relations)
    (<s> ^relationships <rels>)
    (<s> ^prep <name>)
    (<rels> -^preposition <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-relationships +)
    (<o> ^rel <rels> +)
}

sp {find-relations*propose*relation-search*build-answerlist*id
    (state <s> ^name find-relations)
    (<s> ^prep-link <pl>)
    (<pl> ^prep <p*1>)
    (<s> ^prep <type>)
    (<p*1> ^name <type>)
    (<s> ^obj <bid>)
    (<s> ^top-state <t*1>)
    (<t*1> ^object <obj>)
    (<obj> ^belief-id <bid>)
    (<obj> ^id <id>)
    -->
    (<s> ^relationships <rels> +)
    (<rels> ^with <id> +)
}

sp {find-relations*elaborate*copy-down-attrs*prep
    (state <s> ^name find-relations)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^prep <prep>)
    -->
    (<s> ^prep <prep> +)
}

sp {find-relations*elaborate*copy-down-attrs*svs-no-link-usetop-state
    (state <s> ^name find-relations)
    (<s> ^top-state <t*1>)
    (<t*1> ^prepositions <pre>)
    (<s> ^svs <svs>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> -^svs-link <s*2>)
    -->
    (<s> ^prep-link <pre> +)
}

sp {find-relations*elaborate*copy-down-attrs*svs-link
    (state <s> ^name find-relations)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^svs-link <svs>)
    -->
    (<s> ^svs-link <svs> +)
    (<s> ^prep-link <pl> +)
}

sp {find-relations*elaborate*extract-prepositions*extract-info
    (state <s> ^name find-relations)
    (<s> ^other <base>)
    (<s> ^prep <name>)
    (<s> ^obj <id>)
    (<s> ^top-state <t*1>)
    (<t*1> ^found-prep <p>)
    (<p> ^type <name>)
    (<p> ^predicate <pred>)
    -->
    (<s> ^extract-prepositions <e*1> +)
    (<e*1> ^extract-info <info> +)
    (<info> ^object-id <id> +)
    (<info> ^prep <pred> +)
    (<info> ^base <base> +)
}

sp {find-relations*elaborate*copy-down-attrs*ind2
    (state <s> ^name find-relations)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^ind 2)
    -->
    (<s> ^ind b +)
    (<s> ^other a +)
}

sp {find-relations*elaborate*copy-down-attrs*ind1
    (state <s> ^name find-relations)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^ind 1)
    -->
    (<s> ^ind a +)
    (<s> ^other b +)
}

sp {find-relations*elaborate*copy-down-attrs
    (state <s> ^name find-relations)
    (<s> ^top-state <t*1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^obj <id>)
    (<t*1> ^object <obj>)
    (<obj> ^id <id>)
    (<obj> ^belief-id <bel-id>)
    -->
    (<s> ^obj <bel-id> +)
    (interrupt)
}

sp {lookup-preposition*elaborate*copy-down-attrs*type
    (state <s> ^name lookup-preposition)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type <type>)
    -->
    (<s> ^prep <type> +)
}

sp {prefer*lookup-relations*over*complete-lookup-relations
    (state <s> ^name lookup-preposition)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-lookup-relations)
    (<s> ^operator <o1> +)
    (<o1> ^name lookup-relations)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {lookup-smem*svs*relations*retrieved
    (state <s> ^name lookup-relations)
    (<s> ^smem <s*1>)
    (<s*1> ^result <res>)
    (<res> ^retrieved <ret>)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <ss>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^lte <rel>)
    -->
    (<ss> ^relation <ret> +)
}

sp {lookup-smem*svs*relations*retrieve-lte
    (state <s> ^name lookup-relations)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^lte <rel>)
    -->
    (<sc> ^retrieve <rel> +)
}

sp {lookup-smem*preposition*apply*complete-lookup-relations*add-to-top-state
    (state <s> ^name lookup-preposition)
    (<s> ^operator <o>)
    (<o> ^name complete-lookup-relations)
    (<s> ^found-preposition <fprep>)
    (<fprep> ^type <type>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^prepositions <p*1>)
      (<p*1> ^prep <p*2>)
      (<p*2> ^name <type>)}
    (<fprep> ^predicate <p>)
    (<s> ^top-state <t*2>)
    (<t*2> ^prepositions <tprep>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^found-prep <fprep> +)
    (<tprep> ^prep <p*3> +)
    (<p*3> ^name <type> +)
}

sp {lookup-smem*preposition*apply*complete-lookup-relations
    (state <s> ^name lookup-preposition)
    (<s> ^operator <o>)
    (<o> ^name complete-lookup-relations)
    (<s> ^found-preposition <fprep>)
    (<fprep> ^predicate <p>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^found-prep <fprep> +)
}

sp {lookup-smem*preposition*apply*complete-lookup-relations*top-state
    (state <s> ^name lookup-preposition)
    (<s> ^operator <o*2>)
    (<o*2> ^name complete-lookup-relations)
    (<s> ^top-state <t*1>)
    (<t*1> ^found-prep <fprep>)
    (<fprep> ^type <type>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^type <type>)
    -->
    (<s> ^found-preposition <fprep> +)
}

sp {lookup-smem*preposition*copy*predicate
    (state <s> ^status old)
    (<s> ^name lookup-preposition)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-lookup-relations)
    (<s> ^found-preposition <fprep>)
    (<s> ^predicate <p1>)
    -->
    (<fprep> ^predicate <p1> +)
    (<fprep> ^stat old +)
}

sp {lookup-smem*preposition*copy*relations
    (state <s> ^status old)
    (<s> ^name lookup-preposition)
    (<s> ^found-preposition <fprep>)
    (<s> ^relation <rel>)
    -->
    (<fprep> ^relation <rel> +)
}

sp {lookup-smem*preposition*propose*complete-lookup-relations*on-top-state
    (state <s> ^name lookup-preposition)
    (<s> ^top-state <t*1>)
    (<t*1> ^found-prep <f*1>)
    (<f*1> ^type <type>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^type <type>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name complete-lookup-relations +)
    (<o> ^category svs +)
}

sp {lookup-smem*preposition*propose*complete-lookup-relations
    (state <s> ^status old)
    (<s> ^name lookup-preposition)
    (<s> ^predicate <p1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^type <type>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name complete-lookup-relations +)
    (<o> ^category svs +)
}

sp {lookup-smem*preposition*propose*lookup-relations
    (state <s> ^status old)
    (<s> ^name lookup-preposition)
    (<s> ^predicate <p1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^type <type>)
    (<p1> ^relation <rel>)
    (<s> -^relation <rel>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name lookup-relations +)
    (<o> ^category svs +)
    (<o> ^lte <rel> +)
}

sp {lookup-smem*preposition*query*success
    (state <s> ^name lookup-preposition)
    (<s> ^smem <s*3>)
    (<s> ^smem <s*2>)
    (<s*3> ^result <res>)
    (<res> ^retrieved <ret>)
    (<s*2> ^result <r*1>)
    (<r*1> ^success <cue>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^type <type>)
    -->
    (<s> ^predicate <ret> +)
    (<s> ^status old +)
}

sp {lookup-smem*preposition*apply*complete-failure*after-interaction
    (state <s> ^interaction true)
    (<s> ^name lookup-preposition)
    (<s> ^found-preposition <fprep>)
    (<fprep> ^stat default)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^info <i*2>)
    (<i*2> ^status <s*3>)
    (<s*3> ^no-teaching true)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^found-prep <fprep> +)
}

sp {lookup-smem*preposition*apply*complete-failure
    (state <s> ^name lookup-preposition)
    (<s> -^interaction true)
    (<s> ^found-preposition <fprep>)
    (<fprep> ^stat default)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^found-prep <fprep> +)
}

sp {lookup-smem*preposition*query*failure
    (state <s> ^name lookup-preposition)
    (<s> ^found-preposition <fprep>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^failure <cue>)
    -->
    (<fprep> ^stat default +)
}

sp {lookup-smem*preposition*smaller-than
    :o-support
    (state <s> ^name lookup-preposition)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^type smaller-than)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^found-prep <fprep> +)
    (<fprep> ^prep <p*1> +)
    (<p*1> ^name smaller-than +)
}

sp {lookup-smem*preposition*query
    (state <s> ^name lookup-preposition)
    (<s> ^smem <s*2>)
    (<s*2> ^command <sc>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^type <type>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^found-prep <f*1>)
      (<f*1> ^type <type>)}
    -->
    (<sc> ^query <q> +)
    (<s> ^found-preposition <fprep> +)
    (<fprep> ^type <type> +)
    (<q> ^prep-name <type> +)
}

sp {top-state*elaborate*extract-relations*result*predicate*instance
    (state <s> ^top-state <s>)
    (<s> ^extract-relations <e*1>)
    (<e*1> ^extract-info <info>)
    (<info> ^x <x*1>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<x*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*2> ^params <p>)
    (<p> ^b <id2>)
    (<info> ^relation <rel>)
    (<o*1> ^object <obj2>)
    (<obj2> ^svs-obj <s*1>)
    (<s*1> ^id <id2>)
    (<info> ^object <obj1>)
    -->
    (<rel> ^instance <args> +)
    (<args> ^1 <obj1> +)
    (<args> ^2 <obj2> +)
}

sp {top-state*elaborate*extract-relations*extract-info
    (state <s> ^top-state <s>)
    (<s> ^extract-relations <rels>)
    (<s> ^world <w*2>)
    (<w*2> ^objects <o*1>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^predicate-info <p*2>)
    (<p*2> ^type relation)
    (<o*1> ^object <obj>)
    -->
    (<rels> ^extract-info <i> +)
    (<i> ^object <obj> +)
    (<i> ^relation <pred> +)
}

sp {top-state*elaborate*extract-relations
    (state <s> ^top-state <s>)
    -->
    (<s> ^extract-relations <rels> +)
}

sp {anystate*extract-relations*put*on*svs*command
    (state <s> ^extract-relations <e*1>)
    (<e*1> ^extract-info <e>)
    (<e> ^x <filter>)
    (<s> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract <filter> +)
    (<filter> ^mark test +)
}

sp {anystate*extract-relations*connect*z*belief-nodes
    (state <s> ^extract-relations <e*1>)
    (<e*1> ^extract-info <e>)
    (<e> ^z <z>)
    -->
    (<z> ^b <belief-nodes> +)
    (<belief-nodes> ^type tag_select +)
    (<belief-nodes> ^a <a*1> +)
    (<a*1> ^type all_nodes +)
    (<belief-nodes> ^tag_name object-source +)
    (<belief-nodes> ^tag_value belief +)
}

sp {anystate*extract-relations*connect*yz
    (state <s> ^extract-relations <e*1>)
    (<e*1> ^extract-info <e>)
    (<e> ^z <z>)
    (<e> ^y <y>)
    -->
    (<y> ^b <z> +)
}

sp {anystate*extract-relations*connect*xy
    (state <s> ^extract-relations <e*1>)
    (<e*1> ^extract-info <e>)
    (<e> ^y <y>)
    (<e> ^x <x>)
    -->
    (<x> ^b <y> +)
}

sp {anystate*extract-relations*extract-axis*copy*top*bottom
    (state <s> ^extract-relations <e*1>)
    (<e*1> ^extract-info <e>)
    (<e> ^relation <r*1>)
    (<r*1> ^predicate-info <p*1>)
    (<p*1> ^relation <r>)
    (<r> ^top <top>)
    (<r> ^bottom <bot>)
    (<r> ^axis <axis>)
    (<e> ^<axis> <axis-filter>)
    -->
    (<axis-filter> ^bottom <bot> +)
    (<axis-filter> ^top <top> +)
}

sp {anystate*extract-relations*extract-axis*copy*relation*types
    (state <s> ^extract-relations <e*1>)
    (<e*1> ^extract-info <e>)
    (<e> ^relation <r*1>)
    (<r*1> ^predicate-info <p*1>)
    (<p*1> ^relation <r>)
    (<r> ^axis <axis>)
    (<r> ^type <type>)
    (<e> ^<axis> <axis-filter>)
    -->
    (<axis-filter> ^<type> true +)
}

sp {anystate*extract-relations*extract-axis*initial
    (state <s> ^extract-relations <e*1>)
    (<e*1> ^extract-info <e>)
    (<e> ^relation <r*1>)
    (<r*1> ^predicate-info <p*1>)
    (<p*1> ^relation <r>)
    (<r> ^axis <axis>)
    (<e> ^object <o*1>)
    (<o*1> ^svs-obj <s*1>)
    (<s*1> ^id <id>)
    -->
    (<e> ^<axis> <axis-filter> +)
    (<axis-filter> ^type axis_relation_select +)
    (<axis-filter> ^axis <axis> +)
    (<axis-filter> ^a <a> +)
    (<a> ^type node +)
    (<a> ^id <id> +)
    (<a> ^base a +)
}

sp {elaborate*status*unknown*task
    (state <s> ^choices none)
    (<s> ^attribute state)
    (<s> ^top-state <ts>)
    (<s> ^superstate <ts>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^failure <f> +)
    (<f> ^type unknown-task +)
}

sp {anystate*overlap-command*apply*create-result*success*no-result
    (state <s> ^overlap-filter <filter>)
    (<filter> -^result <r*1>)
    (<filter> ^status success)
    (<s> ^operator <o>)
    (<o> ^name overlap-command)
    (<o> ^object-b <b>)
    (<o> ^object-a <a>)
    -->
    (<s> ^overlap-command <o*1> +)
    (<o*1> ^result <r> +)
    (<r> ^object-a <a> +)
    (<r> ^object-b <b> +)
    (<r> ^overlap 0 +)
}

sp {anystate*apply*overlap-command*create-overlap-filter*failure
    (state <s> ^operator <o>)
    (<o> ^name overlap-command)
    (<s> ^overlap-filter <o*1>)
    (<o*1> ^result <res>)
   -{ (<res> ^record <r*1>)
      (<r*1> ^value <v*1>)}
    (<o> ^object-b <b>)
    (<o> ^object-a <a>)
    -->
    (<s> ^overlap-command <o*2> +)
    (<o*2> ^result <r> +)
    (<r> ^object-a <a> +)
    (<r> ^object-b <b> +)
    (<r> ^overlap 0 +)
}

sp {anystate*apply*overlap-command*create-overlap-filter*success
    (state <s> ^operator <o>)
    (<o> ^name overlap-command)
    (<s> ^overlap-filter <o*1>)
    (<o> ^object-b <b>)
    (<o> ^object-a <a>)
    (<o*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*2> ^value <val>)
    -->
    (<s> ^overlap-command <o*2> +)
    (<o*2> ^result <res> +)
    (<res> ^object-a <a> +)
    (<res> ^object-b <b> +)
    (<res> ^overlap <val> +)
}

sp {anystate*apply*overlap-command*create-overlap-filter*cleanup
    (state <s> ^operator <o*1>)
    (<o*1> ^name overlap-command)
    (<s> ^overlap-filter <over>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^extract_once <over>)
    (<over> ^result <foo>)
    -->
    (<cmd> ^extract_once <over> -)
    (<s> ^overlap-filter <over> -)
}

sp {anystate*apply*overlap-command*create-overlap-filter
    (state <s> ^operator <o>)
    (<o> ^name overlap-command)
    (<o> ^object-b <idb>)
    (<o> ^object-a <ida>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract_once <overlap> +)
    (<overlap> ^type overlap +)
    (<overlap> ^a <obja> +)
    (<overlap> ^b <objb> +)
    (<obja> ^type node +)
    (<obja> ^id <ida> +)
    (<objb> ^type node +)
    (<objb> ^id <idb> +)
    (<s> ^overlap-filter <overlap> +)
}

sp {check-for-occlusion*apply*occlusion-command*debug-perception*report
    (state <s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^occlusion-amount <val>)
    (<s> ^object-info <o*2>)
    (<o*2> ^belief-obj <b*1>)
    (<s> ^top-state <t*2>)
    (<t*2> ^agent-params <a*2>)
    (<a*2> ^debug-perception true)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<b*1> ^id <id>)
    -->
    
}

sp {check-for-occlusion*apply*occlusion-command*report-to-superstate
    (state <s> ^report-to-superstate true)
    (<s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^object-occluded <bool>)
    (<s> ^occlusion-amount <val>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^object-occluded <bool> +)
    (<ss> ^occlusion-amount <val> +)
}

sp {check-for-occlusion*apply*occlusion-command*occluded*update*time
    (state <s> ^object-occluded true)
    (<s> ^report-to-top-state true)
    (<s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> ^recheck-occlusion-time <old-t>)
    (<s> ^occlusion-check-period <period>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^time <t*1>)
    (<t*1> ^seconds <cur-t>)
    -->
    (<diffs> ^recheck-occlusion-time <old-t> -)
    (<diffs> ^recheck-occlusion-time (+ <cur-t> <period>) +)
}

sp {check-for-occlusion*apply*occlusion-command*occluded*create*time
    (state <s> ^object-occluded true)
    (<s> ^report-to-top-state true)
    (<s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> -^recheck-occlusion-time <r*1>)
    (<s> ^occlusion-check-period <period>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^time <t*1>)
    (<t*1> ^seconds <cur-t>)
    -->
    (<diffs> ^recheck-occlusion-time (+ <cur-t> <period>) +)
}

sp {check-for-occlusion*apply*occlusion-command*not*occluded*remove*flag
    (state <s> ^object-occluded false)
    (<s> ^report-to-top-state true)
    (<s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    (<diffs> ^is-occluded true)
    -->
    (<diffs> ^is-occluded true -)
}

sp {check-for-occlusion*apply*occlusion-command*mark*occluded
    (state <s> ^object-occluded true)
    (<s> ^report-to-top-state true)
    (<s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^object-info <o*2>)
    (<o*2> ^differences <diffs>)
    -->
    (<diffs> ^is-occluded true +)
}

sp {check-for-occlusion*apply*occlusion-command*copy*object-occluded*false
    (state <s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^occlusion-amount <o*2>)
    (<s> ^occlusion-threshold { > <o*2> <threshold> })
    -->
    (<s> ^object-occluded false +)
}

sp {check-for-occlusion*apply*occlusion-command*copy*object-occluded*true
    (state <s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^occlusion-amount <o*2>)
    (<s> ^occlusion-threshold { <= <o*2> <threshold> })
    -->
    (<s> ^object-occluded true +)
}

sp {check-for-occlusion*apply*occlusion-command*copy*occlusion-amount
    (state <s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^occlusion-command <o*2>)
    (<o*2> ^result <val>)
    -->
    (<s> ^occlusion-amount <val> +)
}

sp {check-for-occlusion*apply*issue-occlusion-reset*remove*occlusion-filter
    (state <s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name issue-occlusion-reset)
    (<s> ^occlusion-filter <filter>)
    -->
    (<s> ^occlusion-filter <filter> -)
}

sp {check-for-occlusion*apply*issue-occlusion-reset*remove*filter
    (state <s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name issue-occlusion-reset)
    (<s> ^occlusion-filter <filter>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^extract_once <filter>)
    -->
    (<cmd> ^extract_once <filter> -)
}

sp {check-for-occlusion*apply*issue-occlusion-reset*Remove*redo
    (state <s> ^redo-command true)
    (<s> ^name check-for-occlusion)
    (<s> ^operator <o*1>)
    (<o*1> ^name issue-occlusion-reset)
    -->
    (<s> ^redo-command true -)
}

sp {check-for-occlusion*issue*reset
    (state <s> ^redo-command true)
    (<s> ^name check-for-occlusion)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name issue-occlusion-reset +)
}

sp {check-for-occlusion*propose*occlusion-command
    (state <s> ^name check-for-occlusion)
    (<s> -^redo-command <r*1>)
    (<s> ^candidate-set <cand>)
    (<s> ^object-info <o*1>)
    (<o*1> ^belief-obj <b*1>)
    (<b*1> ^id <id>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name occlusion-command +)
    (<o> ^object-id <id> +)
    (<o> ^candidate-set <cand> +)
}

sp {check-for-occlusion*propose*occlusion-command*with*perception-obj
    (state <s> ^name check-for-occlusion)
    (<s> ^object-info <obj-info>)
    (<obj-info> ^perception-obj <p*1>)
    (<obj-info> ^perception-id <perc-id>)
    (<p*1> ^id <perc-id>)
    (<obj-info> ^belief-obj <b*1>)
    (<b*1> ^id <id>)
    -->
    (<s> ^candidate-set <cand> +)
    (<cand> ^type combine_nodes +)
    (<cand> ^a <arm> +)
    (<cand> ^a <filtered-p-objs> +)
    (<arm> ^type node +)
    (<arm> ^id arm +)
    (<filtered-p-objs> ^type remove_node +)
    (<filtered-p-objs> ^id <perc-id> +)
    (<filtered-p-objs> ^a <perc-objs> +)
    (<perc-objs> ^type tag_select +)
    (<perc-objs> ^a <a*1> +)
    (<a*1> ^type all_nodes +)
    (<perc-objs> ^tag_name object-source +)
    (<perc-objs> ^tag_value perception +)
}

sp {check-for-occlusion*propose*occlusion-command*no-perception-obj
    (state <s> ^name check-for-occlusion)
    (<s> ^object-info <obj-info>)
    (<obj-info> ^perception-id <pid>)
   -{ (<obj-info> ^perception-obj <p*1>)
      (<p*1> ^id <pid>)}
    (<obj-info> ^belief-obj <b*1>)
    (<b*1> ^id <id>)
    -->
    (<s> ^candidate-set <cand> +)
    (<cand> ^type combine_nodes +)
    (<cand> ^a <arm> +)
    (<cand> ^a <perc-objs> +)
    (<arm> ^type node +)
    (<arm> ^id arm +)
    (<perc-objs> ^type tag_select +)
    (<perc-objs> ^a <a*1> +)
    (<a*1> ^type all_nodes +)
    (<perc-objs> ^tag_name object-source +)
    (<perc-objs> ^tag_value perception +)
}

sp {check-for-occlusion*elaborate*agent-params*occlusion-threshold
    (state <s> ^name check-for-occlusion)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^occlusion-threshold <t>)
    -->
    (<s> ^occlusion-threshold <t> +)
}

sp {check-for-occlusion*elaborate*agent-params*occlusion-check-period
    (state <s> ^name check-for-occlusion)
    (<s> ^top-state <t*1>)
    (<t*1> ^agent-params <a*1>)
    (<a*1> ^occlusion-check-period <p>)
    -->
    (<s> ^occlusion-check-period <p> +)
}

sp {check-for-occlusion*elaborate*report-to-top-state*default
    (state <s> ^name check-for-occlusion)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    (<op> -^report-to-top-state <r*1>)
    -->
    (<s> ^report-to-top-state true +)
}

sp {check-for-occlusion*elaborate*report-to-top-state*copy
    (state <s> ^name check-for-occlusion)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^report-to-top-state <bool>)
    -->
    (<s> ^report-to-top-state <bool> +)
}

sp {check-for-occlusion*elaborate*report-to-superstate*default
    (state <s> ^name check-for-occlusion)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    (<op> -^report-to-superstate <r*1>)
    -->
    (<s> ^report-to-superstate false +)
}

sp {check-for-occlusion*elaborate*report-to-superstate*copy
    (state <s> ^name check-for-occlusion)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^report-to-superstate <bool>)
    -->
    (<s> ^report-to-superstate <bool> +)
}

sp {check-for-occlusion*elaborate*object-info
    (state <s> ^name check-for-occlusion)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object-info <obj-info>)
    -->
    (<s> ^object-info <obj-info> +)
}

sp {anystate*intersect-command*apply*create-result*success*no-result
    (state <s> ^intersect-filter <filter>)
    (<filter> -^result <r*1>)
    (<filter> ^status success)
    (<s> ^operator <o*1>)
    (<o*1> ^name intersect-command)
    (<s> ^intersect-command <icmd>)
    -->
    (<icmd> ^result none +)
}

sp {anystate*apply*intersect-command*create-intersect-filter*failure*no-result
    (state <s> ^operator <o*1>)
    (<o*1> ^name intersect-command)
    (<s> ^intersect-filter <i*1>)
    (<i*1> ^result <res>)
   -{ (<res> ^record <r*1>)
      (<r*1> ^value true)}
    (<s> ^intersect-command <icmd>)
    -->
    (<icmd> ^result none +)
}

sp {anystate*apply*intersect-command*create-intersect-filter*success
    (state <s> ^operator <o*1>)
    (<o*1> ^name intersect-command)
    (<s> ^intersect-filter <i*1>)
    (<s> ^intersect-command <icmd>)
    (<i*1> ^result <r*1>)
    (<r*1> ^record <rec>)
    (<rec> ^value true)
    (<rec> ^params <p*1>)
    (<p*1> ^b <id>)
    -->
    (<icmd> ^result <id> +)
}

sp {anystate*apply*intersect-command*create-intersect-filter*cleanup
    (state <s> ^operator <o*1>)
    (<o*1> ^name intersect-command)
    (<s> ^intersect-filter <intersect>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^extract_once <intersect>)
    (<intersect> ^result <res>)
    -->
    (<cmd> ^extract_once <intersect> -)
    (<s> ^intersect-filter <intersect> -)
}

sp {anystate*apply*intersect-command*create-intersect-filter
    (state <s> ^operator <o>)
    (<o> ^name intersect-command)
    (<o> ^object-id <id>)
    (<o> ^used-candidate-set <candidates>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract_once <intersect> +)
    (<intersect> ^type intersect +)
    (<intersect> ^a <obj> +)
    (<intersect> ^b <candidates> +)
    (<intersect> ^intersect_type hull +)
    (<obj> ^type node +)
    (<obj> ^id <id> +)
    (<s> ^intersect-filter <intersect> +)
    (<s> ^intersect-command <f> +)
}

sp {anystate*elaborate*intersect-command*candidate-set
    (state <s> ^operator <o> +)
    (<o> ^name intersect-command)
    (<o> ^candidate-set <set>)
    -->
    (<o> ^used-candidate-set <set> +)
}

sp {anystate*elaborate*intersect-command*default*candidate-set
    (state <s> ^operator <o> +)
    (<o> -^candidate-set <c*1>)
    (<o> ^name intersect-command)
    -->
    (<o> ^used-candidate-set <u*1> +)
    (<u*1> ^type all_nodes +)
}

sp {anystate*closest-command*apply*create-result*success*no-result
    (state <s> ^closest-filter <filter>)
    (<filter> -^result <r*1>)
    (<filter> ^status success)
    (<s> ^operator <o*1>)
    (<o*1> ^name closest-command)
    -->
    (<s> ^closest-command <c*1> +)
    (<c*1> ^result none +)
}

sp {anystate*closest-command*apply*create-result*failure*no-result
    (state <s> ^operator <o>)
    (<o> ^name closest-command)
    (<s> ^closest-filter <c*1>)
    (<c*1> ^result <res>)
   -{ (<res> ^record <r*1>)
      (<r*1> ^params <p*1>)
      (<p*1> ^b <foo>)}
    (<o> ^object-id <id>)
    -->
    (<s> ^closest-command <c*2> +)
    (<c*2> ^result none +)
}

sp {anystate*closest-command*apply*create-result*failure*same-id
    (state <s> ^operator <o>)
    (<o> ^name closest-command)
    (<s> ^closest-filter <c*1>)
    (<o> ^object-id <id>)
    (<c*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*2> ^params <p*1>)
    (<p*1> ^b <id>)
    -->
    (<s> ^closest-command <c*2> +)
    (<c*2> ^result none +)
}

sp {anystate*closest-command*apply*create-result*success
    (state <s> ^operator <o>)
    (<o> ^name closest-command)
    (<s> ^closest-filter <c*1>)
    (<o> ^object-id <id>)
    (<c*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*2> ^params <p*1>)
    (<p*1> ^b { <> <id> <closest-id> })
    -->
    (<s> ^closest-command <c*2> +)
    (<c*2> ^result <closest-id> +)
}

sp {anystate*closest-command*apply*create-closest-filter*cleanup
    (state <s> ^operator <o*1>)
    (<o*1> ^name closest-command)
    (<s> ^closest-filter <closest>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^extract_once <closest>)
    (<closest> ^result <res>)
    -->
    (<cmd> ^extract_once <closest> -)
}

sp {anystate*closest-command*apply*create-closest-filter
    (state <s> ^operator <o>)
    (<o> ^name closest-command)
    (<o> ^object-id <id>)
    (<o> ^used-candidate-set <candidates>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract_once <closest> +)
    (<closest> ^type closest +)
    (<closest> ^distance_type centroid +)
    (<closest> ^a <obj> +)
    (<closest> ^b <candidates> +)
    (<obj> ^type node +)
    (<obj> ^id <id> +)
    (<s> ^closest-filter <closest> +)
}

sp {anystate*closest-command*elaborate*used-candidate-set*copy
    (state <s> ^operator <o> +)
    (<o> ^name closest-command)
    (<o> ^candidate-set <cand>)
    -->
    (<o> ^used-candidate-set <cand> +)
}

sp {anystate*closest-command*elaborate*used-candidate-set*default
    (state <s> ^operator <o> +)
    (<o> -^candidate-set <c*1>)
    (<o> ^name closest-command)
    -->
    (<o> ^used-candidate-set <u*1> +)
    (<u*1> ^type all_nodes +)
}

sp {anystate*distance-command*apply*create-result*success*no-result
    (state <s> ^distance-filter <filter>)
    (<filter> -^result <r*1>)
    (<filter> ^status success)
    (<s> ^operator <o*1>)
    (<o*1> ^name distance-command)
    -->
    (<s> ^distance-command <d*1> +)
    (<d*1> ^result none +)
}

sp {anystate*distance-command*apply*create-result*failure
    (state <s> ^operator <o*1>)
    (<o*1> ^name distance-command)
    (<s> ^distance-filter <d*1>)
    (<d*1> ^result <res>)
   -{ (<res> ^record <r*1>)
      (<r*1> ^value <v*1>)}
    -->
    (<s> ^distance-command <d*2> +)
    (<d*2> ^result none +)
}

sp {anystate*distance-command*apply*create-result*success
    (state <s> ^operator <o*1>)
    (<o*1> ^name distance-command)
    (<s> ^distance-filter <d*1>)
    (<d*1> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*2> ^value <dist>)
    -->
    (<s> ^distance-command <d*2> +)
    (<d*2> ^result <dist> +)
}

sp {anystate*distance-command*apply*distance-command*cleanup
    (state <s> ^operator <o*1>)
    (<o*1> ^name distance-command)
    (<s> ^distance-filter <dist>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^extract_once <dist>)
    (<dist> ^result <foo>)
    -->
    (<cmd> ^extract_once <dist> -)
}

sp {anystate*distance-command*apply*create-distance-filter
    (state <s> ^operator <o>)
    (<o> ^name distance-command)
    (<o> ^object-b <idb>)
    (<o> ^object-a <ida>)
    (<o> ^used-distance-type <type>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract_once <distance> +)
    (<distance> ^type distance +)
    (<distance> ^distance_type <type> +)
    (<distance> ^a <obja> +)
    (<distance> ^b <objb> +)
    (<obja> ^type node +)
    (<obja> ^id <ida> +)
    (<objb> ^type node +)
    (<objb> ^id <idb> +)
    (<s> ^distance-filter <distance> +)
}

sp {anystate*distance-command*elaborate*used-distance-type*copy
    (state <s> ^operator <o> +)
    (<o> ^name distance-command)
    (<o> ^distance-type <type>)
    -->
    (<o> ^used-distance-type <type> +)
}

sp {anystate*distance-command*elaborate*used-distance-type*default
    (state <s> ^operator <o> +)
    (<o> -^distance-type <d*1>)
    (<o> ^name distance-command)
    -->
    (<o> ^used-distance-type centroid_distance +)
}

sp {occlusion-command*state-no-change*redo*occlusion*operator
    (state <s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
   -{ (<ss> ^occlusion-command <o*1>)
      (<o*1> ^result <r*1>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^name occlusion-command)
    (<ss> ^superstate <sss>)
    (<sss> ^operator <o>)
    (<o> ^name occlusion-command)
    -->
    (<sss> ^redo-command true +)
}

sp {anystate*occlusion-command*apply*create-result*success*no-result
    (state <s> ^occlusion-filter <filter>)
    (<filter> -^result <r*1>)
    (<filter> ^status success)
    (<s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    -->
    (<s> ^occlusion-command <o*2> +)
    (<o*2> ^result 0 +)
}

sp {anystate*occlusion-command*apply*create-result*failure
    (state <s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^occlusion-filter <o*2>)
    (<o*2> ^result <res>)
   -{ (<res> ^record <r*1>)
      (<r*1> ^value <val>)}
    -->
    (<s> ^occlusion-command <o*3> +)
    (<o*3> ^result 0 +)
}

sp {anystate*occlusion-command*apply*create-result*success
    (state <s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^occlusion-filter <o*2>)
    (<o*2> ^result <r*1>)
    (<r*1> ^record <r*2>)
    (<r*2> ^value <val>)
    -->
    (<s> ^occlusion-command <o*3> +)
    (<o*3> ^result <val> +)
}

sp {anystate*occlusion-command*apply*cleanup
    (state <s> ^operator <o*1>)
    (<o*1> ^name occlusion-command)
    (<s> ^occlusion-filter <occlusion>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^extract_once <occlusion>)
    (<occlusion> ^result <res>)
    -->
    (<cmd> ^extract_once <occlusion> -)
}

sp {anystate*occlusion-command*apply*create-occlusion-filter
    (state <s> ^operator <o>)
    (<o> ^name occlusion-command)
    (<o> ^object-id <id>)
    (<o> ^used-eye <eye>)
    (<o> ^used-candidate-set <candidates>)
    (<s> ^top-state <t*1>)
    (<t*1> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^extract_once <occlusion> +)
    (<occlusion> ^type occlusion +)
    (<occlusion> ^a <node> +)
    (<occlusion> ^b <candidates> +)
    (<occlusion> ^eye <eye> +)
    (<node> ^type node +)
    (<node> ^id <id> +)
    (<s> ^occlusion-filter <occlusion> +)
}

sp {anystate*occlusion-command*elaborate*used-eye*copy
    (state <s> ^operator <o> +)
    (<o> ^name occlusion-command)
    (<o> ^eye <eye>)
    -->
    (<o> ^used-eye <eye> +)
}

sp {anystate*occlusion-command*elaborate*used-eye*default
    (state <s> ^operator <o> +)
    (<o> -^eye <e*1>)
    (<o> ^name occlusion-command)
    -->
    (<o> ^used-eye <eye> +)
    (<eye> ^type node +)
    (<eye> ^id eye +)
}

sp {anystate*occlusion-command*elaborate*used-candidate-set*copy
    (state <s> ^operator <o> +)
    (<o> ^name occlusion-command)
    (<o> ^candidate-set <cand>)
    -->
    (<o> ^used-candidate-set <cand> +)
}

sp {anystate*occlusion-command*elaborate*used-candidate-set*default
    (state <s> ^operator <o> +)
    (<o> -^candidate-set <c*1>)
    (<o> ^name occlusion-command)
    -->
    (<o> ^used-candidate-set <u*1> +)
    (<u*1> ^type all_nodes +)
}

sp {convert-TCN-to-NL*apply*complete-state
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^description <d>)
   -{ (<s> ^sentence <se>)
      (<d> -^sentence <se>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-state)
    (<s> ^tcn <tcn>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^description <d> +)
}

sp {convert-TCN-to-NL*apply*complete-state*copy-sentences
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-state)
    (<s> ^sentence <sent>)
    (<s> ^description <d>)
    -->
    (<d> ^sentence <sent> +)
}

sp {convert-TCN-to-NL*propose*complete-state
    (state <s> ^name convert-TCN-to-NL)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete-state +)
    (<o> ^category svs +)
}

sp {prefer*convert-TCN-to-NL*create-sentence*prefer*mentioned-similar-objects
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o2> +)
    (<o2> ^name create-sentence)
    (<s> ^operator { <> <o2> <o1> } +)
    (<o1> ^name create-sentence)
    (<s> ^state-rep <s*2>)
    (<s> ^state-rep <s*1>)
    (<s*2> ^object-desc-set <o*2>)
    (<o*2> ^obj-desc <objd2>)
    (<objd2> -^mentioned true)
    (<s*1> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc { <> <objd2> <objd> })
    (<objd> ^mentioned true)
    (<objd> ^same-description <objd2>)
    (<s> ^param <p*2>)
    (<s> ^param <p*1>)
    (<o2> ^condition <cond2>)
    (<o1> ^condition <cond1>)
   -{ (<s> ^state-rep <s*4>)
      (<s> ^state-rep <s*3>)
      (<s*4> ^object-desc-set <o*4>)
      (<o*4> ^obj-desc <objd4>)
      (<objd4> ^mentioned true)
      (<objd4> ^same-description { <> <objd4> <objd3> })
      (<objd3> -^mentioned true)
      (<s*3> ^object-desc-set <o*3>)
      (<o*3> ^obj-desc <objd3>)
      (<s> ^param <p*4>)
      (<s> ^param <p*3>)
      (<objd4> ^id <idd>)
      (<objd3> ^id <idc>)
      (<p*4> ^<arg4> <a*8>)
      (<a*8> ^id <idd>)
      (<cond2> ^{ << 1 2 3 >> <a*6> } <arg4>)
      (<p*3> ^<arg3> <a*7>)
      (<a*7> ^id <idc>)
      (<cond1> ^{ << 1 2 3 >> <a*5> } <arg3>)}
    (<objd2> ^id <idb>)
    (<objd> ^id <id>)
    (<p*2> ^<arg2> <a*2>)
    (<a*2> ^id <idb>)
    (<cond2> ^{ << 1 2 3 >> <a*4> } <arg2>)
    (<p*1> ^<arg1> <a*1>)
    (<a*1> ^id <id>)
    (<cond1> ^{ << 1 2 3 >> <a*3> } <arg1>)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {convert-TCN-to-NL*apply*create-sentence*INDEF*bINDEF
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o>)
    (<o> ^name create-sentence)
    (<o> ^condition <cond>)
    (<cond> -^3 <v*1>)
    (<cond> ^2 INDEF)
    (<o> ^count <c>)
    (<s> ^count <c>)
    (<s> ^state-rep <s*1>)
    (<s*1> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc <objd>)
    (<objd> -^mentioned true)
    (<cond> ^btype <type>)
    (<s> ^param <p*1>)
    (<cond> ^negative <bool>)
    (<cond> ^1 <arga>)
    (<objd> ^id <id>)
    (<p*1> ^<arga> <a*1>)
    (<a*1> ^id <id>)
    (<cond> ^name <prep>)
    -->
    (<s> ^count <c> -)
    (<s> ^count (+ 1 <c>) +)
    (<s> ^sentence <sent> +)
    (<sent> ^condition <cond> +)
    (<sent> ^object1 <objd> +)
    (<sent> ^object2 <objd2> +)
    (<sent> ^1 <aspec> +)
    (<sent> ^2 <bspec> +)
    (<sent> ^word <prep> +)
    (<sent> ^prep <prep> +)
    (<sent> ^order <c> +)
    (<sent> ^negative <bool> +)
    (<aspec> ^specifier a +)
    (<bspec> ^specifier a +)
    (<objd2> ^word <type> +)
}

sp {convert-TCN-to-NL*apply*create-sentence*DEF*bINDEF
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o>)
    (<o> ^name create-sentence)
    (<o> ^condition <cond>)
    (<cond> -^3 <v*1>)
    (<cond> ^2 INDEF)
    (<o> ^count <c>)
    (<s> ^count <c>)
    (<s> ^state-rep <s*1>)
    (<s*1> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc <objd>)
    (<objd> ^mentioned true)
    (<cond> ^btype <type>)
    (<s> ^param <p*1>)
    (<cond> ^negative <bool>)
    (<cond> ^1 <arga>)
    (<objd> ^id <id>)
    (<p*1> ^<arga> <a*1>)
    (<a*1> ^id <id>)
    (<cond> ^name <prep>)
    -->
    (<s> ^count <c> -)
    (<s> ^count (+ 1 <c>) +)
    (<s> ^sentence <sent> +)
    (<sent> ^condition <cond> +)
    (<sent> ^object1 <objd> +)
    (<sent> ^object2 <objd2> +)
    (<sent> ^1 <aspec> +)
    (<sent> ^2 <bspec> +)
    (<sent> ^word <prep> +)
    (<sent> ^prep <prep> +)
    (<sent> ^order <c> +)
    (<sent> ^negative <bool> +)
    (<aspec> ^specifier the +)
    (<bspec> ^specifier a +)
    (<objd2> ^word <type> +)
}

sp {convert-TCN-to-NL*apply*create-sentence*INDEFDEF
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o>)
    (<o> ^name create-sentence)
    (<o> ^condition <cond>)
    (<cond> -^3 <v*1>)
    (<o> ^count <c>)
    (<s> ^count <c>)
    (<s> ^state-rep <s*2>)
    (<s> ^state-rep <s*1>)
    (<s*2> ^object-desc-set <o*2>)
    (<o*2> ^obj-desc <objd2>)
    (<objd2> ^mentioned true)
    (<s*1> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc { <> <objd2> <objd> })
    (<objd> -^mentioned true)
    (<s> ^param <p*2>)
    (<s> ^param <p*1>)
    (<cond> ^negative <bool>)
    (<cond> ^2 <argb>)
    (<cond> ^1 <arga>)
    (<objd2> ^id <idb>)
    (<p*2> ^<argb> <a*2>)
    (<a*2> ^id <idb>)
    (<objd> ^id <id>)
    (<p*1> ^<arga> <a*1>)
    (<a*1> ^id <id>)
    (<cond> ^name <prep>)
    -->
    (<s> ^count <c> -)
    (<s> ^count (+ 1 <c>) +)
    (<s> ^sentence <sent> +)
    (<sent> ^condition <cond> +)
    (<sent> ^object1 <objd> +)
    (<sent> ^object2 <objd2> +)
    (<sent> ^1 <aspec> +)
    (<sent> ^2 <bspec> +)
    (<sent> ^prep <prep> +)
    (<sent> ^word <prep> +)
    (<sent> ^order <c> +)
    (<sent> ^negative <bool> +)
    (<aspec> ^specifier a +)
    (<bspec> ^specifier the +)
}

sp {convert-TCN-to-NL*apply*create-sentence*DEFINDEF
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o>)
    (<o> ^name create-sentence)
    (<o> ^condition <cond>)
    (<cond> -^3 <v*1>)
    (<o> ^count <c>)
    (<s> ^count <c>)
    (<s> ^state-rep <s*2>)
    (<s> ^state-rep <s*1>)
    (<s*2> ^object-desc-set <o*2>)
    (<o*2> ^obj-desc <objd2>)
    (<objd2> -^mentioned true)
    (<s*1> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc { <> <objd2> <objd> })
    (<objd> ^mentioned true)
    (<s> ^param <p*2>)
    (<s> ^param <p*1>)
    (<cond> ^negative <bool>)
    (<cond> ^2 <argb>)
    (<cond> ^1 <arga>)
    (<objd2> ^id <idb>)
    (<p*2> ^<argb> <a*2>)
    (<a*2> ^id <idb>)
    (<objd> ^id <id>)
    (<p*1> ^<arga> <a*1>)
    (<a*1> ^id <id>)
    (<cond> ^name <prep>)
    -->
    (<s> ^count <c> -)
    (<s> ^count (+ 1 <c>) +)
    (<s> ^sentence <sent> +)
    (<sent> ^condition <cond> +)
    (<sent> ^object1 <objd> +)
    (<sent> ^object2 <objd2> +)
    (<sent> ^1 <aspec> +)
    (<sent> ^2 <bspec> +)
    (<sent> ^prep <prep> +)
    (<sent> ^word <prep> +)
    (<sent> ^order <c> +)
    (<sent> ^negative <bool> +)
    (<aspec> ^specifier the +)
    (<bspec> ^specifier a +)
}

sp {convert-TCN-to-NL*apply*create-sentence*INDEFINDEF
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o>)
    (<o> ^name create-sentence)
    (<o> ^condition <cond>)
    (<cond> -^3 <v*1>)
    (<o> ^count <c>)
    (<s> ^count <c>)
    (<s> ^state-rep <s*2>)
    (<s> ^state-rep <s*1>)
    (<s*2> ^object-desc-set <o*2>)
    (<o*2> ^obj-desc <objd2>)
    (<objd2> -^mentioned true)
    (<s*1> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc { <> <objd2> <objd> })
    (<objd> -^mentioned true)
    (<s> ^param <p*2>)
    (<s> ^param <p*1>)
    (<cond> ^negative <bool>)
    (<cond> ^2 <argb>)
    (<cond> ^1 <arga>)
    (<objd2> ^id <idb>)
    (<p*2> ^<argb> <a*2>)
    (<a*2> ^id <idb>)
    (<objd> ^id <id>)
    (<p*1> ^<arga> <a*1>)
    (<a*1> ^id <id>)
    (<cond> ^name <prep>)
    -->
    (<s> ^count <c> -)
    (<s> ^count (+ 1 <c>) +)
    (<s> ^sentence <sent> +)
    (<sent> ^condition <cond> +)
    (<sent> ^object1 <objd> +)
    (<sent> ^object2 <objd2> +)
    (<sent> ^1 <aspec> +)
    (<sent> ^2 <bspec> +)
    (<sent> ^prep <prep> +)
    (<sent> ^word <prep> +)
    (<sent> ^order <c> +)
    (<sent> ^negative <bool> +)
    (<aspec> ^specifier a +)
    (<bspec> ^specifier a +)
}

sp {convert-TCN-to-NL*apply*create-sentence*DEFDEF
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o>)
    (<o> ^name create-sentence)
    (<o> ^condition <cond>)
    (<cond> -^3 <v*1>)
    (<o> ^count <c>)
    (<s> ^count <c>)
    (<s> ^state-rep <s*2>)
    (<s> ^state-rep <s*1>)
    (<s*2> ^object-desc-set <o*2>)
    (<o*2> ^obj-desc <objd2>)
    (<objd2> ^mentioned true)
    (<s*1> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc { <> <objd2> <objd> })
    (<objd> ^mentioned true)
    (<s> ^param <p*2>)
    (<s> ^param <p*1>)
    (<cond> ^negative <bool>)
    (<cond> ^2 <argb>)
    (<cond> ^1 <arga>)
    (<objd2> ^id <idb>)
    (<p*2> ^<argb> <a*2>)
    (<a*2> ^id <idb>)
    (<objd> ^id <id>)
    (<p*1> ^<arga> <a*1>)
    (<a*1> ^id <id>)
    (<cond> ^name <prep>)
    -->
    (<s> ^count <c> -)
    (<s> ^count (+ 1 <c>) +)
    (<s> ^sentence <sent> +)
    (<sent> ^condition <cond> +)
    (<sent> ^object1 <objd> +)
    (<sent> ^object2 <objd2> +)
    (<sent> ^1 <aspec> +)
    (<sent> ^2 <bspec> +)
    (<sent> ^prep <prep> +)
    (<sent> ^word <prep> +)
    (<sent> ^order <c> +)
    (<sent> ^negative <bool> +)
    (<aspec> ^specifier the +)
    (<bspec> ^specifier the +)
}

sp {convert-TCN-to-NL*apply*create-sentence*3arg*INDEF
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o>)
    (<o> ^name create-sentence)
    (<o> ^count <c>)
    (<s> ^count <c>)
    (<s> ^state-rep <s*3>)
    (<s> ^state-rep <s*2>)
    (<s> ^state-rep <s*1>)
    (<s*3> ^object-desc-set <o*3>)
    (<o*3> ^obj-desc <objd3>)
    (<objd3> ^mentioned true)
    (<s*2> ^object-desc-set <o*2>)
    (<o*2> ^obj-desc { <> <objd3> <objd2> })
    (<objd2> ^mentioned true)
    (<s*1> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc { <> <objd3> <> <objd2> <objd> })
    (<objd> -^mentioned true)
    (<s> ^param <p*3>)
    (<s> ^param <p*2>)
    (<s> ^param <p*1>)
    (<o> ^condition <cond>)
    (<cond> ^negative <bool>)
    (<cond> ^2 <argb>)
    (<cond> ^3 <argc>)
    (<cond> ^1 <arga>)
    (<objd3> ^id <idc>)
    (<p*3> ^<argc> <a*3>)
    (<a*3> ^id <idc>)
    (<objd2> ^id <idb>)
    (<p*2> ^<argb> <a*2>)
    (<a*2> ^id <idb>)
    (<objd> ^id <id>)
    (<p*1> ^<arga> <a*1>)
    (<a*1> ^id <id>)
    (<cond> ^name <prep>)
    -->
    (<s> ^count <c> -)
    (<s> ^count (+ 1 <c>) +)
    (<s> ^sentence <sent> +)
    (<sent> ^condition <cond> +)
    (<sent> ^object1 <objd> +)
    (<sent> ^object2 <objd2> +)
    (<sent> ^object3 <objd3> +)
    (<sent> ^1 <aspec> +)
    (<sent> ^2 <bspec> +)
    (<sent> ^3 <cspec> +)
    (<sent> ^word <prep> +)
    (<sent> ^prep <prep> +)
    (<sent> ^order <c> +)
    (<sent> ^negative <bool> +)
    (<aspec> ^specifier a +)
    (<bspec> ^specifier the +)
    (<cspec> ^specifier the +)
}

sp {convert-TCN-to-NL*apply*create-sentence*3arg*DEF
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o>)
    (<o> ^name create-sentence)
    (<o> ^count <c>)
    (<s> ^count <c>)
    (<s> ^state-rep <s*3>)
    (<s> ^state-rep <s*2>)
    (<s> ^state-rep <s*1>)
    (<s*3> ^object-desc-set <o*3>)
    (<o*3> ^obj-desc <objd3>)
    (<objd3> ^mentioned true)
    (<s*2> ^object-desc-set <o*2>)
    (<o*2> ^obj-desc { <> <objd3> <objd2> })
    (<objd2> ^mentioned true)
    (<s*1> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc { <> <objd3> <> <objd2> <objd> })
    (<objd> ^mentioned true)
    (<s> ^param <p*3>)
    (<s> ^param <p*2>)
    (<s> ^param <p*1>)
    (<o> ^condition <cond>)
    (<cond> ^negative <bool>)
    (<cond> ^2 <argb>)
    (<cond> ^3 <argc>)
    (<cond> ^1 <arga>)
    (<objd3> ^id <idc>)
    (<p*3> ^<argc> <a*3>)
    (<a*3> ^id <idc>)
    (<objd2> ^id <idb>)
    (<p*2> ^<argb> <a*2>)
    (<a*2> ^id <idb>)
    (<objd> ^id <id>)
    (<p*1> ^<arga> <a*1>)
    (<a*1> ^id <id>)
    (<cond> ^name <prep>)
    -->
    (<s> ^count <c> -)
    (<s> ^count (+ 1 <c>) +)
    (<s> ^sentence <sent> +)
    (<sent> ^condition <cond> +)
    (<sent> ^object1 <objd> +)
    (<sent> ^object2 <objd2> +)
    (<sent> ^object3 <objd3> +)
    (<sent> ^1 <aspec> +)
    (<sent> ^2 <bspec> +)
    (<sent> ^3 <cspec> +)
    (<sent> ^word <prep> +)
    (<sent> ^prep <prep> +)
    (<sent> ^order <c> +)
    (<sent> ^negative <bool> +)
    (<aspec> ^specifier the +)
    (<bspec> ^specifier the +)
    (<cspec> ^specifier the +)
}

sp {convert-TCN-to-NL*propose*create-sentence
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^tcn <t*1>)
    (<t*1> ^conditions <c*1>)
    (<c*1> ^cond <c*2>)
    (<c*2> ^prep <cond>)
   -{ (<s> ^state-rep <s*3>)
      (<s*3> ^object-desc-set <o*2>)
      (<o*2> ^obj-desc <objd>)
      (<objd> -^mentioned true)
      (<s> ^param <p*2>)
      (<cond> ^2 <argb>)
      (<cond> ^3 <argc>)
      (<objd> ^id <idb>)
      (<p*2> ^<argb> <a*2>)
      (<a*2> ^id <idb>)}
   -{ (<s> ^state-rep <s*2>)
      (<s*2> ^object-desc-set <o*1>)
      (<o*1> ^obj-desc <objd2>)
      (<objd2> -^mentioned true)
      (<s> ^param <p*1>)
      (<cond> ^2 <argb>)
      (<cond> ^3 <argc>)
      (<objd2> ^id <idc>)
      (<p*1> ^<argc> <a*1>)
      (<a*1> ^id <idc>)}
   -{ (<s> ^sentence <s*1>)
      (<s*1> ^condition <cond>)}
    (<s> ^count <c>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name create-sentence +)
    (<o> ^count <c> +)
    (<o> ^condition <cond> +)
    (<o> ^category svs +)
}

sp {convert-TCN-to-NL*elaborate*mentioned-obj
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^state-rep <s*2>)
    (<s*2> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc <objd>)
    (<s> ^param <p*1>)
    (<s> ^sentence <s*1>)
    (<s*1> ^condition <c*1>)
    (<objd> ^id <id>)
    (<p*1> ^<arg> <a*2>)
    (<a*2> ^id <id>)
    (<c*1> ^{ << 1 2 3 >> <a*1> } <arg>)
    -->
    (<objd> ^mentioned true +)
}

sp {convert-TCN-to-NL*elaborate*same-description
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^state-rep <s*2>)
    (<s> ^state-rep <s*1>)
    (<s*2> ^object-desc-set <o*2>)
    (<o*2> ^obj-desc <objd2>)
    (<s*1> ^object-desc-set <o*1>)
    (<o*1> ^obj-desc { <> <objd2> <objd> })
   -{ (<objd> ^type <type>)
      (<objd2> -^type <type>)}
   -{ (<objd> ^adjective <adj>)
      (<objd2> -^adjective <adj>)}
   -{ (<objd> ^word <word>)
      (<objd2> -^word <word>)}
    -->
    (<objd> ^same-description <objd2> +)
}

sp {convert-state-to-TCN*apply*complete-state
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-state)
    (<s> ^param <params>)
    (<s> ^tcn <tcn>)
    (<tcn> ^cond-args <c*1>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^tcn <tcn> +)
    (<ss> ^param <params> +)
}

sp {convert-state-to-TCN*apply*complete-state*copyrels
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-state)
    (<s> ^tcn <tcn>)
    (<s> ^arg <arg>)
    -->
    (<tcn> ^cond-args (- <arg> 1) +)
}

sp {convert-state-to-TCN*propose*complete-state
    (state <s> ^name convert-state-to-TCN)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete-state +)
    (<o> ^category svs +)
}

sp {convert-state-to-TCN*apply*create-condition*rels*3args
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o>)
    (<o> ^name create-condition)
    (<s> ^state-rep <s*3>)
    (<s> ^state-rep <s*2>)
    (<s> ^state-rep <s*1>)
    (<s> ^param <p*3>)
    (<s> ^param <p*2>)
    (<s> ^param <p*1>)
    (<s> ^tcn <t*1>)
    (<t*1> ^conditions <c*1>)
    (<c*1> ^cond <co>)
    (<o> ^arg <arg>)
    (<s*3> ^relationships <r*1>)
    (<r*1> ^relations <rel>)
    (<rel> ^instance <instance>)
    (<instance> ^1 <obj>)
    (<p*1> ^<arg> <obj>)
    (<s*2> ^objects <o*2>)
    (<s*1> ^objects <o*1>)
    (<instance> ^2 <objb>)
    (<objb> ^predicates <p*4>)
    (<p*4> ^category <type>)
    (<instance> ^3 <objc>)
    (<rel> ^name <name>)
    (<p*3> ^<arg3> <objc>)
    (<p*2> ^<arg2> <objb>)
    (<o*1> ^object <obj>)
    (<o*2> ^object <obj2>)
    -->
    (<co> ^prep <prep> +)
    (<prep> ^name <name> +)
    (<prep> ^1 <arg> +)
    (<prep> ^2 <arg2> +)
    (<prep> ^3 <arg3> +)
    (<prep> ^btype <type> +)
    (<prep> ^negative false +)
}

sp {convert-state-to-TCN*apply*create-condition*rels
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o>)
    (<o> ^name create-condition)
    (<s> ^state-rep <s*2>)
    (<s> ^state-rep <s*1>)
    (<s> ^param <p*2>)
    (<s> ^param <p*1>)
    (<s> ^tcn <t*1>)
    (<t*1> ^conditions <c*1>)
    (<c*1> ^cond <co>)
    (<o> ^arg <arg>)
    (<s*2> ^relationships <r*1>)
    (<r*1> ^relations <rel>)
    (<rel> ^instance <instance>)
    (<instance> -^3 <v*1>)
    (<instance> ^1 <obja>)
    (<p*1> ^<arg> <obja>)
    (<s*1> ^objects <o*1>)
    (<instance> ^2 <objb>)
    (<objb> ^predicates <p*3>)
    (<p*3> ^category <type>)
    (<rel> ^name <name>)
    (<p*2> ^<arg2> <objb>)
    (<o*1> ^object <objb>)
    -->
    (<co> ^prep <prep> +)
    (<prep> ^name <name> +)
    (<prep> ^1 <arg> +)
    (<prep> ^2 <arg2> +)
    (<prep> ^btype <type> +)
    (<prep> ^negative false +)
}

sp {convert-state-to-TCN*apply*create-condition*default
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o>)
    (<o> ^name create-condition)
    (<s> ^tcn <t*2>)
    (<t*2> ^conditions <c*1>)
    (<s> ^tcn <t*1>)
    (<o> ^arg <arg>)
    (<t*1> ^parameters <p*1>)
    (<c*1> ^<arg> <a*2>)
    (<p*1> ^<arg> <a*1>)
    -->
    (<s> ^default-finish <arg> +)
}

sp {convert-state-to-TCN*apply*create-condition*objdesc
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o>)
    (<o> ^name create-condition)
    (<s> ^state-rep <s*1>)
    (<s> ^param <p*1>)
    (<s> ^tcn <t*1>)
    (<t*1> ^conditions <c*1>)
    (<o> ^arg <arg>)
    (<s*1> ^predicates <p*2>)
    (<p*2> ^predicate <ps>)
    (<ps> ^value <word>)
    (<ps> ^name <attr>)
    (<c*1> ^<arg> <co>)
    (<p*1> ^<arg> <obj>)
    (<ps> ^object <obj>)
    -->
    (<co> ^attribute <a*1> +)
    (<a*1> ^<attr> <word> +)
}

sp {convert-state-to-TCN*apply*create-condition
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o>)
    (<o> ^name create-condition)
    (<s> ^param <p*1>)
    (<s> ^tcn <t*1>)
    (<t*1> ^conditions <co>)
    (<o> ^arg <arg>)
    (<p*1> ^<arg> <obj>)
    -->
    (<co> ^<arg> <cond> +)
}

sp {convert-state-to-TCN*propose*create-condition
    (state <s> ^name convert-state-to-TCN)
    (<s> ^tcn <t*1>)
    (<t*1> ^parameters <p*1>)
    (<p*1> ^<arg> <a*1>)
    (<s> -^default-finish <arg>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name create-condition +)
    (<o> ^arg <arg> +)
}

sp {convert-state-to-TCN*apply*create-parameter
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o>)
    (<o> ^name create-parameter)
    (<s> ^state-rep <s*1>)
    (<s> ^param <params>)
    (<s> ^tcn <t*1>)
    (<s> ^arg <arg>)
    (<o> ^obj <obj>)
    (<s*1> ^objects <o*1>)
    (<obj> ^predicates <p*1>)
    (<t*1> ^parameters <pa>)
    (<p*1> ^category <type>)
    (<o*1> ^object <obj>)
    -->
    (<pa> ^<arg> <a*1> +)
    (<a*1> ^type <type> +)
    (<params> ^<arg> <obj> +)
    (<s> ^arg <arg> -)
    (<s> ^arg (+ <arg> 1) +)
}

sp {convert-state-to-TCN*propose*create-parameter
    (state <s> ^name convert-state-to-TCN)
    (<s> ^arg <arg>)
   -{ (<s> ^tcn <t*1>)
      (<t*1> ^parameters <p*1>)
      (<p*1> ^<arg> <a*1>)}
    (<s> ^state-rep <s*1>)
    (<s*1> ^objects <o*1>)
    (<o*1> ^object <obj>)
   -{ (<s> ^param <p*2>)
      (<p*2> ^<something> <obj>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name create-parameter +)
    (<o> ^obj <obj> +)
}

sp {convert-state-to-TCN*elaborate*operator-attrs
    (state <s> ^name convert-state-to-TCN)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <l*1>)
    (<l*1> ^handle <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name convert-state-to-TCN)
    (<o> ^state-rep <state-rep>)
    -->
    (<s> ^state-rep <state-rep> +)
    (<s> ^tcn <tcn> +)
    (<s> ^param <p> +)
    (<s> ^arg 1 +)
    (<tcn> ^conditions <co> +)
    (<tcn> ^parameters <pa> +)
    (<tcn> ^name <name> +)
    (<co> ^cond <cond> +)
}

sp {convert-TCN-to-NL*elaborate*operator-attrs
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name convert-TCN-to-NL)
    (<o> ^state-rep <state-rep>)
    (<o> ^param <params>)
    (<o> ^tcn <tcn>)
    -->
    (<s> ^state-rep <state-rep> +)
    (<s> ^description <d> +)
    (<s> ^param <params> +)
    (<s> ^count 1 +)
    (<s> ^tcn <tcn> +)
}

sp {learn-goal-demonstration*elaborate*copy-down-attrs
    (state <s> ^name learn-goal-demonstration)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type <type>)
    -->
    (<s> ^type <type> +)
}

sp {prefer*create-parameter*over*complete-state*convert-state-to-TCN
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-state)
    (<s> ^operator <o1> +)
    (<o1> ^name create-parameter)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*create-condition*over*complete-state*convert-state-to-TCN
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-state)
    (<s> ^operator <o1> +)
    (<o1> ^name create-condition)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*create-condition*over*create-parameter*convert-state-to-TCN
    (state <s> ^name convert-state-to-TCN)
    (<s> ^operator <o2> +)
    (<o2> ^name create-parameter)
    (<s> ^operator <o1> +)
    (<o1> ^name create-condition)
    -->
    (<s> ^operator <o1> < <o2>)
}

sp {prefer*create-sentence*over*complete-state
    (state <s> ^name convert-TCN-to-NL)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-state)
    (<s> ^operator <o1> +)
    (<o1> ^name create-sentence)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-goal-demonstration*send-message*game-final-state
    :o-support
    (state <s> ^name learn-goal-demonstration)
    (<s> ^type initial)
    (<s> ^top-state <t*3>)
    (<t*3> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <dc>)
    (<dc> -^final <f*1>)
    (<dc> ^needs-setup <t>)
    (<dc> ^initial <i*3>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<dc> ^needs-setup <t> -)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type define-actions +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {learn-goal-demonstration*propose*learn-predicate
    (state <s> ^name learn-goal-demonstration)
    (<s> -^done chunked-action)
    (<s> ^tcn <act>)
    (<s> ^nlp-set <nps>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <cg>)
    (<cg> ^finished-demo true)
    (<cg> ^structure <g>)
    (<cg> ^learn-link <l>)
    (<cg> ^name <gname>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-predicate +)
    (<o> ^nlp-set <nps> +)
    (<o> ^type goal +)
    (<o> ^game-name <gname> +)
}

sp {learn-goal-demonstration*propose*convert-TCN-to-NLP
    (state <s> ^name learn-goal-demonstration)
    (<s> -^nlp-set <n*1>)
    (<s> ^tcn <g>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
    (<o> ^name convert-TCN-to-NLP +)
    (<o> ^type goal +)
    (<o> ^tcn <g> +)
}

sp {learn-goal-demonstration*propose*convert-state-to-TCN
    (state <s> ^name learn-goal-demonstration)
    (<s> -^tcn <t*3>)
    (<s> ^top-state <t*4>)
    (<t*4> ^dialog-context <d*3>)
    (<d*3> ^type game-learning)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*2>)
    (<d*2> ^finished-demo true)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^goal-state <gstate>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name convert-state-to-TCN +)
    (<o> ^state-rep <gstate> +)
}

sp {learn-goal-demonstration*apply*complete*create*new-segment
    (state <s> ^name learn-goal-demonstration)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^new-segment-info <info>)
    (<info> ^purpose <p*1>)
    (<p*1> ^parameters <p*2>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^goal-relationships <gs>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^changes <c>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<c> ^new-segment-info <info> +)
    (<ts> ^dialog-context <dc> -)
    (<c> ^outgoing-message <msg> +)
    (<msg> ^type describe-final-goal-state +)
    (<msg> ^fields <f> +)
    (<f> ^relationships <gs> +)
    (<f> ^definitive no +)
    (<status> ^performed <p*3> +)
    (<p*3> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {learn-goal-demonstration*elaborate*goal-predicates*relation-predicate
    (state <s> ^name learn-goal-demonstration)
    (<s> ^new-segment-info <n*1>)
    (<n*1> ^purpose <p*1>)
    (<p*1> ^parameters <params>)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*2>)
    (<d*2> ^finished-demo true)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^goal-state <g*1>)
    (<g*1> ^relationships <G10020>)
    (<G10020> ^relations <r>)
    (<r> ^instance <i>)
    (<i> ^2 <obj2>)
    (<i> ^1 <obj1>)
    (<r> ^name <name>)
    -->
    (<params> ^goal-predicate <pred> +)
    (<pred> ^handle <name> +)
    (<pred> ^1 <obj1> +)
    (<pred> ^2 <obj2> +)
    (<pred> ^type relation +)
}

sp {learn-goal-demonstration*elaborate*goal-predicates*state-predicate
    (state <s> ^name learn-goal-demonstration)
    (<s> ^new-segment-info <n*1>)
    (<n*1> ^purpose <p*1>)
    (<p*1> ^parameters <params>)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*2>)
    (<d*2> ^finished-demo true)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^goal-state <g*1>)
    (<g*1> ^relationships <G10020>)
    (<G10020> ^relations <r>)
    (<r> ^instance <i>)
    (<i> -^2 <v*1>)
    (<i> ^1 <obj1>)
    (<r> ^name <name>)
    -->
    (<params> ^goal-predicate <pred> +)
    (<pred> ^handle <name> +)
    (<pred> ^1 <obj1> +)
    (<pred> ^type state +)
}

sp {learn-goal-demonstration*propose*complete
    (state <s> ^name learn-goal-demonstration)
   -{ (<s> ^top-state <t*3>)
      (<t*3> ^dialog-context <d*3>)
      (<d*3> ^type game-learning)}
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*2>)
    (<d*2> ^finished-demo true)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^goal-relationships <G10020>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {learn-goal-demonstration*elaborate*new-segment-info*learn-goal-definition
    (state <s> ^name learn-goal-demonstration)
   -{ (<s> ^top-state <t*3>)
      (<t*3> ^dialog-context <d*3>)
      (<d*3> ^type game-learning)}
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*2>)
    (<d*2> ^finished-demo true)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^goal-relationships <G10020>)
    -->
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-goal-definition +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type goal +)
}

sp {learn-goal-demonstration*send-message*describe-goal-state
    (state <s> ^name learn-goal-demonstration)
   -{ (<s> ^top-state <t*2>)
      (<t*2> ^dialog-context <d*2>)
      (<d*2> ^modified true)}
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^finished-demo true)}
    (<s> ^top-state <t*6>)
    (<t*6> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*5>)
    (<t*5> ^interaction <i*1>)
    (<s> ^top-state <t*4>)
    (<t*4> ^dialog-context <d*4>)
    (<d*4> ^goal-relationships <gs>)
    (<s> ^top-state <t*3>)
    (<t*3> ^dialog-context <d*3>)
    (<d*3> ^type game-learning)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type describe-goal-state +)
    (<msg> ^fields <f> +)
    (<f> ^relationships <gs> +)
    (<f> ^definitive yes +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {learn-goal-demonstration*apply*state-diff*copy-goal-relations*1arg
    (state <s> ^name learn-goal-demonstration)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <g>)
    (<g> ^goal-relationships <gr>)
    (<g> ^goal-state <dstate>)
    (<dstate> ^relationships <r*1>)
    (<r*1> ^relations <r>)
    (<r> ^instance <in>)
    (<in> -^2 <v*1>)
    (<dstate> ^predicates <p>)
    (<in> ^1 <obj1>)
    (<r> ^name <name>)
    (<p> ^<obj1> <desc1>)
    (<p> ^<obj2> <desc2>)
    -->
    (<gr> ^relation <r1> +)
    (<r1> ^1 <desc1> +)
    (<r1> ^name <name> +)
}

sp {learn-goal-demonstration*apply*state-diff*copy-goal-relations
    (state <s> ^name learn-goal-demonstration)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <g>)
    (<g> ^goal-relationships <gr>)
    (<g> ^goal-state <dstate>)
    (<dstate> ^relationships <r*1>)
    (<r*1> ^relations <r>)
    (<r> ^instance <in>)
    (<in> ^2 <obj2>)
    (<dstate> ^predicates <p>)
    (<in> ^1 <obj1>)
    (<r> ^name <name>)
    (<p> ^<obj2> <desc2>)
    (<p> ^<obj1> <desc1>)
    -->
    (<gr> ^relation <r1> +)
    (<r1> ^1 <desc1> +)
    (<r1> ^2 <desc2> +)
    (<r1> ^name <name> +)
}

sp {learn-goal-demonstration*apply*state-diff
    (state <s> ^name learn-goal-demonstration)
    (<s> ^operator <o*1>)
    (<o*1> ^name state-diff)
    (<s> ^diff-result <dstate>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <g>)
    (<g> ^final <fstate>)
    (<g> ^initial <istate>)
    -->
    (<g> ^goal-state <dstate> +)
    (<g> ^goal-relationships <gr> +)
}

sp {learn-goal-demonstration*propose*state-diff
    (state <s> ^name learn-goal-demonstration)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <g>)
    (<g> -^goal-state <g*1>)
    (<g> ^ignore <ig>)
    (<g> ^attend <at>)
    (<g> ^final <fstate>)
    (<g> ^initial <istate>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name state-diff +)
    (<o> ^initial <istate> +)
    (<o> ^final <fstate> +)
    (<o> ^ignore <ig> +)
    (<o> ^attend <at> +)
}

sp {learn-goal-demonstration*remove*goal-state
    :o-support
    (state <s> ^name learn-goal-demonstration)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <g>)
    (<g> ^goal-relationships <gr>)
    (<g> ^modified <t>)
    (<g> ^goal-state <gs>)
    (<g> ^final <fstate>)
    (<g> ^initial <istate>)
    -->
    (<g> ^modified <t> -)
    (<g> ^goal-relationships <gr> -)
    (<g> ^goal-state <gs> -)
    (<g> ^finished-demo true +)
}

sp {learn-goal-demonstration*elaborate*attend
    :o-support
    (state <s> ^name learn-goal-demonstration)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <g>)
    (<g> -^attend <a*1>)
    (<g> ^initial <i*1>)
    -->
    (<g> ^attend <at> +)
    (<g> ^ignore <ig> +)
}

sp {learn-goal-demonstration*apply*extract-state
    (state <s> ^name learn-goal-demonstration)
    (<s> ^operator <o>)
    (<o> ^name extract-state)
    (<o> ^type { << initial final >> <type> })
    (<s> ^type <type>)
    (<s> ^state-result <staterep>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <g>)
    -->
    (<g> ^<type> <staterep> +)
}

sp {learn-goal-demonstration*propose*extract-state
    (state <s> ^name learn-goal-demonstration)
    (<s> ^type { << initial final >> <type> })
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^<type> <t*2>)}
    (<s> ^top-state <t*3>)
    (<t*3> ^dialog-context <d*2>)
    (<d*2> ^type game-learning)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name extract-state +)
    (<o> ^type <type> +)
}

sp {goal-feature-tracking*apply*complete
    (state <s> ^name goal-feature-tracking)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^parameter <pa>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<s> ^top-state <t*1>)
    (<i*2> ^status <status>)
    (<t*1> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type confirmation +)
    (<msg> ^fields <f> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <d*1> +)
    (<d*1> ^type game +)
}

sp {goal-feature-tracking*apply*add-to-list*relation
    (state <s> ^name goal-feature-tracking)
    (<s> ^operator <o*1>)
    (<o*1> ^name add-to-list)
    (<s> ^parameter <pa>)
    (<s> ^top-state <t*1>)
    (<t*1> ^current-game <cg>)
    (<pa> ^type <attig>)
    (<cg> ^<attig> <at>)
    (<pa> ^relation <r>)
    -->
    (<at> ^relation <r> +)
    (<s> ^done true +)
}

sp {goal-feature-tracking*apply*add-to-list*object
    (state <s> ^name goal-feature-tracking)
    (<s> ^parameter <pa>)
    (<pa> -^relation <r*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name add-to-list)
    (<pa> ^indexable <i*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^current-game <cg>)
    (<i*1> ^result <o>)
    (<pa> ^type <attig>)
    (<cg> ^<attig> <at>)
    -->
    (<at> ^object <o> +)
    (<s> ^done true +)
}

sp {goal-feature-tracking*propose*complete
    (state <s> ^name goal-feature-tracking)
    (<s> ^done <d*1>)
    (<s> ^parameter <pa>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name complete +)
}

sp {goal-feature-tracking*propose*add-to-list
    (state <s> ^name goal-feature-tracking)
    (<s> -^done <d*1>)
    (<s> ^parameter <pa>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name add-to-list +)
}

sp {goal-feature-tracking*elaborate*parameter
    (state <s> ^name goal-feature-tracking)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name goal-feature-tracking)
    (<o> ^parameter <pa>)
    -->
    (<s> ^parameter <pa> +)
}

sp {extract-state*apply*complete-state
    (state <s> ^name extract-state)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-state)
    (<s> ^object-set <os>)
    (<s> ^predicate-set <preds>)
    (<s> ^relationships <rels>)
    (<s> ^superstate <ss>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    -->
    (<ss> ^state-result <res> +)
    (<res> ^relationships <rels> +)
    (<res> ^objects <os> +)
    (<res> ^predicate-set <preds> +)
}

sp {extract-state*propose*complete-state
    (state <s> ^name extract-state)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete-state +)
}

sp {extract-state*apply*copy-predicates*create*objects
    (state <s> ^name extract-state)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-predicates)
    (<s> ^object-set <o*2>)
    (<s> ^predicate-set <preds>)
    (<o*2> ^object <obj>)
    (<obj> ^predicates <p*1>)
    (<p*1>
          ^{ <> door1 <> movable <> indicated <> object-handle <> category <> arm-status <> dialog-object <> value <> handle <> type <> visible <> multiple <> number <att> } { <> grid-green <val> })
    -->
    (<preds> ^predicate <pred> +)
    (<pred> ^object <obj> +)
    (<pred> ^name <att> +)
    (<pred> ^value <val> +)
}

sp {extract-state*apply*copy-predicates*mark*done
    (state <s> ^name extract-state)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-predicates)
    (<s> ^predicate-set <preds>)
    -->
    (<preds> ^done true +)
}

sp {extract-state*propose*copy-predicates
    (state <s> ^name extract-state)
   -{ (<s> ^predicate-set <p*1>)
      (<p*1> ^done <d*1>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-predicates +)
}

sp {extract-state*apply*copy-objects
    (state <s> ^name extract-state)
    (<s> ^operator <o*2>)
    (<o*2> ^name copy-objects)
    (<s> ^object-set <os>)
    (<s> ^relationships <rels>)
    (<s> ^relationships <r*1>)
    (<r*1> ^relations <p>)
    (<p> ^instance <instance>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<p> ^name <name>)
    (<instance> ^{ << 1 2 3 >> <a*1> } <obja>)
    (<o*1> ^object <obja>)
    -->
    (<os> ^object <obja> +)
}

sp {extract-state*apply*copy-objects*default
    (state <s> ^name extract-state)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-objects)
    (<s> ^object-set <set>)
    -->
    (<set> ^done true +)
}

sp {extract-state*propose*copy-objects
    (state <s> ^name extract-state)
   -{ (<s> ^object-set <o*1>)
      (<o*1> ^done <d*1>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-objects +)
}

sp {extract-state*apply*copy-relationships*3arg
    (state <s> ^name extract-state)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-relationships)
    (<s> ^relationships <rels>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p>)
    (<p> ^instance <instance3>)
    (<instance3> ^2 <idb>)
    (<p> ^handle <name>)
    (<instance3> ^3 <idc>)
    (<instance3> ^1 <ida>)
    -->
    (<rels> ^relations <r> +)
    (<r> ^name <name> +)
    (<r> ^instance <instance> +)
    (<instance> ^1 <ida> +)
    (<instance> ^2 <idb> +)
    (<instance> ^3 <idc> +)
}

sp {extract-state*apply*copy-relationships
    (state <s> ^name extract-state)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-relationships)
    (<s> ^relationships <rels>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p>)
    (<p> ^instance <instance3>)
    (<instance3> -^3 <v*1>)
    (<instance3> ^2 <idb>)
    (<p> ^handle <name>)
    (<instance3> ^1 <ida>)
    -->
    (<rels> ^relations <r> +)
    (<r> ^name <name> +)
    (<r> ^instance <instance> +)
    (<instance> ^1 <ida> +)
    (<instance> ^2 <idb> +)
}

sp {extract-state*apply*copy-relationships*default
    (state <s> ^name extract-state)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-relationships)
    (<s> ^relationships <rels>)
    -->
    (<rels> ^done true +)
}

sp {extract-state*propose*copy-relationships
    (state <s> ^name extract-state)
   -{ (<s> ^relationships <r*1>)
      (<r*1> ^done <d*1>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-relationships +)
}

sp {state-union*apply*complete
    (state <s> ^name state-union)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^object-desc-set <ods>)
    (<s> ^object-set <os>)
    (<s> ^predicate-set <preds>)
    (<s> ^relationships <rels>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^state-result <res> +)
    (<res> ^relationships <rels> +)
    (<res> ^objects <os> +)
    (<res> ^object-desc-set <ods> +)
    (<res> ^predicate-set <preds> +)
}

sp {state-union*propose*complete
    (state <s> ^name state-union)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {state-union*apply*copy-predicates*copy
    (state <s> ^name state-union)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-predicates)
    (<s> ^predicate-set <preds>)
    (<s> ^final <f*1>)
    (<f*1> ^predicate-set <p*2>)
    (<s> ^initial <i*1>)
    (<i*1> ^predicate-set <p*1>)
    (<p*2> ^predicate <final-pred>)
    (<p*1> ^predicate <initial-pred>)
    (<final-pred> ^value <pred-value>)
    (<initial-pred> ^value <pred-value>)
    (<final-pred> ^name <pred-name>)
    (<initial-pred> ^name <pred-name>)
    (<final-pred> ^object <obj>)
    (<initial-pred> ^object <obj>)
    -->
    (<preds> ^predicate <new-pred> +)
    (<new-pred> ^object <obj> +)
    (<new-pred> ^name <pred-name> +)
    (<new-pred> ^value <pred-value> +)
}

sp {state-union*apply*copy-predicates*mark*copied
    (state <s> ^name state-union)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-predicates)
    -->
    (<s> ^copied-predicates true +)
}

sp {state-union*propose*copy-predicates
    (state <s> ^name state-union)
    (<s> -^copied-predicates <c*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-predicates +)
}

sp {state-union*apply*copy-objects
    (state <s> ^name state-union)
    (<s> ^operator <o*4>)
    (<o*4> ^name copy-objects)
    (<s> ^object-desc-set <ods>)
    (<s> ^object-set <os>)
    (<s> ^relationships <rels>)
    (<s> ^relationships <r*1>)
    (<r*1> ^relations <p>)
    (<p> ^instance <instance>)
    (<s> ^final <f*2>)
    (<f*2> ^objects <o*3>)
    (<s> ^final <f*1>)
    (<f*1> ^object-desc-set <o*2>)
    (<o*2> ^obj-desc <desc>)
    (<s> ^initial <i*2>)
    (<i*2> ^objects <o*1>)
    (<desc> ^id <id>)
    (<p> ^name <name>)
    (<instance> ^{ << 1 2 3 >> <a*1> } <id>)
    (<o*3> ^object <obj>)
   -{ (<s> ^ignore <i*1>)
      (<i*1> ^object <obj>)}
    (<obj> ^id <id>)
    (<o*1> ^object <obj>)
    -->
    (<os> ^object <obj> +)
    (<ods> ^obj-desc <desc> +)
}

sp {state-union*apply*copy-objects*mark*copied
    (state <s> ^name state-union)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-objects)
    -->
    (<s> ^copied-objects true +)
}

sp {state-union*propose*copy-objects
    (state <s> ^name state-union)
    (<s> -^copied-objects <c*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-objects +)
}

sp {state-union*apply*copy-relationships*3-args
    (state <s> ^name state-union)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-relationships)
    (<s> ^relationships <r>)
    (<s> ^final <f*1>)
    (<f*1> ^relationships <r*2>)
    (<r*2> ^relations <rel2>)
    (<rel2> ^instance <instance>)
   -{ (<s> ^ignore <i*3>)
      (<instance> ^{ << 1 2 3 >> <a*1> } <id>)
      (<i*3> ^object <o*2>)
      (<o*2> ^id <id>)}
    (<rel2> ^name <name>)
   -{ (<s> ^ignore <i*1>)
      (<i*1> ^relation <name>)}
    (<s> ^initial <i*2>)
    (<i*2> ^relationships <r*1>)
    (<r*1> ^relations <rels>)
    (<rels> ^name <name>)
    (<rels> ^instance <instance2>)
    (<instance2> ^2 <idb>)
    (<instance> ^2 <idb>)
    (<instance2> ^3 <idc>)
    (<instance> ^3 <idc>)
    (<instance2> ^1 <ida>)
    (<instance> ^1 <ida>)
    -->
    (<r> ^relations <r1> +)
    (<r1> ^name <name> +)
    (<r1> ^instance <instance> +)
}

sp {state-union*apply*copy-relationships
    (state <s> ^name state-union)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-relationships)
    (<s> ^relationships <r>)
    (<s> ^final <f*1>)
    (<f*1> ^relationships <r*2>)
    (<r*2> ^relations <rel2>)
    (<rel2> ^instance <instance>)
   -{ (<s> ^ignore <i*3>)
      (<instance> ^{ << 1 2 3 >> <a*1> } <id>)
      (<i*3> ^object <o*2>)
      (<o*2> ^id <id>)}
    (<instance> -^3 <v*1>)
    (<rel2> ^name <name>)
   -{ (<s> ^ignore <i*1>)
      (<i*1> ^relation <name>)}
    (<s> ^initial <i*2>)
    (<i*2> ^relationships <r*1>)
    (<r*1> ^relations <rels>)
    (<rels> ^name <name>)
    (<rels> ^instance <instance2>)
    (<instance2> -^3 <v*2>)
    (<instance2> ^2 <idb>)
    (<instance> ^2 <idb>)
    (<instance2> ^1 <ida>)
    (<instance> ^1 <ida>)
    -->
    (<r> ^relations <r1> +)
    (<r1> ^name <name> +)
    (<r1> ^instance <instance> +)
}

sp {state-union*apply*copy-relationships*mark*copied
    (state <s> ^name state-union)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-relationships)
    -->
    (<s> ^copied-relationships true +)
}

sp {state-union*propose*copy-relationships
    (state <s> ^name state-union)
    (<s> -^copied-relationships <c*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-relationships +)
}

sp {state-diff*apply*complete
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^object-set <os>)
    (<s> ^predicate-set <preds>)
    (<s> ^relationships <rels>)
    (<s> ^superstate <ss>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    -->
    (<ss> ^diff-result <res> +)
    (<res> ^relationships <rels> +)
    (<res> ^objects <os> +)
    (<res> ^predicates <preds> +)
}

sp {state-diff*propose*complete
    (state <s> ^name state-diff)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
}

sp {state-diff*apply*copy-extra-relationships*3args
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-extra-relationships)
    (<s> ^copied-relations <copied>)
    (<s> ^valid-relations <v*1>)
    (<s> ^object-set <o*4>)
    (<s> ^object-set <o*3>)
    (<s> ^object-set <o*2>)
    (<s> ^relationships <rels>)
    (<s> ^final <f*1>)
    (<f*1> ^relationships <r*1>)
    (<r*1> ^relations <final-rel>)
    (<final-rel> ^instance <instance>)
    (<final-rel> ^name <rel-name>)
    (<copied> -^<rel-name> <instance>)
    (<instance> ^c <idc>)
    (<instance> ^2 <idb>)
    (<v*1> ^relation <rel-name>)
    (<instance> ^1 <ida>)
    (<o*4> ^object <idc>)
    (<o*3> ^object <idb>)
    (<o*2> ^object <ida>)
    -->
    (<rels> ^relations <new-rel> +)
    (<new-rel> ^name <rel-name> +)
    (<new-rel> ^instance <instance> +)
    (<copied> ^<rel-name> <instance> +)
}

sp {state-diff*apply*copy-extra-relationships*2args
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-extra-relationships)
    (<s> ^copied-relations <copied>)
    (<s> ^valid-relations <v*1>)
    (<s> ^object-set <o*3>)
    (<s> ^object-set <o*2>)
    (<s> ^relationships <rels>)
    (<s> ^final <f*1>)
    (<f*1> ^relationships <r*1>)
    (<r*1> ^relations <final-rel>)
    (<final-rel> ^instance <instance>)
    (<instance> -^c <c*1>)
    (<final-rel> ^name <rel-name>)
    (<copied> -^<rel-name> <instance>)
    (<instance> ^2 <idb>)
    (<v*1> ^relation <rel-name>)
    (<instance> ^1 <ida>)
    (<o*3> ^object <idb>)
    (<o*2> ^object <ida>)
    -->
    (<rels> ^relations <new-rel> +)
    (<new-rel> ^name <rel-name> +)
    (<new-rel> ^instance <instance> +)
    (<copied> ^<rel-name> <instance> +)
}

sp {state-diff*apply*copy-extra-relationships*default
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-extra-relationships)
    -->
    (<s> ^copied-extra-relationships true +)
}

sp {state-diff*propose*copy-extra-relationships
    (state <s> ^copied-objects true)
    (<s> -^copied-extra-relationships <c*1>)
    (<s> ^name state-diff)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-extra-relationships +)
}

sp {state-diff*apply*copy-predicates*create*diff*changed
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-predicates)
    (<s> ^valid-predicates <v*1>)
    (<s> ^valid-objects <v*2>)
    (<s> ^object-set <o*2>)
    (<s> ^predicate-set <preds>)
    (<s> ^final <f*1>)
    (<f*1> ^predicate-set <p*1>)
    (<v*1> ^predicate <name>)
    (<p*1> ^predicate <final-pred>)
    (<final-pred> ^name <name>)
    (<final-pred> ^value <val2>)
    (<preds> ^<obj> <desc>)
    (<final-pred> ^object <obj>)
    (<v*2> ^object <obj>)
    (<o*2> ^object <obj>)
    -->
    (<preds> ^predicate <new-pred> +)
    (<new-pred> ^object <obj> +)
    (<new-pred> ^name <name> +)
    (<new-pred> ^value <val2> +)
    (<desc> ^<name> <val2> +)
}

sp {state-diff*apply*copy-predicates*object-descriptions
    (state <s> ^name state-diff)
    (<s> ^valid-objects <v*1>)
    (<s> ^object-set <o*1>)
    (<s> ^predicate-set <preds>)
    (<v*1> ^object <obj>)
    (<obj> ^predicates <p*1>)
    (<p*1> ^category <type>)
    (<o*1> ^object <obj>)
    -->
    (<preds> ^<obj> <description> +)
    (<description> ^type <type> +)
}

sp {state-diff*apply*copy-predicates*mark*done
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-predicates)
    -->
    (<s> ^copied-predicates true +)
}

sp {state-diff*propose*copy-predicates
    (state <s> ^name state-diff)
    (<s> -^copied-predicates <c*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
    (<o> ^name copy-predicates +)
}

sp {state-diff*apply*copy-objects*copy*object*from*relationship
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-objects)
    (<s> ^copied-relations <c*1>)
    (<s> ^object-set <obj-set>)
    (<s> ^final <f*1>)
    (<f*1> ^objects <o*2>)
    (<c*1> ^<rel-name> <r*1>)
    (<r*1> ^{ << 1 2 3 >> <a*1> } <obj>)
    (<o*2> ^object <obj>)
    -->
    (<obj-set> ^object <obj> +)
}

sp {state-diff*apply*copy-objects*copy*object*in*attend
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-objects)
    (<s> ^object-set <obj-set>)
    (<s> ^attend <a*1>)
    (<s> ^final <f*1>)
    (<f*1> ^objects <o*2>)
    (<o*2> ^object <ocj>)
    (<a*1> ^object <obj>)
    -->
    (<obj-set> ^object <obj> +)
}

sp {state-diff*apply*copy-objects*mark*copied
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-objects)
    -->
    (<s> ^copied-objects true +)
}

sp {state-diff*propose*copy-objects
    (state <s> ^copied-relationships true)
    (<s> -^copied-objects <c*1>)
    (<s> ^name state-diff)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-objects +)
}

sp {state-diff*apply*copy-new-relationships*copy*3arg
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-new-relationships)
    (<s> ^copied-relations <copied>)
    (<s> ^valid-relations <v*4>)
    (<s> ^valid-objects <v*3>)
    (<s> ^valid-objects <v*2>)
    (<s> ^valid-objects <v*1>)
    (<s> ^relationships <r>)
    (<s> ^final <f*1>)
    (<f*1> ^relationships <r*1>)
    (<r*1> ^relations <final-rel>)
    (<final-rel> ^name <rel-name>)
   -{ (<s> ^attend <a*1>)
      (<a*1> ^relation <rel-name>)}
    (<final-rel> ^instance <instance>)
    (<instance> ^2 <idb>)
    (<instance> ^3 <idc>)
    (<instance> ^1 <ida>)
   -{ (<s> ^initial <i*1>)
      (<i*1> ^relationships <initial-rels>)
      (<initial-rels> ^relations <initial-rel>)
      (<initial-rel> ^name <rel-name>)
      (<initial-rel> ^instance <initial-instance>)
      (<initial-instance> ^2 <idb>)
      (<initial-instance> ^3 <idc>)
      (<initial-instance> ^1 <ida>)}
    (<v*4> ^relation <rel-name>)
    (<v*3> ^object <idc>)
    (<v*2> ^object <idb>)
    (<v*1> ^object <ida>)
    -->
    (<r> ^relations <new-rel> +)
    (<new-rel> ^name <rel-name> +)
    (<new-rel> ^instance <instance> +)
    (<copied> ^<rel-name> <instance> +)
}

sp {state-diff*apply*copy-new-relationships*copy*2arg
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-new-relationships)
    (<s> ^copied-relations <copied>)
    (<s> ^valid-relations <v*3>)
    (<s> ^valid-objects <v*2>)
    (<s> ^valid-objects <v*1>)
    (<s> ^relationships <r>)
    (<s> ^final <f*1>)
    (<f*1> ^relationships <r*1>)
    (<r*1> ^relations <final-rel>)
    (<final-rel> ^instance <instance>)
    (<instance> -^3 <v*4>)
    (<final-rel> ^name <rel-name>)
   -{ (<s> ^attend <a*1>)
      (<a*1> ^relation <rel-name>)}
    (<instance> ^2 <idb>)
    (<instance> ^1 <ida>)
   -{ (<s> ^initial <i*1>)
      (<i*1> ^relationships <initial-rels>)
      (<initial-rels> ^relations <initial-rel>)
      (<initial-rel> ^name <rel-name>)
      (<initial-rel> ^instance <initial-instance>)
      (<initial-instance> ^2 <idb>)
      (<initial-instance> ^1 <ida>)}
    (<v*3> ^relation <rel-name>)
    (<v*2> ^object <idb>)
    (<v*1> ^object <ida>)
    -->
    (<r> ^relations <new-rel> +)
    (<new-rel> ^name <rel-name> +)
    (<new-rel> ^instance <instance> +)
    (<copied> ^<rel-name> <instance> +)
}

sp {state-diff*apply*copy-new-relationships*copy*1arg
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-new-relationships)
    (<s> ^copied-relations <copied>)
    (<s> ^valid-relations <v*2>)
    (<s> ^valid-objects <v*1>)
    (<s> ^relationships <r>)
    (<s> ^final <f*1>)
    (<f*1> ^relationships <r*1>)
    (<r*1> ^relations <final-rel>)
    (<final-rel> ^instance <instance>)
    (<instance> -^2 <v*3>)
    (<final-rel> ^name <rel-name>)
   -{ (<s> ^attend <a*1>)
      (<a*1> ^relation <rel-name>)}
    (<instance> ^1 <ida>)
   -{ (<s> ^initial <i*1>)
      (<i*1> ^relationships <initial-rels>)
      (<initial-rels> ^relations <initial-rel>)
      (<initial-rel> ^name <rel-name>)
      (<initial-rel> ^instance <initial-instance>)
      (<initial-instance> ^1 <ida>)}
    (<v*2> ^relation <rel-name>)
    (<v*1> ^object <ida>)
    -->
    (<r> ^relations <new-rel> +)
    (<new-rel> ^name <rel-name> +)
    (<new-rel> ^instance <instance> +)
    (<copied> ^<rel-name> <instance> +)
}

sp {state-diff*apply*copy-new-relationships*copy*attend*relation
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-new-relationships)
    (<s> ^copied-relations <copied>)
    (<s> ^valid-objects <objs>)
    (<s> ^relationships <r>)
    (<s> ^attend <a*1>)
    (<s> ^final <f*1>)
    (<f*1> ^relationships <r*1>)
    (<r*1> ^relations <final-rel>)
    (<final-rel> ^instance <instance>)
   -{ (<instance> ^{ << 1 2 3 >> <a*2> } <obj>)
      (<objs> -^object <obj>)}
    (<final-rel> ^name <rel-name>)
    (<a*1> ^relation <rel-name>)
    -->
    (<r> ^relations <new-rel> +)
    (<new-rel> ^name <rel-name> +)
    (<new-rel> ^instance <instance> +)
    (<copied> ^<rel-name> <instance> +)
}

sp {state-diff*apply*copy-new-relationships*mark*copied-relatioships
    (state <s> ^name state-diff)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-new-relationships)
    -->
    (<s> ^copied-relationships true +)
}

sp {state-diff*propose*copy-new-relationships
    (state <s> ^name state-diff)
    (<s> -^copied-relationships <c*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-new-relationships +)
}

sp {state-diff*elaborate*copied-relations
    (state <s> ^name state-diff)
    -->
    (<s> ^copied-relations <rels> +)
}

sp {state-diff*elaborate*valid-predicate*attend-only
    (state <s> ^name state-diff)
    (<s> ^valid-predicates <preds>)
    (<s> ^attend-only <a*1>)
    (<a*1> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    -->
    (<preds> ^predicate <pred> +)
}

sp {state-diff*elaborate*valid-predicate*from-final
    (state <s> ^name state-diff)
   -{ (<s> ^attend-only <a*1>)
      (<a*1> ^predicates <p*3>)
      (<p*3> ^predicate <any>)}
    (<s> ^valid-predicates <preds>)
    (<s> ^final <f*1>)
    (<f*1> ^predicate-set <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^name <pred>)
   -{ (<s> ^ignore <i*1>)
      (<i*1> ^predicate <pred>)}
    -->
    (<preds> ^predicate <pred> +)
}

sp {state-diff*elaborate*valid-predicates
    (state <s> ^name state-diff)
    -->
    (<s> ^valid-predicates <preds> +)
}

sp {state-diff*elaborate*valid-relation*attend-only
    (state <s> ^name state-diff)
    (<s> ^valid-relations <rels>)
    (<s> ^attend-only <a*1>)
    (<a*1> ^relations <r*1>)
    (<r*1> ^relation <rel>)
    -->
    (<rels> ^relation <rel> +)
}

sp {state-diff*elaborate*valid-relation*from-final
    (state <s> ^name state-diff)
   -{ (<s> ^attend-only <a*1>)
      (<a*1> ^relations <r*3>)
      (<r*3> ^relation <any>)}
    (<s> ^valid-relations <rels>)
    (<s> ^final <f*1>)
    (<f*1> ^relationships <r*1>)
    (<r*1> ^relations <r*2>)
    (<r*2> ^name <rel>)
   -{ (<s> ^ignore <i*1>)
      (<i*1> ^relation <rel>)}
    -->
    (<rels> ^relation <rel> +)
}

sp {state-diff*elaborate*valid-relations
    (state <s> ^name state-diff)
    -->
    (<s> ^valid-relations <rels> +)
}

sp {state-diff*elaborate*valid-object*attend-only
    (state <s> ^name state-diff)
    (<s> ^valid-objects <objs>)
    (<s> ^attend-only <a*1>)
    (<a*1> ^objects <o*1>)
    (<o*1> ^object <obj>)
    -->
    (<objs> ^object <obj> +)
}

sp {state-diff*elaborate*valid-object*attend
    (state <s> ^name state-diff)
    (<s> ^valid-objects <objs>)
    (<s> ^attend <a*1>)
    (<a*1> ^object <obj>)
    -->
    (<objs> ^object <obj> +)
}

sp {state-diff*elaborate*valid-object*from-final
    (state <s> ^name state-diff)
   -{ (<s> ^attend-only <a*1>)
      (<a*1> ^objects <o*2>)
      (<o*2> ^object <any>)}
    (<s> ^valid-objects <objs>)
    (<s> ^final <f*1>)
    (<f*1> ^objects <o*1>)
    (<o*1> ^object <obj>)
   -{ (<s> ^ignore <i*1>)
      (<i*1> ^object <obj>)}
    -->
    (<objs> ^object <obj> +)
}

sp {state-diff*elaborate*valid-objects
    (state <s> ^name state-diff)
    -->
    (<s> ^valid-objects <objs> +)
}

sp {state-union*elaborate*ignore
    (state <s> ^name state-union)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name state-union)
    (<o> ^ignore <ig>)
    -->
    (<s> ^ignore <ig> +)
}

sp {state-diff*elaborate*attend-only
    (state <s> ^name state-diff)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name state-diff)
    (<o> ^attend-only <ig>)
    -->
    (<s> ^attend-only <ig> +)
}

sp {state-diff*elaborate*attend
    (state <s> ^name state-diff)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name state-diff)
    (<o> ^attend <ig>)
    -->
    (<s> ^attend <ig> +)
}

sp {state-diff*elaborate*ignore
    (state <s> ^name state-diff)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name state-diff)
    (<o> ^ignore <ig>)
    -->
    (<s> ^ignore <ig> +)
}

sp {state-union*elaborate*operator-attrs
    (state <s> ^name state-union)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name state-union)
    (<o> ^final <fstate>)
    (<o> ^initial <istate>)
    -->
    (<s> ^initial <istate> +)
    (<s> ^final <fstate> +)
    (<s> ^relationships <rels> +)
    (<s> ^object-set <os> +)
    (<s> ^object-desc-set <ods> +)
    (<s> ^predicate-set <preds> +)
}

sp {state-diff*elaborate*operator-attrs
    (state <s> ^name state-diff)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name state-diff)
    (<o> ^final <fstate>)
    (<o> ^initial <istate>)
    -->
    (<s> ^initial <istate> +)
    (<s> ^final <fstate> +)
    (<s> ^relationships <rels> +)
    (<s> ^extra-relationships <erels> +)
    (<s> ^object-set <os> +)
    (<s> ^object-desc-set <ods> +)
    (<s> ^predicate-set <preds> +)
}

sp {extract-state*elaborate*operator-attrs
    (state <s> ^name extract-state)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name extract-state)
    -->
    (<s> ^relationships <rels> +)
    (<s> ^object-set <objects> +)
    (<s> ^predicate-set <preds> +)
}

sp {prefer*copy-extra-relationships*over*complete*state-diff
    (state <s> ^name state-diff)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-extra-relationships)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-objects*over*complete*state-union
    (state <s> ^name state-union)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-objects)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-objects*over*complete*state-diff
    (state <s> ^name state-diff)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-objects)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-predicates*over*complete*state-union
    (state <s> ^name state-diff)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-predicates)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-relationships*over*complete*state-union
    (state <s> ^name state-union)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-relationships)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-new-relationships*over*complete*state-diff
    (state <s> ^name state-diff)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-new-relationships)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-objects*over*copy-predicates*state-diff
    (state <s> ^name state-diff)
    (<s> ^operator <o2> +)
    (<o2> ^name copy-predicates)
    (<s> ^operator <o1> +)
    (<o1>
          ^name { << copy-objects copy-relationships copy-extra-relationships copy-new-relationships >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-objects*over*copy-extra-relationships*state-diff
    (state <s> ^name state-diff)
    (<s> ^operator <o2> +)
    (<o2> ^name copy-extra-relationships)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-objects)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-new-relationships*over*copy-extra-relationships*state-diff
    (state <s> ^name state-diff)
    (<s> ^operator <o2> +)
    (<o2> ^name copy-extra-relationships)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-new-relationships)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-relationships*over*copy-objects*state-union
    (state <s> ^name state-union)
    (<s> ^operator <o2> +)
    (<o2> ^name copy-objects)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-relationships)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-new-relationships*over*copy-objects*state-diff
    (state <s> ^name state-diff)
    (<s> ^operator <o2> +)
    (<o2> ^name copy-objects)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-new-relationships)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-predicates*over*complete-state
    (state <s> ^name extract-state)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-state)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-predicates)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-objects*over*complete-state
    (state <s> ^name extract-state)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-state)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-objects)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-relationships*over*complete-state
    (state <s> ^name extract-state)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-state)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-relationships)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-objects*over*copy-predicates
    (state <s> ^name extract-state)
    (<s> ^operator <o2> +)
    (<o2> ^name copy-predicates)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-objects)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*copy-relationships*over*copy-objects
    (state <s> ^name extract-state)
    (<s> ^operator <o2> +)
    (<o2> ^name copy-objects)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-relationships)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {clean-up*top-state*found-action-aftersolve
    (state <s> ^name interaction)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interaction)
    (<s> ^top-state <ts>)
    (<ts> ^perform-action <fa>)
    (<fa> ^mark done)
    -->
    (<ts> ^perform-action <fa> -)
}

sp {find-solution*apply*complete-finding-solution*send-message*lose
    (state <s> ^name find-solution)
    (<s> ^operator <o>)
    (<o> ^name complete-finding-solution)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type easy +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {find-solution*apply*completed-all-actions*send-message*lose
    (state <s> ^name find-solution)
    (<s> ^superstate <s*1>)
    (<s*1> ^multiplayer true)
    (<s> ^operator <o>)
    (<o> ^name completed-all-actions)
    (<s> ^top-state <t*3>)
    (<t*3> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^game-status <g*1>)
    (<g*1> ^game-lost true)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type i-lose +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {find-solution*apply*completed-all-actions*send-message*won
    (state <s> ^name find-solution)
    (<s> ^superstate <s*1>)
    (<s*1> ^multiplayer true)
    (<s> ^operator <o>)
    (<o> ^name completed-all-actions)
    (<s> ^top-state <t*3>)
    (<t*3> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^game-status <g*1>)
    (<g*1> ^game-won true)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type i-win +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {find-solution*apply*completed-all-actions*send-message*your-turn
    (state <s> ^name find-solution)
   -{ (<s> ^top-state <t*2>)
      (<t*2> ^game-status <g*2>)
      (<g*2> ^game-won true)}
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^game-status <g*1>)
      (<g*1> ^game-lost true)}
    (<s> ^superstate <s*1>)
    (<s*1> ^multiplayer true)
    (<s> ^operator <o>)
    (<o> ^name completed-all-actions)
    (<s> ^top-state <t*4>)
    (<t*4> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*3>)
    (<t*3> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type your-turn +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {find-solution*apply*completed-all-actions*send-message
    (state <s> ^name find-solution)
    (<s> ^superstate <s*1>)
    (<s*1> ^multiplayer false)
    (<s> ^operator <o>)
    (<o> ^name completed-all-actions)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type easy +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {find-solution*apply*completed-all-actions*remove*dialog-context*game
    (state <s> ^name find-solution)
    (<s> ^superstate <s*1>)
    (<s*1> ^multiplayer true)
    (<s> ^operator <o>)
    (<o> ^name completed-all-actions)
    (<s> ^top-state <ts>)
    (<ts> ^game-status <gs>)
    (<ts> ^dialog-context <dc>)
    (<gs> ^{ << game-lost game-won >> <a*1> } true)
    -->
    (<ts> ^dialog-context <dc> -)
    (<ts> ^game-status <gs> -)
}

sp {find-solution*apply*completed-all-actions*remove*game-replay*game
    (state <s> ^name find-solution)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^multiplayer true)
    (<s> ^operator <o>)
    (<o> ^name completed-all-actions)
    (<s> ^top-state <ts>)
    (<ts> ^game-replay <g>)
    (<ts> ^game-status <gs>)
    (<gs> ^{ << game-lost game-won >> <a*1> } true)
    -->
    (<ts> ^game-replay <g> -)
}

sp {find-solution*apply*completed-all-actions*remove*game-status*game
    (state <s> ^name find-solution)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^multiplayer true)
    (<s> ^operator <o>)
    (<o> ^name completed-all-actions)
    (<s> ^top-state <ts>)
    (<ts> ^game-status <gs>)
    (<gs> ^{ << game-lost game-won >> <a*1> } true)
    -->
    (<ts> ^game-status <gs> -)
}

sp {find-solution*apply*completed-all-actions*remove*game-status
    (state <s> ^name find-solution)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^multiplayer true)}
    (<s> ^operator <o>)
    (<o> ^name completed-all-actions)
    (<s> ^top-state <ts>)
    (<ts> ^game-status <dc>)
    -->
    (<ts> ^game-status <dc> -)
}

sp {find-solution*apply*completed-all-actions*remove*dialog-context
    (state <s> ^name find-solution)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^multiplayer true)}
    (<s> ^operator <o>)
    (<o> ^name completed-all-actions)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    -->
    (<ts> ^dialog-context <dc> -)
}

sp {find-solution*apply*complete-finding-solution*remove*game-replay
    (state <s> ^name find-solution)
    (<s> ^operator <o>)
    (<o> ^name complete-finding-solution)
    (<s> ^top-state <ts>)
    (<ts> ^game-replay <dc>)
    -->
    (<ts> ^game-replay <dc> -)
}

sp {find-solution*apply*complete-finding-solution*remove*game-status
    (state <s> ^name find-solution)
    (<s> ^operator <o>)
    (<o> ^name complete-finding-solution)
    (<s> ^top-state <ts>)
    (<ts> ^game-status <dc>)
    -->
    (<ts> ^game-status <dc> -)
}

sp {find-solution*apply*complete-finding-solution*remove*dialog-context
    (state <s> ^name find-solution)
    (<s> ^operator <o>)
    (<o> ^name complete-finding-solution)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    -->
    (<ts> ^dialog-context <dc> -)
}

sp {find-solution*apply*complete-finding-solution*remove*found-action
    (state <s> ^name find-solution)
    (<s> ^top-state <ts>)
    (<ts> ^game-scripting true)
    (<s> ^operator <o>)
    (<o> ^name complete-finding-solution)
    (<ts> ^perform-action <fa>)
    (<s> ^game <game>)
    (<ts> ^<game> <g1>)
    -->
    (<ts> ^perform-action <fa> -)
    (<g1> ^performed-action <fa> +)
}

sp {find-solution*apply*completed-all-actions*remove*found-action
    (state <s> ^name find-solution)
    (<s> ^operator <o>)
    (<o> ^name completed-all-actions)
    (<s> ^top-state <ts>)
    (<ts> ^perform-action <fa>)
    -->
    (<ts> ^perform-action <fa> -)
}

sp {find-solution*propose*completed-all-actions*game-lost
    (state <s> ^name find-solution)
    (<s> ^top-state <t*1>)
    (<t*1> ^game-status <g*1>)
    (<g*1> ^game-lost true)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<s> ^operator <o> =)
    (<o> ^name completed-all-actions +)
}

sp {find-solution*propose*completed-all-actions
    (state <s> ^name find-solution)
    (<s> ^top-state <ts>)
   -{ (<ts> ^perform-action <fa2>)
      (<fa2> -^mark <m*2>)}
    (<s> ^top-state <t*1>)
    (<t*1> ^perform-action <fa>)
    (<fa> ^mark <m*1>)
    (<fa> ^obj2 <ob>)
    (<fa> ^obj1 <oa>)
    (<fa> ^dcount <dc>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<s> ^operator <o> =)
    (<o> ^name completed-all-actions +)
}

sp {find-solution*elabroate*attend-to-arm
    (state <s> ^name find-solution)
    (<s> ^robot-state <r*1>)
    (<s> ^found-action <f*1>)
    (<r*1> ^arm <a*1>)
    (<a*1> ^grabbed <g*1>)
    -->
    (<s> ^attend-to-arm true +)
}

sp {find-solution*apply*execute-action
    (state <s> ^name find-solution)
    (<s> ^operator <o>)
    (<o> ^name execute-action)
    (<o> ^action-ref <fa>)
    -->
    (<fa> ^started true +)
}

sp {find-solution*propose*complete-finding-solution
    (state <s> ^name find-solution)
    (<s> ^top-state <ts>)
    (<ts> ^game-scripting true)
    (<ts> ^perform-action <fa>)
    (<fa> -^mark <m*1>)
    (<fa> ^dcount <dc>)
   -{ (<ts> ^perform-action <fa2>)
      (<fa2> -^mark <m*2>)
      (<fa2> ^dcount { < <dc> <d*1> })}
    (<s> ^found-action <f*1>)
    (<fa> ^pname <pname>)
    (<fa> ^obj2 <ob>)
    (<fa> ^obj1 <oa>)
    (<ob> ^handle <id2>)
    (<oa> ^handle <id1>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <objs>)
    (<objs> ^object <obj2>)
    (<obj2> ^handle <id2>)
    (<objs> ^object <obj1>)
    (<obj1> ^handle <id1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
    (<o> ^name complete-finding-solution +)
}

sp {find-solution*mark*found-action
    (state <s> ^superstate nil)
    (<s> ^perform-action <fa>)
    (<fa> -^mark <m*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name execute-put-down1)
    (<fa> ^started <s*1>)
    -->
    (<fa> ^mark done +)
}

sp {find-solution*propose*game-search*muliplayer
    (state <s> ^name find-solution)
    (<s> -^found-action <f*1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^multiplayer true)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <op>)
    (<op> ^game-name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> <)
    (<o> ^name game-search +)
    (<o> ^dcount 0 +)
    (<o> ^depth-limit 3 +)
    (<o> ^list <l*1> +)
    (<l*1> ^game <g> +)
    (<o> ^current <g> +)
    (<o> ^game <name> +)
    (<g> ^game <name> +)
    (<g> ^type action +)
    (<g> ^type goal +)
    (<g> ^type failure +)
    (<g> ^type heuristic +)
}

sp {find-solution*apply*game-learning-complete
    (state <s> ^name find-solution)
    (<s> ^operator <o>)
    (<o> ^name game-learning-complete)
    (<o> ^game <name>)
    (<s> ^top-state <t*3>)
    (<t*3> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<i*1> ^status <status>)
    (<o> ^type <type>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type learned-game +)
    (<msg> ^fields <f> +)
    (<f> ^game <name> +)
    (<f> ^type <type> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
    (<dc> ^finished-game-teaching true +)
}

sp {find-solution*propose*game-learning-complete*puzzle
    (state <s> ^name find-solution)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^multiplayer true)}
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^finished-game-teaching true)}
    (<s> -^found-action <f*1>)
    (<s> -^replay true)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <op>)
    (<op> ^game-name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name game-learning-complete +)
    (<o> ^type puzzle +)
    (<o> ^game <name> +)
}

sp {find-solution*propose*game-learning-complete
    (state <s> ^name find-solution)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^finished-game-teaching true)}
    (<s> -^replay true)
    (<s> -^found-action <f*1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^multiplayer true)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <op>)
    (<op> ^game-name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name game-learning-complete +)
    (<o> ^type game +)
    (<o> ^game <name> +)
}

sp {find-solution*prefer*chunk-game*over*game-learning-complete
    (state <s> ^name find-solution)
    (<s> ^operator <o> +)
    (<o> ^name chunk-game)
    (<s> ^operator <o2> +)
    (<o2> ^name game-learning-complete)
    -->
    (<s> ^operator <o> > <o2>)
}

sp {find-solution*prefer*chunk-game*over*chunk-game-structure
    (state <s> ^name find-solution)
    (<s> ^operator <o> +)
    (<o> ^name chunk-game)
    (<s> ^operator <o2> +)
    (<o2> ^name chunk-game-structure)
    -->
    (<s> ^operator <o> > <o2>)
}

sp {find-solution*prefer*chunk-game*over*chunk-predicate-structure
    (state <s> ^name find-solution)
    (<s> ^operator <o> +)
    (<o> ^name chunk-game)
    (<s> ^operator <o2> +)
    (<o2> ^name chunk-predicate-structure)
    -->
    (<s> ^operator <o> < <o2>)
}

sp {find-solution*prefer*chunk-game-structure*over*chunk-predicate-structure
    (state <s> ^name find-solution)
    (<s> ^operator <o> +)
    (<o> ^name chunk-game-structure)
    (<s> ^operator <o2> +)
    (<o2> ^name chunk-predicate-structure)
    -->
    (<s> ^operator <o> < <o2>)
}

sp {find-solution*prefer*chunk-game-structure*over*game-learning-complete
    (state <s> ^name find-solution)
    (<s> ^operator <o> +)
    (<o> ^name chunk-game-structure)
    (<s> ^operator <o2> +)
    (<o2> ^name game-learning-complete)
    -->
    (<s> ^operator <o> > <o2>)
}

sp {find-solution*prefer*chunk-predicate-structure*over*game-learning-complete
    (state <s> ^name find-solution)
    (<s> ^operator <o> +)
    (<o> ^name chunk-predicate-structure)
    (<s> ^operator <o2> +)
    (<o2> ^name game-learning-complete)
    -->
    (<s> ^operator <o> > <o2>)
}

sp {find-solution*elaborate*found-true
    (state <s> ^name find-solution)
    (<s> ^depth-limit-1-less <dl>)
    (<s> ^top-state <t*2>)
    (<t*2> ^perform-action <p*2>)
    (<p*2> ^dcount 0)
    (<s> ^top-state <t*1>)
    (<t*1> ^perform-action <p*1>)
    (<p*1> ^dcount <dl>)
    -->
    (<s> ^found-action true +)
}

sp {find-solution*elaborate*depth-limit-1-less
    (state <s> ^name find-solution)
    (<s> ^depth-limit <dl>)
    -->
    (<s> ^depth-limit-1-less (- <dl> 1) +)
}

sp {find-solution*propose*game-search
    (state <s> ^name find-solution)
    (<s> -^found-action <f*1>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^multiplayer true)}
    (<s> ^depth-limit <dl>)
    (<s> ^action <a*1>)
    (<s> ^goal <g*1>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <op>)
    (<op> ^game-name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> <)
    (<o> ^name game-search +)
    (<o> ^dcount 0 +)
    (<o> ^depth-limit <dl> +)
    (<o> ^list <l*1> +)
    (<l*1> ^game <g> +)
    (<o> ^current <g> +)
    (<o> ^game <name> +)
    (<g> ^game <name> +)
    (<g> ^type action +)
    (<g> ^type goal +)
    (<g> ^type failure +)
    (<g> ^type heuristic +)
}

sp {find-solution*propose*chunk-predicate-structure*failure
    (state <s> ^name find-solution)
    (<s> -^found-action <f*2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*1>)
    (<s*1> ^failures <f*3>)
    (<f*3> ^retrieve-handle <h>)
   -{ (<s> ^failure <f*1>)
      (<f*1> ^handle <h>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name chunk-predicate-structure +)
    (<o> ^gtype failure +)
    (<o> ^predicate-handle <h> +)
}

sp {find-solution*propose*chunk-predicate-structure*goal
    (state <s> ^name find-solution)
    (<s> -^found-action <f*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*1>)
    (<s*1> ^goals <g*2>)
    (<g*2> ^retrieve-handle <h>)
   -{ (<s> ^goal <g*1>)
      (<g*1> ^handle <h>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name chunk-predicate-structure +)
    (<o> ^gtype goal +)
    (<o> ^predicate-handle <h> +)
}

sp {find-solution*propose*chunk-predicate-structure*action
    (state <s> ^name find-solution)
    (<s> -^found-action <f*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*1>)
    (<s*1> ^actions <a*2>)
    (<a*2> ^retrieve-handle <h>)
   -{ (<s> ^action <a*1>)
      (<a*1> ^handle <h>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name chunk-predicate-structure +)
    (<o> ^gtype action +)
    (<o> ^predicate-handle <h> +)
}

sp {find-solution*propose*chunk-predicate-structure*heuristics
    (state <s> ^name find-solution)
    (<s> -^found-action <f*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*1>)
    (<s*1> ^heuristics <h*2>)
    (<h*2> ^retrieve-handle <h>)
   -{ (<s> ^heuristic <h*1>)
      (<h*1> ^handle <h>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name chunk-predicate-structure +)
    (<o> ^gtype heuristic +)
    (<o> ^predicate-handle <h> +)
}

sp {fchunk-game*chunk-game-structure
    (state <s> ^name chunk-game)
    (<s> ^game-struct <g>)
   -{ (<g> -^retrieve-handle <r*1>)
      (state <s> ^<a*1> <v*1>)}
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    (<s> ^superstate <ss>)
    -->
    (<sc> ^store <g> +)
    (<ss> ^chunked true +)
}

sp {chunk-game*start-search-depth
    (state <s> ^name chunk-game)
    (<s> ^game-struct <g>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*2>)
    (<s*2> ^start-search-depth <d1>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    -->
    (<g> ^start-search-depth <d1> +)
}

sp {chunk-game*retrieve-handles
    (state <s> ^name chunk-game)
    (<s> ^game-struct <g>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*2>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    (<s*2> ^{ << actions goals failures heuristics >> <a*1> } <v*1>)
    (<v*1> ^retrieve-handle <gname>)
    -->
    (<g> ^retrieve-handle <gname> +)
}

sp {chunk-game*elaborate*opponent*goals
    (state <s> ^name chunk-game)
    (<s> ^game-struct <g>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*2>)
    (<s*2> ^goals <g*1>)
    (<g*1> ^retrieve-handle <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action <a>)
    (<a> ^opponent true)
    -->
    (<g> ^opponent <name> +)
}

sp {chunk-game*elaborate*opponent
    (state <s> ^name chunk-game)
    (<s> ^game-struct <g>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*2>)
    (<s*2> ^actions <a*1>)
    (<a*1> ^retrieve-handle <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^action <a>)
    (<a> ^opponent true)
    (<a> ^handle <name>)
    -->
    (<g> ^opponent <name> +)
}

sp {chunk-game*game-handle
    (state <s> ^name chunk-game)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*2>)
    (<s*2> ^handle <gname>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    -->
    (<s> ^game-struct <g> +)
    (<g> ^handle <gname> +)
    (<g> ^retrieve game +)
}

sp {find-solution*propose*chunk-game-structure
    (state <s> ^name find-solution)
    (<s> -^found-action <f*1>)
    (<s> -^retrieve-handle <r*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <st>)
    (<st> ^handle <h>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name chunk-game-structure +)
    (<o> ^predicate-handle <h> +)
}

sp {find-solution*elaborate*opponent
    (state <s> ^name find-solution)
    (<s> ^action <a>)
    (<a> ^opponent <o>)
    (<a> ^handle <r>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <st>)
    (<st> ^handle <h>)
    -->
    (<s> ^opponent true +)
    (<s> ^opponent false +)
}

sp {find-solution*propose*chunk-game
    (state <s> ^name find-solution)
    (<s> -^found-action <f*1>)
    (<s> -^chunked <c*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <st>)
    (<st> ^handle <h>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name chunk-game +)
    (<o> ^predicate-handle <h> +)
}

sp {find-solution*elaborate*problem-space*world
    (state <s> ^name find-solution)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <world2>)
    -->
    (<s> ^problem-space <p*1> +)
    (<p*1> ^world <world> +)
    (<world> ^source <world2> +)
    (<world> ^copy-type shallow +)
}

sp {find-solution*propose*game-search*elab-replay-true
    (state <s> ^name find-solution)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^replay true)
    -->
    (<s> ^chunked true +)
    (<s> ^replay true +)
}

sp {find-solution*elab*opponent*finished
    (state <s> ^name find-solution)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*2>)
    (<d*2> ^finished-game-teaching true)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*1>)
    (<s*1> ^multiplayer true)
    -->
    (<s> ^opponent true +)
    (<s> ^opponent false +)
}

sp {find-solution*propose*game-search*elaborate*start-search-depth
    (state <s> ^name find-solution)
    (<s> ^start-search-depth <d>)
    (<s> ^retrieve-game <name>)
    -->
    (<s> ^depth-limit <d> +)
}

sp {find-solution*propose*game-search*elaborate*initial-depth-limit
    (state <s> ^name find-solution)
    (<s> -^start-search-depth <s*1>)
    (<s> ^retrieve-game <name>)
    -->
    (<s> ^depth-limit 1 +)
}

sp {find-solution*propose*game-search*elaborate*retrieve-game
    (state <s> ^name find-solution)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^game-name <name>)
    -->
    (<s> ^game <name> +)
    (<s> ^retrieve-game <name> +)
    (<s> ^gtype goal +)
    (<s> ^gtype action +)
    (<s> ^gtype failure +)
    (<s> ^gtype heuristic +)
}

sp {finished-game-teaching*apply*prepare-game
    (state <s> ^name finished-game-teaching)
    (<s> ^operator <o>)
    (<o> ^name prepare-game)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type tell-me-go +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {finished-game-teaching*apply*clean-up-after-learning
    (state <s> ^name finished-game-teaching)
    (<s> ^operator <o>)
    (<o> ^name clean-up-after-learning)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<ts> ^interaction <int>)
    (<int> ^changes <changes>)
    (<int> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type ok +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
    (<dc> ^capture-data yes +)
}

sp {apply*clean-up-after-learning*capture-data
    (state <s> ^name interaction)
    (<s> ^operator <o*1>)
    (<o*1> ^name pop-segment)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^capture-data yes)
    -->
    (<ts> ^dialog-context <dc> -)
    (<s> ^old-context <dc> +)
    (write (cmd |ctf -a pertaskstats.txt stats|))
    (write (cmd |ctf -a smemuse.txt smem --stats mem-usage|))
}

sp {finished-game-teaching*propose*clean-up-after-learning*no
    (state <s> ^name finished-game-teaching)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^response no)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name clean-up-after-learning +)
}

sp {finished-game-teaching*propose*prepare-game*yes
    (state <s> ^name finished-game-teaching)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*2>)
    (<d*2> ^structure <s*3>)
    (<s*3> ^handle <name>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*1>)
    (<s*1> ^multiplayer true)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^response yes)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name prepare-game +)
}

sp {finished-game-teaching*apply*prepare-game*replay
    (state <s> ^name finished-game-teaching)
    (<s> ^operator <o*1>)
    (<o*1> ^name prepare-game)
    (<s> ^top-state <ts>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^multiplayer true)
    (<sop> ^type replay-game)
    (<sop> ^game-name <name>)
    -->
    (<ts> ^game-replay <name> +)
}

sp {finished-game-teaching*propose*prepare-game*replay
    (state <s> ^name finished-game-teaching)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^multiplayer true)
    (<sop> ^type replay-game)
    (<sop> ^game-name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name prepare-game +)
}

sp {finished-game-teaching*propose*setup-search*replay
    (state <s> ^name finished-game-teaching)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^multiplayer false)
    (<sop> ^type replay-game)
    (<sop> ^game-name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name setup-search +)
    (<o> ^multiplayer false +)
    (<o> ^game-name <name> +)
}

sp {finished-game-teaching*propose*setup-search*yes
    (state <s> ^name finished-game-teaching)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^structure <s*1>)
      (<s*1> ^multiplayer true)}
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*2>)
    (<d*2> ^structure <s*3>)
    (<s*3> ^handle <name>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^response yes)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name setup-search +)
    (<o> ^multiplayer false +)
    (<o> ^game-name <name> +)
}

sp {finished-game-teaching*apply*setup-search*printtime
    (state <s> ^name finished-game-teaching)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^structure <s*1>)
      (<s*1> ^multiplayer true)}
    (<s> ^operator <o*2>)
    (<o*2> ^name setup-search)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^response yes)
    -->
    (write (cmd |ctf endlearntime.txt stats|))
}

sp {finished-game-teaching*propose*setup-search*game-replay
    (state <s> ^name finished-game-teaching)
   -{ (<s> ^top-state <t*2>)
      (<t*2> ^dialog-context <d*1>)}
    (<s> ^top-state <t*1>)
    (<t*1> ^game-replay <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^type game)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name setup-search +)
    (<o> ^multiplayer true +)
    (<o> ^game-name <name> +)
}

sp {finished-game-teaching*propose*setup-search
    (state <s> ^name finished-game-teaching)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*2>)
    (<s*2> ^handle <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^type game)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name setup-search +)
    (<o> ^game-name <name> +)
}

sp {setup-search*elaborate*problem-space*predicate-structure
    (state <s> ^name setup-search)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <world2>)
    -->
    (<s> ^problem-space <p*1> +)
    (<p*1> ^world <world> +)
    (<world> ^source <world2> +)
    (<world> ^copy-type deep +)
}

sp {setup-search*propose*find-solution2
    (state <s> ^name setup-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    (<op> ^multiplayer <m*1>)
    (<op> ^game-name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name find-solution +)
    (<o> ^replay true +)
    (<o> ^game-name <name> +)
}

sp {setup-search*propose*find-solution
    (state <s> ^name setup-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    (<op> -^multiplayer <m*1>)
    (<op> ^game-name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name find-solution +)
    (<o> ^game-name <name> +)
}

sp {setup-search*elaborate*multiplayer
    (state <s> ^name setup-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    (<op> ^multiplayer <m>)
    (<op> ^game-name <name>)
    -->
    (<s> ^multiplayer <m> +)
}

sp {setup-search*elaborate*tcn
    (state <s> ^name setup-search)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*1>)
    (<s*1> ^multiplayer <cg>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <op>)
    (<op> ^game-name <name>)
    -->
    (<s> ^multiplayer <cg> +)
}

sp {selection*prefer*evaluate*action*over*hackforcannibals
    (state <s> ^name selection)
    (<s> ^superstate <s*1>)
    (<s*1> ^dcount 0)
    (<s> ^operator <o2> +)
    (<o2> ^name evaluate-operator)
    (<o2> ^superoperator <so2>)
    (<so2> ^type action)
    (<s> ^operator <o1> +)
    (<o1> ^name evaluate-operator)
    (<o1> ^superoperator <so>)
   -{ (<so> ^verb-structure <v*1>)
      (<v*1> ^3 <v*2>)}
    (<so> ^type action)
    (<so2> ^verb-structure <v*3>)
    (<v*3> ^3 <v*4>)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {selection*prefer*evaluate*action*over*default
    (state <s> ^name selection)
    (<s> ^operator <o2> +)
    (<o2> ^name evaluate-operator)
    (<o2> ^superoperator <s*2>)
    (<s*2> ^name default)
    (<s> ^operator <o1> +)
    (<o1> ^name evaluate-operator)
    (<o1> ^superoperator <s*1>)
    (<s*1> ^type action)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {game-search*apply*default*depth-limit-increase
    (state <s> ^dcount 0)
    (<s> ^multiplayer false)
    (<s> ^name game-search)
    (<s> ^operator <o*1>)
    (<o*1> ^name default)
    (<s> ^superstate <ss>)
    (<ss> ^depth-limit <d>)
    -->
    (write (crlf) (+ <d> 1))
    (<ss> ^depth-limit <d> -)
    (<ss> ^depth-limit (+ <d> 1) +)
}

sp {game-search*apply*default*top-select-random-action*top*pick*random
    (state <s> ^dcount 0)
    (<s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^operator <o*1>)
    (<o*1> ^name default)
    (<s> ^operator <o> +)
    (<o> ^type action)
    -->
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
}

sp {game-search*apply*default*top-select-random-action
    (state <s> ^opponent true)
    (<s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^operator <o*1>)
    (<o*1> ^name default)
    (<s> ^operator <o> +)
    (<o> ^type action)
    -->
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
}

sp {game-search*apply*default*multiplayer*success
    (state <s> ^multiplayer true)
    (<s> -^dcount 0)
    (<s> -^opponent true)
    (<s> ^name game-search)
    (<s> ^operator <o*1>)
    (<o*1> ^name default)
    (<s> ^desired <d>)
    -->
    (<s> ^partial-failure <d> +)
}

sp {game-search*apply*default
    (state <s> ^name game-search)
    (<s> -^dcount 0)
    (<s> -^multiplayer true)
    (<s> ^operator <o*1>)
    (<o*1> ^name default)
    (<s> ^desired <d>)
    -->
    (<s> ^partial-failure <d> +)
}

sp {game-search*propose*default
    (state <s> ^name game-search)
   -{ (<s> ^action <a>)
     -{ (<a> ^parameter-set <p*1>)
        (<p*1> ^argnum <a*1>)}}
    -->
    (<s> ^operator <o1> +)
    (<o1> ^name default +)
}

sp {game-search*equivalent-action*reject4*ordering
    (state <s> ^name game-search)
    (<s> ^operator <o2> +)
    (<o2> -^duplicate-of <d*2>)
    (<o2> ^type action)
    (<s> ^operator <o1> +)
    (<o1> -^duplicate-of <d*1>)
    (<o1> ^type action)
    (<o2> ^name <cname>)
    (<o1> ^name <cname>)
    (<o1> ^verb-structure <vs>)
    (<o2> ^parameters <p2>)
    (<o1> ^parameters { < <p2> <p> })
    (<vs> ^3 <act3>)
    (<act3> ^2 <in4>)
    (<act3> ^1 <in3>)
    (<vs> ^1 <act1>)
    (<act1> ^2 <in2>)
    (<p2> ^<in2> <b1>)
    (<p> ^<in4> <b1>)
    (<p2> ^<in4> <b>)
    (<p> ^<in2> <b>)
    (<act1> ^1 <in1>)
    (<p2> ^<in1> <a1>)
    (<p> ^<in3> <a1>)
    (<p2> ^<in3> <a>)
    (<p> ^<in1> <a>)
    -->
    (<s> ^operator <o2> -)
}

sp {game-search*prefer*failure*to*goal
    (state <s> ^name game-search)
    (<s> ^operator <o2> +)
    (<o2> ^type goal)
    (<s> ^operator <o1> +)
    (<o1> ^type failure)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {game-search*prefer*failure
    (state <s> ^name game-search)
    (<s> ^operator <o1> +)
    (<o1> ^type failure)
    -->
    (<s> ^operator <o1> >)
    (<s> ^operator <o1> =)
}

sp {game-search*prefer*goal
    (state <s> ^name game-search)
    (<s> ^operator <o1> +)
    (<o1> ^type goal)
    -->
    (<s> ^operator <o1> >)
    (<s> ^operator <o1> =)
}

sp {game-search*depth-limit*multiplayer
    (state <s> ^goal-search-delay 50)
   -{ (<s> ^operator <o2> +)
      (<o2> ^type goal)}
   -{ (<s> ^goal <g*1>)
      (<g*1> ^parameter-set <p*1>)
      (<p*1> ^set <s*1>)}
    (<s> ^simulated true)
    (<s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^depth-limit <dc>)
    (<s> ^dcount <dc>)
    (<s> ^desired <d>)
    -->
    (<s> ^partial-failure <d> +)
}

sp {game-search*depth-limit
    (state <s> ^goal-search-delay 50)
   -{ (<s> ^operator <o2> +)
      (<o2> ^type goal)}
   -{ (<s> ^goal <g*1>)
      (<g*1> ^parameter-set <p*1>)
      (<p*1> ^set <s*1>)}
    (<s> -^multiplayer true)
    (<s> ^simulated true)
    (<s> ^name game-search)
    (<s> ^depth-limit <dc>)
    (<s> ^dcount <dc>)
    (<s> ^operator <o> +)
    (<o> -^duplicate-of <d*1>)
    (<o> ^type action)
    (<s> ^desired <d>)
    -->
    (<s> ^partial-failure <d> +)
}

sp {selection*pass-back-success*puzzle
    (state <s> ^superstate <ss>)
    (<ss> ^multiplayer false)
    (<s> ^evaluation <e*1>)
    (<e*1> ^symbolic-value { << success >> <s*2> })
    (<ss> ^superstate <s*3>)
    (<s*3> ^operator <sso>)
    (<sso> ^name evaluate-operator)
    (<sso> ^evaluation <e2>)
    (<sso> ^superoperator <s*4>)
    (<s*4> ^name <n*1>)
    (<s> ^superstate <s*1>)
    -->
    (<e2> ^symbolic-value success +)
}

sp {game-search*apply*failure*multiplayer
    (state <s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^operator <o*1>)
    (<o*1> ^type failure)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <ss>)
    (<ss> ^desired <d>)
    -->
    (<ss> ^failure <d> +)
}

sp {game-search*apply*failure
    (state <s> ^name game-search)
    (<s> -^multiplayer true)
    (<s> ^operator <o*1>)
    (<o*1> ^type failure)
    (<s> ^desired <d>)
    -->
    (<s> ^partial-failure <d> +)
}

sp {game-search*apply*game-lost
    (state <s> ^dcount 0)
    (<s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^operator <o*1>)
    (<o*1> ^type failure)
    (<s> ^desired <d>)
    (<s> ^top-state <ts>)
    -->
    (<ts> ^game-status <dc> +)
    (<dc> ^game-lost true +)
}

sp {game-search*apply*goal*multiplayer
    (state <s> ^multiplayer true)
    (<s> -^dcount 0)
    (<s> -^dcount 1)
    (<s> ^name game-search)
    (<s> ^operator <o*1>)
    (<o*1> ^type goal)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <ss>)
    (<ss> ^desired <d>)
    (<ss> ^superstate <sss>)
    (<sss> ^superstate <ts>)
    (<sss> ^operator <o*2>)
    (<o*2> ^superoperator <sop>)
    -->
    (<ss> ^failure <d> +)
    (<ts> ^fail <sop> +)
}

sp {game-search*apply*goal*multiplayer*depth0
    (state <s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^operator <o*1>)
    (<o*1> ^type goal)
    (<s> ^dcount { << 0 1 >> <d*1> })
    (<s> ^desired <d>)
    -->
    (<s> ^success <d> +)
}

sp {game-search*apply*goal
    (state <s> ^name game-search)
    (<s> -^multiplayer true)
    (<s> ^operator <o*1>)
    (<o*1> ^type goal)
    (<s> ^desired <d>)
    -->
    (<s> ^success <d> +)
}

sp {game-search*apply*game-won
    (state <s> ^dcount 1)
    (<s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^operator <o*1>)
    (<o*1> ^type goal)
    (<s> ^desired <d>)
    (<s> ^top-state <ts>)
    -->
    (<ts> ^game-status <dc> +)
    (<dc> ^game-won true +)
}

sp {game-search*apply*action*perform-action*top*singleaction
    (state <s> ^dcount 0)
    (<s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^operator <o>)
    (<o> -^duplicate-of <d*1>)
    (<o> ^type action)
    (<o> ^parameters <p>)
    (<s> ^action <act>)
    (<act> ^handle <cname>)
    (<o> ^name <cname>)
    (<act> ^verb-structure <v*1>)
    (<s> ^top-state <ts>)
    (<s> ^superstate <sss>)
    (<v*1> ^<num> <v1>)
    (<v1> ^verb-prep <vp>)
    (<v1> ^verb-name <vname>)
    (<v1> ^2 <i2>)
    (<v1> ^1 <i1>)
    (<p> ^<i2> <o2>)
    (<p> ^<i1> <o1>)
    -->
    (<ts> ^perform-action <fa> +)
    (<fa> ^dcount (- <num> 1) +)
    (<fa> ^obj1 <o1> +)
    (<fa> ^obj2 <o2> +)
    (<fa> ^pname <vp> +)
    (<fa> ^vname <vname> +)
}

sp {game-search*apply*action*perform-action*top
    (state <s> ^dcount 0)
    (<s> ^name game-search)
    (<s> ^operator <o>)
    (<o> -^duplicate-of <d*1>)
    (<o> ^type action)
    (<o> ^parameters <p>)
    (<s> ^action <act>)
    (<act> ^handle <cname>)
    (<o> ^name <cname>)
    (<act> ^verb-structure <v*1>)
    (<s> ^top-state <ts>)
    (<s> ^superstate <sss>)
    (<v*1> ^<num> <v1>)
    (<v1> ^verb-prep <vp>)
    (<v1> ^verb-name <vname>)
    (<v1> ^2 <i2>)
    (<v1> ^1 <i1>)
    (<p> ^<i2> <o2>)
    (<p> ^<i1> <o1>)
    -->
    (<sss> ^found-action true +)
}

sp {game-search*apply*action-failure*success
    (state <s> ^opponent true)
    (<s> -^dcount 0)
    (<s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^fail <o>)
    (<o> -^duplicate-of <d*1>)
    (<o> ^type action)
    (<s> ^operator <o>)
    (<s> ^desired <d>)
    -->
    (<s> ^success <d> +)
}

sp {game-search*apply*action-failure
    (state <s> ^opponent true)
    (<s> -^dcount 0)
    (<s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^operator <o>)
    (<o> -^duplicate-of <d*1>)
    (<s> -^fail <o>)
    (<o> ^type action)
    (<s> ^desired <d>)
    -->
    (<s> ^partial-failure <d> +)
}

sp {game-search*apply*action-success
    (state <s> ^opponent false)
    (<s> -^dcount 0)
    (<s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^operator <o>)
    (<o> -^duplicate-of <d*1>)
    (<o> ^type action)
    (<s> ^desired <d>)
    -->
    (<s> ^success <d> +)
}

sp {game-search*apply*action*perform-action
    (state <s> ^problemspace games)
    (<s> ^name selection)
    (<s> ^evaluation <e>)
    (<e> ^symbolic-value success)
    (<s> ^superstate <ss>)
    (<ss> -^multiplayer true)
    (<ss> ^dcount <dc>)
    (<e> ^superoperator <so>)
    (<so> ^verb-structure <vs>)
    (<so> ^parameters <p>)
    (<s> ^top-state <ts>)
    (<vs> ^<num> <vs2>)
    (<vs2> ^verb-prep <vp>)
    (<vs2> ^verb-name <vname>)
    (<vs2> ^2 <i2>)
    (<vs2> ^1 <i1>)
    (<p> ^<i2> <o2>)
    (<p> ^<i1> <o1>)
    -->
    (<ts> ^perform-action <fa> +)
    (<fa> ^dcount (- (+ (* 2 <dc>) <num>) 1) +)
    (<fa> ^obj1 <o1> +)
    (<fa> ^obj2 <o2> +)
    (<fa> ^pname <vp> +)
    (<fa> ^vname <vname> +)
}

sp {game-search*elaborate*input-args*set-to-single*objects
    (state <s> ^name game-search)
    (<s> ^gtype <gtype>)
    (<s> ^predicate <T5>)
    (<T5> ^link <co>)
    (<co> ^type concept)
    (<co> ^attribute predicate)
    (<T5> ^condition <c>)
    (<c> ^rtype single)
    (<c> ^attribute input-arg)
    (<s> ^<gtype> <g*1>)
    (<g*1> ^condition <co>)
    (<T5> ^potential-args <P125>)
    (<T5> ^parameter-set <P124>)
    (<T5> ^nlp-set <nlps>)
    (<nlps> ^aname <name>)
    (<co> ^name <name>)
    (<co> ^args <args>)
    (<args> ^num { > 0 <n*1> })
    (<c> ^parameter <p*1>)
    (<p*1> ^1 <v*2>)
    (<v*2> ^param-id <a1>)
    (<args> ^<a1> <c1>)
    (<c1> ^rtype set)
    (<c> ^result <r*2>)
    (<r*2> ^set <res>)
    (<c1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <i*1>)
    (<i*1> ^1 <v*1>)
    (<v*1> ^<elem> <obj>)
    -->
    (<res> ^instance <i15> +)
    (<i15> ^1 <obj> +)
}

sp {game-search*elaborate*input-args
    (state <s> ^name game-search)
    (<s> ^gtype <gtype>)
    (<s> ^predicate <T5>)
    (<T5> ^link <co>)
    (<co> ^type concept)
    (<co> ^attribute predicate)
    (<T5> ^condition <c>)
    (<c> ^attribute input-arg)
    (<s> ^<gtype> <g*1>)
    (<g*1> ^condition <co>)
    (<T5> ^potential-args <P125>)
    (<T5> ^parameter-set <P124>)
    (<T5> ^nlp-set <nlps>)
    (<nlps> ^aname <name>)
    (<co> ^name <name>)
    (<c> ^rtype <rtype>)
    (<co> ^args <args>)
    (<args> ^num { > 0 <n*1> })
    (<c> ^parameter <p*1>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^param-id <a1>)
    (<args> ^<a1> <c1>)
    (<c1> ^rtype <rtype>)
    (<c> ^result <r*2>)
    (<r*2> ^set <res2>)
    (<c1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <in1>)
    -->
    (<res2> ^instance <in1> +)
}

sp {game-search*elaborate*retrieve-game
    (state <s> ^name game-search)
    (<s> ^game <m>)
    -->
    (<s> ^retrieve-game <m> +)
}

sp {game-search*elaborate*opponent*false
    (state <s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^dcount { << 0 2 4 6 8 >> <d*1> })
    -->
    (<s> ^opponent false +)
}

sp {game-search*elaborate*opponent
    (state <s> ^multiplayer true)
    (<s> ^name game-search)
    (<s> ^dcount { << 1 3 5 7 9 >> <d*1> })
    -->
    (<s> ^opponent true +)
}

sp {game-search*elaborate*nlp-set*verb-structure
    (state <s> ^gtype action)
    (<s> ^name game-search)
    (<s> ^action <t>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^verb-structure <vs>)
    -->
    (<t> ^verb-structure <vs> +)
}

sp {game-search*elaborate*sub-conditions*predicate
    (state <s> ^name game-search)
    (<s> ^gtype <type>)
    (<s> ^<type> <t>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^conditions <cond>)
    -->
    (<t> ^condition <cond> +)
}

sp {game-search*elaborate*sub-conditions
    (state <s> ^name game-search)
    (<s> ^gtype <type>)
    (<s> ^<type> <t>)
    (<t> ^condition <co>)
    (<co> ^args <a*1>)
    (<a*1> ^{ << 1 2 3 4 5 6 7 8 9 10 >> <arg> } <cond>)
    (<cond> ^name <name>)
    -->
    (<t> ^condition <cond> +)
}

sp {game-search*elaborate*action*nlp-set
    (state <s> ^name game-search)
    (<s> ^gtype <gtype>)
    (<s> ^<gtype> <act>)
    (<act> ^predicate-structure <p>)
    -->
    (<act> ^nlp-set <p> +)
}

sp {game-search*elaborate*other-levels*simulated
    (state <s> ^name game-search)
    (<s> ^operator <o>)
    (<o> ^type action)
    (<o> ^duplicate-of <d*1>)
    -->
    (<s> ^simulated true +)
}

sp {game-search*elaborate*top-level*simulated
    (state <s> ^name game-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^name find-solution)
    -->
    (<s> ^simulated true +)
}

sp {game-search*apply*simulate2*set
    (state <s> ^name game-search)
    (<s> ^operator <o>)
    (<o> ^type action)
    (<s> ^copy-objects-map <com>)
    (<o> ^verb-structure <v*1>)
    (<o> ^parameters <p>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <p2>)
    (<p2> ^predicate <prep2>)
    (<prep2> ^handle on1)
    (<p2> ^predicate <prep>)
    (<prep> ^handle below1)
    (<o> ^name <cname>)
    (<com> ^<obj> <obja>)
   -{ (<prep2> ^instance <i*2>)
      (<i*2> ^1 <obja>)}
   -{ (<prep> ^instance <i*1>)
      (<i*1> ^2 <obja>)}
    (<obj> ^handle <ha>)
    (<v*1> ^<num> <v1>)
    (<v1> ^verb-prep on1)
    (<v1> ^2 <i2>)
    (<v1> ^1 <i1>)
    (<p> ^<i2> <obj1>)
    (<com> ^<obj1> <objb>)
    (<p> ^<i1> <objects>)
    (<objects> ^object <obj>)
    -->
    (<prep> ^instance <instance3> +)
    (<prep2> ^instance <instance4> +)
    (<instance3> ^1 <objb> +)
    (<instance3> ^2 <obja> +)
    (<instance4> ^1 <obja> +)
    (<instance4> ^2 <objb> +)
}

sp {game-search*apply*simulate2
    (state <s> ^name game-search)
    (<s> ^operator <o>)
    (<o> ^type action)
    (<s> ^copy-objects-map <com>)
    (<o> ^verb-structure <v*1>)
    (<o> ^parameters <p>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <p2>)
    (<p2> ^predicate <prep2>)
    (<prep2> ^handle on1)
    (<p2> ^predicate <prep>)
    (<prep> ^handle below1)
    (<o> ^name <cname>)
    (<com> ^<obj> <obja>)
   -{ (<prep2> ^instance <i*2>)
      (<i*2> ^1 <obja>)}
   -{ (<prep> ^instance <i*1>)
      (<i*1> ^2 <obja>)}
    (<obj> ^handle <ha>)
    (<p> ^<i1> <obj>)
    (<v*1> ^<num> <v1>)
    (<v1> ^verb-prep on1)
    (<v1> ^1 <i1>)
    (<v1> ^2 <i2>)
    (<p> ^<i2> <obj1>)
    (<com> ^<obj1> <objb>)
    -->
    (<prep> ^instance <instance3> +)
    (<prep2> ^instance <instance4> +)
    (<instance3> ^1 <objb> +)
    (<instance3> ^2 <obja> +)
    (<instance4> ^1 <obja> +)
    (<instance4> ^2 <objb> +)
}

sp {game-search*apply*simulate*set
    (state <s> ^name game-search)
    (<s> ^operator <o>)
    (<o> ^type action)
    (<s> ^copy-objects-map <com>)
    (<o> ^verb-structure <v*1>)
    (<o> ^parameters <p>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <p2>)
    (<p2> ^predicate <prep2>)
    (<prep2> ^handle on1)
    (<p2> ^predicate <prep>)
    (<prep> ^handle below1)
    (<prep2> ^instance <instance2>)
    (<prep> ^instance <instance>)
    (<instance> ^2 <obja>)
    (<instance2> ^1 <obja>)
    (<o> ^name <cname>)
    (<com> ^<obj> <obja>)
    (<obj> ^handle <ha>)
    (<v*1> ^<num> <v1>)
    (<v1> ^verb-prep on1)
    (<v1> ^2 <i2>)
    (<v1> ^1 <i1>)
    (<p> ^<i2> <obj1>)
    (<com> ^<obj1> <objb>)
    (<p> ^<i1> <objects>)
    (<objects> ^object <obj>)
    -->
    (<prep> ^instance <instance> -)
    (<prep> ^instance <instance3> +)
    (<prep2> ^instance <instance2> -)
    (<prep2> ^instance <instance4> +)
    (<instance3> ^1 <objb> +)
    (<instance3> ^2 <obja> +)
    (<instance4> ^1 <obja> +)
    (<instance4> ^2 <objb> +)
}

sp {game-search*apply*simulate*right-of
    (state <s> ^name game-search)
    (<s> ^operator <o>)
    (<o> ^type action)
    (<s> ^copy-objects-map <com>)
    (<o> ^verb-structure <v*1>)
    (<o> ^parameters <p>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <p2>)
    (<p2> ^predicate <prep>)
    (<prep> ^handle right-of1)
    (<prep> ^instance <instance>)
    (<o> ^name <cname>)
    (<v*1> ^<num> <v1>)
    (<v1> ^verb-prep on1)
    (<v1> ^2 <i2>)
    (<v1> ^1 <i1>)
    (<p> ^<i2> <obj1>)
    (<com> ^<obj1> <objb>)
    (<p> ^<i1> <obj>)
    (<obj> ^handle <ha>)
    (<com> ^<obj> <obja>)
    (<instance> ^{ << 1 2 >> <a*1> } <obja>)
    -->
    (<prep> ^instance <instance> -)
}

sp {game-search*apply*simulate
    (state <s> ^name game-search)
    (<s> ^operator <o>)
    (<o> ^type action)
    (<s> ^copy-objects-map <com>)
    (<o> ^verb-structure <v*1>)
    (<o> ^parameters <p>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <p2>)
    (<p2> ^predicate <prep2>)
    (<prep2> ^handle on1)
    (<p2> ^predicate <prep>)
    (<prep> ^handle below1)
    (<prep2> ^instance <instance2>)
    (<prep> ^instance <instance>)
    (<instance> ^2 <obja>)
    (<instance2> ^1 <obja>)
    (<o> ^name <cname>)
    (<com> ^<obj> <obja>)
    (<obj> ^handle <ha>)
    (<p> ^<i1> <obj>)
    (<v*1> ^<num> <v1>)
    (<v1> ^verb-prep on1)
    (<v1> ^1 <i1>)
    (<v1> ^2 <i2>)
    (<p> ^<i2> <obj1>)
    (<com> ^<obj1> <objb>)
    -->
    (<prep> ^instance <instance> -)
    (<prep> ^instance <instance3> +)
    (<prep2> ^instance <instance2> -)
    (<prep2> ^instance <instance4> +)
    (<instance3> ^1 <objb> +)
    (<instance3> ^2 <obja> +)
    (<instance4> ^1 <obja> +)
    (<instance4> ^2 <objb> +)
}

sp {game-search*elaborate*problem-space*world
    (state <s> ^name game-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^world <world2>)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^world <world> +)
    (<ps> ^name action +)
    (<ps> ^dont-copy-anything true +)
    (<world> ^source <world2> +)
    (<world> ^copy-type deep +)
}

sp {game-search*elaborate*dcount
    (state <s> ^name game-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^dcount <dc>)
    -->
    (<s> ^dcount (+ 1 <dc>) +)
}

sp {game-search*elaborate*list
    (state <s> ^name game-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^list <m>)
    -->
    (<s> ^list <m> +)
}

sp {game-search*elaborate*depth-limit
    (state <s> ^name game-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^depth-limit <m>)
    -->
    (<s> ^depth-limit <m> +)
}

sp {game-search*elaborate*game
    (state <s> ^name game-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^game <m>)
    -->
    (<s> ^game <m> +)
}

sp {game-search*elaborate*multiplayer
    (state <s> ^name game-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^multiplayer <m>)
    -->
    (<s> ^multiplayer <m> +)
}

sp {game-search*increment-goal-delay
    (state <s> ^name game-search)
    (<s> ^goal-search-delay { < 50 <d> })
    -->
    (<s> ^goal-search-delay (+ 1 <d>) +)
}

sp {game-search*elaborate*goal*multiplayer
    (state <s> ^simulated true)
    (<s> ^multiplayer true)
    (<s> ^name game-search)
    -->
    (<s> ^gtype goal +)
    (<s> ^goal-search-delay 1 +)
}

sp {game-search*elaborate*goal
    (state <s> ^simulated true)
    (<s> -^multiplayer true)
    (<s> ^name game-search)
    (<s> ^depth-limit <dc>)
    (<s> ^dcount <dc>)
    -->
    (<s> ^gtype goal +)
    (<s> ^goal-search-delay 1 +)
}

sp {game-search*elaborate*operator
    (state <s> ^name game-search)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name game-search)
    (<o> ^depth-limit <dl>)
    (<o> ^dcount <dc>)
    (<o> ^list <l>)
    (<o> ^current <g>)
    (<o> ^game <name>)
    -->
    (<s> ^dcount <dc> +)
    (<s> ^depth-limit <dl> +)
    (<s> ^list <l> +)
    (<s> ^problemspace games +)
    (<s> ^desired <d> +)
    (<s> ^current <g> +)
    (<s> ^game <name> +)
    (<d> ^found true +)
}

sp {game-search*elaborate*problem-space*bottom
    (state <s> ^simulated true)
    (<s> ^name game-search)
    (<s> ^depth-limit <dc>)
    (<s> ^dcount <dc>)
    -->
    (<s> ^ntype action +)
    (<s> ^ntype goal +)
    (<s> ^ntype failure +)
    (<s> ^gtype failure +)
}

sp {game-search*elaborate*problem-space
    (state <s> ^simulated true)
    (<s> ^name game-search)
    (<s> ^dcount <dc>)
    (<s> -^depth-limit <dc>)
    -->
    (<s> ^ntype action +)
    (<s> ^ntype goal +)
    (<s> ^ntype failure +)
    (<s> ^gtype action +)
    (<s> ^gtype failure +)
    (<s> ^gtype heuristic +)
}

sp {convert-NLP-to-language*apply*complete
    (state <s> ^name convert-NLP-to-language)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^functions <fc>)
    (<s> ^relationships <gr>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^nlp-relationships <gr> +)
    (<ss> ^nlp-functions <fc> +)
}

sp {convert-NLP-to-language*propose*complete
    (state <s> ^name convert-NLP-to-language)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {convert-NLP-to-language*apply*state-diff*copy-function-relations
    (state <s> ^name convert-NLP-to-language)
    (<s> ^functions <gr>)
    (<s> ^<num1> <f2>)
    (<f2> ^of <desc2>)
    (<desc2> ^type it)
    (<f2> ^type <name2>)
    (<s> ^<num1> { <> <f2> <f1> })
    (<f1> ^of <desc1>)
    (<f1> ^type <name1>)
    -->
    (<gr> ^function <r1> +)
    (<r1> ^1 <desc1> +)
    (<r1> ^2 <desc2> +)
    (<r1> ^of1 <name1> +)
    (<r1> ^of2 <name2> +)
    (<r1> ^type is +)
}

sp {convert-NLP-to-language*apply*state-diff*copy-goal-relations
    (state <s> ^name convert-NLP-to-language)
    (<s> ^relationships <gr>)
    (<s> ^condition <c>)
    (<c> ^args <a>)
    (<a> -^3 <v*1>)
    (<c> ^negative <n>)
    (<a> ^2 <c2>)
    (<a> ^1 <c1>)
    (<c> ^name <name>)
    (<s> ^<c2> <desc2>)
    (<s> ^<c1> <desc1>)
    -->
    (<gr> ^relation <r1> +)
    (<r1> ^1 <desc1> +)
    (<r1> ^2 <desc2> +)
    (<r1> ^name <name> +)
    (<r1> ^negative <n> +)
}

sp {convert-NLP-to-language*elaborate*object-description*telescope
    (state <s> ^name convert-NLP-to-language)
    (<s> ^condition <cond>)
    (<cond> ^args <a*1>)
    (<a*1> ^1 <c2>)
    (<s> ^<cond> <desc>)
    (<s> ^<c2> <desc2>)
    (<desc2> ^<something> <value>)
    -->
    (<desc> ^<something> <value> +)
}

sp {convert-NLP-to-language*elaborate*object-description*input-arg
    (state <s> ^name convert-NLP-to-language)
    (<s> ^condition <cond>)
    (<cond> ^name object)
    (<cond> ^attribute input-arg)
    -->
    (<s> ^<cond> <desc1> +)
    (<desc1> ^type it +)
}

sp {convert-NLP-to-language*elaborate*object-description*primitive
    (state <s> ^name convert-NLP-to-language)
    (<s> ^condition <cond>)
    (<cond> ^type attribute)
    (<cond> ^attribute primitive)
    (<cond> ^name <name>)
    -->
    (<s> ^<cond> <desc1> +)
    (<desc1> ^type <name> +)
}

sp {convert-NLP-to-language*elaborate*object-description*function
    (state <s> ^name convert-NLP-to-language)
    (<s> ^condition <cond>)
    (<cond> ^type attribute-of)
    (<cond> ^args <a*1>)
    (<cond> ^parameter <p*1>)
    (<a*1> ^2 <c>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^param-id <num>)
    (<cond> ^name <name>)
    (<s> ^<c> <desc1>)
    -->
    (<s> ^<num> <f> +)
    (<f> ^type <name> +)
    (<f> ^of <desc1> +)
}

sp {convert-NLP-to-language*elaborate*object-description
    (state <s> ^name convert-NLP-to-language)
    (<s> ^condition <cond>)
    (<cond> -^attribute primitive)
    (<cond> -^attribute input-arg)
    (<cond> ^type attribute)
    (<cond> ^name <name>)
    (<cond> ^attribute <at>)
    -->
    (<s> ^<cond> <desc1> +)
    (<desc1> ^<at> <name> +)
}

sp {convert-NLP-to-language*elaborate*conditions*depth
    (state <s> ^name convert-NLP-to-language)
    (<s> ^condition <cond>)
    (<cond> ^args <a*1>)
    (<a*1> ^{ << 1 2 3 4 5 6 >> <a*2> } <cond2>)
    -->
    (<s> ^condition <cond2> +)
}

sp {convert-NLP-to-language*elaborate*conditions
    (state <s> ^name convert-NLP-to-language)
    (<s> ^structure <s*1>)
    (<s*1> ^conditions <cond>)
    -->
    (<s> ^condition <cond> +)
}

sp {convert-NLP-to-language*elaborate*relationships
    (state <s> ^name convert-NLP-to-language)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^structure <ps>)
    -->
    (<s> ^relationships <gr> +)
    (<s> ^functions <fc> +)
    (<s> ^structure <ps> +)
}

sp {convert-TCN-to-NLP*apply*complete*superstate*copy
    (state <s> ^name convert-TCN-to-NLP)
    (<s> ^nlp-set <nps>)
   -{ (<s> ^nlp <nlp>)
      (<nps> -^nlp <nlp>)}
    (<s> ^operator <o*2>)
    (<o*2> ^name complete)
    (<s> ^set <s*2>)
    (<s*2> ^name <name>)
    (<s> ^superstate <s*1>)
    (<s> ^superstate <ss>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^type <type>)
    -->
    (<ss> ^nlp-set <nps> +)
}

sp {convert-TCN-to-NLP*apply*complete*name
    (state <s> ^name convert-TCN-to-NLP)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^nlp-set <nps>)
    (<s> ^set <s*1>)
    (<s*1> ^name <name>)
    -->
    (<nps> ^name <name> +)
    (<nps> ^aname <name> +)
}

sp {convert-TCN-to-NLP*apply*complete
    (state <s> ^name convert-TCN-to-NLP)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^nlp <nlp>)
    (<s> ^nlp-set <nps>)
    -->
    (<nps> ^nlp <nlp> +)
}

sp {convert-TCN-to-NLP*propose*complete
    (state <s> ^name convert-TCN-to-NLP)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name complete +)
}

sp {convert-TCN-to-NLP*elaborate*nlp*3args
    (state <s> ^name convert-TCN-to-NLP)
    (<s> ^set <a>)
    (<a> ^conditions <c*1>)
    (<c*1> ^cond <c*2>)
    (<c*2> ^prep <cond>)
    (<cond> ^negative <neg>)
    (<cond> ^2 <num2>)
    (<cond> ^3 <num3>)
    (<cond> ^1 <num>)
    (<cond> ^name <name>)
    (<s> ^<num> <c>)
    (<s> ^<num2> <c2>)
    (<s> ^<num3> <c3>)
    -->
    (<s> ^nlp <co> +)
    (<co> ^name <name> +)
    (<co> ^negative <neg> +)
    (<co> ^parameter <p3z> +)
    (<co> ^args <args> +)
    (<co> ^type state-pair +)
    (<co> ^attribute prepositions +)
    (<p3z> ^1 <p1b> +)
    (<p3z> ^2 <p2b> +)
    (<p3z> ^3 <p3b> +)
    (<p1b> ^param-id <num> +)
    (<p2b> ^param-id <num2> +)
    (<p3b> ^param-id <num3> +)
    (<args> ^1 <c> +)
    (<args> ^2 <c2> +)
    (<args> ^3 <c3> +)
}

sp {convert-TCN-to-NLP*elaborate*nlp*not-INDEF
    (state <s> ^name convert-TCN-to-NLP)
    (<s> ^set <a>)
    (<a> ^conditions <c*1>)
    (<c*1> ^cond <c*2>)
    (<c*2> ^prep <cond>)
    (<cond> -^3 <v*1>)
    (<cond> -^2 INDEF)
    (<cond> ^negative <neg>)
    (<cond> ^2 <num2>)
    (<cond> ^1 <num>)
    (<cond> ^name <name>)
    (<s> ^<num> <c>)
    (<s> ^<num2> <c2>)
    -->
    (<s> ^nlp <co> +)
    (<co> ^name <name> +)
    (<co> ^negative <neg> +)
    (<co> ^parameter <p3z> +)
    (<co> ^args <args> +)
    (<co> ^type state-pair +)
    (<co> ^attribute prepositions +)
    (<p3z> ^1 <p1b> +)
    (<p3z> ^2 <p2b> +)
    (<p1b> ^param-id <num> +)
    (<p2b> ^param-id <num2> +)
    (<args> ^1 <c> +)
    (<args> ^2 <c2> +)
}

sp {convert-TCN-to-NLP*elaborate*nlp*INDEF
    (state <s> ^name convert-TCN-to-NLP)
    (<s> ^set <a>)
    (<a> ^conditions <c*1>)
    (<c*1> ^cond <c*2>)
    (<c*2> ^prep <cond>)
    (<cond> -^3 <v*1>)
    (<cond> ^2 INDEF)
    (<cond> ^btype <type>)
    (<s> ^condition <c>)
    (<c> ^name <type>)
    (<cond> ^negative <neg>)
    (<cond> ^1 <num>)
    (<cond> ^name <name>)
    (<s> ^<num> <c2>)
    -->
    (<s> ^nlp <co> +)
    (<co> ^name <name> +)
    (<co> ^negative <neg> +)
    (<co> ^parameter <p3z> +)
    (<co> ^args <args> +)
    (<co> ^type state-pair +)
    (<co> ^attribute prepositions +)
    (<p3z> ^1 <p1b> +)
    (<p1b> ^param-id <num> +)
    (<args> ^1 <c2> +)
    (<args> ^2 <c> +)
}

sp {convert-TCN-to-NLP*elaborate*parameter
    (state <s> ^name convert-TCN-to-NLP)
    (<s> ^set <a>)
    (<s> ^condition <c>)
    (<a> ^parameters <p*1>)
    (<c> ^name <type>)
    (<p*1> ^{ << 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >> <num> } <n*1>)
   -{ (<a> ^conditions <c*1>)
      (<c*1> ^<num> <n*2>)
      (<n*2> ^attribute <a*1>)
      (<a*1> ^<attr> <value>)}
    (<n*1> ^type <type>)
    -->
    (<s> ^<num> <c> +)
}

sp {convert-TCN-to-NLP*elaborate*parameter*attr
    (state <s> ^name convert-TCN-to-NLP)
    (<s> ^set <a>)
    (<a> ^conditions <c*1>)
    (<s> ^condition <c>)
    (<a> ^parameters <p*1>)
    (<c> ^name <type>)
    (<p*1> ^{ << 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 >> <num> } <n*1>)
    (<n*1> ^type <type>)
    (<c*1> ^<num> <n*2>)
    (<n*2> ^attribute <a*1>)
    (<a*1> ^<attr> <value>)
    -->
    (<s> ^<num> <c1> +)
    (<c1> ^name <value> +)
    (<c1> ^attribute <attr> +)
    (<c1> ^args <ag2> +)
    (<c1> ^type attribute +)
    (<ag2> ^1 <c> +)
}

sp {convert-TCN-to-NLP*elaborate*state2
    (state <s> ^name convert-TCN-to-NLP)
    -->
    (<s> ^condition <c3> +)
    (<s> ^condition <c4> +)
    (<s> ^condition <c5> +)
    (<s> ^nlp-set <nps> +)
    (<c4> ^name block +)
    (<c4> ^rtype single +)
    (<c4> ^attribute category +)
    (<c4> ^type attribute +)
    (<c3> ^name location +)
    (<c3> ^rtype single +)
    (<c3> ^attribute category +)
    (<c3> ^type attribute +)
    (<c5> ^name object +)
    (<c5> ^rtype single +)
    (<c5> ^attribute category +)
    (<c5> ^type attribute +)
}

sp {convert-TCN-to-NLP*elaborate*state
    (state <s> ^name convert-TCN-to-NLP)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^tcn <tcn>)
    -->
    (<s> ^set <tcn> +)
}

sp {convert-parsed-format*apply*complete*superstate*copy*considererence
    (state <s> ^complete-flag true)
    (<s> ^name convert-parsed-format)
    (<s> ^nlp-set <nps>)
   -{ (<s> ^nlp <nlp>)
      (<nps> -^nlp <nlp>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^consider <pref>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <l*1>)
    (<l*1> ^handle <name>)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <type>)
    (<ss> ^<type> <a>)
    -->
    (<a> ^nlp-set <nps> +)
    (<a> ^aname <name> +)
    (<a> ^consider <pref> +)
    (<nps> ^aname <name> +)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence*avoid*modifier
    (state <s> ^complete-flag true)
    (<s> -^moved <m*1>)
    (<s> ^name convert-parsed-format)
    (<s> ^nlp-set <nps>)
   -{ (<s> ^nlp <nlp>)
      (<nps> -^nlp <nlp>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^modifier <m>)
    (<s> ^avoid <pref>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <l*1>)
    (<l*1> ^handle <name>)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <type>)
    (<ss> ^<type> <a>)
    -->
    (<a> ^nlp-set <nps> +)
    (<a> ^aname <name> +)
    (<a> ^avoid <pref> +)
    (<a> ^modifier <m> +)
    (<nps> ^aname <name> +)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence*modifier
    (state <s> ^complete-flag true)
    (<s> -^moved <m*1>)
    (<s> ^name convert-parsed-format)
    (<s> ^nlp-set <nps>)
   -{ (<s> ^nlp <nlp>)
      (<nps> -^nlp <nlp>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^modifier <m>)
    (<s> ^prefer <pref>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <l*1>)
    (<l*1> ^handle <name>)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <type>)
    (<ss> ^<type> <a>)
    -->
    (<a> ^nlp-set <nps> +)
    (<a> ^aname <name> +)
    (<a> ^prefer <pref> +)
    (<a> ^modifier <m> +)
    (<nps> ^aname <name> +)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence*modifier*moved
    (state <s> ^complete-flag true)
    (<s> ^name convert-parsed-format)
    (<s> ^nlp-set <nps>)
   -{ (<s> ^nlp <nlp>)
      (<nps> -^nlp <nlp>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^modifier <m>)
    (<s> ^moved <mov>)
    (<s> ^prefer <pref>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <l*1>)
    (<l*1> ^handle <name>)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <type>)
    (<ss> ^<type> <a>)
    -->
    (<a> ^nlp-set <nps> +)
    (<a> ^aname <name> +)
    (<a> ^prefer <pref> +)
    (<a> ^modifier <m> +)
    (<a> ^moved <mov> +)
    (<nps> ^aname <name> +)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence*avoid*modifier*moved
    (state <s> ^complete-flag true)
    (<s> ^name convert-parsed-format)
    (<s> ^nlp-set <nps>)
   -{ (<s> ^nlp <nlp>)
      (<nps> -^nlp <nlp>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^modifier <m>)
    (<s> ^moved <mov>)
    (<s> ^avoid <pref>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <l*1>)
    (<l*1> ^handle <name>)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <type>)
    (<ss> ^<type> <a>)
    -->
    (<a> ^nlp-set <nps> +)
    (<a> ^aname <name> +)
    (<a> ^avoid <pref> +)
    (<a> ^modifier <m> +)
    (<a> ^moved <mov> +)
    (<nps> ^aname <name> +)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence*avoid
    (state <s> ^complete-flag true)
    (<s> -^modifier <m>)
    (<s> ^name convert-parsed-format)
    (<s> ^nlp-set <nps>)
   -{ (<s> ^nlp <nlp>)
      (<nps> -^nlp <nlp>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^avoid <pref>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <l*1>)
    (<l*1> ^handle <name>)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <type>)
    (<ss> ^<type> <a>)
    -->
    (<a> ^nlp-set <nps> +)
    (<a> ^aname <name> +)
    (<a> ^avoid <pref> +)
    (<nps> ^aname <name> +)
}

sp {convert-parsed-format*apply*complete*superstate*copy*prefererence
    (state <s> ^complete-flag true)
    (<s> -^modifier <m>)
    (<s> ^name convert-parsed-format)
    (<s> ^nlp-set <nps>)
   -{ (<s> ^nlp <nlp>)
      (<nps> -^nlp <nlp>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^prefer <pref>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <l*1>)
    (<l*1> ^handle <name>)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <type>)
    (<ss> ^<type> <a>)
    -->
    (<a> ^nlp-set <nps> +)
    (<a> ^aname <name> +)
    (<a> ^prefer <pref> +)
    (<nps> ^aname <name> +)
}

sp {convert-parsed-format*apply*complete*superstate*copy
    (state <s> ^complete-flag true)
    (<s> -^consider <c*1>)
    (<s> -^avoid <a*1>)
    (<s> -^prefer <p*1>)
    (<s> ^name convert-parsed-format)
    (<s> ^nlp-set <nps>)
   -{ (<s> ^nlp <nlp>)
      (<nps> -^nlp <nlp>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <l*1>)
    (<l*1> ^handle <name>)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <type>)
    (<ss> ^<type> <a>)
    -->
    (<a> ^nlp-set <nps> +)
    (<a> ^aname <name> +)
    (<nps> ^aname <name> +)
}

sp {convert-parsed-format*apply*complete*only-objects
    (state <s> ^name convert-parsed-format)
    (<s> ^parameter <pp>)
    (<s> -^input-object-2 <pp>)
    (<s> -^input-object-1 <pp>)
    (<s> -^indef <pp>)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<pp> ^parameter-index <id>)
    (<pp> ^formatted <p>)
   -{ (<s> ^nlp <nlp>)
      (<nlp> ^args <a*1>)
      (<nlp> ^parameter <p*1>)
      (<a*1> ^<num> <p>)
      (<p*1> ^<num> <n*1>)
      (<n*1> ^param-id <id>)}
    (<p> ^parameter <para>)
    -->
    (<s> ^nlp <p> +)
    (<para> ^1 <p2> +)
    (<p2> ^param-id <id> +)
}

sp {convert-parsed-format*apply*complete
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^nlp <nlp>)
    (<s> ^nlp-set <nps>)
    -->
    (<nps> ^nlp <nlp> +)
}

sp {convert-parsed-format*apply*complete-flag
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^nlp <nlp>)
    (<s> ^nlp-set <nps>)
    -->
    (<s> ^complete-flag true +)
}

sp {convert-parsed-format*propose*complete
    (state <s> ^name convert-parsed-format)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> <)
    (<op> ^name complete +)
}

sp {convert-parsed-format*apply*handle-clause*parameter*concept*arg3
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^parameter <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<c1> ^relation <r>)
    (<r> ^handle <name>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^world <w*1>)
      (<w*1> ^predicates <p*1>)
      (<p*1> ^predicate <p*2>)
      (<p*2> ^handle <name>)}
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<r> ^3 <c3>)
    (<c3> ^parameter-index <id3>)
    (<c3> ^formatted <p3>)
    (<p3> ^rtype <rtype3>)
    -->
    (<c1> ^new-formatted <n> +)
    (<r> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function board-between +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para> ^3 <para3> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
    (<para3> ^param-id <id3> +)
    (<para3> ^type <rtype3> +)
}

sp {convert-parsed-format*apply*handle-clause*parameter*concept
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^parameter <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<c1> ^relation <r>)
    (<r> -^3 <v*1>)
    (<r> ^handle <name>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^world <w*1>)
      (<w*1> ^predicates <p*1>)
      (<p*1> ^predicate <p*2>)
      (<p*2> ^handle <name>)}
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    -->
    (<r> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute predicate +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-clause*parameter*arg3
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^parameter <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    (<c1> ^relation <r>)
    (<r> ^handle <name>)
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<r> ^3 <c3>)
    (<c3> ^parameter-index <id3>)
    (<c3> ^formatted <p3>)
    (<p3> ^rtype <rtype3>)
    -->
    (<r> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para> ^3 <para3> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
    (<para3> ^param-id <id3> +)
    (<para3> ^type <rtype3> +)
}

sp {convert-parsed-format*apply*handle-clause*parameter
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^parameter <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<c1> ^rtype <rtype>)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    (<c1> ^relation <r>)
    (<r> -^3 <v*1>)
    (<r> ^handle <name>)
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    -->
    (<c1> ^new-formatted <n> +)
    (<r> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-clause*parameter*nortype
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^parameter <c1>)
    (<c1> -^rtype <r*1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    (<c1> ^relation <r>)
    (<r> -^3 <v*1>)
    (<r> ^handle <name>)
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    -->
    (<c1> ^new-formatted <n> +)
    (<r> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-clause*negative*indef
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
    (<c> ^modifier <m*1>)
    (<m*1> ^handle negation)
    (<c> ^predicate <r>)
    (<r> -^3 <v*1>)
    (<r> ^2 <c2>)
    (<c2> -^parameter-index <p*1>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<r> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^negative true +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-clause*negative*arg3
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
    (<c> ^modifier <m*1>)
    (<m*1> ^handle negation)
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<c> ^predicate <r>)
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id3>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p3>)
    (<c2> ^formatted <p2>)
    (<p3> ^rtype <rtype3>)
    (<p2> ^rtype <rtype2>)
    (<r> ^handle <name>)
    (<r> ^3 <c3>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^negative true +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para> ^3 <para3> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
    (<para3> ^param-id <id3> +)
    (<para3> ^type <rtype3> +)
}

sp {convert-parsed-format*apply*handle-clause*negative
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
    (<c> ^modifier <m*1>)
    (<m*1> ^handle negation)
    (<c> ^predicate <r>)
    (<r> -^3 <v*1>)
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<r> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^negative true +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-clause*indef2*concept*arg3
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<c> ^predicate <r>)
    (<r> ^handle <name>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^world <w*1>)
      (<w*1> ^predicates <p*1>)
      (<p*1> ^predicate <p*2>)
      (<p*2> ^handle <name>)}
    (<r> ^3 <c3>)
    (<c3> -^parameter-index <p*3>)
    (<c3> ^formatted <p3>)
    (<p3> ^rtype <rtype3>)
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute predicate +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-clause*indef*concept*arg3
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<c> ^predicate <r>)
    (<r> ^2 <c2>)
    (<c2> -^parameter-index <p*3>)
    (<r> ^handle <name>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^world <w*1>)
      (<w*1> ^predicates <p*1>)
      (<p*1> ^predicate <p*2>)
      (<p*2> ^handle <name>)}
    (<r> ^3 <c3>)
    (<c3> -^parameter-index <p*4>)
    (<c3> ^formatted <p3>)
    (<c2> ^formatted <p2>)
    (<p3> ^rtype <rtype3>)
    (<p2> ^rtype <rtype2>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute predicate +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-clause*indef*concept
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^predicate <r>)
    (<r> -^3 <v*1>)
    (<r> ^2 <c2>)
    (<c2> -^parameter-index <p*3>)
    (<r> ^handle <name>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^world <w*1>)
      (<w*1> ^predicates <p*1>)
      (<p*1> ^predicate <p*2>)
      (<p*2> ^handle <name>)}
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute predicate +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-clause*indef2*arg3
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<c> ^predicate <r>)
    (<r> ^3 <c3>)
    (<c3> -^parameter-index <p*3>)
    (<c3> ^formatted <p3>)
    (<p3> ^rtype <rtype3>)
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<r> ^handle <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-clause*indef*arg3
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<c> ^predicate <r>)
    (<r> ^2 <c2>)
    (<c2> -^parameter-index <p*3>)
    (<r> ^3 <c3>)
    (<c3> -^parameter-index <p*4>)
    (<c3> ^formatted <p3>)
    (<c2> ^formatted <p2>)
    (<p3> ^rtype <rtype3>)
    (<p2> ^rtype <rtype2>)
    (<r> ^handle <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-clause*indef
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^predicate <r>)
    (<r> -^3 <v*1>)
    (<r> ^2 <c2>)
    (<c2> -^parameter-index <p*3>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<r> ^handle <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-clause*concept*arg3
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^predicate <r>)
    (<r> -^handle between)
    (<r> ^handle <name>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^world <w*1>)
      (<w*1> ^predicates <p*1>)
      (<p*1> ^predicate <p*2>)
      (<p*2> ^handle <name>)}
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<r> ^3 <c3>)
    (<c3> ^parameter-index <id3>)
    (<c3> ^formatted <p3>)
    (<p3> ^rtype <rtype3>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute predicate +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para> ^3 <para3> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
    (<para3> ^param-id <id3> +)
    (<para3> ^type <rtype3> +)
}

sp {convert-parsed-format*apply*handle-clause*concept*arg3*between*new-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^predicate <r>)
    (<r> ^handle between)
    (<r> ^handle <name>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^world <w*1>)
      (<w*1> ^predicates <p*1>)
      (<p*1> ^predicate <p*2>)
      (<p*2> ^handle <name>)}
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<c> ^arg1 <c1>)
    (<c1> ^new-formatted <p>)
    (<c1> ^parameter-index <id>)
    (<p> ^rtype <rtype>)
    (<r> ^3 <c3>)
    (<c3> ^parameter-index <id3>)
    (<c3> ^formatted <p3>)
    (<p3> ^rtype <rtype3>)
    -->
    (<c> ^formatted true +)
    (<r> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function board-between +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para> ^3 <para3> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
    (<para3> ^param-id <id3> +)
    (<para3> ^type <rtype3> +)
}

sp {convert-parsed-format*apply*handle-clause*concept*arg3*between
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^arg1 <c1>)
    (<c1> -^new-formatted <n*1>)
    (<c> ^predicate <r>)
    (<r> ^handle between)
    (<r> ^handle <name>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^world <w*1>)
      (<w*1> ^predicates <p*1>)
      (<p*1> ^predicate <p*2>)
      (<p*2> ^handle <name>)}
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<r> ^3 <c3>)
    (<c3> ^parameter-index <id3>)
    (<c3> ^formatted <p3>)
    (<p3> ^rtype <rtype3>)
    -->
    (<c> ^formatted true +)
    (<r> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function board-between +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para> ^3 <para3> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
    (<para3> ^param-id <id3> +)
    (<para3> ^type <rtype3> +)
}

sp {convert-parsed-format*apply*handle-clause*concepts
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^predicate <r>)
    (<r> -^3 <v*1>)
    (<r> ^handle <name>)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^world <w*1>)
      (<w*1> ^predicates <p*1>)
      (<p*1> ^predicate <p*2>)
      (<p*2> ^handle <name>)}
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute predicate +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-clause*arg3
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<c> ^predicate <r>)
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<r> ^handle <name>)
    (<r> ^3 <c3>)
    (<c3> ^parameter-index <id3>)
    (<c3> ^formatted <p3>)
    (<p3> ^rtype <rtype3>)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<a> ^3 <p3> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para> ^3 <para3> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
    (<para3> ^param-id <id3> +)
    (<para3> ^type <rtype3> +)
}

sp {convert-parsed-format*apply*handle-clause
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-clause)
    (<o> ^clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> ^predicate <r>)
    (<r> -^3 <v*1>)
    (<r> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<c> ^arg1 <c1>)
    (<c1> ^parameter-index <id>)
    (<c1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<r> ^handle <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p> +)
    (<a> ^2 <p2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-property-predicate)
    (<o> ^pred-clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<o> ^pred-name <name>)
    (<o> ^param <p>)
    (<p> ^new-formatted <p1>)
    (<p> ^parameter-index <id>)
    (<p1> ^rtype <rtype>)
    (<o> ^property property)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute predicate +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p1> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*primitive
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-property-predicate)
    (<o> ^pred-clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<o> ^pred-name <name>)
    (<o> ^param <p>)
    (<p> ^new-formatted <p1>)
    (<p> ^parameter-index <id>)
    (<p1> ^rtype <rtype>)
    (<o> ^property { << color size shape >> <prop> })
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type attribute +)
    (<n> ^attribute <prop> +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p1> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*primitive*notnew
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-property-predicate)
    (<o> ^pred-clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<o> ^param <p>)
    (<p> -^new-formatted <n*1>)
    (<o> ^pred-name <name>)
    (<p> ^parameter-index <id>)
    (<p> ^formatted <p1>)
    (<p1> ^rtype <rtype>)
    (<o> ^property { << color size shape >> <prop> })
    -->
    (<c> ^formatted true +)
    (<p> ^new-formatted <n> +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type attribute +)
    (<n> ^attribute <prop> +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p1> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-property-predicate*concept-property*notnew
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-property-predicate)
    (<o> ^pred-clause <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<o> ^param <p>)
    (<p> -^new-formatted <n*1>)
    (<o> ^pred-name <name>)
    (<p> ^parameter-index <id>)
    (<p> ^formatted <p1>)
    (<p1> ^rtype <rtype>)
    (<o> ^property property)
    -->
    (<c> ^formatted true +)
    (<p> ^new-formatted <n> +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute predicate +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <p1> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*propose*handle-property-predicate
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> -^formatted <f*1>)
    (<c> ^predicate <pred>)
    (<pred> ^item-type predicate)
    (<pred> ^handle <name>)
   -{ (<s> ^learning-predicate <l*2>)
      (<l*2> ^spelling <name>)}
   -{ (<s> ^learn-link <l*1>)
      (<l*1> ^handle <name>)}
    (<c> ^arg1 <p>)
    (<p> ^item-type <type>)
    (<p> ^predicates <p*1>)
    (<p*1> ^category <type>)
    (<p> ^predicates <ps>)
    (<pred> ^property <p*2>)
    (<p*2> ^handle { <> category <prop> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-property-predicate +)
    (<o> ^param <p> +)
    (<o> ^property <prop> +)
    (<o> ^pred-name <name> +)
    (<o> ^pred-clause <c> +)
}

sp {convert-parsed-format*propose*handle-clause*attribute-of
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> -^formatted <f*1>)
    (<c> ^predicate <p>)
    (<p> ^handle of1)
    (<p> ^2 <v*1>)
    (<v*1> ^handle <name>)
   -{ (<s> ^learning-predicate <l*2>)
      (<l*2> ^spelling <name>)}
   -{ (<s> ^learn-link <l*1>)
      (<l*1> ^handle <name>)}
    (<c> ^arg1 <a*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-clause +)
    (<o> ^clause <c> +)
}

sp {convert-parsed-format*propose*handle-clause
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> -^formatted <f*1>)
    (<c> ^predicate <p>)
    (<p> -^handle of1)
    (<p> ^handle <name>)
   -{ (<s> ^learning-predicate <l*2>)
      (<l*2> ^spelling <name>)}
   -{ (<s> ^learn-link <l*1>)
      (<l*1> ^handle <name>)}
    (<p> ^2 <v*1>)
    (<c> ^arg1 <a*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-clause +)
    (<o> ^clause <c> +)
}

sp {convert-parsed-format*propose*handle-clause*parameter
    (state <s> ^name convert-parsed-format)
    (<s> ^parameter <p>)
    (<p> ^relation <r>)
    (<r> -^formatted <f*1>)
    (<r> ^handle <name>)
   -{ (<s> ^learning-predicate <l*2>)
      (<l*2> ^spelling <name>)}
   -{ (<s> ^learn-link <l*1>)
      (<l*1> ^handle <name>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-clause +)
    (<o> ^parameter <p> +)
}

sp {convert-parsed-format*apply*handle-predicate*count*equal*reverse
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> ^handle number1)
    (<c> ^equal-to <e*1>)
    (<e*1> ^formatted <oc>)
    (<oc> ^parameter <p*2>)
    (<p*2> ^1 <v*1>)
    (<v*1> ^param-id <id1>)
    (<c> ^relation <p2>)
    (<p2> ^handle of1)
    (<p2> ^2 <c2>)
    (<c2> -^new-formatted <n*1>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <f2>)
    (<f2> ^rtype <rtype2>)
    (<c> ^property <p*1>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^nlp <n> +)
    (<n> ^name count +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function soar-count +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type single +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*count*equal
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> ^handle of1)
    (<c> ^2 <p2>)
    (<p2> ^handle number1)
    (<p2> ^2 <c2>)
    (<c2> -^new-formatted <n*1>)
    (<c2> ^parameter-index <id2>)
    (<c> ^equal-to <e*1>)
    (<c2> ^formatted <f2>)
    (<e*1> ^formatted <oc>)
    (<f2> ^rtype <rtype2>)
    (<oc> ^parameter <p*1>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^param-id <id1>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^nlp <n> +)
    (<n> ^name count +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function soar-count +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type single +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*count*new-formatted*reversed
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
   -{ (<c> ^equal-to <e*1>)
      (<e*1> ^formatted <f*1>)}
    (<c> ^handle number1)
    (<s> ^object-count <oc>)
    (<c> ^relation <p2>)
    (<p2> ^handle of1)
    (<p2> ^2 <c2>)
    (<c2> ^new-formatted <f2>)
    (<c2> ^parameter-index <id2>)
    (<f2> ^rtype <rtype2>)
    (<c> ^property <p*1>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^object-count <oc> -)
    (<s> ^object-count (+ <oc> 1) +)
    (<s> ^nlp <n> +)
    (<n> ^name count +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function soar-count +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <oc> +)
    (<para1> ^type single +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*count*new-formatted
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
   -{ (<c> ^equal-to <e*1>)
      (<e*1> ^formatted <f*1>)}
    (<c> ^handle of1)
    (<c> ^2 <p2>)
    (<p2> ^handle number1)
    (<s> ^object-count <oc>)
    (<p2> ^2 <c2>)
    (<c2> ^new-formatted <f2>)
    (<c2> ^parameter-index <id2>)
    (<f2> ^rtype <rtype2>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^object-count <oc> -)
    (<s> ^object-count (+ <oc> 1) +)
    (<s> ^nlp <n> +)
    (<n> ^name count +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function soar-count +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <oc> +)
    (<para1> ^type single +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*count*equal*new-formatted
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> ^handle of1)
    (<c> ^2 <p2>)
    (<p2> ^handle number1)
    (<c> ^equal-to <e*1>)
    (<e*1> ^formatted <oc>)
    (<oc> ^parameter <p*1>)
    (<p2> ^2 <c2>)
    (<c2> ^new-formatted <f2>)
    (<c2> ^parameter-index <id2>)
    (<f2> ^rtype <rtype2>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^param-id <id1>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^nlp <n> +)
    (<n> ^name count +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function soar-count +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type single +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*more-than*constant
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> ^handle more-than1)
    (<c> ^2 <p2>)
    (<p2> -^formatted <f*1>)
    (<p2> ^number <num>)
    (<c> ^1 <p1>)
    (<p1> ^formatted <f1>)
    (<f1> ^rtype <rtype1>)
    (<f1> ^parameter <p*1>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^param-id <id1>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^nlp <n> +)
    (<n> ^name greater +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<n> ^type function +)
    (<n> ^function soar-greater +)
    (<a> ^1 <f1> +)
    (<a> ^2 <f2> +)
    (<f2> ^name number +)
    (<f2> ^result <r*1> +)
    (<r*1> ^set <s*1> +)
    (<s*1> ^instance <i> +)
    (<f2> ^args <a> +)
    (<f2> ^parameter <paraf> +)
    (<f2> ^rtype single +)
    (<f2> ^return-type number +)
    (<i> ^1 <num> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type <rtype1> +)
}

sp {convert-parsed-format*apply*handle-predicate*more-than
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> ^handle more-than1)
    (<c> ^2 <p2>)
    (<p2> ^formatted <f2>)
    (<f2> ^rtype <rtype2>)
    (<f2> ^parameter <p*2>)
    (<p*2> ^1 <v*2>)
    (<v*2> ^param-id <id2>)
    (<c> ^1 <p1>)
    (<p1> ^formatted <f1>)
    (<f1> ^rtype <rtype1>)
    (<f1> ^parameter <p*1>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^param-id <id1>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^nlp <n> +)
    (<n> ^name greater +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<n> ^type function +)
    (<n> ^function soar-greater +)
    (<a> ^1 <f1> +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type <rtype1> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*count*equal*new-formatted*reverse
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> ^handle number1)
    (<c> ^equal-to <e*1>)
    (<e*1> ^formatted <oc>)
    (<oc> ^parameter <p*2>)
    (<p*2> ^1 <v*1>)
    (<v*1> ^param-id <id1>)
    (<c> ^relation <p2>)
    (<p2> ^handle of1)
    (<p2> ^2 <c2>)
    (<c2> ^new-formatted <f2>)
    (<c2> ^parameter-index <id2>)
    (<f2> ^rtype <rtype2>)
    (<c> ^property <p*1>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^nlp <n> +)
    (<n> ^name count +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function soar-count +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type single +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*count*reverse
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
   -{ (<c> ^equal-to <e*1>)
      (<e*1> ^formatted <f*1>)}
    (<c> ^handle number1)
    (<s> ^object-count <oc>)
    (<c> ^relation <p2>)
    (<p2> ^handle of1)
    (<p2> ^2 <c2>)
    (<c2> -^new-formatted <n*1>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <f2>)
    (<f2> ^rtype <rtype2>)
    (<c> ^property <p*1>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^object-count <oc> -)
    (<s> ^object-count (+ <oc> 1) +)
    (<s> ^nlp <n> +)
    (<n> ^name count +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function soar-count +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <oc> +)
    (<para1> ^type single +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*count
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
   -{ (<c> ^equal-to <e*1>)
      (<e*1> ^formatted <f*1>)}
    (<c> ^handle of1)
    (<c> ^2 <p2>)
    (<p2> ^handle number1)
    (<p2> ^2 <c2>)
    (<c2> -^new-formatted <n*1>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <f2>)
    (<s> ^object-count <oc>)
    (<f2> ^rtype <rtype2>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^object-count <oc> -)
    (<s> ^object-count (+ <oc> 1) +)
    (<s> ^nlp <n> +)
    (<n> ^name count +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type function +)
    (<n> ^function soar-count +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <oc> +)
    (<para1> ^type single +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*number*equal
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> -^2 <v*1>)
    (<c> ^equal-to <e*1>)
    (<e*1> ^formatted <oc>)
    (<oc> ^parameter <p*2>)
    (<c> ^handle <name>)
    (<p*2> ^1 <v*2>)
    (<v*2> ^param-id <id1>)
    (<c> ^property <p*1>)
    (<p*1> ^handle number)
    -->
    (<c> ^formatted <n> +)
    (<s> ^nlp <n> +)
    (<n> ^name number +)
    (<n> ^result <r*1> +)
    (<r*1> ^set <s*1> +)
    (<s*1> ^instance <i> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<i> ^1 <name> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type single +)
}

sp {convert-parsed-format*apply*handle-predicate*number
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
   -{ (<c> ^equal-to <e*1>)
      (<e*1> ^formatted <f*1>)}
    (<c> -^2 <v*1>)
    (<s> ^object-count <oc>)
    (<c> ^handle <name>)
    (<c> ^property <p*1>)
    (<p*1> ^handle number)
    -->
    (<c> ^formatted <n> +)
    (<s> ^object-count <oc> -)
    (<s> ^object-count (+ <oc> 1) +)
    (<s> ^nlp <n> +)
    (<n> ^name number +)
    (<n> ^result <r*1> +)
    (<r*1> ^set <s*1> +)
    (<s*1> ^instance <i> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^rtype single +)
    (<n> ^return-type number +)
    (<i> ^1 <name> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <oc> +)
    (<para1> ^type single +)
}

sp {convert-parsed-format*apply*handle-predicate*equal-exists
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> ^handle of1)
    (<c> ^2 <p2>)
    (<p2> -^handle number1)
    (<c> ^equal-to <eq>)
    (<eq> ^formatted <oc>)
    (<oc> ^parameter <p*1>)
    (<p2> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <f2>)
    (<f2> ^rtype <rtype2>)
    (<p2> ^handle <name>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^param-id <id1>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type attribute-of +)
    (<n> ^rtype <rtype2> +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type <rtype2> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*of*learned
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
   -{ (<c> ^equal-to <e*1>)
      (<e*1> ^formatted <f*1>)}
    (<c> ^handle of1)
    (<c> ^2 <p2>)
    (<p2> -^handle number1)
    (<p2> ^handle <name>)
   -{ (state <s> ^superstate <s*1>)
      (<s*1> ^world <w*1>)
      (<w*1> ^objects <o*1>)
      (<s> ^<a*1> <v*1>)
      (<o*1> ^object <o*2>)
      (<o*2> ^predicates <p*1>)
      (<p*1> ^<name> <n*1>)}
    (<s> ^object-count <oc>)
    (<p2> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <f2>)
    (<f2> ^rtype <rtype2>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^object-count <oc> -)
    (<s> ^object-count (+ <oc> 1) +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute predicate +)
    (<n> ^rtype <rtype2> +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <oc> +)
    (<para1> ^type <rtype2> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
   -{ (<c> ^equal-to <e*1>)
      (<e*1> ^formatted <f*1>)}
    (<c> ^handle of1)
    (<c> ^2 <p2>)
    (<p2> -^handle number1)
    (<p2> ^handle <name>)
   -{-{ (<s> ^superstate <s*1>)
        (<s*1> ^world <w*1>)
        (<w*1> ^objects <o*1>)
        (<o*1> ^object <o*2>)
        (<o*2> ^predicates <p*1>)
        (<p*1> ^<name> <n*1>)}
      (state <s> ^<a*1> <v*1>)}
    (<s> ^object-count <oc>)
    (<p2> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <f2>)
    (<f2> ^rtype <rtype2>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^object-count <oc> -)
    (<s> ^object-count (+ <oc> 1) +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type attribute-of +)
    (<n> ^rtype <rtype2> +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <oc> +)
    (<para1> ^type <rtype2> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*equal-exists*reverse
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> -^handle number1)
    (<c> ^equal-to <eq>)
    (<eq> ^formatted <oc>)
    (<oc> ^parameter <p*1>)
    (<c> ^handle <name>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^param-id <id1>)
    (<c> ^relation <p2>)
    (<p2> ^handle of1)
    (<p2> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <f2>)
    (<f2> ^rtype <rtype2>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type attribute-of +)
    (<n> ^rtype <rtype2> +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type <rtype2> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*equal-exists*state-pair*negative
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> -^handle number1)
    (<c> ^modifier <m*1>)
    (<m*1> ^handle negation)
    (<c> ^equal-to <eq>)
    (<eq> ^formatted <oc>)
    (<oc> ^rtype <rtype>)
    (<oc> ^parameter <p*3>)
    (<c> ^2 <p>)
    (<p> ^parameter-index <id2>)
    (<p> ^formatted <oc2>)
    (<oc2> ^rtype <rtype2>)
    (<c> ^handle <name>)
    (<p*3> ^1 <v*1>)
    (<v*1> ^param-id <id1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type state-pair +)
    (<n> ^negative true +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <oc> +)
    (<a> ^2 <oc2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*equal-exists*state-pair
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
   -{ (<c> ^modifier <m*1>)
      (<m*1> ^handle negation)}
    (<c> -^handle number1)
    (<c> ^equal-to <eq>)
    (<eq> ^formatted <oc>)
    (<oc> ^rtype <rtype>)
    (<oc> ^parameter <p*3>)
    (<c> ^2 <p>)
    (<p> ^parameter-index <id2>)
    (<p> ^formatted <oc2>)
    (<oc2> ^rtype <rtype2>)
    (<c> ^handle <name>)
    (<p*3> ^1 <v*1>)
    (<v*1> ^param-id <id1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type state-pair +)
    (<n> ^attribute prepositions +)
    (<n> ^rtype <rtype> +)
    (<a> ^1 <oc> +)
    (<a> ^2 <oc2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id1> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-predicate*reverseorder-of
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-predicate)
    (<o> ^predicate <c>)
    (<c> -^handle number1)
   -{ (<c> ^equal-to <e*1>)
      (<e*1> ^formatted <f*1>)}
    (<s> ^object-count <oc>)
    (<c> ^handle <name>)
    (<c> ^relation <p2>)
    (<p2> ^handle of1)
    (<p2> ^2 <c2>)
    (<c2> ^parameter-index <id2>)
    (<c2> ^formatted <f2>)
    (<f2> ^rtype <rtype2>)
    -->
    (<c> ^formatted <n> +)
    (<s> ^object-count <oc> -)
    (<s> ^object-count (+ <oc> 1) +)
    (<s> ^nlp <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type attribute-of +)
    (<n> ^rtype <rtype2> +)
    (<n> ^return-type number +)
    (<a> ^2 <f2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <oc> +)
    (<para1> ^type <rtype2> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*propose*handle-predicate*attribute-of
    (state <s> ^name convert-parsed-format)
    (<s> ^predicate <p>)
    (<p> -^formatted <f*1>)
    (<p> ^handle of1)
    (<p> ^2 <v*1>)
    (<v*1> ^handle <name>)
   -{ (<s> ^learning-predicate <l*2>)
      (<l*2> ^spelling <name>)}
   -{ (<s> ^learn-link <l*1>)
      (<l*1> ^handle <name>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-predicate +)
    (<o> ^predicate <p> +)
}

sp {convert-parsed-format*propose*handle-predicate*parameter
    (state <s> ^name convert-parsed-format)
    (<s> ^predicate <p>)
    (<p> -^handle of1)
    (<p> -^formatted <f*1>)
    (<p> ^handle <name>)
   -{ (<s> ^learning-predicate <l*2>)
      (<l*2> ^spelling <name>)}
   -{ (<s> ^learn-link <l*1>)
      (<l*1> ^handle <name>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-predicate +)
    (<o> ^predicate <p> +)
}

sp {convert-parsed-format*apply*handle-action*3verbs
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name handle-action)
    (<o> ^arg2c <a2c>)
    (<o> ^arg1c <a1c>)
    (<o> ^arg2b <a2b>)
    (<o> ^arg1b <a1b>)
    (<a1c> ^parameter-index <pac>)
    (<a1b> ^parameter-index <pab>)
    (<s> ^nlp-set <nps>)
    (<nps> ^verb-structure <va2>)
    (<a2c> ^2 <obj2c>)
    (<obj2c> ^parameter-index <pa2c>)
    (<a2b> ^2 <obj2b>)
    (<obj2b> ^parameter-index <pa2b>)
    (<o> ^arg2 <a2>)
    (<a2> ^2 <obj2>)
    (<obj2> ^parameter-index <pa2>)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <pa>)
    (<a2c> ^handle <rnamec>)
    (<a2b> ^handle <rnameb>)
    (<a2> ^handle <rname>)
    (<o> ^action <a>)
    (<a> ^handle <name>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^verb-structure <va2> +)
    (<va2> ^1 <va> +)
    (<va2> ^2 <vab> +)
    (<va2> ^3 <vac> +)
    (<va> ^verb-name <name> +)
    (<va> ^verb-prep <rname> +)
    (<va> ^1 <pa> +)
    (<va> ^2 <pa2> +)
    (<a> ^formatted true +)
    (<vab> ^verb-name <name> +)
    (<vab> ^verb-prep <rnameb> +)
    (<vab> ^1 <pab> +)
    (<vab> ^2 <pa2b> +)
    (<vac> ^verb-name <name> +)
    (<vac> ^verb-prep <rnamec> +)
    (<vac> ^1 <pac> +)
    (<vac> ^2 <pa2c> +)
}

sp {convert-parsed-format*apply*handle-action*2verbs
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> -^arg1c <a*1>)
    (<o> ^name handle-action)
    (<o> ^arg2b <a2b>)
    (<o> ^arg1b <a1b>)
    (<a1b> ^parameter-index <pab>)
    (<s> ^nlp-set <nps>)
    (<nps> ^verb-structure <va2>)
    (<a2b> ^2 <obj2b>)
    (<obj2b> ^parameter-index <pa2b>)
    (<o> ^arg2 <a2>)
    (<a2> ^2 <obj2>)
    (<obj2> ^parameter-index <pa2>)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <pa>)
    (<a2b> ^handle <rnameb>)
    (<a2> ^handle <rname>)
    (<o> ^action <a>)
    (<a> ^handle <name>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^verb-structure <va2> +)
    (<va2> ^1 <va> +)
    (<va2> ^2 <vab> +)
    (<va> ^verb-name <name> +)
    (<va> ^verb-prep <rname> +)
    (<va> ^1 <pa> +)
    (<va> ^2 <pa2> +)
    (<a> ^formatted true +)
    (<vab> ^verb-name <name> +)
    (<vab> ^verb-prep <rnameb> +)
    (<vab> ^1 <pab> +)
    (<vab> ^2 <pa2b> +)
}

sp {convert-parsed-format*apply*handle-action*first-argof
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> -^arg1b <a*1>)
    (<o> ^name handle-action)
    (<o> ^arg1 <a1>)
    (<a1> -^parameter-index <p*1>)
    (<a1> ^formatted <f*1>)
    (<s> ^action-count <an>)
    (<s> ^nlp-set <nps>)
    (<nps> ^verb-structure <va2>)
    (<f*1> ^parameter <p*2>)
    (<o> ^arg2 <a2>)
    (<a2> ^2 <obj2>)
    (<obj2> ^parameter-index <pa2>)
    (<a2> ^handle <rname>)
    (<o> ^action <a>)
    (<a> ^handle <name>)
    (<p*2> ^1 <v*1>)
    (<v*1> ^param-id <pa>)
    (<s> ^superstate <ss>)
    -->
    (<s> ^action-count <an> -)
    (<s> ^action-count (+ <an> 1) +)
    (<ss> ^verb-structure <va2> +)
    (<va2> ^<an> <va> +)
    (<va> ^verb-name <name> +)
    (<va> ^verb-prep <rname> +)
    (<va> ^1 <pa> +)
    (<va> ^2 <pa2> +)
    (<a> ^formatted true +)
}

sp {convert-parsed-format*apply*handle-action
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> -^arg1b <a*1>)
    (<o> ^name handle-action)
    (<s> ^action-count <an>)
    (<s> ^nlp-set <nps>)
    (<nps> ^verb-structure <va2>)
    (<o> ^arg2 <a2>)
    (<a2> ^2 <obj2>)
    (<obj2> ^parameter-index <pa2>)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <pa>)
    (<a2> ^handle <rname>)
    (<o> ^action <a>)
    (<a> ^handle <name>)
    (<s> ^superstate <ss>)
    -->
    (<s> ^action-count <an> -)
    (<s> ^action-count (+ <an> 1) +)
    (<ss> ^verb-structure <va2> +)
    (<va2> ^<an> <va> +)
    (<va> ^verb-name <name> +)
    (<va> ^verb-prep <rname> +)
    (<va> ^1 <pa> +)
    (<va> ^2 <pa2> +)
    (<a> ^formatted true +)
}

sp {convert-parsed-format*apply*handle-action*one-arg
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> -^arg2 <a*1>)
    (<o> ^name handle-action)
    (<s> ^nlp-set <nps>)
    (<nps> ^verb-structure <va>)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <pa>)
    (<o> ^action <a>)
    (<a> ^handle <name>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^verb-structure <va> +)
    (<va> ^1 <va1> +)
    (<va1> ^verb-name <name> +)
    (<va1> ^verb-prep <name> +)
    (<va1> ^1 <pa> +)
    (<a> ^formatted true +)
}

sp {convert-parsed-format*propose*handle-action*one-arg
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> -^arg2 <a*1>)
    (<c> ^action <a>)
    (<a> -^handle is1)
    (<a> -^formatted <f*1>)
    (<c> ^arg1 <a1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-action +)
    (<o> ^action <a> +)
    (<o> ^arg1 <a1> +)
}

sp {convert-parsed-format*propose*handle-action*2actions*1arg3
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^arg2 <a2>)
    (<c> -^arg2 { <> <a2> <a*1> })
    (<c> ^action <a>)
    (<a> -^formatted <f*1>)
    (<c> ^arg1 <a1c>)
    (<c> ^arg1 { > <a1c> <a1b> })
    (<c> ^arg1 { > <a1b> <a1> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-action +)
    (<o> ^action <a> +)
    (<o> ^arg1 <a1b> +)
    (<o> ^arg2 <a2> +)
    (<o> ^arg1b <a1> +)
    (<o> ^arg2b <a2> +)
    (<o> ^arg1c <a1c> +)
    (<o> ^arg2c <a2> +)
}

sp {convert-parsed-format*propose*handle-action*2actions*1arg2
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^arg2 <a2>)
    (<c> -^arg2 { <> <a2> <a*1> })
    (<c> ^action <a>)
    (<a> -^formatted <f*1>)
    (<c> ^arg1 <a1b>)
    (<c> ^arg1 { > <a1b> <a1> })
    (<c> -^arg1 { <> <a1b> <> <a1> <a1c> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-action +)
    (<o> ^action <a> +)
    (<o> ^arg1 <a1b> +)
    (<o> ^arg2 <a2> +)
    (<o> ^arg1b <a1> +)
    (<o> ^arg2b <a2> +)
}

sp {convert-parsed-format*propose*handle-action*2actions
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^action <a>)
    (<a> -^formatted <f*1>)
    (<c> ^arg2 <a2b>)
    (<c> ^arg2 { > <a2b> <a2> })
    (<c> ^arg1 <a1b>)
    (<c> ^arg1 { > <a1b> <a1> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-action +)
    (<o> ^action <a> +)
    (<o> ^arg1 <a1b> +)
    (<o> ^arg2 <a2b> +)
    (<o> ^arg1b <a1> +)
    (<o> ^arg2b <a2> +)
}

sp {convert-parsed-format*propose*handle-action*2clause
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^action <a>)
    (<a> -^formatted <f*1>)
    (<s> ^clause { > <c> <c2> })
    (<c2> ^arg2 <a2b>)
    (<c> ^arg2 <a2>)
    (<c2> ^arg1 <a1b>)
    (<c> ^arg1 <a1>)
    (<c2> ^action <af>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-action +)
    (<o> ^action <a> +)
    (<o> ^arg1 <a1b> +)
    (<o> ^arg2 <a2b> +)
    (<o> ^arg1b <a1> +)
    (<o> ^arg2b <a2> +)
}

sp {convert-parsed-format*apply*handle-pref-action2*consider
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^consider 2)
    (<o> ^name handle-pref-action)
    (<o> ^arg2b <a4>)
    (<a4> ^item-type predicate)
    (<o> ^arg2 <a2>)
    (<a2> ^item-type predicate)
    (<o> ^arg1b <a3>)
    (<a3> ^parameter-index <id3>)
    (<a3> ^formatted <p3>)
    (<p3> ^rtype <rtype3>)
    (<o> ^action2 <c2>)
    (<a4> ^2 <a44>)
    (<a44> ^parameter-index <id4>)
    (<a44> ^formatted <p4>)
    (<p4> ^rtype <rtype4>)
    (<a2> ^2 <a22>)
    (<a22> ^parameter-index <id2>)
    (<a22> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <id>)
    (<a1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<a4> ^handle <prep2>)
    (<a2> ^handle <prep>)
    (<c2> ^handle <name2>)
    (<o> ^action <c>)
    (<c> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^consider <n12> +)
    (<s> ^nlp <n> +)
    (<s> ^nlp <n2> +)
    (<n12> ^1 <n> +)
    (<n12> ^2 <n2> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute action +)
    (<n> ^rtype <rtype> +)
    (<n> ^verb <prep> +)
    (<n2> ^name <name2> +)
    (<n2> ^args <ab> +)
    (<n2> ^parameter <parab> +)
    (<n2> ^type concept +)
    (<n2> ^attribute action +)
    (<n2> ^rtype <rtype3> +)
    (<n2> ^verb <prep2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
    (<parab> ^1 <para3> +)
    (<parab> ^2 <para4> +)
    (<para3> ^param-id <id3> +)
    (<para3> ^type <rtype3> +)
    (<para4> ^param-id <id4> +)
    (<para4> ^type <rtype4> +)
}

sp {convert-parsed-format*apply*handle-pref-action*consider
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^consider single)
    (<o> ^name handle-pref-action)
    (<o> ^arg2 <a2>)
    (<a2> ^item-type predicate)
    (<a2> ^2 <a22>)
    (<a22> ^parameter-index <id2>)
    (<a22> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <id>)
    (<a1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<a2> ^handle <prep>)
    (<o> ^action <c>)
    (<c> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^consider <n12> +)
    (<s> ^nlp <n> +)
    (<n12> ^1 <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute action +)
    (<n> ^rtype <rtype> +)
    (<n> ^verb <prep> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*propose*handle-pref-action*consider
    (state <s> ^name convert-parsed-format)
    (<s> ^pref-action <c>)
    (<c> ^consider single)
    (<c> ^action <a>)
    (<a> -^formatted <f*1>)
    (<c> ^arg2 <a2>)
    (<c> ^arg1 <a1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-pref-action +)
    (<o> ^action <a> +)
    (<o> ^consider single +)
    (<o> ^arg1 <a1> +)
    (<o> ^arg2 <a2> +)
}

sp {convert-parsed-format*propose*handle-pref-action2*consider
    (state <s> ^name convert-parsed-format)
    (<s> ^pref-action <c>)
    (<c> ^consider 2)
    (<c> ^2 <c2>)
    (<c2> ^arg2 <a4>)
    (<c2> ^arg1 <a3>)
    (<c2> ^action <ab>)
    (<c> ^1 <c1>)
    (<c1> ^action <a>)
    (<a> -^formatted <f*1>)
    (<c1> ^arg2 <a2>)
    (<c1> ^arg1 <a1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-pref-action +)
    (<o> ^action <a> +)
    (<o> ^action2 <ab> +)
    (<o> ^consider 2 +)
    (<o> ^arg1 <a1> +)
    (<o> ^arg2 <a2> +)
    (<o> ^arg1b <a3> +)
    (<o> ^arg2b <a4> +)
}

sp {convert-parsed-format*apply*handle-pref-action2
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^prefer 2)
    (<o> ^name handle-pref-action)
    (<o> ^arg2b <a4>)
    (<a4> ^item-type predicate)
    (<o> ^arg2 <a2>)
    (<a2> ^item-type predicate)
    (<o> ^arg1b <a3>)
    (<a3> ^parameter-index <id3>)
    (<a3> ^formatted <p3>)
    (<p3> ^rtype <rtype3>)
    (<o> ^action2 <c2>)
    (<a4> ^2 <a44>)
    (<a44> ^parameter-index <id4>)
    (<a44> ^formatted <p4>)
    (<p4> ^rtype <rtype4>)
    (<a2> ^2 <a22>)
    (<a22> ^parameter-index <id2>)
    (<a22> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <id>)
    (<a1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<a4> ^handle <prep2>)
    (<a2> ^handle <prep>)
    (<c2> ^handle <name2>)
    (<o> ^action <c>)
    (<c> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^prefer <n12> +)
    (<s> ^nlp <n> +)
    (<s> ^nlp <n2> +)
    (<n12> ^1 <n> +)
    (<n12> ^2 <n2> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute action +)
    (<n> ^rtype <rtype> +)
    (<n> ^verb <prep> +)
    (<n2> ^name <name2> +)
    (<n2> ^args <ab> +)
    (<n2> ^parameter <parab> +)
    (<n2> ^type concept +)
    (<n2> ^attribute action +)
    (<n2> ^rtype <rtype3> +)
    (<n2> ^verb <prep2> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
    (<parab> ^1 <para3> +)
    (<parab> ^2 <para4> +)
    (<para3> ^param-id <id3> +)
    (<para3> ^type <rtype3> +)
    (<para4> ^param-id <id4> +)
    (<para4> ^type <rtype4> +)
}

sp {convert-parsed-format*apply*handle-pref-action*arg1
    (state <s> ^name convert-parsed-format)
    (<s> -^modifier previously)
    (<s> ^operator <o>)
    (<o> -^arg2 <a2>)
    (<o> ^prefer single)
    (<o> ^name handle-pref-action)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <id>)
    (<a1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<o> ^action <c>)
    (<c> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^prefer <n12> +)
    (<s> ^nlp <n> +)
    (<n12> ^1 <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute action +)
    (<n> ^rtype <rtype> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-pref-action*avoid*arg1
    (state <s> ^name convert-parsed-format)
    (<s> -^modifier previously)
    (<s> ^operator <o>)
    (<o> -^arg2 <a2>)
    (<o> ^avoid single)
    (<o> ^name handle-pref-action)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <id>)
    (<a1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<o> ^action <c>)
    (<c> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^avoid <n12> +)
    (<s> ^nlp <n> +)
    (<n12> ^1 <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute action +)
    (<n> ^rtype <rtype> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-pref-action*avoid*arg1*previously
    (state <s> ^modifier previously)
    (<s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> -^arg2 <a2>)
    (<o> ^avoid single)
    (<o> ^name handle-pref-action)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <id>)
    (<a1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<o> ^action <c>)
    (<c> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^avoid <n12> +)
    (<n12> ^1 <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute action +)
    (<n> ^rtype <rtype> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-pref-action*arg1*previously
    (state <s> ^modifier previously)
    (<s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> -^arg2 <a2>)
    (<o> ^prefer single)
    (<o> ^name handle-pref-action)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <id>)
    (<a1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<o> ^action <c>)
    (<c> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^prefer <n12> +)
    (<n12> ^1 <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute action +)
    (<n> ^rtype <rtype> +)
    (<para> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
}

sp {convert-parsed-format*apply*handle-pref-action*avoid
    (state <s> ^name convert-parsed-format)
    (<s> -^modifier previously)
    (<s> ^operator <o>)
    (<o> ^avoid single)
    (<o> ^name handle-pref-action)
    (<o> ^arg2 <a2>)
    (<a2> ^item-type predicate)
    (<a2> ^2 <a22>)
    (<a22> ^parameter-index <id2>)
    (<a22> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <id>)
    (<a1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<a2> ^handle <prep>)
    (<o> ^action <c>)
    (<c> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^avoid <n12> +)
    (<s> ^nlp <n> +)
    (<n12> ^1 <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute action +)
    (<n> ^rtype <rtype> +)
    (<n> ^verb <prep> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*apply*handle-pref-action
    (state <s> ^name convert-parsed-format)
    (<s> -^modifier previously)
    (<s> ^operator <o>)
    (<o> ^prefer single)
    (<o> ^name handle-pref-action)
    (<o> ^arg2 <a2>)
    (<a2> ^item-type predicate)
    (<a2> ^2 <a22>)
    (<a22> ^parameter-index <id2>)
    (<a22> ^formatted <p2>)
    (<p2> ^rtype <rtype2>)
    (<o> ^arg1 <a1>)
    (<a1> ^parameter-index <id>)
    (<a1> ^formatted <p>)
    (<p> ^rtype <rtype>)
    (<a2> ^handle <prep>)
    (<o> ^action <c>)
    (<c> ^handle <name>)
    -->
    (<c> ^formatted true +)
    (<s> ^prefer <n12> +)
    (<s> ^nlp <n> +)
    (<n12> ^1 <n> +)
    (<n> ^name <name> +)
    (<n> ^args <a> +)
    (<n> ^parameter <para> +)
    (<n> ^type concept +)
    (<n> ^attribute action +)
    (<n> ^rtype <rtype> +)
    (<n> ^verb <prep> +)
    (<para> ^1 <para1> +)
    (<para> ^2 <para2> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type <rtype> +)
    (<para2> ^param-id <id2> +)
    (<para2> ^type <rtype2> +)
}

sp {convert-parsed-format*propose*handle-pref-action*arg1
    (state <s> ^name convert-parsed-format)
    (<s> ^pref-action <c>)
    (<c> -^arg2 <a2>)
    (<c> ^prefer single)
    (<c> ^action <a>)
    (<a> -^formatted <f*1>)
    (<c> ^arg1 <a1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-pref-action +)
    (<o> ^action <a> +)
    (<o> ^prefer single +)
    (<o> ^arg1 <a1> +)
}

sp {convert-parsed-format*propose*handle-pref-action*avoid*arg1
    (state <s> ^name convert-parsed-format)
    (<s> ^pref-action <c>)
    (<c> -^arg2 <a2>)
    (<c> ^avoid single)
    (<c> ^action <a>)
    (<a> -^formatted <f*1>)
    (<c> ^arg1 <a1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-pref-action +)
    (<o> ^action <a> +)
    (<o> ^avoid single +)
    (<o> ^arg1 <a1> +)
}

sp {convert-parsed-format*propose*handle-pref-action*avoid
    (state <s> ^name convert-parsed-format)
    (<s> ^pref-action <c>)
    (<c> ^avoid single)
    (<c> ^action <a>)
    (<a> -^formatted <f*1>)
    (<c> ^arg2 <a2>)
    (<c> ^arg1 <a1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-pref-action +)
    (<o> ^action <a> +)
    (<o> ^avoid single +)
    (<o> ^arg1 <a1> +)
    (<o> ^arg2 <a2> +)
}

sp {convert-parsed-format*propose*handle-pref-action
    (state <s> ^name convert-parsed-format)
    (<s> ^pref-action <c>)
    (<c> ^prefer single)
    (<c> ^action <a>)
    (<a> -^formatted <f*1>)
    (<c> ^arg2 <a2>)
    (<c> ^arg1 <a1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-pref-action +)
    (<o> ^action <a> +)
    (<o> ^prefer single +)
    (<o> ^arg1 <a1> +)
    (<o> ^arg2 <a2> +)
}

sp {convert-parsed-format*propose*handle-pref-action2
    (state <s> ^name convert-parsed-format)
    (<s> ^pref-action <c>)
    (<c> ^prefer 2)
    (<c> ^2 <c2>)
    (<c2> ^arg2 <a4>)
    (<c2> ^arg1 <a3>)
    (<c2> ^action <ab>)
    (<c> ^1 <c1>)
    (<c1> ^action <a>)
    (<a> -^formatted <f*1>)
    (<c1> ^arg2 <a2>)
    (<c1> ^arg1 <a1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-pref-action +)
    (<o> ^action <a> +)
    (<o> ^action2 <ab> +)
    (<o> ^prefer 2 +)
    (<o> ^arg1 <a1> +)
    (<o> ^arg2 <a2> +)
    (<o> ^arg1b <a3> +)
    (<o> ^arg2b <a4> +)
}

sp {convert-parsed-format*propose*handle-action
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^arg1 <a1>)
    (<c> -^arg1 { <> <a1> <a3> })
    (<c> ^action <a>)
   -{ (<s> ^clause <c*1>)
      (<c*1> ^action { <> <a> <a4> })
      (<a4> -^handle is1)}
    (<a> -^formatted <f*1>)
    (<c> ^arg2 <a2>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-action +)
    (<o> ^action <a> +)
    (<o> ^arg1 <a1> +)
    (<o> ^arg2 <a2> +)
}

sp {create-object*apply*complete*single*moved
    (state <s> ^complete true)
    (<s> ^name create-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^last-condition <cond>)
    (<s> ^moved <mov>)
    (<s> ^superstate <ss>)
    (<ss> ^operator <o*2>)
    (<o*2> ^parameter <c>)
   -{ (<c> ^predicates <p*2>)
      (<p*2> ^number { <> singular <n*1> })
      (<c> ^relation <r*1>)}
   -{ (<c> ^predicates <p*1>)
      (<p*1> ^multiple true)}
    -->
    (<ss> ^moved <mov> +)
    (<c> ^formatted <cond> +)
    (<cond> ^rtype single +)
}

sp {create-object*apply*complete*single
    (state <s> ^complete true)
    (<s> -^moved <m*1>)
    (<s> ^name create-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^last-condition <cond>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*2>)
    (<o*2> ^parameter <c>)
   -{ (<c> ^predicates <p*2>)
      (<p*2> ^number { <> singular <n*1> })
      (<c> ^relation <r*1>)}
   -{ (<c> ^predicates <p*1>)
      (<p*1> ^multiple true)}
    -->
    (<c> ^formatted <cond> +)
    (<cond> ^rtype single +)
}

sp {create-object*apply*complete*hasnumber*with*relation
    (state <s> ^complete true)
    (<s> ^name create-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^last-condition <cond>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*2>)
    (<o*2> ^parameter <c>)
   -{ (<c> ^predicates <p*1>)
      (<p*1> ^multiple true)}
    (<c> ^predicates <p*2>)
    (<p*2> ^number { <> singular <n*1> })
    (<c> ^relation <r>)
    (<r> -^handle between)
    -->
    (<c> ^formatted <cond> +)
    (<c> ^rtype set +)
    (<cond> ^rtype single +)
}

sp {create-object*apply*complete*multiple*with*relation
    (state <s> ^complete true)
    (<s> ^name create-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^last-condition <cond>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*2>)
    (<o*2> ^parameter <c>)
    (<c> ^predicates <p*1>)
    (<p*1> ^multiple true)
    (<c> ^relation <r>)
    (<r> -^handle between)
    -->
    (<c> ^formatted <cond> +)
    (<c> ^rtype set +)
    (<cond> ^rtype single +)
}

sp {create-object*apply*complete*multiple
    (state <s> ^complete true)
    (<s> ^name create-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^last-condition <cond>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*2>)
    (<o*2> ^parameter <c>)
   -{ (<c> ^relation <r>)
      (<r> -^handle between)}
    (<c> ^predicates <p*1>)
    (<p*1> ^multiple true)
    -->
    (<c> ^formatted <cond> +)
    (<cond> ^rtype set +)
}

sp {create-object*apply*complete*all-parameter*set
    (state <s> ^name create-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^last-condition <cond>)
    (<cond> ^parameter <p>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*2>)
    (<o*2> ^parameter <c>)
    (<c> ^parameter-index <id>)
    (<c> ^predicates <p*1>)
    (<p*1> ^quantified <q*1>)
    (<q*1> ^handle all)
    -->
    (<p> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type set +)
}

sp {create-object*apply*complete*not-indef-parameter*set
    (state <s> ^name create-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^last-condition <cond>)
    (<cond> ^parameter <p>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*2>)
    (<o*2> ^parameter <c>)
    (<c> -^relation <r*1>)
    (<c> ^parameter-index <id>)
    (<c> ^predicates <p*1>)
    (<p*1> ^number { <> singular <n*1> })
    -->
    (<p> ^1 <para1> +)
    (<para1> ^param-id <id> +)
    (<para1> ^type set +)
}

sp {create-object*apply*complete*remove-rtype
    (state <s> ^name create-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^last-condition <cond>)
    (<cond> ^rtype <rtype>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*2>)
    (<o*2> ^parameter <c>)
    -->
    (<s> ^complete true +)
    (<cond> ^rtype <rtype> -)
}

sp {create-object*propose*complete
    (state <s> ^name create-object)
    (<s> ^last-condition <co>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {create-object*elaborate*condition*learned-predicate*negative
    (state <s> ^name create-object)
    (<s> ^property-modifier <m>)
    (<m> ^handle negation)
    (<s> ^operator <o>)
    (<o> -^value moved)
    (<o> ^name unary-predicate)
    (<o> ^attribute property)
    (<m> ^modifying <m*1>)
    (<m*1> ^handle <val>)
    (<o> ^value <val>)
    (<s> ^last-condition <cond>)
    (<s> ^parameter <c>)
    -->
    (<s> ^condition <co> +)
    (<co> ^name <val> +)
    (<co> ^parameter <p> +)
    (<co> ^type concept +)
    (<co> ^attribute predicate +)
    (<co> ^args <a> +)
    (<co> ^rtype single +)
    (<co> ^negative true +)
    (<a> ^1 <cond> +)
    (<s> ^last-condition <cond> -)
    (<s> ^last-condition <co> +)
}

sp {create-object*elaborate*condition*learned-predicate
    (state <s> ^name create-object)
    (<s> ^operator <o>)
    (<o> -^value moved)
    (<o> ^name unary-predicate)
    (<o> ^attribute property)
    (<o> ^value <val>)
   -{ (<s> ^property-modifier <m>)
      (<m> ^handle negation)
      (<m> ^modifying <m*1>)
      (<m*1> ^handle <val>)}
    (<s> ^last-condition <cond>)
    (<s> ^parameter <c>)
    -->
    (<s> ^condition <co> +)
    (<co> ^name <val> +)
    (<co> ^parameter <p> +)
    (<co> ^type concept +)
    (<co> ^attribute predicate +)
    (<co> ^args <a> +)
    (<co> ^rtype single +)
    (<a> ^1 <cond> +)
    (<s> ^last-condition <cond> -)
    (<s> ^last-condition <co> +)
}

sp {create-object*elaborate*condition*learned-predicate*moved
    (state <s> ^name create-object)
   -{ (<s> ^property-modifier <m>)
      (<m> ^handle negation)
      (<m> ^modifying <m*1>)
      (<m*1> ^handle <val>)}
    (<s> ^operator <o>)
    (<o> ^value moved)
    (<o> ^name unary-predicate)
    (<o> ^attribute property)
    (<s> ^last-condition <cond>)
    (<s> ^parameter <c>)
    -->
    (<s> ^condition <co> +)
    (<s> ^moved <co> +)
    (<co> ^name move1 +)
    (<co> ^args <a> +)
    (<co> ^parameter <para> +)
    (<co> ^type concept +)
    (<co> ^attribute action +)
    (<co> ^rtype single +)
    (<s> ^last-condition <cond> -)
    (<s> ^last-condition <co> +)
}

sp {create-object*elaborate*condition*relation*negative
    (state <s> ^name create-object)
    (<s> ^property-modifier <m>)
    (<m> ^handle negation)
    (<s> ^operator <o>)
    (<o> ^name unary-predicate)
    (<o> ^attribute relation)
    (<m> ^modifying <m*1>)
    (<m*1> ^handle <val>)
    (<o> ^value <val>)
    (<s> ^last-condition <cond>)
    (<s> ^parameter <c>)
    -->
    (<s> ^condition <co> +)
    (<co> ^name <val> +)
    (<co> ^parameter <p> +)
    (<co> ^type state-pair +)
    (<co> ^attribute preposition +)
    (<co> ^args <a> +)
    (<co> ^rtype set +)
    (<co> ^negative true +)
    (<a> ^1 <cond> +)
    (<s> ^last-condition <cond> -)
    (<s> ^last-condition <co> +)
}

sp {create-object*elaborate*condition*relation
    (state <s> ^name create-object)
    (<s> ^operator <o>)
    (<o> ^name unary-predicate)
    (<o> ^attribute relation)
    (<o> ^value <val>)
   -{ (<s> ^property-modifier <m>)
      (<m> ^handle negation)
      (<m> ^modifying <m*1>)
      (<m*1> ^handle <val>)}
    (<s> ^last-condition <cond>)
    (<s> ^parameter <c>)
    -->
    (<s> ^condition <co> +)
    (<co> ^name <val> +)
    (<co> ^parameter <p> +)
    (<co> ^type state-pair +)
    (<co> ^attribute preposition +)
    (<co> ^args <a> +)
    (<co> ^rtype set +)
    (<a> ^1 <cond> +)
    (<s> ^last-condition <cond> -)
    (<s> ^last-condition <co> +)
}

sp {create-object*elaborate*condition*negative
    (state <s> ^name create-object)
    (<s> ^property-modifier <m>)
    (<m> ^handle negation)
    (<s> ^operator <o>)
    (<o> ^name unary-predicate)
    (<m> ^modifying <m*1>)
    (<m*1> ^handle <val>)
    (<o> ^value <val>)
    (<s> ^last-condition <cond>)
    (<s> ^parameter <c>)
    (<o> ^attribute { << color size shape name >> <att> })
    -->
    (<s> ^condition <co> +)
    (<co> ^name <val> +)
    (<co> ^parameter <p> +)
    (<co> ^type attribute +)
    (<co> ^attribute <att> +)
    (<co> ^args <a> +)
    (<co> ^rtype single +)
    (<co> ^negative true +)
    (<a> ^1 <cond> +)
    (<s> ^last-condition <cond> -)
    (<s> ^last-condition <co> +)
}

sp {create-object*elaborate*condition
    (state <s> ^name create-object)
    (<s> ^operator <o>)
    (<o> ^name unary-predicate)
    (<o> ^value <val>)
   -{ (<s> ^property-modifier <m>)
      (<m> ^handle negation)
      (<m> ^modifying <m*1>)
      (<m*1> ^handle <val>)}
    (<s> ^last-condition <cond>)
    (<s> ^parameter <c>)
    (<o> ^attribute { << color size shape name >> <att> })
    -->
    (<s> ^condition <co> +)
    (<co> ^name <val> +)
    (<co> ^parameter <p> +)
    (<co> ^type attribute +)
    (<co> ^attribute <att> +)
    (<co> ^args <a> +)
    (<co> ^rtype single +)
    (<a> ^1 <cond> +)
    (<s> ^last-condition <cond> -)
    (<s> ^last-condition <co> +)
}

sp {preference*create-object*prefer*unary-predicate*over*complete
    (state <s> ^name create-object)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o> +)
    (<o> ^name unary-predicate)
    -->
    (<s> ^operator <o> > <o2>)
}

sp {preference*create-object*dispref*unary-predicate
    (state <s> ^name create-object)
    (<s> ^operator <o> +)
    (<o> ^name unary-predicate)
    (<o> ^attribute { << relation property >> <a*1> })
    -->
    (<s> ^operator <o> <)
}

sp {create-object*propose*unary-predicate*linear
    (state <s> ^name create-object)
   -{ (<s> ^condition <c*1>)
      (<c*1> ^name linear)}
    (<s> ^parameter <c>)
    (<c> ^predicates <p>)
    (<p> ^property linear)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name unary-predicate +)
    (<o> ^attribute relation +)
    (<o> ^value linear +)
}

sp {create-object*propose*unary-predicate
    (state <s> ^name create-object)
    (<s> ^parameter <c>)
    (<c> ^predicates <p>)
    (<p>
          ^{ <> category <> quantified <> property-modifier <> dialog-object <> value <> handle <> type <> visible <> visibility <> multiple <> number <att> } { <> linear <val> })
   -{ (<p> ^<att> { << moved >> <val> })
      (<s> ^moved <mov>)}
   -{ (<s> ^condition <c*1>)
      (<c*1> ^name <val>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name unary-predicate +)
    (<o> ^attribute <att> +)
    (<o> ^value <val> +)
}

sp {create-object*elaborate*cateogy*object
    :o-support
    (state <s> ^name create-object)
    (<s> ^parameter <p*1>)
    (<p*1> ^predicates <c>)
    (<c> ^category { << object >> <cat> })
    -->
    (<s> ^condition <c1> +)
    (<s> ^last-condition <c1> +)
    (<c1> ^name <cat> +)
    (<c1> ^parameter <p> +)
    (<c1> ^type attribute +)
    (<c1> ^attribute primitive +)
    (<c1> ^rtype single +)
}

sp {create-object*elaborate*previously
    :o-support
    (state <s> ^name create-object)
    (<s> ^property-modifier <mod>)
    (<mod> ^handle previously)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^modifier previously +)
}

sp {create-object*elaborate*property-modifier
    :o-support
    (state <s> ^name create-object)
    (<s> ^parameter <p*1>)
    (<p*1> ^predicates <p>)
    (<p> ^property-modifier <mod>)
    -->
    (<s> ^property-modifier <mod> +)
}

sp {create-object*elaborate*category
    :o-support
    (state <s> ^name create-object)
    (<s> ^parameter <p*1>)
    (<p*1> ^predicates <c>)
    (<c> ^category { <> object <cat> })
    -->
    (<s> ^condition <c1> +)
    (<s> ^last-condition <c1> +)
    (<c1> ^name <cat> +)
    (<c1> ^parameter <p> +)
    (<c1> ^type attribute +)
    (<c1> ^attribute category +)
    (<c1> ^rtype single +)
}

sp {create-object*elaborate*parameter
    (state <s> ^name create-object)
    (<s> ^superstate <s*3>)
    (<s*3> ^operator <o*1>)
    (<o*1> ^parameter <c>)
   -{ (<s> ^superstate <s*2>)
      (<s*2> ^input-object-2 <c>)}
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^input-object-1 <c>)}
    -->
    (<s> ^parameter <c> +)
}

sp {create-object*elaborate*parameter*input-object
    (state <s> ^name create-object)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^parameter <c>)
    (<c> ^parameter-index <oc>)
    (<s*1> ^{ << input-object-2 input-object-1 >> <a*1> } <c>)
    -->
    (<s> ^condition <co> +)
    (<s> ^last-condition <co> +)
    (<co> ^args <A67> +)
    (<co> ^attribute input-arg +)
    (<co> ^name object +)
    (<co> ^negative false +)
    (<co> ^parameter <P628> +)
    (<co> ^rtype single +)
    (<P628> ^1 <para> +)
    (<para> ^param-id <oc> +)
}

sp {convert-parsed-format*apply*create-object*increment-object-count
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o>)
    (<o> ^name create-object)
    (<o> ^parameter <c>)
    (<c> -^parameter-index <p*1>)
    (<s> -^indef <c>)
    (<s> ^object-count <oc>)
    -->
    (<c> ^parameter-index <oc> +)
    (<s> ^object-count (+ 1 <oc>) +)
    (<s> ^object-count <oc> -)
}

sp {convert-parsed-format*propose*create-object
    (state <s> ^name convert-parsed-format)
    (<s> ^parameter <c>)
    (<c> -^formatted <f*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name create-object +)
    (<o> ^parameter <c> +)
}

sp {prefer*create-object*over*create-object*input-object
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name create-object)
    (<o2> ^parameter <p2>)
    (<s> ^input-object-2 <p2>)
    (<s> ^operator <o1> +)
    (<o1> ^name create-object)
    (<o1> ^parameter <p>)
    (<s> ^{ << output-object-1 input-object-1 >> <a*1> } <p>)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*create-object*over*input-object
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o1> +)
    (<o1> ^name create-object)
    (<o1> ^parameter <p>)
    (<s> ^{ << output-object-1 input-object-2 input-object-1 >> <a*1> } <p>)
    -->
    (<s> ^operator <o1> >)
}

sp {prefer*create-object*over*handle-predicate*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name handle-predicate)
    (<s> ^operator <o1> +)
    (<o1> ^name create-object)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*create-object*over*handle-pref-action*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name handle-pref-action)
    (<s> ^operator <o1> +)
    (<o1> ^name create-object)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*create-object*over*handle-action*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name handle-action)
    (<s> ^operator <o1> +)
    (<o1> ^name create-object)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*create-object*over*handle-clause*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name handle-clause)
    (<s> ^operator <o1> +)
    (<o1> ^name create-object)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-predicate*over*handle-property-predicate*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name handle-property-predicate)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-predicate)
    -->
    (<s> ^operator <o2> > <o1>)
}

sp {prefer*create-object*over*handle-property-predicate*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name handle-property-predicate)
    (<s> ^operator <o1> +)
    (<o1> ^name create-object)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-property-predicate*over*complete*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-property-predicate)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-clause*over*handle-property-predicate*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name handle-clause)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-property-predicate)
    -->
    (<s> ^operator <o2> > <o1>)
}

sp {prefer*handle-pref-action*over*complete*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-pref-action)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-action*over*complete*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-action)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-predicate*over*handle-predicate*contains*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name handle-predicate)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-predicate)
    (<o1> ^predicate <p>)
    (<o2> ^predicate <p*1>)
    (<p*1> ^{ << 1 2 >> <num> } <p>)
    -->
    (<s> ^operator <o2> < <o1>)
}

sp {prefer*handle-clause*over*handle-clause-clause*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name handle-clause)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-clause)
    (<o2> ^clause <c*1>)
    (<o1> ^parameter <p*1>)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-clause*over*handle-predicate*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name handle-predicate)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-clause)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*of*handle-predicate*over*handle-predicate
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
   -{ (<o2> ^predicate <p*2>)
      (<p*2> ^handle of1)}
    (<o2> ^name handle-predicate)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-predicate)
    (<o1> ^predicate <p*1>)
    (<p*1> ^handle of1)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-predicate*over*complete*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-predicate)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*handle-clause*over*complete*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name complete)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-clause)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {prefer*create-object*lower*hanlde*convert-parsed-format
    (state <s> ^name convert-parsed-format)
    (<s> ^operator <o2> +)
    (<o2> ^name create-object)
    (<o2> ^parameter <p>)
    (<s> -^output-object-1 <p>)
    (<s> -^input-object-2 <p>)
    (<s> -^input-object-1 <p>)
    (<s> ^operator <o1> +)
    (<o1> ^name create-object)
    (<o1> ^parameter <p*1>)
    (<p> ^handle <h2>)
    (<p*1> ^handle { < <h2> <h1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {convert-parsed-format*elaborate*arg2*parameter*indef
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^predicate <p*1>)
    (<p*1> ^2 <p>)
   -{ (<s> ^clause { <> <c> <c4> })
      (<c4> ^arg1 <p>)
      (<c4> ^action <act>)}
   -{ (<s> ^clause { <> <c> <c4> })
      (<c4> ^arg2 <a*3>)
      (<a*3> ^2 <p>)
      (<c4> ^action <act>)}
   -{ (<s> ^clause { <> <c> <c3> })
      (<c3> ^predicate <p*5>)
      (<p*5> ^3 <p>)}
   -{ (<s> ^clause { <> <c> <c3> })
      (<c3> ^predicate <p*4>)
      (<p*4> ^2 <p>)}
   -{ (<p> ^relation <rr>)
      (<rr> ^2 <v*1>)}
   -{ (<s> ^parameter <pp>)
      (<pp> ^relation <r>)
      (<r> ^3 <p>)}
   -{ (<s> ^parameter <pp>)
      (<pp> ^relation <r>)
      (<r> ^2 <p>)}
   -{ (<s> ^clause <c2>)
      (<c2> ^{ << arg1 arg2 >> <a*2> } <p>)}
   -{ (<p> ^predicates <p*3>)
      (<p*3> ^number <n*1>)}
    (<s> -^{ << input-object-1 input-object-2 output-object-1 >> <a*1> } <p>)
    (<p> ^item-type <type>)
    (<p> ^predicates <p*2>)
    (<p*2> ^category <type>)
    -->
    (<s> ^indef <p> +)
}

sp {convert-parsed-format*elaborate*arg2*parameter
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^predicate <p*1>)
    (<p*1> ^2 <p>)
    (<p> ^predicates <p*2>)
    (<p*2> ^category <type>)
    -->
    (<s> ^parameter <p> +)
}

sp {convert-parsed-format*elaborate*parameter*relation*parameter
    (state <s> ^name convert-parsed-format)
    (<s> ^parameter <p>)
    (<p> ^relation <r>)
    (<r> ^{ << 2 3 >> <a*1> } <pp>)
    (<pp> ^predicates <p*1>)
    (<p*1> ^category <type>)
    -->
    (<s> ^parameter <pp> +)
}

sp {convert-parsed-format*elaborate*arg1*of-concept*parameter
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^{ << arg1 arg2 >> <a*1> } <a>)
    (<a> ^handle of1)
    (<a> ^2 <p>)
    -->
    (<s> ^predicate <a> +)
}

sp {convert-parsed-format*elaborate*arg1*relation*parameter
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^{ << arg1 arg2 >> <a*1> } <a>)
    (<a> ^2 <p>)
    (<p> ^predicates <p*1>)
    (<p*1> ^category <type>)
    -->
    (<s> ^parameter <p> +)
}

sp {convert-parsed-format*elaborate*predicate-objects*more
    (state <s> ^name convert-parsed-format)
    (<s> ^predicate <c>)
    (<c> ^handle more-than1)
    (<c> ^2 <p2>)
    (<c> ^1 <p1>)
    -->
    (<s> ^predicate <p1> +)
    (<s> ^predicate <p2> +)
}

sp {convert-parsed-format*elaborate*predicate-objects*of*second
    (state <s> ^name convert-parsed-format)
    (<s> ^predicate <c>)
    (<c> ^handle of1)
    (<c> ^2 <r>)
    (<r> ^2 <pp>)
    (<pp> ^predicates <p*1>)
    (<r> ^handle <name>)
    (<p*1> ^category <type>)
    -->
    (<s> ^parameter <pp> +)
}

sp {convert-parsed-format*elaborate*predicate-objects*of*first
    (state <s> ^name convert-parsed-format)
    (<s> ^predicate <c>)
    (<c> ^handle <name>)
    (<c> ^relation <r>)
    (<r> ^handle of1)
    (<r> ^2 <pp>)
    (<pp> ^predicates <p*2>)
    (<p*2> ^category <type>)
    (<c> ^property <p*1>)
    -->
    (<s> ^parameter <pp> +)
}

sp {convert-parsed-format*elaborate*predicate-objects
    (state <s> ^name convert-parsed-format)
    (<s> ^predicate <c>)
    (<c> ^handle of1)
    (<c> ^2 <p2>)
    (<p2> ^2 <pp>)
    (<pp> ^predicates <p*1>)
    (<p*1> ^category <type>)
    -->
    (<s> ^parameter <pp> +)
}

sp {convert-parsed-format*elaborate*predicate*number*attribute
    (state <s> ^name convert-parsed-format)
    (<s> ^parameter <c>)
    (<c> ^parameter-index <id2>)
    (<c> ^formatted <f2>)
    (<c> ^predicates <p*1>)
    (<p*1> ^number <num>)
    -->
    (<s> ^predicate <p> +)
    (<s> ^predicate <pp> +)
    (<p> ^property <p*2> +)
    (<p*2> ^handle number +)
    (<p> ^handle <num> +)
    (<p> ^equal-to <pp> +)
    (<pp> ^handle of1 +)
    (<pp> ^2 <p2> +)
    (<pp> ^equal-to <p> +)
    (<p2> ^2 <c> +)
    (<p2> ^handle number1 +)
}

sp {convert-parsed-format*elaborate*predicate-is-predicate*more-than
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^arg1 <p>)
    (<p> ^item-type predicate)
    (<c> ^predicate <pp>)
    (<pp> ^item-type predicate)
    (<pp> ^handle more-than1)
    -->
    (<c> ^formatted true +)
    (<s> ^predicate <pp> +)
    (<pp> ^1 <p> +)
}

sp {convert-parsed-format*elaborate*predicate*modifier
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^modifier <m>)
    (<c> ^arg1 <p>)
    (<c> ^predicate <pp>)
    -->
    (<pp> ^modifier <m> +)
}

sp {convert-parsed-format*elaborate*predicate-is-predicate
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^arg1 <p>)
    (<p> -^handle more-than1)
    (<p> ^item-type predicate)
    (<c> ^predicate <pp>)
    (<pp> -^handle more-than1)
    (<pp> ^item-type predicate)
    -->
    (<c> ^formatted true +)
    (<s> ^predicate <p> +)
    (<s> ^predicate <pp> +)
    (<p> ^equal-to <pp> +)
    (<pp> ^equal-to <p> +)
}

sp {convert-parsed-format*elaborate*arg1*parameter
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^{ << arg1 arg2 2 >> <a*1> } <p>)
    (<p> ^predicates <p*1>)
    (<p*1> ^category <type>)
    -->
    (<s> ^parameter <p> +)
}

sp {convert-parsed-format*elaborate*clause*subclause
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^{ << if-subclause subclause then-subclause >> <a*1> } <s1>)
    -->
    (<s> ^clause <s1> +)
}

sp {convert-parsed-format*elaborate*clause*consider2
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^action <a*1>)
    (<a*1> ^handle consider)
    (<c> ^subclause2 <sb2>)
    (<c> ^subclause1 <sb>)
    (<sb2> ^arg2 <a4>)
    (<sb> ^arg2 <a2>)
    (<sb2> ^arg1 <a3>)
    (<sb> ^arg1 <a1>)
    (<sb2> ^action <act2>)
    (<sb> ^action <act>)
    -->
    (<s> ^pref-action <sz> +)
    (<s> ^clause <a2> +)
    (<s> ^clause <a4> +)
    (<s> ^parameter <a1> +)
    (<s> ^parameter <a3> +)
    (<sz> ^consider 2 +)
    (<sz> ^1 <sb> +)
    (<sz> ^2 <sb2> +)
    (<s> ^preference-rule true +)
}

sp {convert-parsed-format*elaborate*clause*prefer2
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> ^action <a*1>)
    (<a*1> ^handle prefer)
    (<c> ^subclause2 <sb2>)
    (<c> ^subclause1 <sb>)
    (<sb2> ^arg2 <a4>)
    (<sb> ^arg2 <a2>)
    (<sb2> ^arg1 <a3>)
    (<sb> ^arg1 <a1>)
    (<sb2> ^action <act2>)
    (<sb> ^action <act>)
    -->
    (<s> ^pref-action <sz> +)
    (<s> ^clause <a2> +)
    (<s> ^clause <a4> +)
    (<s> ^parameter <a1> +)
    (<s> ^parameter <a3> +)
    (<sz> ^prefer 2 +)
    (<sz> ^1 <sb> +)
    (<sz> ^2 <sb2> +)
    (<s> ^preference-rule true +)
}

sp {convert-parsed-format*elaborate*clause*consider1
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> -^subclause2 <s*1>)
    (<c> ^action <a*1>)
    (<a*1> ^handle consider)
    (<c> ^subclause1 <sb>)
    (<sb> ^arg2 <a2>)
    (<sb> ^arg1 <a1>)
    (<sb> ^action <act>)
    -->
    (<s> ^pref-action <sb> +)
    (<s> ^clause <a2> +)
    (<s> ^parameter <a1> +)
    (<sb> ^consider single +)
    (<s> ^preference-rule true +)
}

sp {convert-parsed-format*elaborate*clause*avoid1onearg
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> -^subclause2 <s*1>)
    (<c> ^subclause1 <sb>)
    (<sb> -^arg2 <a*2>)
    (<c> ^action <a*1>)
    (<a*1> ^handle avoid)
    (<sb> ^arg1 <a1>)
    (<sb> ^action <act>)
    -->
    (<s> ^pref-action <sb> +)
    (<s> ^clause <a1> +)
    (<s> ^parameter <a1> +)
    (<sb> ^avoid single +)
    (<s> ^preference-rule true +)
}

sp {convert-parsed-format*elaborate*clause*prefer1onearg
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> -^subclause2 <s*1>)
    (<c> ^subclause1 <sb>)
    (<sb> -^arg2 <a*2>)
    (<c> ^action <a*1>)
    (<a*1> ^handle prefer)
    (<sb> ^arg1 <a1>)
    (<sb> ^action <act>)
    -->
    (<s> ^pref-action <sb> +)
    (<s> ^clause <a1> +)
    (<s> ^parameter <a1> +)
    (<sb> ^prefer single +)
    (<s> ^preference-rule true +)
}

sp {convert-parsed-format*elaborate*clause*avoid1
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> -^subclause2 <s*1>)
    (<c> ^action <a*1>)
    (<a*1> ^handle avoid)
    (<c> ^subclause1 <sb>)
    (<sb> ^arg2 <a2>)
    (<sb> ^arg1 <a1>)
    (<sb> ^action <act>)
    -->
    (<s> ^pref-action <sb> +)
    (<s> ^clause <a2> +)
    (<s> ^parameter <a1> +)
    (<sb> ^avoid single +)
    (<s> ^preference-rule true +)
}

sp {convert-parsed-format*elaborate*clause*prefer1
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c>)
    (<c> -^subclause2 <s*1>)
    (<c> ^action <a*1>)
    (<a*1> ^handle prefer)
    (<c> ^subclause1 <sb>)
    (<sb> ^arg2 <a2>)
    (<sb> ^arg1 <a1>)
    (<sb> ^action <act>)
    -->
    (<s> ^pref-action <sb> +)
    (<s> ^clause <a2> +)
    (<s> ^parameter <a1> +)
    (<sb> ^prefer single +)
    (<s> ^preference-rule true +)
}

sp {convert-parsed-format*elaborate*sentence*subclause
    (state <s> ^name convert-parsed-format)
    (<s> ^sentence <s2>)
    -->
    (<s> ^clause <s2> +)
}

sp {convert-parsed-format*elaborate*object-count
    (state <s> ^name convert-parsed-format)
    -->
    (<s> ^object-count 1 +)
    (<s> ^action-count 1 +)
    (<s> ^nlp-set <nps> +)
    (<nps> ^verb-structure <vs> +)
}

sp {convert-parsed-format*elaborate*input-object-2
    (state <s> ^name convert-parsed-format)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^input-object-2 <np>)
    -->
    (<s> ^input-object-2 <np> +)
}

sp {convert-parsed-format*elaborate*output-object-1
    (state <s> ^name convert-parsed-format)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^output-object-1 <np>)
    -->
    (<s> ^output-object-1 <np> +)
}

sp {convert-parsed-format*elaborate*input-object
    (state <s> ^name convert-parsed-format)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^input-object-1 <np>)
    -->
    (<s> ^input-object-1 <np> +)
}

sp {convert-parsed-format*elaborate*learning-predicate
    (state <s> ^name convert-parsed-format)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learning-predicate <np>)
    (<dc> ^learn-link <ll>)
    -->
    (<s> ^learning-predicate <np> +)
    (<s> ^learn-link <ll> +)
}

sp {convert-parsed-format*elaborate*only-parameter
    (state <s> ^name convert-parsed-format)
    (<s> ^sentence <s*1>)
    (<s*1> ^{ << if-subclause then-subclause subclause >> <a*1> } <c>)
    (<c> ^predicate <p>)
    (<p> ^item-type <type>)
    (<p> ^predicates <p*1>)
    (<p*1> ^category <type>)
    -->
    (<s> ^parameter <p> +)
}

sp {convert-parsed-format*elaborate*agent*opponent*then-clause*two
    :o-support
    (state <s> ^name convert-parsed-format)
    (<s> ^sentence <s*1>)
    (<s> ^nlp-set <nps>)
    (<s*1> ^then-subclause <t*1>)
    (<t*1> ^subclause <s*2>)
    (<s*2> ^agent <a*1>)
    (<a*1> ^predicates <p*1>)
    (<p*1> ^shape opponent1)
    -->
    (<nps> ^opponent true +)
}

sp {convert-parsed-format*elaborate*agent*opponent*then-clause
    :o-support
    (state <s> ^name convert-parsed-format)
    (<s> ^sentence <s*1>)
    (<s> ^nlp-set <nps>)
    (<s*1> ^then-subclause <t*1>)
    (<t*1> ^agent <a*1>)
    (<a*1> ^predicates <p*1>)
    (<p*1> ^shape opponent1)
    -->
    (<nps> ^opponent true +)
}

sp {convert-parsed-format*elaborate*agent*opponent*two
    :o-support
    (state <s> ^name convert-parsed-format)
    (<s> ^clause <c*1>)
    (<s> ^nlp-set <nps>)
    (<c*1> ^agent <a*1>)
    (<a*1> ^predicates <p*1>)
    (<p*1> ^shape opponent1)
    -->
    (<nps> ^opponent true +)
}

sp {convert-parsed-format*elaborate*agent*opponent
    :o-support
    (state <s> ^name convert-parsed-format)
    (<s> ^sentence <s*1>)
    (<s> ^nlp-set <nps>)
    (<s*1> ^agent <a*1>)
    (<a*1> ^predicates <p*1>)
    (<p*1> ^shape opponent1)
    -->
    (<nps> ^opponent true +)
}

sp {convert-parsed-format*elaborate*sentence
    (state <s> ^name convert-parsed-format)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^structure <t>)
    -->
    (<s> ^sentence <t> +)
}

sp {selection*select*success-evaluation-becomes-best-preference*tie*t1778-3
    (state <s1> ^desired <d1>)
   -{ (<s1> ^operator <o*1>)
      (<o*1> ^name evaluate-operator)}
    (<d1> ^predicate <r1>)
    (<r1> ^type relation)
    (<s1> ^operator <o2> +)
    (<o2> ^name initiate-pick-up1)
    (<o2> ^arg1 <a1>)
    (<a1> ^arg-type object)
    (<r1> ^1 <n2>)
    (<a1> ^id <n2>)
    (<n2> ^predicates <p1>)
    (<p1> ^arm-status not-grabbed)
    (<s1> ^problem-space <p3>)
    (<p3> ^action-type composite)
    (<p3> ^name action)
    (<r1> ^2 <n1>)
    (<n1> ^item-type <c1>)
    (<n2> ^item-type <c2>)
    (<r1> ^handle <c3>)
    (<s1> ^top-state <s2>)
    (<s2> ^agent-params <p4>)
    (<p4> ^domain arm)
    (<s1> ^world <n4>)
    (<n4> ^objects <o1>)
    (<n4> ^predicates <p2>)
    (<p2> ^predicate <n3>)
    (<n3> ^handle <c3>)
    (<p3> ^name <c4>)
    (<o2> ^name <c5>)
    (<o1> ^object <n2>)
    (<o1> ^object <n1>)
    -->
    (<s1> ^operator <o2> >)
    (<s1> ^operator <o2> = 1)
}

sp {selection*select*success-evaluation-becomes-best-preference*tie*t1778-1
    (state <s1> ^operator <o2> +)
    (<o2> ^name initiate-put-down1)
    (<o2> ^arg2 <a2>)
    (<a2> ^arg-type predicate)
    (<o2> ^arg1 <a1>)
    (<a1> ^arg-type object)
    (<s1> ^problem-space <p2>)
    (<p2> ^action-type composite)
    (<p2> ^name action)
    (<s1> ^desired <d1>)
    (<d1> ^predicate <n1>)
    (<n1> ^type relation)
    (<n1> ^2 <n2>)
    (<a2> ^2 <n2>)
    (<n1> ^1 <n3>)
    (<a1> ^id <n3>)
    (<n3> ^item-type <c2>)
    (<n2> ^item-type <c3>)
    (<n1> ^handle <c1>)
    (<a2> ^handle <c4>)
    (<s1> ^world <n5>)
    (<n5> ^objects <o1>)
    (<n5> ^predicates <p1>)
    (<p1> ^predicate <n4>)
    (<n4> ^handle <c1>)
    (<p2> ^name <c5>)
    (<o1> ^object <n2>)
    (<o1> ^object <n3>)
    -->
    (<s1> ^operator <o2> >)
    (<s1> ^operator <o2> = 1)
}

sp {learn-desired-elaboration-rule*apply*complete-learn-desired-elaboration-rule*t1069-1
    (state <s1> ^action-context <o5>)
    (<o5> ^action-type composite)
    (<s1> ^superstate <s2>)
    (<s2> ^operator <o5>)
    (<s1> ^problem-space <p3>)
    (<p3> ^name action)
    (<s1> ^action-id <n6>)
    (<n6> ^procedural <p2>)
    (<n6> ^goal <g2>)
    (<g2> ^predicate <g1>)
    (<g2> -^predicate { <> <g1> <pred2> })
    (<g1> ^type relation)
    (<g1> ^2 <o2>)
    (<g1> ^1 <o1>)
    (<g1> ^id <p1>)
    (<p2> ^<c2> <n1>)
    (<n1> ^arg-type object)
    (<n1> ^id <o1>)
    (<o5> ^<c2> <a2>)
    (<a2> ^arg-type object)
    (<a2> ^id <o4>)
    (<p2> ^<c2> <n5>)
    (<p2> ^{ > <c2> <c1> } <n4>)
   -{ (<o5> ^{ <> <c2> <> <c1> <arg3-name> } <arg3>)
      (<p2> ^<arg3-name> <parg3>)}
    (<p2> ^<c1> <n3>)
    (<n3> ^arg-type predicate)
    (<n3> ^2 <o2>)
    (<p2> ^<c1> <n2>)
    (<n2> ^arg-type predicate)
    (<n2> ^id <p1>)
    (<o5> ^<c1> <a1>)
    (<a1> ^arg-type predicate)
    (<a1> ^2 <o3>)
    (<a1> ^handle <c3>)
    -->
    (<s1> ^desired <d1> +)
    (<d1> ^predicate <r1> +)
    (<r1> ^type relation +)
    (<r1> ^handle <c3> +)
    (<r1> ^1 <o4> +)
    (<r1> ^2 <o3> +)
}

sp {soar-math*square-root*instance
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type square-root)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <pa> +)
    (<pa> ^2 <value> +)
    (<pa> ^1 (sqrt <value>) +)
}

sp {soar-math*abs*instance
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type absolute-value)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <pa> +)
    (<pa> ^2 <value> +)
    (<pa> ^1 (abs <value>) +)
}

sp {soar-math*subtract*instance
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type subtract)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { > 1 <n*1> })
    (<args> ^2 <a1>)
    (<args> ^3 <a2>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <pa> +)
    (<pa> ^2 <value> +)
    (<pa> ^3 <value1> +)
    (<pa> ^1 (- <value> <value1>) +)
}

sp {soar-math*divide*instance
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type divide)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { > 1 <n*1> })
    (<args> ^2 <a1>)
    (<args> ^3 <a2>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <pa> +)
    (<pa> ^2 <value> +)
    (<pa> ^3 <value1> +)
    (<pa> ^1 (|/| <value> <value1>) +)
}

sp {soar-math*add*instance
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type add)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { > 1 <n*1> })
    (<args> ^2 <a1>)
    (<args> ^3 <a2>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <pa> +)
    (<pa> ^2 <value> +)
    (<pa> ^3 <value1> +)
    (<pa> ^1 (+ <value1> <value>) +)
}

sp {soar-math*multiply*instance
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type multiply)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { > 1 <n*1> })
    (<args> ^2 <a1>)
    (<args> ^3 <a2>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <pa> +)
    (<pa> ^2 <value> +)
    (<pa> ^3 <value1> +)
    (<pa> ^1 (* <value1> <value>) +)
}

sp {soar-math*square-root
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type square-root)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<args> ^2 <a1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <instancen> +)
    (<instancen> ^1 (sqrt <value>) +)
}

sp {soar-math*absolute-value
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type absolute-value)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<args> ^2 <a1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <instancen> +)
    (<instancen> ^1 (abs <value>) +)
}

sp {soar-math*subtract
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type subtract)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<args> ^2 <a1>)
    (<args> ^3 <a2>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <instancen> +)
    (<instancen> ^1 (- <value> <value1>) +)
}

sp {soar-math*divide
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type divide)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<args> ^2 <a1>)
    (<args> ^3 <a2>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <instancen> +)
    (<instancen> ^1 (|/| <value> <value1>) +)
}

sp {soar-math*add
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type add)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<args> ^2 <a1>)
    (<args> ^3 <a2>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <instancen> +)
    (<instancen> ^1 (+ <value> <value1>) +)
}

sp {soar-math*multiply
    (state <s> ^name soar-math)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^type multiply)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<args> ^2 <a1>)
    (<args> ^3 <a2>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <value>)
    -->
    (<s> ^instance <instancen> +)
    (<instancen> ^1 (* <value1> <value>) +)
}

sp {soar-math*apply*complete
    (state <s> ^name soar-math)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <s1>)
    (<s> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <s1> +)
}

sp {soar-math*propose*complete
    (state <s> ^name soar-math)
    (<s> ^instance <instance>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
    (<o> ^instance <instance> +)
}

sp {integer-range*propose*complete
    (state <s> ^name integer-range)
    (<s> ^instance <instance>)
    (<s> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
    (<o> ^instance <instance> +)
}

sp {integer-range*elaborate*result
    (state <s> ^name integer-range)
    -->
    (<s> ^result <r*1> +)
    (<r*1> ^set <res> +)
}

sp {integer-range*elaborate*objectszz
    (state <s> ^name integer-range)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <s1>)
    (<s> ^instance <s1>)
    (<s> ^c <r3>)
    (<s> ^b <r2>)
    (<s> ^a <r>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <s1> +)
}

sp {integer-range*elaborate*objects
    (state <s> ^name integer-range)
    (<s> ^c <r2>)
    (<s> ^b <r>)
    (<s> ^a <r3>)
    (<r3> ^result <r*3>)
    (<r*3> ^set <s*3>)
    (<s*3> ^instance <i*3>)
    (<i*3> ^1 <objc>)
    (<r2> ^result <r*2>)
    (<r*2> ^set <s*2>)
    (<s*2> ^instance <i*2>)
    (<i*2> ^1 { > <objc> <objb> })
    (<r> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <i*1>)
    (<i*1> ^1 { < <objc> <obja> })
    -->
    (interrupt)
    (<s> ^instance <s1> +)
    (<s1> ^2 <obja> +)
    (<s1> ^3 <objb> +)
    (<s1> ^1 <objc> +)
}

sp {integer-range*propose*elaborate*args
    (state <s> ^name integer-range)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name integer-range)
    (<o> ^args <args>)
    (<args> ^num 3)
    (<o> ^parameter <p>)
    (<args> ^2 <a2>)
    (<args> ^3 <a3>)
    (<args> ^1 <a1>)
    -->
    (<s> ^parameter <p> +)
    (<s> ^a <a1> +)
    (<s> ^b <a2> +)
    (<s> ^c <a3> +)
}

sp {card-one-higher*propose*complete
    (state <s> ^name card-one-higher)
    (<s> ^instance <instance>)
    (<s> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
    (<o> ^instance <instance> +)
}

sp {card-one-higher*elaborate*result
    (state <s> ^name card-one-higher)
    -->
    (<s> ^result <r*1> +)
    (<r*1> ^set <res> +)
}

sp {card-one-higher*elaborate*objectszz
    (state <s> ^name card-one-higher)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <s1>)
    (<s> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <s1> +)
}

sp {card-one-higher*elaborate*objects
    (state <s> ^name card-one-higher)
    (<s> ^linkstate <l*1>)
    (<l*1> ^successive <s*1>)
    (<s> ^b <r2>)
    (<s> ^a <r>)
    (<s*1> ^instance <p>)
    (<p> ^2 <val>)
    (<p> ^1 <val2>)
    (<r2> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*2>)
    (<i*2> ^1 <val2>)
    (<r> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <val>)
    -->
    (<s> ^instance <s1> +)
    (<s1> ^1 <val> +)
    (<s1> ^2 <val2> +)
}

sp {card-one-higher*propose*elaborate*args
    (state <s> ^name card-one-higher)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name card-one-higher)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p>)
    (<args> ^2 <a2>)
    (<args> ^1 <a1>)
    -->
    (<s> ^parameter <p> +)
    (<s> ^a <a1> +)
    (<s> ^b <a2> +)
}

sp {try-different-instance*result
    (state <s> ^superstate <ss>)
    (<ss> ^operator <o>)
    (<o> ^name complete)
    (<o> ^instance <i>)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^name learn-condition)
    -->
    (<ss> ^operator <o> -)
}

sp {board-between*perference*complete*samey
    (state <s> ^name board-between)
    (<s> ^operator <o1> +)
    (<o1> ^name complete)
    (<s> ^linkstate <ls>)
    (<ls> ^diff-table <d*1>)
    (<d*1> ^diff <d1>)
    (<d1> ^num <y>)
    (<d1> ^num { <> <y> <y2> })
    (<o1> ^instance <instance>)
    (<instance> ^2 <obja>)
    (<obja> ^predicates <pred1>)
    (<pred1> ^x <y>)
    (<pred1> ^y <x>)
    (<instance> ^3 <objb>)
    (<objb> ^predicates <pred2>)
    (<pred2> ^y <x>)
    (<pred2> ^x <y2>)
    (<d1> ^result { > 1 <r*1> })
    -->
    (<s> ^operator <o1> >)
}

sp {board-between*perference*complete*samex
    (state <s> ^name board-between)
    (<s> ^operator <o1> +)
    (<o1> ^name complete)
    (<s> ^linkstate <ls>)
    (<ls> ^diff-table <d*1>)
    (<d*1> ^diff <d1>)
    (<d1> ^num <y>)
    (<d1> ^num { <> <y> <y2> })
    (<o1> ^instance <instance>)
    (<instance> ^2 <obja>)
    (<obja> ^predicates <pred1>)
    (<pred1> ^y <y>)
    (<pred1> ^x <x>)
    (<instance> ^3 <objb>)
    (<objb> ^predicates <pred2>)
    (<pred2> ^y <y2>)
    (<pred2> ^x <x>)
    (<d1> ^result { > 1 <r*1> })
    -->
    (<s> ^operator <o1> >)
}

sp {board-between*propose*complete
    (state <s> ^name board-between)
    (<s> ^instance <instance>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
    (<o> ^instance <instance> +)
}

sp {board-between*elaborate*instances*samex*inclusive
    (state <s> ^name board-between)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<s> ^c <r3>)
    (<s> ^b <r2>)
    (<s> ^a <r>)
    (<op> ^instance <s1>)
    (<s1> ^2 <obja>)
    (<obja> ^y <x>)
    (<s1> ^3 <objb>)
    (<objb> ^y <x>)
    (<obja> ^x <y2>)
    (<objb> ^x <y1>)
    (<s1> ^1 <set>)
    (<r3> ^result <r*4>)
    (<r*4> ^set <s*6>)
    (<s*6> ^instance <i*3>)
    (<i*3> ^1 <objb>)
    (<r2> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*2>)
    (<i*2> ^1 <obja>)
    (<r> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*1>)
    (<i*1> ^1 <objc>)
   -{ (<objc> ^x { < <y1> <= <y2> <y> })
      (<objc> ^x <y>)}
   -{ (<objc> ^x { > <y1> >= <y2> <y> })
      (<objc> ^x <y>)}
    (<objc> ^y <x>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^name board-between)
    (<sop> ^type between-inclusive)
    -->
    (<set> ^object <objc> +)
}

sp {board-between*elaborate*instances*samey*inclusive
    (state <s> ^name board-between)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<s> ^c <r3>)
    (<s> ^b <r2>)
    (<s> ^a <r>)
    (<op> ^instance <s1>)
    (<s1> ^2 <obja>)
    (<obja> ^y <y2>)
    (<obja> ^x <x>)
    (<s1> ^3 <objb>)
    (<objb> ^x <x>)
    (<objb> ^y <y1>)
    (<s1> ^1 <set>)
    (<r3> ^result <r*4>)
    (<r*4> ^set <s*6>)
    (<s*6> ^instance <i*3>)
    (<i*3> ^1 <objb>)
    (<r2> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*2>)
    (<i*2> ^1 <obja>)
    (<r> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*1>)
    (<i*1> ^1 <objc>)
   -{ (<objc> ^y { < <y1> <= <y2> <y> })
      (<objc> ^y <y>)}
   -{ (<objc> ^y { > <y1> >= <y2> <y> })
      (<objc> ^y <y>)}
    (<objc> ^x <x>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^name board-between)
    (<sop> ^type between-inclusive)
    -->
    (<set> ^object <objc> +)
}

sp {board-between*elaborate*instances*samexy*set
    (state <s> ^name board-between)
    (<s> ^a <r>)
    (<r> ^rtype set)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<s> ^c <r3>)
    (<s> ^b <r2>)
    (<op> ^instance <s1>)
    (<s1> ^2 <obja>)
    (<obja> ^predicates <pred1>)
    (<s1> ^3 <objb>)
    (<objb> ^predicates <pred2>)
    (<s1> ^1 <set>)
    (<r3> ^result <r*4>)
    (<r*4> ^set <s*6>)
    (<s*6> ^instance <i*3>)
    (<i*3> ^1 <objb>)
    (<r2> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*2>)
    (<i*2> ^1 <obja>)
    (<r> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*1>)
    (<i*1> ^1 <v*1>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^name board-between)
    (<sop> ^type between)
    (<pred2> ^{ << x y >> <xy> } <x>)
    (<pred1> ^<xy> <x>)
    (<pred2> ^{ << x y >> <> <xy> <yx> } <y1>)
    (<pred1> ^<yx> <y2>)
    (<v*1> ^<nobj> <objc>)
    (<objc> ^predicates <pred3>)
   -{ (<pred3> ^<yx> { <= <y1> <= <y2> <y> })
      (<pred3> ^<yx> <y>)}
   -{ (<pred3> ^<yx> { >= <y1> >= <y2> <y> })
      (<pred3> ^<yx> <y>)}
    (<pred3> ^<xy> <x>)
    -->
    (<set> ^object <objc> +)
}

sp {game-search*elaborate*diff-table
    (state <s> ^name game-search)
    -->
    (<s> ^diff-table <dtt> +)
    (<dtt> ^diff <d1> +)
    (<dtt> ^diff <d2> +)
    (<d1> ^pair <p> +)
    (<d1> ^pair <p1> +)
    (<d1> ^pair <p2> +)
    (<d1> ^pair <p3> +)
    (<d1> ^pair <p4> +)
    (<d1> ^result 1 +)
    (<p> ^num 1 +)
    (<p> ^num 2 +)
    (<p1> ^num 3 +)
    (<p1> ^num 2 +)
    (<p2> ^num 4 +)
    (<p2> ^num 3 +)
    (<p3> ^num 1 +)
    (<p3> ^num 0 +)
    (<p4> ^num 5 +)
    (<p4> ^num 4 +)
    (<d2> ^pair <pa> +)
    (<d2> ^pair <pa2> +)
    (<d2> ^pair <p21> +)
    (<d2> ^pair <p22> +)
    (<d2> ^result 2 +)
    (<pa> ^num 1 +)
    (<pa> ^num 3 +)
    (<pa2> ^num 0 +)
    (<pa2> ^num 2 +)
    (<p21> ^num 4 +)
    (<p21> ^num 2 +)
    (<p22> ^num 5 +)
    (<p22> ^num 3 +)
}

sp {learn-predicate*elaborate*diff-table
    (state <s> ^name learn-predicate)
    -->
    (<s> ^diff-table <dtt> +)
    (<dtt> ^diff <d1> +)
    (<dtt> ^diff <d2> +)
    (<d1> ^pair <p> +)
    (<d1> ^pair <p1> +)
    (<d1> ^pair <p2> +)
    (<d1> ^pair <p3> +)
    (<d1> ^pair <p4> +)
    (<d1> ^result 1 +)
    (<p> ^num 1 +)
    (<p> ^num 2 +)
    (<p1> ^num 3 +)
    (<p1> ^num 2 +)
    (<p2> ^num 4 +)
    (<p2> ^num 3 +)
    (<p3> ^num 1 +)
    (<p3> ^num 0 +)
    (<p4> ^num 5 +)
    (<p4> ^num 4 +)
    (<d2> ^pair <pa> +)
    (<d2> ^pair <pa2> +)
    (<d2> ^pair <p21> +)
    (<d2> ^pair <p22> +)
    (<d2> ^result 2 +)
    (<pa> ^num 1 +)
    (<pa> ^num 3 +)
    (<pa2> ^num 0 +)
    (<pa2> ^num 2 +)
    (<p21> ^num 4 +)
    (<p21> ^num 2 +)
    (<p22> ^num 5 +)
    (<p22> ^num 3 +)
}

sp {board-between*elaborate*instances*samex
    (state <s> ^name board-between)
    (<s> ^a <r>)
    (<r> ^rtype single)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<s> ^c <r3>)
    (<s> ^b <r2>)
    (<op> ^instance <s1>)
    (<s1> ^2 <obja>)
    (<obja> ^predicates <pred1>)
    (<pred1> ^y <x>)
    (<pred1> ^x <y2>)
    (<s1> ^3 <objb>)
    (<objb> ^predicates <pred2>)
    (<pred2> ^y <x>)
    (<pred2> ^x <y1>)
    (<s1> ^1 <set>)
    (<r3> ^result <r*4>)
    (<r*4> ^set <s*6>)
    (<s*6> ^instance <i*3>)
    (<i*3> ^1 <objb>)
    (<r2> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*2>)
    (<i*2> ^1 <obja>)
    (<r> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*1>)
    (<i*1> ^1 <objc>)
    (<objc> ^predicates <pred3>)
   -{ (<pred3> ^x { <= <y1> <= <y2> <y> })
      (<pred3> ^x <y>)}
   -{ (<pred3> ^x { >= <y1> >= <y2> <y> })
      (<pred3> ^x <y>)}
    (<pred3> ^y <x>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^name board-between)
    (<sop> ^type between)
    -->
    (<set> ^object <objc> +)
}

sp {board-between*elaborate*instances*samey
    (state <s> ^name board-between)
    (<s> ^a <r>)
    (<r> ^rtype single)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<s> ^c <r3>)
    (<s> ^b <r2>)
    (<op> ^instance <s1>)
    (<s1> ^2 <obja>)
    (<obja> ^predicates <pred1>)
    (<pred1> ^y <y2>)
    (<pred1> ^x <x>)
    (<s1> ^3 <objb>)
    (<objb> ^predicates <pred2>)
    (<pred2> ^x <x>)
    (<pred2> ^y <y1>)
    (<s1> ^1 <set>)
    (<r3> ^result <r*4>)
    (<r*4> ^set <s*6>)
    (<s*6> ^instance <i*3>)
    (<i*3> ^1 <objb>)
    (<r2> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*2>)
    (<i*2> ^1 <obja>)
    (<r> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*1>)
    (<i*1> ^1 <objc>)
    (<objc> ^predicates <pred3>)
   -{ (<pred3> ^y { <= <y1> <= <y2> <y> })
      (<pred3> ^y <y>)}
   -{ (<pred3> ^y { >= <y1> >= <y2> <y> })
      (<pred3> ^y <y>)}
    (<pred3> ^x <x>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^name board-between)
    (<sop> ^type between)
    -->
    (<set> ^object <objc> +)
}

sp {board-between*elaborate*instances*straight*single
    :o-support
    (state <s> ^name board-between)
    (<s> ^a <r>)
    (<r> ^rtype single)
    (<s> ^c <r3>)
    (<s> ^linkstate <ls>)
    (<ls> ^diff-table <dt>)
    (<dt> ^diff <d3>)
    (<d3> ^result 2)
    (<dt> ^diff <d1>)
    (<d1> ^result 1)
    (<d3> ^pair <p3>)
    (<d1> ^pair <p2>)
    (<p3> ^num <y3>)
    (<p2> ^num <y3>)
    (<d1> ^pair <p1>)
    (<p3> ^num { <> <y3> <y2> })
    (<p1> ^num <y2>)
    (<p2> ^num { <> <y2> <> <y3> <y1> })
    (<p1> ^num <y1>)
    (<s> ^b <r2>)
    (<r3> ^result <r*4>)
    (<r*4> ^set <s*6>)
    (<s*6> ^instance <i*3>)
    (<i*3> ^1 <objb>)
    (<objb> ^predicates <pred2>)
    (<r2> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*2>)
    (<i*2> ^1 <obja>)
    (<obja> ^predicates <pred1>)
    (<pred2> ^{ << x y >> <yx> } <y3>)
    (<pred1> ^<yx> <y2>)
    (<r> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*1>)
    (<i*1> ^1 <objc>)
    (<objc> ^predicates <pred3>)
    (<pred3> ^<yx> <y1>)
    (<s> ^superstate <s*3>)
    (<s*3> ^condition <c*2>)
    (<c*2> ^result <r*1>)
    (<r*1> ^set <rset>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*1>)
    (<c*1> ^rtype single)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^name board-between)
    (<sop> ^type between)
    (<pred3> ^{ << x y >> <> <yx> <xy> } <x1>)
    (<pred2> ^<xy> <x1>)
    (<pred1> ^<xy> <x1>)
    -->
    (<rset> ^instance <s1> +)
    (<s1> ^2 <obja> +)
    (<s1> ^3 <objb> +)
    (<s1> ^1 <objc> +)
}

sp {board-between*elaborate*instances*diagonal*single
    :o-support
    (state <s> ^name board-between)
    (<s> ^a <r>)
    (<r> ^rtype single)
    (<s> ^c <r3>)
    (<s> ^linkstate <ls>)
    (<ls> ^diff-table <dt>)
    (<dt> ^diff <d2>)
    (<d2> ^result 2)
    (<dt> ^diff <d1>)
    (<d1> ^result 1)
    (<d2> ^pair <p6>)
    (<d2> ^pair <p5>)
    (<d1> ^pair <p4>)
    (<p6> ^num <y3>)
    (<p4> ^num <y3>)
    (<d1> ^pair <p3>)
    (<p5> ^num <x3>)
    (<p3> ^num <x3>)
    (<d1> ^pair <p2>)
    (<p6> ^num { <> <y3> <y2> })
    (<p2> ^num <y2>)
    (<p4> ^num { <> <y2> <> <y3> <y1> })
    (<p2> ^num <y1>)
    (<d1> ^pair <p1>)
    (<p5> ^num { <> <x3> <x2> })
    (<p1> ^num <x2>)
    (<p3> ^num { <> <x2> <> <x3> <x1> })
    (<p1> ^num <x1>)
    (<s> ^b <r2>)
    (<r3> ^result <r*4>)
    (<r*4> ^set <s*6>)
    (<s*6> ^instance <i*3>)
    (<i*3> ^1 <objb>)
    (<objb> ^predicates <pred2>)
    (<pred2> ^y <y3>)
    (<pred2> ^x <x3>)
    (<r2> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*2>)
    (<i*2> ^1 <obja>)
    (<obja> ^predicates <pred1>)
    (<pred1> ^y <y2>)
    (<pred1> ^x <x2>)
    (<r> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*1>)
    (<i*1> ^1 <objc>)
    (<objc> ^predicates <pred3>)
    (<pred3> ^y <y1>)
    (<pred3> ^x <x1>)
    (<s> ^superstate <s*3>)
    (<s*3> ^condition <c*2>)
    (<c*2> ^result <r*1>)
    (<r*1> ^set <rset>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*1>)
    (<c*1> ^rtype single)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <sop>)
    (<sop> ^name board-between)
    (<sop> ^type between)
    -->
    (<rset> ^instance <s1> +)
    (<s1> ^2 <obja> +)
    (<s1> ^3 <objb> +)
    (<s1> ^1 <objc> +)
}

sp {board-between*elaborate*object*instance
    (state <s> ^name board-between)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <s1>)
    (<s> ^instance <s1>)
    (<s> ^superstate <s*3>)
    (<s*3> ^condition <c*2>)
    (<c*2> ^result <r*1>)
    (<r*1> ^set <res>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*1>)
    (<c*1> ^rtype set)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name board-between)
    -->
    (<res> ^instance <s1> +)
}

sp {board-between*elaborate*objects
    (state <s> ^name board-between)
    (<s> ^c <r2>)
    (<s> ^b <r>)
    (<r2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <objb>)
    (<r> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 { <> <objb> <obja> })
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*1>)
    (<c*1> ^rtype set)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name board-between)
    -->
    (<s> ^instance <s1> +)
    (<s1> ^2 <obja> +)
    (<s1> ^3 <objb> +)
    (<s1> ^1 <set> +)
}

sp {board-between*propose*elaborate*args
    (state <s> ^name board-between)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name board-between)
    (<o> ^args <args>)
    (<args> ^num 3)
    (<o> ^parameter <p>)
    (<args> ^2 <a2>)
    (<args> ^3 <a3>)
    (<args> ^1 <a1>)
    -->
    (<s> ^parameter <p> +)
    (<s> ^a <a1> +)
    (<s> ^b <a2> +)
    (<s> ^c <a3> +)
}

sp {soar-compare*less*param-2
    (state <s> ^name soar-less)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^name soar-less)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a2>)
    (<args> ^1 <a1>)
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 { < <value1> <value> })
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <instance> +)
    (<instance> ^1 <value> +)
    (<instance> ^2 <value1> +)
}

sp {soar-compare*less
    (state <s> ^name soar-less)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^name soar-less)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 1)
    (<args> ^2 <a2>)
    (<args> ^1 <a1>)
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 { < <value1> <value> })
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <in1> +)
    (<in1> ^1 <value> +)
}

sp {soar-compare*greater-equal*param-2
    (state <s> ^name soar-greater-equal)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^name soar-greater-equal)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a2>)
    (<args> ^1 <a1>)
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 { >= <value1> <value> })
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <instance> +)
    (<instance> ^1 <value> +)
    (<instance> ^2 <value1> +)
}

sp {soar-compare*greater*param-2
    (state <s> ^name soar-greater)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^name soar-greater)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a2>)
    (<args> ^1 <a1>)
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 { > <value1> <value> })
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <instance> +)
    (<instance> ^1 <value> +)
    (<instance> ^2 <value1> +)
}

sp {soar-compare*greater-equal
    (state <s> ^name soar-greater-equal)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^name soar-greater-equal)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 1)
    (<args> ^2 <a2>)
    (<args> ^1 <a1>)
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 { >= <value1> <value> })
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <in1> +)
    (<in1> ^1 <value> +)
}

sp {soar-compare*greater
    (state <s> ^name soar-greater)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^name soar-greater)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 1)
    (<args> ^2 <a2>)
    (<args> ^1 <a1>)
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <value1>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 { > <value1> <value> })
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <in1> +)
    (<in1> ^1 <value> +)
}

sp {soar-count*elaborate*rhs*1param*signle
    (state <s> ^name soar-count)
    (<s> ^linkstate <ls>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name soar-count)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<args> ^2 <a1>)
    (<a1> ^rtype single)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<a1> ^result <r>)
    (<r> ^set <set>)
   -{ (<set> -^<something> <s*2>)
      (state <ls> ^<a*1> <v*1>)}
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 (size <set>) +)
}

sp {soar-count*elaborate*rhs*1param
    (state <s> ^name soar-count)
    (<s> ^linkstate <ls>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name soar-count)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<args> ^2 <a1>)
    (<a1> ^rtype set)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<a1> ^result <r>)
    (<r> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <set>)
   -{ (<set> -^<something> <s*3>)
      (state <ls> ^<a*1> <v*1>)}
    -->
    (<s> ^instance <p> +)
    (<p> ^1 (size <set>) +)
}

sp {soar-count*elaborate*rhs*2params*single
    (state <s> ^name soar-count)
    (<s> ^linkstate <ls>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name soar-count)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a1>)
    (<a1> ^rtype single)
    (<a1> ^result <r>)
    (<r> ^set <set>)
   -{ (<set> -^<something> <s*2>)
      (state <ls> ^<a*1> <v*1>)}
    -->
    (<s> ^instance <p> +)
    (<p> ^2 <set> +)
    (<p> ^1 (size <set>) +)
}

sp {soar-count*elaborate*rhs*2params
    (state <s> ^name soar-count)
    (<s> ^linkstate <ls>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name soar-count)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a1>)
    (<a1> ^rtype set)
    (<a1> ^result <r>)
    (<r> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <set>)
   -{ (<set> -^<something> <s*3>)
      (state <ls> ^<a*1> <v*1>)}
    -->
    (<s> ^instance <p> +)
    (<p> ^2 <set> +)
    (<p> ^1 (size <set>) +)
}

sp {soar-count*apply*complete
    (state <s> ^name soar-count)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <s1>)
    (<s> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <s1> +)
}

sp {soar-count*propose*complete
    (state <s> ^name soar-count)
    (<s> ^instance <instance>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
    (<o> ^instance <instance> +)
}

sp {soar-sum*numeric-evaluate*value*instance
    (state <s> ^name soar-sum)
    (<s> ^linkstate <ls>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^name soar-sum)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <obja>)
   -{ (<obja> -^<something> <s*3>)
      (state <ls> ^<a*1> <v*1>)}
    -->
    (<s> ^instance <instance> +)
    (<instance> ^2 <obja> +)
    (<instance> ^1 (sum <obja>) +)
}

sp {soar-sum*numeric-evaluate*value
    (state <s> ^name soar-sum)
    (<s> ^linkstate <ls>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<args> ^2 <a1>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <i*1>)
    (<i*1> ^1 <set>)
   -{ (<set> -^<something> <s*3>)
      (state <ls> ^<a*1> <v*1>)}
    -->
    (<s> ^instance <p> +)
    (<p> ^1 (sum <set>) +)
}

sp {soar-sum*apply*complete
    (state <s> ^name soar-sum)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <s1>)
    (<s> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <s1> +)
}

sp {soar-sum*propose*complete
    (state <s> ^name soar-sum)
    (<s> ^instance <instance>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
    (<o> ^instance <instance> +)
}

sp {soar-max*numeric-evaluate*set
    (state <s> ^name soar-max)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 1)
    (<args> ^2 <a1>)
    (<a1> ^rtype set)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <rsp>)
    (<rsp> ^<something> <value>)
    (<rsp> -^<something> { > <value> <value2> })
    -->
    (<res> ^instance <i> +)
    (<i> ^1 <value> +)
}

sp {soar-max*numeric-evaluate*single
    (state <s> ^name soar-max)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 1)
    (<args> ^2 <a1>)
    (<a1> -^rtype set)
    (<a1> ^result <r*2>)
    (<r*2> ^set <rsp>)
    (<rsp> ^instance <i*1>)
    (<i*1> ^1 <value>)
   -{ (<rsp> ^instance <i*2>)
      (<i*2> ^1 { > <value> <value2> })}
    -->
    (<res> ^instance <i> +)
    (<i> ^1 <value> +)
}

sp {top-pair*with-type*2param*no-set*negative
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^handle <c3>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative true)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*2>)
    (<p*2> ^num 2)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <objb>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 { <> <objb> <obja> })
   -{ (<pa> ^instance <instance1>)
      (<instance1> ^2 <objb>)
      (<instance1> ^1 <obja>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
    (<instance> ^2 <objb> +)
}

sp {top-pair*with-type*1param*no-set*negative
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^handle <c3>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative true)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<o> ^parameter <p*2>)
    (<p*2> ^num { < 2 <n*1> })
    (<args> ^2 <a2>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
   -{ (<pa> ^instance <instance>)
      (<instance> ^1 <obja>)
      (<instance> ^2 <objb>)
      (<a2> ^result <r*2>)
      (<r*2> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <objb>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
}

sp {top-pair*with-type*3param*no-set
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^instance <instance1>)
    (<instance1> ^2 <objb>)
    (<pa> ^handle <c3>)
    (<instance1> ^3 <objc>)
    (<instance1> ^1 <obja>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 3)
    (<o> ^parameter <p*2>)
    (<p*2> ^num 3)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^3 <a3>)
    (<a3> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<a3> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*3>)
    (<i*3> ^1 <objc>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <objb>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
    (<instance> ^2 <objb> +)
    (<instance> ^3 <objc> +)
}

sp {top-pair*with-type*2param*no-set
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^instance <instance1>)
    (<instance1> ^2 <objb>)
    (<pa> ^handle <c3>)
    (<instance1> ^1 <obja>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*2>)
    (<p*2> ^num 2)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <objb>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
    (<instance> ^2 <objb> +)
}

sp {top-pair*with-type*1param*no-set
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^instance <instance1>)
    (<instance1> ^2 <objb>)
    (<pa> ^handle <c3>)
    (<instance1> ^1 <obja>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<o> ^parameter <p*2>)
    (<p*2> ^num { < 2 <n*1> })
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <objb>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
}

sp {top-pair*with-type*1param*set*noarg-set1*apply*noparam
    (state <s> ^name top-pair)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<s> ^linkstate <ls>)
    (<op> ^instance <res>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^instance <instance1>)
    (<instance1> ^2 <objb>)
    (<pa> ^handle <c3>)
    (<instance1> ^1 <obja>)
    (<res> ^1 <set>)
    (<s> ^superstate <s*4>)
    (<s*4> ^operator <o>)
    (<o> ^negative false)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<o> ^parameter <p*2>)
    (<p*2> ^num { < 2 <n*1> })
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*6>)
    (<s*6> ^instance <i*2>)
    (<i*2> ^1 <objb>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*5>)
    (<s*5> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*2>)
    (<c*2> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <res>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    -->
    (<set> ^object <obja> +)
}

sp {top-pair*with-type*1param*set*noarg-set1*apply
    (state <s> ^name top-pair)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<s> ^linkstate <ls>)
    (<op> ^instance <res>)
    (<res> ^2 <objb>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^instance <instance1>)
    (<instance1> ^2 <objb>)
    (<pa> ^handle <c3>)
    (<instance1> ^1 <obja>)
    (<res> ^1 <set>)
    (<s> ^superstate <s*4>)
    (<s*4> ^operator <o>)
    (<o> ^negative false)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*2>)
    (<p*2> ^num 2)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*6>)
    (<s*6> ^instance <i*2>)
    (<i*2> ^1 <objb>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*5>)
    (<s*5> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*2>)
    (<c*2> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <res>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    -->
    (<set> ^object <obja> +)
}

sp {top-pair*with-type*1param*set*noarg-set*noparam
    (state <s> ^name top-pair)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <set> +)
}

sp {top-pair*with-type*1param*set*noarg-set
    (state <s> ^name top-pair)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<a2> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <objb>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <set> +)
    (<instance> ^2 <objb> +)
}

sp {top-pair*with-type*1param*set*1arg*apply
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^instance <i1>)
    (<i1> ^1 <set>)
   -{ (<set> -^<x1> <x*1>)
      (state <ls> ^<a*1> <v*1>)}
    (<pa> ^handle <c3>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<args> ^1 <a1>)
   -{ (<set> ^<elem> <obja>)
     -{ (<a1> ^result <r*1>)
        (<r*1> ^set <s*3>)
        (<s*3> ^instance <i*1>)
        (<i*1> ^1 <obja>)}}
    (<a1> -^rtype set)
    (<o> ^parameter <p*2>)
    (<p*2> ^num { < 2 <n*1> })
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    -->
    (<s> ^instance <i6> +)
    (<i6> ^1 <set> +)
}

sp {top-pair*with-type*1param*set*negative
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^handle <c3>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative true)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*2>)
    (<p*2> ^num 1)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> ^rtype set)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
   -{ (<pa> ^instance <instance1>)
      (<instance1> ^2 <objb>)
      (<instance1> ^1 <e>)
      (<a2> ^result <r*2>)
      (<r*2> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <objb>)
      (<obja> ^<elem> <e>)}
   -{ (<obja> -^<x1> <x*1>)
      (state <ls> ^<a*1> <v*1>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
}

sp {top-pair*with-type*2param*set*set
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^handle <c3>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*2>)
    (<p*2> ^num 2)
    (<args> ^2 <a2>)
    (<a2> ^rtype set)
    (<args> ^1 <a1>)
    (<a1> ^rtype set)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <objb>)
   -{ (<objb> -^<x1> <x*2>)
      (state <ls> ^<a*2> <v*2>)}
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
   -{ (<objb> ^<elem> <e>)
     -{ (<pa> ^instance <instance1>)
        (<instance1> ^2 <e>)
        (<instance1> ^1 <e2>)
        (<obja> ^<elem2> <e2>)}}
   -{ (<obja> ^<elem> <e>)
     -{ (<pa> ^instance <instance1>)
        (<instance1> ^1 <e>)
        (<instance1> ^2 <e2>)
        (<objb> ^<elem2> <e2>)}}
   -{ (<obja> -^<x1> <x*1>)
      (state <ls> ^<a*1> <v*1>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
    (<instance> ^objb <objb> +)
}

sp {top-pair*with-type*1param*set*set
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^handle <c3>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*2>)
    (<p*2> ^num 1)
    (<args> ^2 <a2>)
    (<a2> ^rtype set)
    (<args> ^1 <a1>)
    (<a1> ^rtype set)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
   -{ (<obja> ^<elem> <e>)
     -{ (<pa> ^instance <instance1>)
        (<instance1> ^1 <e>)
        (<instance1> ^2 <objb>)
        (<a2> ^result <r*2>)
        (<r*2> ^set <s*4>)
        (<s*4> ^instance <i*2>)
        (<i*2> ^1 <v*2>)
        (<v*2> ^<elem2> <objb>)}}
   -{ (<obja> -^<x1> <x*1>)
      (state <ls> ^<a*1> <v*1>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
}

sp {top-pair*with-type*2param*set*single
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^handle <c3>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*2>)
    (<p*2> ^num 2)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> ^rtype set)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <objb>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
   -{ (<obja> ^<elem> <e>)
     -{ (<pa> ^instance <instance1>)
        (<instance1> ^2 <objb>)
        (<instance1> ^1 <e>)}}
   -{ (<obja> -^<x1> <x*1>)
      (state <ls> ^<a*1> <v*1>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
    (<instance> ^2 <objb> +)
}

sp {top-pair*with-type*1param*set
    (state <s> ^name top-pair)
    (<s> ^linkstate <ls>)
    (<ls> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pa>)
    (<pa> ^handle <c3>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^type <c3>)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*2>)
    (<p*2> ^num 1)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a1> ^rtype set)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
   -{ (<obja> ^<elem> <e>)
     -{ (<pa> ^instance <instance1>)
        (<instance1> ^1 <e>)
        (<instance1> ^2 <objb>)
        (<a2> ^result <r*2>)
        (<r*2> ^set <s*4>)
        (<s*4> ^instance <i*2>)
        (<i*2> ^1 <objb>)}}
   -{ (<obja> -^<x1> <x*1>)
      (state <ls> ^<a*1> <v*1>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
}

sp {top-pair*apply*complete
    (state <s> ^name top-pair)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <s1>)
    (<s> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <s1> +)
}

sp {top-pair*propose*complete
    (state <s> ^name top-pair)
    (<s> ^instance <instance>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
    (<o> ^instance <instance> +)
}

sp {top-pair*perference*complete*diff
    (state <s> ^name top-pair)
    (<s> ^operator <o1> +)
    (<o1> ^name complete)
    (<o1> ^instance <instance>)
    -->
    (<s> ^operator <o1> >)
}

sp {with-attribute*apply*complete*instance*objects
    (state <s> ^name with-attribute)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <oz>)
    (<oz> ^2 <name1>)
    (<oz> ^3 <attr1>)
    (<oz> ^1 <set>)
    (<s> ^superstate <s*4>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*2>)
    (<c*2> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <oz>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    (<s*4> ^operator <oper>)
    (<oper> ^args <args>)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<args> ^2 <a3>)
    (<args> ^3 <a2>)
    (<a3> ^result <r*4>)
    (<r*4> ^set <s*7>)
    (<s*7> ^instance <i*3>)
    (<i*3> ^1 <name1>)
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*6>)
    (<s*6> ^instance <i*2>)
    (<i*2> ^1 <attr1>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*5>)
    (<s*5> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<obja> ^predicates <p*1>)
    (<p*1> ^<attr1> <name1>)
    -->
    (<set> ^object <obja> +)
}

sp {with-attribute*apply*complete*instance
    (state <s> ^name with-attribute)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <o>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <o> +)
}

sp {with-attribute*propose*complete
    (state <s> ^name with-attribute)
    (<s> ^instance <e>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
    (<o> ^instance <e> +)
}

sp {with-attribute*elaborate*results*2-paramb
    (state <s> ^name with-attribute)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    (<s*2> ^operator <o>)
    (<o> ^parameter <pp>)
    (<pp> ^num 2)
    (<o> ^args <args>)
    (<args> ^2 <a3>)
    (<pp> ^2 <p3>)
    (<args> ^3 <a2>)
    (<args> ^1 <a1>)
    (<a3> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*3>)
    (<i*3> ^1 <name>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <attr>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<obja> ^predicates <p*1>)
    (<p*1> ^<attr> <name>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
    (<instance> ^2 <name> +)
}

sp {with-attribute*elaborate*results*2-parama
    (state <s> ^name with-attribute)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    (<s*2> ^operator <o>)
    (<o> ^parameter <pp>)
    (<pp> ^num 2)
    (<o> ^args <args>)
    (<args> ^2 <a3>)
    (<args> ^3 <a2>)
    (<pp> ^3 <p2>)
    (<args> ^1 <a1>)
    (<a3> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*3>)
    (<i*3> ^1 <name>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <attr>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<obja> ^predicates <p*1>)
    (<p*1> ^<attr> <name>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
    (<instance> ^3 <attr> +)
}

sp {with-attribute*elaborate*results*3-param
    (state <s> ^name with-attribute)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    (<s*2> ^operator <o>)
    (<o> ^parameter <pp>)
    (<pp> ^num 3)
    (<o> ^args <args>)
    (<args> ^2 <a3>)
    (<args> ^3 <a2>)
    (<args> ^1 <a1>)
    (<a3> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*3>)
    (<i*3> ^1 <name>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <attr>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<obja> ^predicates <p*1>)
    (<p*1> ^<attr> <name>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
    (<instance> ^3 <attr> +)
    (<instance> ^2 <name> +)
}

sp {with-attribute*elaborate*results*1-param
    (state <s> ^name with-attribute)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<o> ^parameter <pp>)
    (<pp> ^num { < 2 <n*1> })
    (<args> ^2 <a3>)
    (<args> ^3 <a2>)
    (<args> ^1 <a1>)
    (<a3> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*3>)
    (<i*3> ^1 <name>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <attr>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<obja> ^predicates <p*1>)
    (<p*1> ^<attr> <name>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
}

sp {with-attribute*elaborate*results*0-param
    (state <s> ^name with-attribute)
    (<s> ^linkstate <l*1>)
    (<l*1> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<args> -^1 <a1>)
    (<args> ^2 <a3>)
    (<args> ^3 <a2>)
    (<a3> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <name>)
    (<a2> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <attr>)
    (<o*1> ^object <obja>)
    (<obja> ^predicates <p*1>)
    (<p*1> ^<attr> <name>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
}

sp {with-attribute*elaborate*results*0-param*primitive
    (state <s> ^name with-attribute)
    (<s> ^linkstate <l*1>)
    (<l*1> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype single)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<args> -^2 <v*1>)
    (<args> -^1 <a1>)
    (<o*1> ^object <obja>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
}

sp {with-attribute*apply*complete*instance*objects*set-set
    (state <s> ^name with-attribute)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <oz>)
    (<oz> ^2 <name1>)
    (<oz> ^3 <attr1>)
    (<oz> ^1 <set>)
    (<s> ^superstate <s*4>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*2>)
    (<c*2> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <oz>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    (<s*4> ^operator <oper>)
    (<oper> ^args <args>)
    (<args> ^1 <a1>)
    (<a1> ^rtype set)
    (<a1> ^parameter <p*1>)
    (<p*1> ^num 0)
    (<args> ^2 <a3>)
    (<args> ^3 <a2>)
    (<a3> ^result <r*4>)
    (<r*4> ^set <s*7>)
    (<s*7> ^instance <i*3>)
    (<i*3> ^1 <name1>)
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*6>)
    (<s*6> ^instance <i*2>)
    (<i*2> ^1 <attr1>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*5>)
    (<s*5> ^instance <i*1>)
    (<i*1> ^1 <v*1>)
    (<v*1> ^object <obja>)
    (<obja> ^predicates <p*2>)
    (<p*2> ^<attr1> <name1>)
    -->
    (<set> ^object <obja> +)
}

sp {with-attribute*elaborate*results*set*instance*sets*no-param
    (state <s> ^name with-attribute)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<args> ^1 <a1>)
    (<a1> ^rtype set)
    (<a1> ^parameter <p*1>)
    (<p*1> ^num 0)
    (<o> ^parameter <p>)
    (<args> ^2 <a3>)
    (<args> ^3 <a2>)
    (<a3> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <name>)
    (<a2> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <attr>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <set> +)
    (<instance> ^3 <attr> +)
    (<instance> ^2 <name> +)
}

sp {with-attribute*elaborate*results*set*instance*sets
    (state <s> ^name with-attribute)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<args> ^1 <a1>)
   -{ (<a1> ^parameter <p*1>)
      (<p*1> ^num 0)}
    (<a1> ^rtype set)
    (<o> ^parameter <p>)
    (<args> ^2 <a3>)
    (<args> ^3 <a2>)
    (<a3> ^result <r*3>)
    (<r*3> ^set <s*5>)
    (<s*5> ^instance <i*3>)
    (<i*3> ^1 <name>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <attr>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
   -{ (<obja> ^<elem> <e>)
     -{ (<e> ^predicates <p*2>)
        (<p*2> ^<attr> <name>)}}
   -{ (<obja> -^<x1> <x*1>)
      (state <ls> ^<a*1> <v*1>)}
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <obja> +)
    (<instance> ^3 <attr> +)
    (<instance> ^2 <name> +)
}

sp {with-attribute*elaborate*results*set*instance
    (state <s> ^name with-attribute)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<args> ^1 <a1>)
    (<a1> -^rtype set)
    (<o> ^parameter <p>)
    (<args> ^2 <a3>)
    (<args> ^3 <a2>)
    (<a3> ^result <r*2>)
    (<r*2> ^set <s*4>)
    (<s*4> ^instance <p2>)
    (<p2> ^1 <name>)
    (<a2> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <p1>)
    (<p1> ^1 <attr>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <set> +)
    (<instance> ^3 <attr> +)
    (<instance> ^2 <name> +)
}

sp {attribute-of*apply*complete*sets
    (state <s> ^name attribute-of)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <instance>)
    (<instance> ^2 <set>)
    (<instance> ^1 <set2>)
    (<s> ^superstate <s*4>)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <c*2>)
    (<c*2> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <instance>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    (<s*4> ^operator <o>)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<args> ^2 <a1>)
    (<a1> ^rtype set)
    (<o> ^parameter <pn>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*5>)
    (<s*5> ^instance <i*1>)
    (<i*1> ^1 <set>)
    (<o> ^type <type>)
    (<set> ^object <obj>)
    (<obj> ^predicates <p*1>)
    (<p*1> ^<type> <val>)
    -->
    (<set2> ^<random> <val> +)
}

sp {attribute-of*numeric-evaluate*value*instance*sets
    (state <s> ^name attribute-of)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^rtype set)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<args> ^2 <a1>)
    (<a1> ^rtype set)
    (<o> ^parameter <pn>)
    (<a1> ^result <r*1>)
    (<r*1> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <set>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <set2> +)
    (<instance> ^2 <set> +)
}

sp {attribute-of*numeric-evaluate*value*instance*arg2*negative
    (state <s> ^name attribute-of)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative true)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a2> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<obja> ^predicates <p*2>)
    (<o> ^type <type>)
    (<p*2> ^<type> <value>)
   -{ (<a1> ^result <r*3>)
      (<r*3> ^set <s*4>)
      (<s*4> ^instance <i*2>)
      (<i*2> ^1 <value>)}
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <value> +)
    (<instance> ^2 <obja> +)
}

sp {attribute-of*numeric-evaluate*value*instance*arg2
    (state <s> ^name attribute-of)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o>)
    (<o> ^negative false)
    (<o> ^args <args>)
    (<args> ^num 2)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a2>)
    (<a2> -^rtype set)
    (<args> ^1 <a1>)
    (<a2> ^result <r*3>)
    (<r*3> ^set <s*4>)
    (<s*4> ^instance <i*2>)
    (<i*2> ^1 <obja>)
    (<obja> ^predicates <p*2>)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <value>)
    (<o> ^type <type>)
    (<p*2> ^<type> <value>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <value> +)
    (<instance> ^2 <obja> +)
}

sp {attribute-of*numeric-evaluate*value*instance
    (state <s> ^name attribute-of)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<o> ^parameter <p*1>)
    (<p*1> ^num 2)
    (<args> ^2 <a1>)
    (<a1> -^rtype set)
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <obja>)
    (<obja> ^predicates <p*2>)
    (<o> ^type <type>)
    (<p*2> ^<type> <value>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <value> +)
    (<instance> ^2 <obja> +)
}

sp {attribute-of*numeric-evaluate*value
    (state <s> ^name attribute-of)
    (<s> ^superstate <s*2>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    (<s*2> ^operator <o>)
    (<o> ^args <args>)
    (<args> ^num 1)
    (<args> ^2 <a1>)
    (<a1> -^rtype set)
    (<o> ^parameter <p*1>)
    (<p*1> ^num { < 2 <n*1> })
    (<a1> ^result <r*2>)
    (<r*2> ^set <s*3>)
    (<s*3> ^instance <i*1>)
    (<i*1> ^1 <v*1>)
    (<v*1> ^predicates <p*2>)
    (<o> ^type <type>)
    (<p*2> ^<type> <value>)
    -->
    (<s> ^instance <instance> +)
    (<instance> ^1 <value> +)
}

sp {attribute-of*apply*complete
    (state <s> ^name attribute-of)
    (<s> ^operator <op>)
    (<op> ^name complete)
    (<op> ^instance <s1>)
    (<s> ^instance <s1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^condition <c*1>)
    (<c*1> ^result <r*1>)
    (<r*1> ^set <res>)
    -->
    (<res> ^instance <s1> +)
}

sp {attribute-of*propose*complete
    (state <s> ^name attribute-of)
    (<s> ^instance <instance>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
    (<o> ^instance <instance> +)
}

sp {resolve-satisfaction-failure*apply*handle-unresolved-condition*try-another
    (state <s> ^name resolve-satisfaction-failure)
    (<s> ^quiescence t)
    (<s> ^operator <o>)
    (<o> ^name handle-unresolved-condition)
    (<o> ^condition <co>)
    (<o> ^spelling <spell>)
    (<s> ^top-state <ts>)
    (<ts> ^smap <s*1>)
    (<co> ^name <n*1>)
    (<co> ^name <name2>)
    (<s*1> ^<spell> { <> <n*1> <word2> })
    -->
    (<co> ^name <name2> -)
    (<co> ^name <word2> +)
}

sp {resolve-satisfaction-failure*apply*handle-unresolved-condition
    (state <s> ^name resolve-satisfaction-failure)
    (<s> ^quiescence t)
    (<s> ^operator <o>)
    (<o> ^name handle-unresolved-condition)
    (<s> ^linkstate <ls>)
    (<ls> ^main-type <type>)
    (<ls> ^parsed-structure <ps>)
    (<o> ^condition <co>)
    (<o> ^spelling <spell>)
    (<s> ^top-state <ts>)
   -{ (<ts> ^smap <s*1>)
      (<s*1> ^<spell> <s*2>)}
    (<o> ^word <word>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learn-link <ll>)
    (<ll> ^argnum <an>)
    (<co> ^name { <> <word> <n*1> })
    (<co> ^name <name2>)
    (<ls> ^<type> <t>)
    (<t> ^formated <f*1>)
    (<t> ^nlp-set <nlp>)
    -->
    (write (crlf) <spell>)
    (<ts> ^smap <sm> +)
    (<sm> ^<spell> <word> +)
    (<co> ^name <name2> -)
    (<ll> ^argnum <an> -)
    (<co> ^name <word> +)
    (<c> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type process-unknown-word +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^word <word> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^dialog-event <de> +)
    (<de> ^type process-unknown-word +)
    (<de> ^originator instructor +)
    (<dc> ^learning-predicate <lp> +)
    (<lp> ^name <word> +)
    (<lp> ^spelling <spell> +)
    (<c> ^outgoing-message <out-msg> +)
    (<out-msg> ^type unknown-defined-word +)
    (<out-msg> ^fields <f*2> +)
    (<f*2> ^word <word> +)
    (<ps> ^learned-structure <nlp> +)
}

sp {resolve-satisfaction-failure*prefer*handle-unresolved-condition*concept
    (state <s> ^name resolve-satisfaction-failure)
    (<s> ^operator <o2> +)
   -{ (<o2> ^condition <c*2>)
      (<c*2> ^type concept)}
    (<s> ^operator <o1> +)
    (<o1> ^condition <c*1>)
    (<c*1> ^type concept)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {resolve-satisfaction-failure*propose*handle-unresolved-condition
    (state <s> ^name resolve-satisfaction-failure)
    (<s> ^unresolved-condition <co>)
    (<co> ^name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-unresolved-condition +)
    (<o> ^word (make-constant-symbol <name>) +)
    (<o> ^spelling <name> +)
    (<o> ^condition <co> +)
}

sp {resolve-satisfaction-failure*elaborate*unresolved
    (state <s> ^name resolve-satisfaction-failure)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <sss>)
    (<sss> ^condition <co>)
   -{ (<co> ^result <r*1>)
      (<r*1> ^set <s*2>)
      (<s*2> ^<x> <x*1>)}
    -->
    (<s> ^unresolved-condition <co> +)
}

sp {learn-condition*propose*resolve-satisfaction-failure
    (state <s> ^impasse no-change)
    (<s> ^operator <o*1>)
    (<o*1> ^name wait)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <sss>)
    (<sss> ^name learn-condition)
    -->
    (<sss> ^operator <o> +)
    (<sss> ^operator <o> >)
    (<o> ^name resolve-satisfaction-failure +)
}

sp {retry-condition-setup*apply*complete
    (state <s> ^name retry-condition-setup)
    (<s> ^quiescence t)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^linkstate <ls>)
    (<ls> ^main-type <type>)
    (<ls> ^parsed-structure <ps>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<s> ^top-state <ts>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learn-link <ll>)
    (<ll> ^argnum <an>)
    (<ls> ^<type> <t>)
    (<t> ^formated <f*1>)
    (<t> ^nlp-set <nlp>)
    -->
    (<ll> ^argnum <an> -)
    (<dc> ^needs-reset true +)
    (<c> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type process-reset-state +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^word <word> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^dialog-event <de> +)
    (<de> ^type single-word-response +)
    (<de> ^originator instructor +)
    (<c> ^outgoing-message <out-msg> +)
    (<out-msg> ^type reset-state +)
    (<out-msg> ^fields <f*2> +)
    (<f*2> ^word <type> +)
    (<ps> ^learned-structure <nlp> +)
}

sp {retry-condition-setup*propose*complete
    (state <s> ^name retry-condition-setup)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
}

sp {learn-condition-impasse*propose*attribute-of
    (state <s> ^name learn-condition-impasse)
    (<s> ^superstate <ss>)
    (<ss> ^condition <co>)
    (<co> ^type attribute-of)
    (<co> ^args <args>)
    (<co> ^negative <bool>)
    (<co> ^parameter <p>)
    (<co> ^name <type>)
    -->
    (<ss> ^operator <op> +)
    (<ss> ^operator <op> =)
    (<op> ^args <args> +)
    (<op> ^name attribute-of +)
    (<op> ^type <type> +)
    (<op> ^negative <bool> +)
    (<op> ^parameter <p> +)
}

sp {learn-condition-impasse*propose*function
    (state <s> ^name learn-condition-impasse)
    (<s> ^superstate <ss>)
    (<ss> ^condition <co>)
    (<co> ^type function)
    (<co> ^function <func>)
    (<co> ^args <args>)
    (<co> ^negative <bool>)
    (<co> ^parameter <p>)
    (<co> ^name <name>)
    -->
    (<ss> ^operator <op> +)
    (<ss> ^operator <op> =)
    (<op> ^args <args> +)
    (<op> ^name <func> +)
    (<op> ^type <name> +)
    (<op> ^negative <bool> +)
    (<op> ^parameter <p> +)
}

sp {learn-condition-impasse*propose*top-pair
    (state <s> ^name learn-condition-impasse)
    (<s> ^superstate <ss>)
    (<ss> ^condition <co>)
    (<co> ^type state-pair)
    (<co> ^args <args>)
    (<co> ^negative <bool>)
    (<co> ^parameter <p>)
    (<co> ^name <name>)
    (<co> ^attribute <attr>)
    -->
    (<ss> ^operator <op> +)
    (<ss> ^operator <op> =)
    (<op> ^args <args> +)
    (<op> ^name top-pair +)
    (<op> ^type <name> +)
    (<op> ^attribute <attr> +)
    (<op> ^negative <bool> +)
    (<op> ^parameter <p> +)
}

sp {learn-condition-impasse*propose*with-attribute*primitive-object
    (state <s> ^name learn-condition-impasse)
    (<s> ^superstate <ss>)
    (<ss> ^condition <co>)
    (<co> ^name object)
    (<co> ^type attribute)
    (<co> ^attribute primitive)
    (<co> ^args <args>)
    (<args> -^1 <a1>)
    (<co> ^negative <bool>)
    (<co> ^parameter <p>)
    -->
    (<ss> ^operator <op> +)
    (<ss> ^operator <op> =)
    (<op> ^args <args2> +)
    (<op> ^name with-attribute +)
    (<op> ^negative <bool> +)
    (<op> ^parameter <p> +)
}

sp {learn-condition-impasse*propose*with-attribute22
    (state <s> ^name learn-condition-impasse)
    (<s> ^superstate <ss>)
    (<ss> ^condition <co>)
    (<co> -^name object)
    (<co> ^type attribute)
    (<co> ^args <args>)
    (<args> -^1 <a1>)
    (<co> ^negative <bool>)
    (<co> ^parameter <p>)
    (<co> ^name <name>)
    (<co> ^attribute <attr>)
    -->
    (<ss> ^operator <op> +)
    (<ss> ^operator <op> =)
    (<op> ^args <args2> +)
    (<op> ^name with-attribute +)
    (<op> ^negative <bool> +)
    (<op> ^parameter <p> +)
    (<args2> ^3 <a2> +)
    (<args2> ^2 <a3> +)
    (<a2> ^name number +)
    (<a2> ^args <ag2> +)
    (<a2> ^rtype single +)
    (<a2> ^result <r*1> +)
    (<r*1> ^set <s*1> +)
    (<s*1> ^instance <a22> +)
    (<a2> ^return-type number +)
    (<a22> ^1 <attr> +)
    (<a3> ^name number +)
    (<a3> ^args <ag3> +)
    (<a3> ^rtype single +)
    (<a3> ^result <r*2> +)
    (<r*2> ^set <s*2> +)
    (<s*2> ^instance <a33> +)
    (<a3> ^return-type number +)
    (<a33> ^1 <name> +)
}

sp {learn-condition-impasse*propose*with-attribute
    (state <s> ^name learn-condition-impasse)
    (<s> ^superstate <ss>)
    (<ss> ^condition <co>)
    (<co> ^type attribute)
    (<co> ^args <args>)
    (<co> ^negative <bool>)
    (<co> ^parameter <p>)
    (<args> ^1 <a1>)
    (<co> ^name <name>)
    (<co> ^attribute <attr>)
    -->
    (<ss> ^operator <op> +)
    (<ss> ^operator <op> =)
    (<op> ^args <args2> +)
    (<op> ^name with-attribute +)
    (<op> ^negative <bool> +)
    (<op> ^parameter <p> +)
    (<args2> ^3 <a2> +)
    (<args2> ^2 <a3> +)
    (<args2> ^1 <a1> +)
    (<a2> ^name number +)
    (<a2> ^args <ag2> +)
    (<a2> ^rtype single +)
    (<a2> ^result <r*1> +)
    (<r*1> ^set <s*1> +)
    (<s*1> ^instance <a22> +)
    (<a2> ^return-type number +)
    (<a22> ^1 <attr> +)
    (<a3> ^name number +)
    (<a3> ^args <ag3> +)
    (<a3> ^rtype single +)
    (<a3> ^result <r*2> +)
    (<r*2> ^set <s*2> +)
    (<s*2> ^instance <a33> +)
    (<a3> ^return-type number +)
    (<a33> ^1 <name> +)
}

sp {learn-condition*impasse
    (state <s> ^choices none)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <s*1>)
    (<s*1> ^name learn-condition)
    (<s> ^superstate <s*2>)
    (<s*2> ^condition <co>)
    -->
    (<s> ^name learn-condition-impasse +)
    (<s> ^condition <co> +)
}

sp {learn-condition*elaborate*conditions
    (state <s> ^name learn-condition)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^condition <co>)
    -->
    (<s> ^condition <co> +)
}

sp {resolve-conditions*prefer*learn-condition*reject-complete*number
    (state <s> ^name resolve-conditions)
    (<s> ^operator <o> +)
    (<o> ^name learn-condition)
    (<o> ^condition <co>)
    (<co> ^return-type number)
    (<co> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <i*1>)
    (<i*1> ^1 <something>)
    -->
    (<s> ^operator <o> -)
}

sp {resolve-conditions*prefer*learn-condition*reject-complete
    (state <s> ^name resolve-conditions)
    (<s> ^operator <o> +)
    (<o> ^name learn-condition)
    (<s> ^linkstate <ls>)
    (<o> ^condition <co>)
    (<co> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <i*1>)
    (<i*1> ^1 <a>)
   -{ (<a> -^<something> <s*2>)
      (state <ls> ^<a*1> <v*1>)}
    -->
    (<s> ^operator <o> -)
}

sp {resolve-conditions*prefer*learn-condition*childresults-under
    (state <s> ^name resolve-conditions)
    (<s> ^operator <o> +)
    (<o> ^name learn-condition)
    (<o> ^condition <co>)
    (<co> ^args <a*1>)
    (<a*1> ^{ << 1 2 3 4 5 6 7 8 9 10 >> <a*2> } <c1>)
    (<c1> -^return-type number)
   -{ (<c1> ^result <r*1>)
      (<r*1> ^set <s*1>)
      (<s*1> ^instance <i*1>)
      (<i*1> ^1 <v*1>)
      (<v*1> ^<something> <s*2>)}
    -->
    (<s> ^operator <o> <)
}

sp {resolve-conditions*prefer*learn-condition*childresults
    (state <s> ^name resolve-conditions)
    (<s> ^operator <o> +)
    (<o> ^name learn-condition)
    (<o> ^condition <co>)
    (<co> ^args <a*1>)
    (<a*1> ^{ << 1 2 3 4 5 6 7 8 9 10 >> <a*2> } <c1>)
   -{ (<c1> ^result <r*1>)
      (<r*1> ^set <s*1>)
      (<s*1> ^instance <i*1>)
      (<i*1> ^1 <v*1>)}
    -->
    (<s> ^operator <o> <)
}

sp {resolve-conditions*disprefer*input-args
    (state <s> ^name resolve-conditions)
    (<s> ^operator <o> +)
    (<o> ^name learn-condition)
    (<o> ^condition <co>)
    (<co> ^attribute input-arg)
    -->
    (<s> ^operator <o> <)
}

sp {resolve-conditions*disprefer*concepts
    (state <s> ^name resolve-conditions)
    (<s> ^operator <o> +)
    (<o> ^name learn-condition)
    (<o> ^condition <co>)
    (<co> ^type concept)
    -->
    (<s> ^operator <o> <)
}

sp {resolve-conditions*prefer*retrieve-predicate-structure*overlearn-condition
    (state <s> ^name resolve-conditions)
    (<s> ^operator <o> +)
    (<o> ^name learn-condition)
    (<s> ^operator <o2> +)
    (<o2> ^name retrieve-predicate-structure)
    -->
    (<s> ^operator <o2> > <o>)
}

sp {resolve-conditions*propose*learn-condition
    (state <s> ^name resolve-conditions)
    (<s> ^condition <co>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name learn-condition +)
    (<o> ^condition <co> +)
}

sp {resolve-conditions*propose*retrieve-predicate-structure
    (state <s> ^name learn-predicate)
    (<s> ^gtype <gtype>)
    (<s> ^<gtype> <g>)
    (<g> ^condition <co>)
   -{ (<s> ^predicate <p*1>)
      (<p*1> ^link <co>)}
    (<co> ^type concept)
    (<co> ^attribute predicate)
    (<co> ^name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
    (<o> ^name chunk-predicate-structure +)
    (<o> ^<gtype> <g*1> +)
    (<g*1> ^condition <co> +)
    (<o> ^gtype <gtype> +)
}

sp {resolve-conditions*elaborate*nlp-set
    (state <s> ^name resolve-conditions)
    (<s> ^linkstate <ts>)
    (<ts> ^{ << action goal predicate failure heuristic >> <type> } <t*1>)
    (<t*1> ^condition <c>)
    -->
    (<s> ^condition <c> +)
}

sp {resolve-conditions*elaborate*type
    (state <s> ^name resolve-conditions)
    -->
    (<s> ^type action +)
    (<s> ^type goal +)
    (<s> ^type failure +)
}

sp {all-states*elaborate*linkstate
    (state <s> ^superstate <ts>)
    (<ts> ^linkstate <ss>)
    -->
    (<s> ^linkstate <ss> +)
}

sp {chunk-parameters*preference*disprefer*two-operators*1args1
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^disprefer <pref>)
    (<pref> ^2 <co2>)
    (<co2> ^type concept)
    (<co2> ^attribute action)
    (<co2> ^parameter <pa2>)
    (<pa2> ^num 1)
    (<pref> ^1 <co1>)
    (<co1> ^type concept)
    (<co1> ^attribute action)
    (<co2> ^verb <vp>)
    (<co1> ^verb <vp>)
    (<co1> ^parameter <pa1>)
    (<pa1> ^num 1)
    (<co2> ^name <name>)
    (<co1> ^name <name>)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pa2> ^1 <v*4>)
    (<v*4> ^param-id <i2>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co2> ^result <r*2>)
    (<r*2> ^set <s*2>)
    (<s*2> ^instance <set2>)
    (<ss> ^operator <o2> +)
    (<o2> ^parameters <set2>)
    (<o2> ^verb-structure <v*2>)
    (<v*2> ^1 <vs2>)
    (<vs2> ^verb-prep <vp>)
    (<vs2> ^verb-name <name>)
    (<vs2> ^1 <v2>)
    (<set> ^<i2> <obj2>)
    (<set2> ^<v2> <obj2>)
    (<co1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*1>)
    (<v*1> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> > <o2>)
}

sp {chunk-parameters*preference*prefer*two-operators*1args1
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pred> ^prefer <pref>)
    (<pref> ^2 <co2>)
    (<co2> ^type concept)
    (<co2> ^attribute action)
    (<co2> ^parameter <pa2>)
    (<pa2> ^num 1)
    (<pref> ^1 <co1>)
    (<co1> ^type concept)
    (<co1> ^attribute action)
    (<co2> ^verb <vp>)
    (<co1> ^verb <vp>)
    (<co1> ^parameter <pa1>)
    (<pa1> ^num 1)
    (<co2> ^name <name>)
    (<co1> ^name <name>)
    (<pa2> ^1 <v*4>)
    (<v*4> ^param-id <i2>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co2> ^result <r*2>)
    (<r*2> ^set <s*2>)
    (<s*2> ^instance <set2>)
    (<ss> ^operator <o2> +)
    (<o2> ^parameters <set2>)
    (<o2> ^verb-structure <v*2>)
    (<v*2> ^1 <vs2>)
    (<vs2> ^verb-prep <vp>)
    (<vs2> ^verb-name <name>)
    (<vs2> ^1 <v2>)
    (<set> ^<i2> <obj2>)
    (<set2> ^<v2> <obj2>)
    (<co1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*1>)
    (<v*1> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> > <o2>)
}

sp {chunk-parameters*preference*prefer*two-operators*1args2
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pred> ^prefer <pref>)
    (<pref> ^2 <co2>)
    (<co2> ^type concept)
    (<co2> ^attribute action)
    (<co2> ^parameter <pa2>)
    (<pa2> ^num 2)
    (<pref> ^1 <co1>)
    (<co1> ^type concept)
    (<co1> ^attribute action)
    (<co2> ^verb <vp>)
    (<co1> ^verb <vp>)
    (<co1> ^parameter <pa1>)
    (<pa1> ^num 1)
    (<co2> ^name <name>)
    (<co1> ^name <name>)
    (<pa2> ^2 <v*5>)
    (<v*5> ^param-id <i4>)
    (<pa2> ^1 <v*4>)
    (<v*4> ^param-id <i3>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co2> ^result <r*2>)
    (<r*2> ^set <s*2>)
    (<s*2> ^instance <set2>)
    (<ss> ^operator <o2> +)
    (<o2> ^parameters <set2>)
    (<o2> ^verb-structure <v*2>)
    (<v*2> ^1 <vs2>)
    (<vs2> ^verb-prep <vp>)
    (<vs2> ^verb-name <name>)
    (<vs2> ^2 <v4>)
    (<set> ^<i4> <obj4>)
    (<set2> ^<v4> <obj4>)
    (<vs2> ^1 <v3>)
    (<set> ^<i3> <obj3>)
    (<set2> ^<v3> <obj3>)
    (<co1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*1>)
    (<v*1> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> > <o2>)
}

sp {chunk-parameters*preference*disprefer*two-operators*1args2
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^disprefer <pref>)
    (<pref> ^2 <co2>)
    (<co2> ^type concept)
    (<co2> ^attribute action)
    (<co2> ^parameter <pa2>)
    (<pa2> ^num 2)
    (<pref> ^1 <co1>)
    (<co1> ^type concept)
    (<co1> ^attribute action)
    (<co2> ^verb <vp>)
    (<co1> ^verb <vp>)
    (<co1> ^parameter <pa1>)
    (<pa1> ^num 1)
    (<co2> ^name <name>)
    (<co1> ^name <name>)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pa2> ^2 <v*5>)
    (<v*5> ^param-id <i4>)
    (<pa2> ^1 <v*4>)
    (<v*4> ^param-id <i3>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co2> ^result <r*2>)
    (<r*2> ^set <s*2>)
    (<s*2> ^instance <set2>)
    (<ss> ^operator <o2> +)
    (<o2> ^parameters <set2>)
    (<o2> ^verb-structure <v*2>)
    (<v*2> ^1 <vs2>)
    (<vs2> ^verb-prep <vp>)
    (<vs2> ^verb-name <name>)
    (<vs2> ^2 <v4>)
    (<set> ^<i4> <obj4>)
    (<set2> ^<v4> <obj4>)
    (<vs2> ^1 <v3>)
    (<set> ^<i3> <obj3>)
    (<set2> ^<v3> <obj3>)
    (<co1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*1>)
    (<v*1> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> < <o2>)
}

sp {chunk-parameters*apply*wait*complete*select*one
    (state <s> ^quiescence t)
    (<s> ^superstate <ss>)
    (<ss> ^name learn-heuristic)
    (<ss> ^quiescence t)
    (<ss> ^linkstate <sss>)
    (<sss> ^quiescence t)
    (<s> ^operator <o*1>)
    (<o*1> ^name wait)
    (<sss> ^operator <o> +)
    -->
    (<sss> ^operator <o> +)
    (<sss> ^operator <o> =)
}

sp {chunk-parameters*preference*prefer*two-operators*2args1
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pred> ^prefer <pref>)
    (<pref> ^2 <co2>)
    (<co2> ^type concept)
    (<co2> ^attribute action)
    (<co2> ^parameter <pa2>)
    (<pa2> ^num 1)
    (<pref> ^1 <co1>)
    (<co1> ^type concept)
    (<co1> ^attribute action)
    (<co2> ^verb <vp>)
    (<co1> ^verb <vp>)
    (<co1> ^parameter <pa1>)
    (<pa1> ^num 2)
    (<co2> ^name <name>)
    (<co1> ^name <name>)
    (<pa1> ^2 <v*4>)
    (<v*4> ^param-id <i2>)
    (<pa2> ^1 <v*5>)
    (<v*5> ^param-id <i3>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co2> ^result <r*2>)
    (<r*2> ^set <s*2>)
    (<s*2> ^instance <set2>)
    (<ss> ^operator <o2> +)
    (<o2> ^parameters <set2>)
    (<o2> ^verb-structure <v*2>)
    (<v*2> ^1 <vs2>)
    (<vs2> ^verb-prep <vp>)
    (<vs2> ^verb-name <name>)
    (<vs2> ^1 <v3>)
    (<set> ^<i3> <obj3>)
    (<set2> ^<v3> <obj3>)
    (<co1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*1>)
    (<v*1> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<vs> ^2 <v2>)
    (<set> ^<i2> <obj2>)
    (<set1> ^<v2> <obj2>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> > <o2>)
}

sp {chunk-parameters*preference*disprefer*two-operators*2args1
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^disprefer <pref>)
    (<pref> ^2 <co2>)
    (<co2> ^type concept)
    (<co2> ^attribute action)
    (<co2> ^parameter <pa2>)
    (<pa2> ^num 1)
    (<pref> ^1 <co1>)
    (<co1> ^type concept)
    (<co1> ^attribute action)
    (<co2> ^verb <vp>)
    (<co1> ^verb <vp>)
    (<co1> ^parameter <pa1>)
    (<pa1> ^num 2)
    (<co2> ^name <name>)
    (<co1> ^name <name>)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pa1> ^2 <v*4>)
    (<v*4> ^param-id <i2>)
    (<pa2> ^1 <v*5>)
    (<v*5> ^param-id <i3>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co2> ^result <r*2>)
    (<r*2> ^set <s*2>)
    (<s*2> ^instance <set2>)
    (<ss> ^operator <o2> +)
    (<o2> ^parameters <set2>)
    (<o2> ^verb-structure <v*2>)
    (<v*2> ^1 <vs2>)
    (<vs2> ^verb-prep <vp>)
    (<vs2> ^verb-name <name>)
    (<vs2> ^1 <v3>)
    (<set> ^<i3> <obj3>)
    (<set2> ^<v3> <obj3>)
    (<co1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*1>)
    (<v*1> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<vs> ^2 <v2>)
    (<set> ^<i2> <obj2>)
    (<set1> ^<v2> <obj2>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> < <o2>)
}

sp {chunk-parameters*preference*disprefer*two-operators*2args2
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^disprefer <pref>)
    (<pref> ^2 <co2>)
    (<co2> ^type concept)
    (<co2> ^attribute action)
    (<co2> ^parameter <pa2>)
    (<pa2> ^num 2)
    (<pref> ^1 <co1>)
    (<co1> ^type concept)
    (<co1> ^attribute action)
    (<co2> ^verb <vp>)
    (<co1> ^verb <vp>)
    (<co1> ^parameter <pa1>)
    (<pa1> ^num 2)
    (<co2> ^name <name>)
    (<co1> ^name <name>)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pa2> ^2 <v*6>)
    (<v*6> ^param-id <i4>)
    (<pa1> ^2 <v*4>)
    (<v*4> ^param-id <i2>)
    (<pa2> ^1 <v*5>)
    (<v*5> ^param-id <i3>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co2> ^result <r*2>)
    (<r*2> ^set <s*2>)
    (<s*2> ^instance <set2>)
    (<ss> ^operator <o2> +)
    (<o2> ^parameters <set2>)
    (<o2> ^verb-structure <v*2>)
    (<v*2> ^1 <vs2>)
    (<vs2> ^verb-prep <vp>)
    (<vs2> ^verb-name <name>)
    (<vs2> ^2 <v4>)
    (<set> ^<i4> <obj4>)
    (<set2> ^<v4> <obj4>)
    (<vs2> ^1 <v3>)
    (<set> ^<i3> <obj3>)
    (<set2> ^<v3> <obj3>)
    (<co1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*1>)
    (<v*1> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<vs> ^2 <v2>)
    (<set> ^<i2> <obj2>)
    (<set1> ^<v2> <obj2>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> < <o2>)
}

sp {chunk-parameters*preference*prefer*two-operators*2args2
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pred> ^prefer <pref>)
    (<pref> ^2 <co2>)
    (<co2> ^type concept)
    (<co2> ^attribute action)
    (<co2> ^parameter <pa2>)
    (<pa2> ^num 2)
    (<pref> ^1 <co1>)
    (<co1> ^type concept)
    (<co1> ^attribute action)
    (<co2> ^verb <vp>)
    (<co1> ^verb <vp>)
    (<co1> ^parameter <pa1>)
    (<pa1> ^num 2)
    (<co2> ^name <name>)
    (<co1> ^name <name>)
    (<pa2> ^2 <v*6>)
    (<v*6> ^param-id <i4>)
    (<pa1> ^2 <v*4>)
    (<v*4> ^param-id <i2>)
    (<pa2> ^1 <v*5>)
    (<v*5> ^param-id <i3>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co2> ^result <r*2>)
    (<r*2> ^set <s*2>)
    (<s*2> ^instance <set2>)
    (<ss> ^operator <o2> +)
    (<o2> ^parameters <set2>)
    (<o2> ^verb-structure <v*2>)
    (<v*2> ^1 <vs2>)
    (<vs2> ^verb-prep <vp>)
    (<vs2> ^verb-name <name>)
    (<vs2> ^2 <v4>)
    (<set> ^<i4> <obj4>)
    (<set2> ^<v4> <obj4>)
    (<vs2> ^1 <v3>)
    (<set> ^<i3> <obj3>)
    (<set2> ^<v3> <obj3>)
    (<co1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*1>)
    (<v*1> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<vs> ^2 <v2>)
    (<set> ^<i2> <obj2>)
    (<set1> ^<v2> <obj2>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> > <o2>)
}

sp {chunk-parameters*preference*disprefer*single-operators*1args*any
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^disprefer <pref>)
    (<pref> -^2 <v*1>)
    (<pref> ^1 <co>)
    (<co> ^type concept)
    (<co> ^attribute action)
    (<co> ^parameter <pa1>)
    (<pa1> ^num 1)
    (<co> ^verb <vp>)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*2>)
    (<v*2> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<co> ^name <name>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> <)
}

sp {chunk-parameters*preference*disprefer*single-operators*2args
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^disprefer <pref>)
    (<pref> -^2 <v*1>)
    (<pref> ^1 <co>)
    (<co> ^type concept)
    (<co> ^attribute action)
    (<co> ^parameter <pa1>)
    (<pa1> ^num 2)
    (<co> ^verb <vp>)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pa1> ^2 <v*4>)
    (<v*4> ^param-id <i2>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*2>)
    (<v*2> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<co> ^name <name>)
    (<vs> ^2 <v2>)
    (<set> ^<i2> <obj2>)
    (<set1> ^<v2> <obj2>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> <)
}

sp {chunk-parameters*preference*prefer*single-operators*1args
    (state <s> ^name learn-heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^prefer <pref>)
    (<pref> -^2 <v*1>)
    (<pref> ^1 <co>)
    (<co> ^type concept)
    (<co> ^attribute action)
    (<co> ^parameter <pa1>)
    (<pa1> ^num 1)
    (<co> ^verb <vp>)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pa1> ^1 <v*3>)
    (<v*3> ^param-id <i1>)
    (<co> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o1> ^verb-structure <v*2>)
    (<v*2> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<co> ^name <name>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <obj1>)
    (<set1> ^<v1> <obj1>)
    -->
    (<ss> ^operator <o1> >)
}

sp {chunk-parameters*preference*prefer*single-operators*2args
    (state <s> ^name learn-heuristic)
    (<s> ^linked-heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<s> ^linkstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> ^prefer <pref>)
    (<pref> -^2 <v*1>)
    (<pref> ^1 <co>)
    (<co> ^type concept)
    (<co> ^attribute action)
    (<co> ^parameter <pa1>)
    (<pa1> ^num 2)
    (<ss> ^operator <o2> +)
    (<o2> ^type action)
    (<co> ^verb <vp>)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<pa1> ^2 <v*8>)
    (<v*8> ^param-id <i2>)
    (<pa1> ^1 <v*7>)
    (<v*7> ^param-id <i1>)
    (<co> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <set1>)
    (<o2> -^parameters <set1>)
    (<co> ^name <name>)
    (<ss> ^operator <o1> +)
    (<o1> ^verb-structure <v*2>)
    (<v*2> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<vs> ^2 <v2>)
    (<o1> ^parameters <set3>)
    (<vs> ^1 <v1>)
    (<set> ^<i2> <i*2>)
    (<i*2> ^handle <obj2>)
    (<set1> ^<v2> <v*6>)
    (<v*6> ^handle <obj2>)
    (<set3> ^<v2> <v*4>)
    (<v*4> ^handle <obj2>)
    (<set> ^<i1> <i*1>)
    (<i*1> ^handle <obj1>)
    (<set1> ^<v1> <v*5>)
    (<v*5> ^handle <obj1>)
    (<set3> ^<v1> <v*3>)
    (<v*3> ^handle <obj1>)
    -->
    (<ss> ^operator <o1> > <o2>)
}

sp {chunk-previous*preference*avoid*single-operators*1args*moved
    (state <s> ^name chunk-previous)
    (<s> ^linked-heuristic <pred>)
    (<pred> ^modifier previously)
    (<pred> ^ntype heuristic)
    (<pred> ^moved <mov>)
    (<mov> ^type concept)
    (<mov> ^attribute action)
    (<pred> ^parameter-set <ps>)
    (<ps> ^argnum 1)
    (<mov> ^parameter <para2>)
    (<para2> -^2 <v*2>)
    (<pred> ^avoid <pref>)
    (<pref> -^2 <v*4>)
    (<pref> ^1 <co>)
    (<co> -^verb <v*7>)
    (<co> ^type concept)
    (<co> ^attribute action)
    (<co> ^parameter <pa1>)
    (<pa1> -^2 <v*8>)
    (<s> ^linkstate <ss>)
    (<ss> ^operator <o1> +)
    (<o1> -^duplicate-of <d*1>)
    (<ps> ^set <set>)
    (<o1> ^verb-structure <v*5>)
    (<o1> ^parameters <set1>)
    (<pa1> ^1 <v*9>)
    (<v*9> ^param-id <i1>)
    (<v*5> ^1 <vs>)
    (<vs> ^verb-name <name>)
    (<co> ^name <name>)
    (<vs> ^1 <v1>)
    (<para2> ^1 <v*3>)
    (<v*3> ^param-id <v1>)
    (<ss> ^superstate <su>)
    (<su> ^superstate <sss>)
    (<sss> ^heuristic <pred>)
    (<su> ^operator <o*1>)
    (<o*1> ^superoperator <sso>)
    (<sso> ^parameters <pset4>)
    (<set> ^<i1> <i*1>)
    (<i*1> ^handle <obj1>)
    (<set1> ^<v1> <v*6>)
    (<v*6> ^handle <obj1>)
    (<pset4> ^<v1> <v*1>)
    (<v*1> ^handle <obj1>)
    -->
    (<ss> ^operator <o1> -)
}

sp {chunk-previous*preference*prefer*single-operators*1args*moved
    (state <s> ^name chunk-previous)
    (<s> ^linked-heuristic <pred>)
    (<pred> ^modifier previously)
    (<pred> ^ntype heuristic)
    (<pred> ^moved <mov>)
    (<mov> ^type concept)
    (<mov> ^attribute action)
    (<pred> ^parameter-set <ps>)
    (<ps> ^argnum 1)
    (<mov> ^parameter <para2>)
    (<para2> -^2 <v*2>)
    (<pred> ^prefer <pref>)
    (<pref> -^2 <v*4>)
    (<pref> ^1 <co>)
    (<co> -^verb <v*7>)
    (<co> ^type concept)
    (<co> ^attribute action)
    (<co> ^parameter <pa1>)
    (<pa1> -^2 <v*8>)
    (<s> ^linkstate <ss>)
    (<ss> ^operator <o2> +)
    (<o2> ^type action)
    (<ps> ^set <set>)
    (<pa1> ^1 <v*9>)
    (<v*9> ^param-id <i1>)
    (<para2> ^1 <v*3>)
    (<v*3> ^param-id <v1>)
    (<co> ^name <name>)
    (<ss> ^superstate <s*2>)
    (<ss> ^superstate <s*1>)
    (<s*1> ^superstate <sss>)
    (<sss> ^heuristic <pred>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^superoperator <sso>)
    (<sso> ^parameters <pset4>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o2> -^parameters <set1>)
    (<o1> ^verb-structure <v*5>)
    (<v*5> ^1 <vs>)
    (<vs> ^verb-name <name>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <i*1>)
    (<i*1> ^handle <obj1>)
    (<set1> ^<v1> <v*6>)
    (<v*6> ^handle <obj1>)
    (<pset4> ^<v1> <v*1>)
    (<v*1> ^handle <obj1>)
    -->
    (<ss> ^operator <o1> > <o2>)
}

sp {chunk-previous*preference*avoid*single-operators*1args
    (state <s> ^name chunk-previous)
    (<s> ^linked-heuristic <pred>)
    (<pred> -^moved <m*1>)
    (<pred> ^modifier previously)
    (<pred> ^ntype heuristic)
    (<pred> ^parameter-set <ps>)
    (<ps> ^argnum 1)
    (<pred> ^avoid <pref>)
    (<pref> -^2 <v*1>)
    (<pref> ^1 <co>)
    (<co> -^verb <v*4>)
    (<co> ^type concept)
    (<co> ^attribute action)
    (<co> ^parameter <pa1>)
    (<pa1> -^2 <v*5>)
    (<s> ^linkstate <ss>)
    (<ss> ^operator <o1> +)
    (<o1> -^duplicate-of <d*1>)
    (<ps> ^set <set>)
    (<o1> ^verb-structure <v*2>)
    (<o1> ^parameters <set1>)
    (<pa1> ^1 <v*6>)
    (<v*6> ^param-id <i1>)
    (<v*2> ^1 <vs>)
    (<vs> ^verb-name <name>)
    (<co> ^name <name>)
    (<vs> ^1 <v1>)
    (<ss> ^superstate <s*1>)
    (<s*1> ^superstate <sss>)
    (<sss> ^heuristic <pred>)
    (<set> ^<i1> <i*1>)
    (<i*1> ^handle <obj1>)
    (<set1> ^<v1> <v*3>)
    (<v*3> ^handle <obj1>)
    -->
    (<ss> ^operator <o1> -)
}

sp {chunk-previous*preference*prefer*single-operators*1args
    (state <s> ^name chunk-previous)
    (<s> ^linked-heuristic <pred>)
    (<pred> -^moved <m*1>)
    (<pred> ^modifier previously)
    (<pred> ^ntype heuristic)
    (<pred> ^parameter-set <ps>)
    (<ps> ^argnum 1)
    (<pred> ^prefer <pref>)
    (<pref> -^2 <v*1>)
    (<pref> ^1 <co>)
    (<co> -^verb <v*4>)
    (<co> ^type concept)
    (<co> ^attribute action)
    (<co> ^parameter <pa1>)
    (<pa1> -^2 <v*5>)
    (<s> ^linkstate <ss>)
    (<ss> ^operator <o2> +)
    (<o2> ^type action)
    (<ps> ^set <set>)
    (<pa1> ^1 <v*6>)
    (<v*6> ^param-id <i1>)
    (<co> ^name <name>)
    (<ss> ^superstate <s*1>)
    (<s*1> ^superstate <sss>)
    (<sss> ^heuristic <pred>)
    (<ss> ^operator <o1> +)
    (<o1> ^parameters <set1>)
    (<o2> -^parameters <set1>)
    (<o1> ^verb-structure <v*2>)
    (<v*2> ^1 <vs>)
    (<vs> ^verb-name <name>)
    (<vs> ^1 <v1>)
    (<set> ^<i1> <i*1>)
    (<i*1> ^handle <obj1>)
    (<set1> ^<v1> <v*3>)
    (<v*3> ^handle <obj1>)
    -->
    (<ss> ^operator <o1> > <o2>)
}

sp {chunk-prefer-consider*considerence*consider*single-operators*2args
    (state <s> ^name chunk-prefer-consider)
    (<s> ^lo-heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<pred> ^consider <pref>)
    (<pref> -^2 <v*1>)
    (<pref> ^1 <co>)
    (<co> ^type concept)
    (<co> ^attribute action)
    (<co> ^parameter <pa1>)
    (<pa1> ^num 2)
    (<co> ^verb <vp>)
    (<s> ^linkstate <ss>)
    (<ss> ^superstate <s*1>)
    (<s*1> ^heuristic <pred>)
    (<ss> ^operator <o1> +)
    (<o1> ^name evaluate-operator)
    (<o1> ^superoperator <so>)
    (<pred> ^parameter-set <ps>)
    (<ps> ^set <set>)
    (<so> ^verb-structure <v*2>)
    (<v*2> ^1 <vs>)
    (<vs> ^verb-prep <vp>)
    (<vs> ^verb-name <name>)
    (<co> ^name <name>)
    (<pa1> ^2 <v*8>)
    (<v*8> ^param-id <i2>)
    (<vs> ^2 <v2>)
    (<so> ^parameters <set3>)
    (<pa1> ^1 <v*7>)
    (<v*7> ^param-id <i1>)
    (<vs> ^1 <v1>)
    (<co> ^result <r*1>)
    (<r*1> ^set <s*2>)
    (<s*2> ^instance <set1>)
    (<set> ^<i2> <i*2>)
    (<i*2> ^handle <obj2>)
    (<set1> ^<v2> <v*6>)
    (<v*6> ^handle <obj2>)
    (<set3> ^<v2> <v*4>)
    (<v*4> ^handle <obj2>)
    (<set> ^<i1> <i*1>)
    (<i*1> ^handle <obj1>)
    (<set1> ^<v1> <v*5>)
    (<v*5> ^handle <obj1>)
    (<set3> ^<v1> <v*3>)
    (<v*3> ^handle <obj1>)
    -->
    (<ss> ^operator <o1> >)
}

sp {learn-heuristic*chunk-parameters*propose*new-operator*snc*t71-4
    (state <s1> ^gtype action)
    (<s1> ^list <l1>)
    (<l1> ^game <g1>)
    (<s1> ^action <p1>)
    (<p1> ^parameter-set <p2>)
    (<p2> ^tested calculate3)
    (<p2> ^tested calculate6)
    (<p2> ^tested calculate4)
    (<p2> ^tested calculate5)
    (<p2> ^tested calculate2)
    (<p2> ^tested calculate1)
    (<p1> ^potential-args <p3>)
    (<p2> ^set <s2>)
    (<p1> ^verb-structure <v*1>)
    (<v*1> ^1 <vs>)
    (<vs> ^2 <v2>)
    (<vs> ^1 <v1>)
    (<s2> ^<v2> <ob2>)
    (<s2> ^<v1> <ob1>)
    -->
    (<p1> ^instance <s4> +)
    (<s4> ^1 <ob1> +)
    (<s4> ^2 <ob2> +)
}

sp {chunk-prefer-consider*eval-condition*impasse*consider*chunk-pause
    (state <s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^superstate <ss>)
    (<ss> ^name selection)
    (<ss> ^superstate <s*1>)
    (<s*1> ^heuristic <pred>)
    (<pred> -^avoid <a*1>)
    (<pred> -^prefer <p*1>)
    (<pred> ^ntype heuristic)
    -->
    (<s> ^operator-selection not-indifferent +)
    (<s> ^name chunk-prefer-consider +)
    (<s> ^lo-heuristic <pred> +)
    (<s> ^linkstate <ss> +)
}

sp {learn-heuristic*eval-condition*impasse*consider*force-learn
    (state <s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^superstate <ss>)
    (<ss> ^name selection)
    (<ss> ^superstate <s*1>)
    (<s*1> ^heuristic <pred>)
    (<pred> -^avoid <a*1>)
    (<pred> -^prefer <p*1>)
    (<pred> ^ntype heuristic)
    -->
    (force-learn <s>)
}

sp {learn-heuristic*apply*action*learn-heuristic
    (state <s> ^ntype heuristic)
    (<s> ^name evaluate-operator)
    (<s> ^name learn-predicate)
    (<s> ^operator <o>)
    (<o> -^duplicate-of <d*1>)
    (<o> ^type action)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <ss>)
    (<ss> ^name learn-predicate)
    (<ss> ^operator <so> +)
    -->
    (<ss> ^operator <so> >)
    (<ss> ^operator <so> =)
}

sp {learn-heuristic*apply*chunk-previous-delay*complete
    (state <s> ^name chunk-previous)
    (<s> ^quiescence t)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <ss>)
    (<ss> ^operator <op> +)
    (<s> -^non-numeric <op>)
    (<ss> ^operator { <> <op> <so> } +)
    -->
    (<ss> ^operator <so> >)
    (<ss> ^operator <so> =)
}

sp {learn-heuristic*apply*evaluate-operator
    (state <s> ^operator-selection not-indifferent)
    (<s> ^name selection)
    (<s> ^quiescence t)
    (<s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^superstate <ss>)
    (<ss> ^name learn-predicate)
    (<ss> ^heuristic <pred>)
    (<pred> ^ntype heuristic)
    (<s> ^operator <o>)
    (<o> ^name evaluate-operator)
    (<o> ^superoperator <so>)
    (<ss> ^operator <so> +)
    (<pred> ^consider <c*1>)
    -->
    (<ss> ^operator <so> >)
    (<ss> ^operator <so> =)
}

sp {learn-predicate*heuristic*previous*action*copy*heuristicntype
    (state <s> ^name learn-predicate)
    (<s> ^superstate <ss>)
    (<ss> ^name selection)
    (<ss> ^retrieve-action <rh>)
    -->
    (<s> ^ntype heuristic +)
    (<s> ^list <li> +)
    (<li> ^game <g1> +)
}

sp {learn-predicate*heuristic*previous*action*copy
    (state <s> ^name learn-predicate)
    (<s> ^superstate <ss>)
    (<ss> ^name selection)
    (<ss> ^retrieve-action <rh>)
    -->
    (<s> ^retrieve-handle <rh> +)
}

sp {learn-predicate*heuristic*elaborate*previous-action
    (state <s> ^name selection)
    (<s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^superstate <ss>)
    (<ss> ^name learn-predicate)
    (<ss> ^heuristic <pred>)
    (<pred> ^modifier previously)
    (<pred> ^ntype heuristic)
    (<ss> ^retrieve-handle <rh>)
    -->
    (<s> ^retrieve-action <rh> +)
}

sp {selection*learn-heuristic*elaborate*operator-selection*not-indifferent
    (state <s> ^name selection)
    (<s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^superstate <ss>)
    (<ss> ^name learn-predicate)
    (<ss> ^heuristic <pred>)
    (<pred> -^avoid <a*1>)
    (<pred> -^prefer <p*1>)
    (<pred> ^ntype heuristic)
    -->
    (<s> ^operator-selection not-indifferent +)
}

sp {learn-predicate*apply*simulate
    (state <s> ^name learn-predicate)
    (<s> ^operator <o>)
    (<o> ^type action)
    (<s> ^copy-objects-map <com>)
    (<o> ^verb-structure <v*1>)
    (<o> ^parameters <p>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <p2>)
    (<p2> ^predicate <prep2>)
    (<prep2> ^handle on1)
    (<p2> ^predicate <prep>)
    (<prep> ^handle below1)
    (<prep2> ^instance <instance2>)
    (<prep> ^instance <instance>)
    (<instance> ^2 <obja>)
    (<instance2> ^1 <obja>)
    (<o> ^name <cname>)
    (<com> ^<obj> <obja>)
    (<obj> ^handle <ha>)
    (<p> ^<i1> <obj>)
    (<v*1> ^<num> <v1>)
    (<v1> ^verb-prep on1)
    (<v1> ^1 <i1>)
    (<v1> ^2 <i2>)
    (<p> ^<i2> <obj1>)
    (<com> ^<obj1> <objb>)
    -->
    (<s> ^simulated true +)
    (<s> ^gtype action +)
    (<prep> ^instance <instance> -)
    (<prep> ^instance <instance3> +)
    (<prep2> ^instance <instance2> -)
    (<prep2> ^instance <instance4> +)
    (<instance3> ^1 <objb> +)
    (<instance3> ^2 <obja> +)
    (<instance4> ^1 <obja> +)
    (<instance4> ^2 <objb> +)
}

sp {chunk-delay*elaborate*learn-heuristic
    (state <s> ^choices none)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<ss> ^name chunk-delay)
    (<ss> ^linked-heuristic <pred>)
    (<ss> ^linkstate <ls>)
    -->
    (<s> ^name learn-heuristic +)
    (<s> ^linked-heuristic <pred> +)
    (<s> ^linkstate <ls> +)
}

sp {selection*impasse*prefer*chunk-delay
    (state <s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^superstate <ss>)
    (<ss> ^heuristic <pred>)
    (<pred> -^modifier <m*1>)
    (<pred> -^consider <c*1>)
    (<pred> ^ntype heuristic)
    (<ss> ^list <l*1>)
    (<l*1> ^game <g*1>)
    -->
    (<s> ^name chunk-delay +)
    (<s> ^linked-heuristic <pred> +)
    (<s> ^linkstate <ss> +)
}

sp {chunk-previous-delay*elaborate*chunk-previous
    (state <s> ^choices none)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<ss> ^name chunk-previous-delay)
    (<ss> ^linked-heuristic <pred>)
    (<ss> ^linkstate <ls>)
    -->
    (<s> ^name chunk-previous +)
    (<s> ^linked-heuristic <pred> +)
    (<s> ^linkstate <ls> +)
}

sp {selection*impasse*chunk-previous-delay
    (state <s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^superstate <ss>)
    (<ss> ^list <l*1>)
    (<l*1> ^game <g*1>)
    (<ss> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^heuristic <pred>)
    (<pred> -^consider <c*1>)
    (<pred> ^modifier previously)
    (<pred> ^ntype heuristic)
    -->
    (<s> ^name chunk-previous-delay +)
    (<s> ^linked-heuristic <pred> +)
    (<s> ^linkstate <ss> +)
}

sp {selection*impasse*heuristic*chunk-previous*force-learn
    (state <s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^superstate <ss>)
    (<ss> ^superstate <s*1>)
    (<s*1> ^problemspace game-heuristics)
    (<ss> ^list <l*1>)
    (<l*1> ^game <g*1>)
    -->
    (force-learn <s>)
}

sp {selection*impasse*heuristic*prefer*force-learn
    (state <s> ^impasse tie)
    (<s> ^attribute operator)
    (<s> ^linked-heuristic <pred>)
    (<pred> -^modifier <m*1>)
    (<pred> -^consider <c*1>)
    (<pred> ^ntype heuristic)
    (<s> ^superstate <ss>)
    (<ss> -^problemspace games)
    (<ss> ^heuristic <pred>)
    (<ss> ^list <l*1>)
    (<l*1> ^game <g*1>)
    -->
    (force-learn <s>)
}

sp {learn-predicate*elaborate*learned-actions
    (state <s> ^ntype heuristic)
    (<s> ^name learn-predicate)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^structure <s*1>)
    (<s*1> ^actions <a*1>)
    (<a*1> ^retrieve-handle <name>)
    -->
    (<s> ^gtype action +)
    (<s> ^retrieve-handle <name> +)
}

sp {retrieve-game-structure*apply*complete*opponent
    (state <s> ^name retrieve-game-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    (<pred> ^opponent <r>)
    (<pred> ^retrieve-handle <r>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^retrieve-handle <r> +)
    (<ss> ^opponent <r> +)
}

sp {retrieve-game-structure*apply*complete
    (state <s> ^name retrieve-game-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    (<pred> ^retrieve-handle <r>)
    (<pred> -^opponent <r>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^retrieve-handle <r> +)
}

sp {retrieve-game-structure*apply*complete*start-search-depth
    (state <s> ^name retrieve-game-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    (<pred> ^start-search-depth <r>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^start-search-depth <r> +)
}

sp {chunk-puzzle-impasse*propose*complete
    (state <s> ^name chunk-puzzle-impasse)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {chunk-game-impasse*propose*complete
    (state <s> ^name chunk-game-impasse)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {chunk-puzzle-impasse*apply*complete
    (state <s> ^name chunk-puzzle-impasse)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^retrieve-handle <r>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^retrieve-handle <r> +)
}

sp {chunk-puzzle-impasse*apply*complete*start-search-depth
    (state <s> ^name chunk-puzzle-impasse)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^start-search-depth <r>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^start-search-depth <r> +)
}

sp {chunk-game-impasse*apply*complete*start-search-depth
    (state <s> ^name chunk-game-impasse)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^start-search-depth <r>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^start-search-depth <r> +)
}

sp {chunk-game-impasse*apply*complete*opponent
    (state <s> ^name chunk-game-impasse)
    (<s> ^opponent <r>)
    (<s> ^retrieve-handle <r>)
    (<s> ^superstate <ss>)
    (<ss> ^opponent true)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    -->
    (<ss> ^retrieve-handle <r> +)
}

sp {chunk-game-impasse*apply*complete
    (state <s> ^name chunk-game-impasse)
    (<s> ^retrieve-handle <r>)
    (<s> -^opponent <r>)
    (<s> ^superstate <ss>)
    (<ss> ^opponent false)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    -->
    (<ss> ^retrieve-handle <r> +)
}

sp {retrieve-game-structure*elaborate*smem-query
    (state <s> ^name retrieve-game-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^command <c>)
    (<s> ^superstate <s*2>)
    (<s*2> ^operator <o*1>)
    (<o*1> ^handle <handle>)
    -->
    (<c> ^query <cue> +)
    (<cue> ^handle <handle> +)
    (<cue> ^retrieve game +)
}

sp {chunk-puzzle-impasse*propose*retrieve-predicate-structure*action
    (state <s> ^name chunk-puzzle-impasse)
    (<s> -^retrieve-handle <r*1>)
    (<s> ^handle <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name retrieve-game-structure +)
    (<o> ^handle <name> +)
}

sp {chunk-game-impasse*propose*retrieve-predicate-structure*action
    (state <s> ^name chunk-game-impasse)
    (<s> -^retrieve-handle <r*1>)
    (<s> ^handle <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name retrieve-game-structure +)
    (<o> ^handle <name> +)
}

sp {chunk-puzzle-structure*impasse*actiongoal
    (state <s> ^choices none)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<ss> -^opponent <o*1>)
    (<ss> ^retrieve-game <handle>)
    -->
    (force-learn <s>)
    (<s> ^name chunk-puzzle-impasse +)
    (<s> ^linkstate <ss> +)
    (<s> ^handle <handle> +)
}

sp {chunk-game-structure*impasse*actiongoal
    (state <s> ^choices none)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<ss> ^opponent <o*1>)
    (<ss> ^retrieve-game <handle>)
    -->
    (force-learn <s>)
    (<s> ^name chunk-game-impasse +)
    (<s> ^linkstate <ss> +)
    (<s> ^handle <handle> +)
}

sp {chunk-game-structure*elaborate*opponent
    (state <s> ^name chunk-game-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^opponent <op>)
    -->
    (<s> ^opponent <op> +)
}

sp {chunk-game-structure*elaborate*predicate-handle
    (state <s> ^name chunk-game-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^predicate-handle <handle>)
    -->
    (<s> ^retrieve-game <handle> +)
}

sp {transfer-action-goal*learn-predicate*goal
    :o-support
    (state <s> ^gtype goal)
    (<s> ^name transfer-action-goal)
    (<s> ^retrieve-handle <handle>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^structure <pred>)
    (<pred> ^goals <act>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<act> ^retrieve-handle <handle> +)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type already-learned-goal +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game-name +)
    (<de> ^originator agent +)
}

sp {transfer-action-goal*learn-predicate*failure
    :o-support
    (state <s> ^gtype failure)
    (<s> ^name transfer-action-goal)
    (<s> ^retrieve-handle <handle>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^structure <pred>)
    (<pred> ^failures <act>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<act> ^retrieve-handle <handle> +)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type already-learned-failure +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game-name +)
    (<de> ^originator agent +)
}

sp {transfer-action-goal*learn-predicate*action
    :o-support
    (state <s> ^gtype action)
    (<s> ^name transfer-action-goal)
    (<s> ^retrieve-handle <handle>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^structure <pred>)
    (<pred> ^actions <act>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<act> ^retrieve-handle <handle> +)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type already-learned-action +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game-name +)
    (<de> ^originator agent +)
}

sp {transfer-action-goal*elaborate*super-operator
    (state <s> ^name transfer-action-goal)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^handle-name <handle>)
    (<o> ^structure <st>)
    (<st> ^from <game>)
   -{ (<s> ^top-state <t*2>)
      (<t*2> ^dialog-context <d*2>)
      (<d*2> ^name <game>)}
   -{ (<st> ^from { < <game> <game2> })
     -{ (<s> ^top-state <t*1>)
        (<t*1> ^dialog-context <d*1>)
        (<d*1> ^name <game2>)}}
    (<o> ^type <type>)
    -->
    (<s> ^gtype <type> +)
    (<s> ^game <game> +)
    (<s> ^retrieve-handle <handle> +)
}

sp {transfer-predicate-structure*apply*complete*smem-query*result
    (state <s> ^name transfer-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^nlp-functions <nf>)
    (<s> ^nlp-relationships <gr>)
    (<s> ^top-state <t*3>)
    (<t*3> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<s> ^smem <s*3>)
    (<i*1> ^status <status>)
    (<s*3> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    (<pred> ^predicate-structure <ps>)
    (<pred> ^handle <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^game <game>)
    -->
    (<dc> ^transfering <tf> +)
    (<dc> ^learning-predicate <lp> +)
    (<lp> ^name <name> +)
    (<tf> ^name <name> +)
    (<tf> ^lti <pred> +)
    (<tf> ^to <game> +)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type transfer-concept +)
    (<msg> ^fields <f> +)
    (<f> ^relationships <gr> +)
    (<f> ^concept-name <name> +)
    (<f> ^functions <nf> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {BAD-TRANSFER*transfer-predicate-structure*elaborate*smem-query*unknown
    (state <s> ^name transfer-predicate-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^failure <f*1>)
    (<s> ^superstate <ss>)
    -->
    (halt)
    (<ss> ^unknown true +)
}

sp {transfer-predicate-structure*propose*complete
    (state <s> ^name transfer-predicate-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {transfer-predicate-structure*propose*convert-NLP-to-language
    (state <s> ^name transfer-predicate-structure)
    (<s> -^nlp-relationships <n*1>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <r*2>)
    (<r*2> ^predicate-structure <ps>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name convert-NLP-to-language +)
    (<o> ^structure <ps> +)
}

sp {transfer-predicate-structure*elaborate*smem-query
    (state <s> ^name transfer-predicate-structure)
    (<s> ^handle <handle>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <c>)
    -->
    (<c> ^query <cue> +)
    (<c> ^depth 15 +)
    (<cue> ^handle <handle> +)
    (<cue> ^item-type predicate +)
}

sp {transfer-predicate-structure*elaborate*predicate-lti
    (state <s> ^name transfer-predicate-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^predicate-lti <lti>)
    -->
    (<s> ^predicate-lti <lti> +)
}

sp {transfer-predicate-structure*elaborate*condition
    :interrupt
    (state <s> ^name transfer-predicate-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^condition <co>)
    -->
    (<s> ^condition <co> +)
}

sp {transfer-predicate-structure*elaborate*predicate-handle
    :interrupt
    (state <s> ^name transfer-predicate-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^handle <handle>)
    -->
    (<s> ^handle <handle> +)
}

sp {chunk-predicate-impasse*apply*complete*action
    (state <s> ^name chunk-predicate-impasse)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^gtype { << action goal failure heuristic >> <type> })
    (<s> ^handle <h>)
    (<s> ^superstate <ss>)
    (<s> ^<type> <p>)
    -->
    (<ss> ^<type> <p> +)
}

sp {chunk-predicate-impasse*apply*complete
    (state <s> ^name chunk-predicate-impasse)
    (<s> -^handle <h*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^gtype <gtype>)
    (<s> ^predicate <p>)
    (<p> ^link <co>)
    (<co> ^type concept)
    (<co> ^attribute predicate)
    (<s> ^<gtype> <g*1>)
    (<g*1> ^condition <co>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^predicate <p> +)
    (<ss> ^gtype predicate +)
}

sp {chunk-predicate-impasse*propose*complete
    (state <s> ^name chunk-predicate-impasse)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {chunk-predicate-impasse*propose*transfer-predicate-structure
    (state <s> ^name chunk-predicate-structure)
    (<s> -^handle <h*1>)
    (<s> ^unknown <u*1>)
    (<s> ^gtype <gtype>)
    (<s> ^<gtype> <g*1>)
    (<g*1> ^condition <co>)
    (<co> ^type concept)
    (<co> ^attribute predicate)
    (<co> ^name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name transfer-predicate-structure +)
    (<o> ^condition <co> +)
    (<o> ^handle <name> +)
}

sp {chunk-predicate-impasse*elaborate*dont-learn
    (state <s> ^name chunk-predicate-impasse)
    (<s> ^unknown <u*1>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^unknown true +)
}

sp {chunk-predicate-impasse*propose*retrieve-predicate-structure
    (state <s> ^name chunk-predicate-impasse)
    (<s> -^unknown <u*1>)
    (<s> -^handle <h*1>)
    (<s> ^gtype <gtype>)
    (<s> ^<gtype> <g*1>)
    (<g*1> ^condition <co>)
   -{ (<s> ^predicate <p*1>)
      (<p*1> ^link <co>)}
    (<co> ^type concept)
    (<co> ^attribute predicate)
    (<co> ^name <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name retrieve-predicate-structure +)
    (<o> ^condition <co> +)
    (<o> ^handle <name> +)
}

sp {chunk-predicate-impasse*propose*retrieve-predicate-structure*action
    (state <s> ^name chunk-predicate-impasse)
    (<s> -^goal <g*1>)
    (<s> -^failure <f*1>)
    (<s> -^heuristic <h*1>)
    (<s> -^action <a*1>)
    (<s> ^gtype <gtype>)
    (<s> ^handle <name>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name retrieve-predicate-structure +)
    (<o> ^handle <name> +)
}

sp {chunk-predicate-structure*impasse454
    (state <s> ^choices none)
    (<s> -^world <w*1>)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <t>)
    (<ss> ^<t> <a>)
    -->
    (<s> ^name chunk-predicate-impasse +)
    (<s> ^linkstate <ss> +)
    (<s> ^condition <co> +)
    (<s> ^<t> <a> +)
    (<s> ^gtype <t> +)
}

sp {chunk-predicate-structure*impasse
    (state <s> ^choices none)
    (<s> -^world <w*1>)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <t>)
    (<ss> ^<t> <a>)
    -->
    (force-learn <s>)
}

sp {chunk-predicate-structure*impasse*actiongoal2323
    (state <s> ^choices none)
    (<s> -^world <w*1>)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <t>)
    (<ss> ^retrieve-handle <handle>)
    -->
    (force-learn <s>)
}

sp {chunk-predicate-structure*impasse*actiongoal
    (state <s> ^choices none)
    (<s> -^world <w*1>)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <t>)
    (<ss> ^retrieve-handle <handle>)
    -->
    (<s> ^name chunk-predicate-impasse +)
    (<s> ^linkstate <ss> +)
    (<s> ^handle <handle> +)
    (<s> ^gtype <t> +)
}

sp {chunk-predicate-structure*elaborate*predicate-handle
    (state <s> ^name chunk-predicate-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^gtype <gtype>)
    (<o> ^predicate-handle <handle>)
    -->
    (<s> ^gtype <gtype> +)
    (<s> ^retrieve-handle <handle> +)
}

sp {chunk-predicate-structure*elaborate*gtype
    (state <s> ^name chunk-predicate-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^gtype <gtype>)
    (<o> ^<gtype> <a>)
    -->
    (<s> ^gtype <gtype> +)
    (<s> ^<gtype> <a> +)
}

sp {chunk-predicate-structure*elaborate*unknown
    :o-support
    (state <s> ^name check-smem-concept)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^failure <f*1>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^unknown true +)
}

sp {check-smem-concept*elaborate*known*stored
    (state <s> ^stored true)
    (<s> ^name check-smem-concept)
    (<s> ^operator <o*1>)
    (<o*1> ^name store-smem-transfer)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^known true +)
}

sp {chunk-predicate-structure*elaborate*known-store
    :o-support
    (state <s> ^name store-smem-transfer)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    (<s> ^superstate <ss>)
    (<ss> ^re-store-game <r>)
    -->
    (<sc> ^store <r> +)
    (<ss> ^stored true +)
}

sp {chunk-predicate-structure*elaborate*from
    (state <s> ^name check-smem-concept)
    (<s> ^operator <o*1>)
    (<o*1> ^name store-smem-transfer)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <r>)
    (<s> ^superstate <ss>)
    (<ss> ^game <game>)
    (<ss> ^superstate <s*2>)
    (<s*2> ^superstate <s*3>)
    (<s*3> ^name transfer-action-goal)
    -->
    (<s> ^re-store-game <r> +)
    (<r> ^from <game> +)
}

sp {chunk-predicate-structure*elaborate*known
    :o-support
    (state <s> ^name check-smem-concept)
    (<s> ^superstate <ss>)
   -{ (<ss> ^superstate <s*2>)
      (<s*2> ^superstate <s*3>)
      (<s*3> ^name transfer-action-goal)}
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <r*2>)
    -->
    (<ss> ^known true +)
}

sp {chunk-predicate-structure*elaborate*smem-query*auto-transfer
    (state <s> ^name check-smem-concept)
    (<s> ^smem <s*1>)
    (<s*1> ^command <c>)
    (<s> ^superstate <ss>)
    (<ss> ^gtype <gtype>)
    (<ss> ^<gtype> <g*1>)
    (<g*1> ^condition <co>)
    (<co> ^type concept)
    (<co> ^attribute predicate)
    (<co> ^name <name>)
    -->
    (<c> ^query <cue> +)
    (<c> ^depth 1 +)
    (<cue> ^handle <name> +)
    (<cue> ^item-type predicate +)
}

sp {check-smem-concept*propose*complete
    (state <s> ^name check-smem-concept)
    (<s> ^superstate <s*1>)
    (<s*1> ^superstate <s*2>)
    (<s*2> ^superstate <s*3>)
    (<s*3> ^name transfer-action-goal)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name store-smem-transfer +)
}

sp {chunk-predicate-structure*propose*check-smem-concept
    (state <s> ^name chunk-predicate-structure)
    (<s> -^known <k*1>)
    (<s> -^unknown <u*1>)
    (<s> -^retrieve-handle <r*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name check-smem-concept +)
}

sp {chunk-predicate-structure*propose*complete
    (state <s> ^name chunk-predicate-structure)
    (<s> ^gtype <t>)
    (<s> ^retrieve-handle <r*1>)
    (<s> ^<t> <p>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
}

sp {chunk-predicate-structure*elaborate*result*actiongoal
    (state <s> ^name chunk-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^gtype <t>)
    (<s> ^retrieve-handle <r*1>)
    (<s> ^superstate <ss>)
    (<s> ^<t> <p>)
    -->
    (<ss> ^<t> <p> +)
}

sp {chunk-predicate-structure*elaborate*result
    (state <s> ^name chunk-predicate-structure)
    (<s> ^gtype <gtype>)
    (<s> ^predicate <p>)
    (<p> ^handle <name>)
    (<s> ^superstate <ss>)
    (<s> ^<gtype> <g*1>)
    (<g*1> ^condition <c*1>)
    (<c*1> ^name <name>)
    -->
    (<ss> ^predicate <p> +)
    (<ss> ^gtype predicate +)
}

sp {satisfy-predicate-conditions*elaborate*potential-argument
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c2>)
    (<l1> ^game <g1>)
    (<s1> ^<c2> <a1>)
    (<a1> ^potential-args <p1>)
    (<a1> ^parameter-set <p2>)
    (<a1> ^condition <c1>)
    (<c1> ^parameter <p3>)
    (<c1> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <p5>)
    (<p5> ^1 <o2>)
   -{ (<o2> -^<wme> <w*1>)
      (<s1> ^list <l*1>)}
    (<p3> ^{ << 1 2 3 4 5 >> <c4> } <p4>)
    (<p4> ^param-id <c6>)
    (<p5> ^<c4> <o1>)
    -->
    (<p1> ^<c6> <o1> +)
}

sp {satisfy-predicate-conditions*elaborate*potential-argument*number
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^condition <c3>)
    (<c3> ^return-type number)
    (<c3> ^rtype single)
    (<a1> ^potential-args <p1>)
    (<a1> ^parameter-set <p2>)
    (<c3> ^parameter <p3>)
    (<c3> ^result <r1>)
    (<r1> ^set <s2>)
    (<s2> ^instance <p5>)
    (<p5> ^1 <v*1>)
    (<p5> ^<c4> <c7>)
    (<p3> ^<c4> <p4>)
    (<p4> ^param-id <c6>)
    -->
    (<p1> ^<c6> <c7> +)
}

sp {satisfy-predicate-conditions*elaborate*negative-condition-instance*1-argument
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c2>)
    (<l1> ^game <g1>)
    (<s1> ^<c2> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate3)
    (<a1> ^potential-args <p1>)
    (<a1> ^condition <c1>)
    (<c1> ^parameter <p3>)
    (<c1> ^result <r1>)
    (<p3> ^<c6> <p4>)
    (<p4> ^param-id <c4>)
    (<p1> ^<c4> <o1>)
   -{ (<r1> ^set <s*1>)
      (<s*1> ^instance <p*1>)
      (<p*1> ^<c6> <o1>)}
    -->
    (<p2> ^neg <n1> +)
    (<n1> ^<c4> <o1> +)
}

sp {satisfy-predicate-conditions*elaborate*negative-condition-instance*3-arguments
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c19>)
    (<l1> ^game <g1>)
    (<s1> ^<c19> <a1>)
    (<a1> ^parameter-set <p1>)
    (<p1> ^tested calculate3)
    (<a1> ^potential-args <p2>)
    (<a1> ^condition <c1>)
    (<c1> ^parameter <p3>)
    (<p3> ^num 3)
    (<p3> ^2 <*2>)
    (<*2> ^param-id <ar1>)
    (<p3> ^3 <*1>)
    (<*1> ^param-id <ar2>)
    (<p3> ^1 <*3>)
    (<*3> ^param-id <ar3>)
    (<c1> ^result <r1>)
    (<p2> ^<ar1> <*6>)
    (<p2> ^<ar2> <*5>)
    (<p2> ^<ar3> <*4>)
   -{ (<r1> ^set <s2>)
      (<s2> ^instance <p4>)
      (<p4> ^2 <*6>)
      (<p4> ^3 <*5>)
      (<p4> ^1 <*4>)}
    -->
    (<p1> ^negpair3 <n1> +)
    (<n1> ^<ar1> <*6> +)
    (<n1> ^<ar2> <*5> +)
    (<n1> ^<ar3> <*4> +)
}

sp {satisfy-predicate-conditions*elaborate*negative-condition-instance*2-arguments
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c2>)
    (<l1> ^game <g1>)
    (<s1> ^<c2> <p1>)
    (<p1> ^parameter-set <p2>)
    (<p2> ^tested calculate3)
    (<p1> ^potential-args <p3>)
    (<p1> ^condition <c1>)
    (<c1> ^parameter <p4>)
    (<p4> ^num 2)
    (<p4> ^2 <*1>)
    (<*1> ^param-id <x1>)
    (<p4> ^1 <*2>)
    (<*2> ^param-id <x2>)
    (<c1> ^result <r1>)
    (<p3> ^<x1> <*4>)
    (<p3> ^<x2> <*3>)
   -{ (<r1> ^set <s2>)
      (<s2> ^instance <p5>)
      (<p5> ^2 <*4>)
      (<p5> ^1 <*3>)}
    -->
    (<p2> ^negpair <n1> +)
    (<n1> ^<x2> <*3> +)
    (<n1> ^<x1> <*4> +)
}

sp {satisfy-predicate-conditions*elaborate*initial-set*1-arguments
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate6)
    (<p2> ^argnum 1)
    (<a1> ^potential-args <p1>)
    (<p1> ^1 <o1>)
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^1 <o1> +)
}

sp {satisfy-predicate-conditions*elaborate*initial-set*4-arguments
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate6)
    (<p2> ^argnum 4)
    (<a1> ^potential-args <p1>)
    (<p1> ^2 <o2>)
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
    (<p1> ^3 <o3>)
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^2 <o2>)
      (<pair4> ^3 <o3>)}
   -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
    (<p1> ^4 <o4>)
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^3 <o3>)
      (<pair6> ^4 <o4>)}
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^2 <o2>)
      (<pair5> ^4 <o4>)}
   -{ (<p2> ^neg <n4>)
      (<n4> ^4 <o4>)}
    (<p1> ^1 <o1>)
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^4 <o4>)
      (<pair3> ^1 <o1>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^3 <o3>)
      (<pair2> ^1 <o1>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^2 <o2>)
      (<pair1> ^1 <o1>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^4 <o4> +)
    (<i1> ^1 <o1> +)
    (<i1> ^2 <o2> +)
    (<i1> ^3 <o3> +)
}

sp {satisfy-predicate-conditions*elaborate*initial-set*16-arguments
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate6)
    (<p2> ^argnum 16)
    (<a1> ^potential-args <p1>)
    (<p1> ^16 <o16>)
   -{ (<p2> ^neg <n16>)
      (<n16> ^16 <o16>)}
    (<p1> ^15 <o15>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^15 <o15>)}
   -{ (<p2> ^neg <n15>)
      (<n15> ^15 <o15>)}
    (<p1> ^14 <o14>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^14 <o14>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^14 <o14>)}
   -{ (<p2> ^neg <n14>)
      (<n14> ^14 <o14>)}
    (<p1> ^13 <o13>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^13 <o13>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^13 <o13>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^13 <o13>)}
   -{ (<p2> ^neg <n13>)
      (<n13> ^13 <o13>)}
    (<p1> ^12 <o12>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^12 <o12>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^12 <o12>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^12 <o12>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^12 <o12>)}
   -{ (<p2> ^neg <n12>)
      (<n12> ^12 <o12>)}
    (<p1> ^11 <o11>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^11 <o11>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^11 <o11>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^11 <o11>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^11 <o11>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^11 <o11>)}
   -{ (<p2> ^neg <n11>)
      (<n11> ^11 <o11>)}
    (<p1> ^9 <o9>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^9 <o9>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^9 <o9>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^9 <o9>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^9 <o9>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^9 <o9>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^11 <o11>)
      (<pair7> ^9 <o9>)}
   -{ (<p2> ^neg <n9>)
      (<n9> ^9 <o9>)}
    (<p1> ^7 <o7>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^7 <o7>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^7 <o7>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^7 <o7>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^7 <o7>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^7 <o7>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^11 <o11>)
      (<pair7> ^7 <o7>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^9 <o9>)
      (<pair6> ^7 <o7>)}
   -{ (<p2> ^neg <n7>)
      (<n7> ^7 <o7>)}
    (<p1> ^6 <o6>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^6 <o6>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^6 <o6>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^6 <o6>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^6 <o6>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^6 <o6>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^11 <o11>)
      (<pair7> ^6 <o6>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^9 <o9>)
      (<pair6> ^6 <o6>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^7 <o7>)
      (<pair6> ^6 <o6>)}
   -{ (<p2> ^neg <n6>)
      (<n6> ^6 <o6>)}
    (<p1> ^8 <o8>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^8 <o8>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^8 <o8>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^8 <o8>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^8 <o8>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^8 <o8>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^11 <o11>)
      (<pair7> ^8 <o8>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^9 <o9>)
      (<pair6> ^8 <o8>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^7 <o7>)
      (<pair7> ^8 <o8>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^6 <o6>)
      (<pair7> ^8 <o8>)}
   -{ (<p2> ^neg <n8>)
      (<n8> ^8 <o8>)}
    (<p1> ^2 <o2>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^2 <o2>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^2 <o2>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^2 <o2>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^2 <o2>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^2 <o2>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^11 <o11>)
      (<pair7> ^2 <o2>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^9 <o9>)
      (<pair6> ^2 <o2>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^8 <o8>)
      (<pair7> ^2 <o2>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^7 <o7>)
      (<pair6> ^2 <o2>)}
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^6 <o6>)
      (<pair5> ^2 <o2>)}
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
    (<p1> ^10 <o10>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^10 <o10>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^10 <o10>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^10 <o10>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^10 <o10>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^10 <o10>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^11 <o11>)
      (<pair7> ^10 <o10>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^9 <o9>)
      (<pair7> ^10 <o10>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^8 <o8>)
      (<pair7> ^10 <o10>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^7 <o7>)
      (<pair7> ^10 <o10>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^6 <o6>)
      (<pair7> ^10 <o10>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^2 <o2>)
      (<pair7> ^10 <o10>)}
   -{ (<p2> ^neg <n10>)
      (<n10> ^1 <o10>)}
    (<p1> ^3 <o3>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^3 <o3>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^3 <o3>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^3 <o3>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^3 <o3>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^3 <o3>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^11 <o11>)
      (<pair7> ^3 <o3>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^10 <o10>)
      (<pair7> ^3 <o3>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^9 <o9>)
      (<pair6> ^3 <o3>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^8 <o8>)
      (<pair7> ^3 <o3>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^7 <o7>)
      (<pair6> ^3 <o3>)}
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^6 <o6>)
      (<pair5> ^3 <o3>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^2 <o2>)
      (<pair2> ^3 <o3>)}
   -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
    (<p1> ^5 <o5>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^5 <o5>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^5 <o5>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^5 <o5>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^5 <o5>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^5 <o5>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^11 <o11>)
      (<pair7> ^5 <o5>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^10 <o10>)
      (<pair7> ^5 <o5>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^9 <o9>)
      (<pair6> ^5 <o5>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^8 <o8>)
      (<pair7> ^5 <o5>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^7 <o7>)
      (<pair6> ^5 <o5>)}
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^6 <o6>)
      (<pair5> ^5 <o5>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^3 <o3>)
      (<pair4> ^5 <o5>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^2 <o2>)
      (<pair4> ^5 <o5>)}
   -{ (<p2> ^neg <n5>)
      (<n5> ^5 <o5>)}
    (<p1> ^4 <o4>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^4 <o4>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^4 <o4>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^4 <o4>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^4 <o4>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^4 <o4>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^11 <o11>)
      (<pair7> ^4 <o4>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^10 <o10>)
      (<pair7> ^4 <o4>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^9 <o9>)
      (<pair6> ^4 <o4>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^8 <o8>)
      (<pair7> ^4 <o4>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^7 <o7>)
      (<pair6> ^4 <o4>)}
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^6 <o6>)
      (<pair5> ^4 <o4>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^5 <o5>)
      (<pair4> ^4 <o4>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^3 <o3>)
      (<pair3> ^4 <o4>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^2 <o2>)
      (<pair3> ^4 <o4>)}
   -{ (<p2> ^neg <n4>)
      (<n4> ^4 <o4>)}
    (<p1> ^1 <o1>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^16 <o16>)
      (<pair5> ^1 <o1>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^15 <o15>)
      (<pair4> ^1 <o1>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^14 <o14>)
      (<pair3> ^1 <o1>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^13 <o13>)
      (<pair2> ^1 <o1>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^12 <o12>)
      (<pair1> ^1 <o1>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^11 <o11>)
      (<pair7> ^1 <o1>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^10 <o10>)
      (<pair7> ^1 <o1>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^9 <o9>)
      (<pair6> ^1 <o1>)}
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^8 <o8>)
      (<pair7> ^1 <o1>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^7 <o7>)
      (<pair6> ^1 <o1>)}
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^6 <o6>)
      (<pair5> ^1 <o1>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^5 <o5>)
      (<pair4> ^1 <o1>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^4 <o4>)
      (<pair3> ^1 <o1>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^3 <o3>)
      (<pair2> ^1 <o1>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^2 <o2>)
      (<pair1> ^1 <o1>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^8 <o8> +)
    (<i1> ^7 <o7> +)
    (<i1> ^6 <o6> +)
    (<i1> ^5 <o5> +)
    (<i1> ^4 <o4> +)
    (<i1> ^1 <o1> +)
    (<i1> ^2 <o2> +)
    (<i1> ^3 <o3> +)
    (<i1> ^9 <o9> +)
    (<i1> ^10 <o10> +)
    (<i1> ^16 <o16> +)
    (<i1> ^15 <o15> +)
    (<i1> ^14 <o14> +)
    (<i1> ^13 <o13> +)
    (<i1> ^12 <o12> +)
    (<i1> ^11 <o11> +)
}

sp {satisfy-predicate-conditions*elaborate*initial-set*8-arguments
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate6)
    (<p2> ^argnum 8)
    (<a1> ^potential-args <p1>)
    (<p1> ^7 <o7>)
   -{ (<p2> ^neg <n7>)
      (<n7> ^5 <o7>)}
    (<p1> ^6 <o6>)
   -{ (<p2> ^negpair <pair28>)
      (<pair28> ^7 <o7>)
      (<pair28> ^6 <o6>)}
   -{ (<p2> ^neg <n6>)
      (<n6> ^6 <o6>)}
    (<p1> ^8 <o8>)
   -{ (<p2> ^negpair <pair29>)
      (<pair29> ^6 <o6>)
      (<pair29> ^8 <o8>)}
   -{ (<p2> ^neg <n8>)
      (<n8> ^8 <o8>)}
    (<p1> ^2 <o2>)
   -{ (<p2> ^negpair <pair30>)
      (<pair30> ^7 <o2>)
      (<pair30> ^8 <o8>)}
   -{ (<p2> ^negpair <pair13>)
      (<pair13> ^8 <o8>)
      (<pair13> ^2 <o2>)}
   -{ (<p2> ^negpair <pair12>)
      (<pair12> ^7 <o7>)
      (<pair12> ^2 <o2>)}
   -{ (<p2> ^negpair <pair11>)
      (<pair11> ^6 <o6>)
      (<pair11> ^2 <o2>)}
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
    (<p1> ^3 <o3>)
   -{ (<p2> ^negpair <pair18>)
      (<pair18> ^8 <o8>)
      (<pair18> ^3 <o3>)}
   -{ (<p2> ^negpair <pair17>)
      (<pair17> ^7 <o7>)
      (<pair17> ^3 <o3>)}
   -{ (<p2> ^negpair <pair16>)
      (<pair16> ^6 <o6>)
      (<pair16> ^3 <o3>)}
   -{ (<p2> ^negpair <pair8>)
      (<pair8> ^2 <o2>)
      (<pair8> ^3 <o3>)}
   -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
    (<p1> ^5 <o5>)
   -{ (<p2> ^negpair <pair27>)
      (<pair27> ^8 <o8>)
      (<pair27> ^5 <o5>)}
   -{ (<p2> ^negpair <pair26>)
      (<pair26> ^7 <o7>)
      (<pair26> ^5 <o5>)}
   -{ (<p2> ^negpair <pair25>)
      (<pair25> ^6 <o6>)
      (<pair25> ^5 <o5>)}
   -{ (<p2> ^negpair <pair15>)
      (<pair15> ^3 <o3>)
      (<pair15> ^5 <o5>)}
   -{ (<p2> ^negpair <pair10>)
      (<pair10> ^2 <o2>)
      (<pair10> ^5 <o5>)}
   -{ (<p2> ^neg <n5>)
      (<n5> ^5 <o5>)}
    (<p1> ^4 <o4>)
   -{ (<p2> ^negpair <pair24>)
      (<pair24> ^8 <o8>)
      (<pair24> ^4 <o4>)}
   -{ (<p2> ^negpair <pair23>)
      (<pair23> ^7 <o7>)
      (<pair23> ^4 <o4>)}
   -{ (<p2> ^negpair <pair22>)
      (<pair22> ^6 <o6>)
      (<pair22> ^4 <o4>)}
   -{ (<p2> ^negpair <pair21>)
      (<pair21> ^5 <o5>)
      (<pair21> ^4 <o4>)}
   -{ (<p2> ^negpair <pair14>)
      (<pair14> ^3 <o3>)
      (<pair14> ^4 <o4>)}
   -{ (<p2> ^negpair <pair9>)
      (<pair9> ^2 <o2>)
      (<pair9> ^4 <o4>)}
   -{ (<p2> ^neg <n4>)
      (<n4> ^4 <o4>)}
    (<p1> ^1 <o1>)
   -{ (<p2> ^negpair <pair7>)
      (<pair7> ^8 <o8>)
      (<pair7> ^1 <o1>)}
   -{ (<p2> ^negpair <pair6>)
      (<pair6> ^7 <o7>)
      (<pair6> ^1 <o1>)}
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^6 <o6>)
      (<pair5> ^1 <o1>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^5 <o5>)
      (<pair4> ^1 <o1>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^4 <o4>)
      (<pair3> ^1 <o1>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^3 <o3>)
      (<pair2> ^1 <o1>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^2 <o2>)
      (<pair1> ^1 <o1>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^8 <o8> +)
    (<i1> ^7 <o7> +)
    (<i1> ^6 <o6> +)
    (<i1> ^5 <o5> +)
    (<i1> ^4 <o4> +)
    (<i1> ^1 <o1> +)
    (<i1> ^2 <o2> +)
    (<i1> ^3 <o3> +)
}

sp {satisfy-predicate-conditions*elaborate*initial-set*6-arguments
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate6)
    (<p2> ^argnum 6)
    (<a1> ^potential-args <p1>)
    (<p1> ^6 <o6>)
   -{ (<p2> ^neg <n6>)
      (<n6> ^6 <o6>)}
    (<p1> ^2 <o2>)
   -{ (<p2> ^negpair <pair11>)
      (<pair11> ^6 <o6>)
      (<pair11> ^2 <o2>)}
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
    (<p1> ^3 <o3>)
   -{ (<p2> ^negpair <pair16>)
      (<pair16> ^6 <o6>)
      (<pair16> ^3 <o3>)}
   -{ (<p2> ^negpair <pair8>)
      (<pair8> ^2 <o2>)
      (<pair8> ^3 <o3>)}
   -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
    (<p1> ^5 <o5>)
   -{ (<p2> ^negpair <pair25>)
      (<pair25> ^6 <o6>)
      (<pair25> ^5 <o5>)}
   -{ (<p2> ^negpair <pair15>)
      (<pair15> ^3 <o3>)
      (<pair15> ^5 <o5>)}
   -{ (<p2> ^negpair <pair10>)
      (<pair10> ^2 <o2>)
      (<pair10> ^5 <o5>)}
   -{ (<p2> ^neg <n5>)
      (<n5> ^5 <o5>)}
    (<p1> ^4 <o4>)
   -{ (<p2> ^negpair <pair22>)
      (<pair22> ^6 <o6>)
      (<pair22> ^4 <o4>)}
   -{ (<p2> ^negpair <pair21>)
      (<pair21> ^5 <o5>)
      (<pair21> ^4 <o4>)}
   -{ (<p2> ^negpair <pair14>)
      (<pair14> ^3 <o3>)
      (<pair14> ^4 <o4>)}
   -{ (<p2> ^negpair <pair9>)
      (<pair9> ^2 <o2>)
      (<pair9> ^4 <o4>)}
   -{ (<p2> ^neg <n4>)
      (<n4> ^4 <o4>)}
    (<p1> ^1 <o1>)
   -{ (<p2> ^negpair <pair5>)
      (<pair5> ^6 <o6>)
      (<pair5> ^1 <o1>)}
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^5 <o5>)
      (<pair4> ^1 <o1>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^4 <o4>)
      (<pair3> ^1 <o1>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^3 <o3>)
      (<pair2> ^1 <o1>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^2 <o2>)
      (<pair1> ^1 <o1>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^6 <o6> +)
    (<i1> ^5 <o5> +)
    (<i1> ^4 <o4> +)
    (<i1> ^1 <o1> +)
    (<i1> ^2 <o2> +)
    (<i1> ^3 <o3> +)
}

sp {satisfy-predicate-conditions*elaborate*initial-set*5-arguments
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate6)
    (<p2> ^argnum 5)
    (<a1> ^potential-args <p1>)
    (<p1> ^2 <o2>)
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
    (<p1> ^3 <o3>)
   -{ (<p2> ^negpair <pair8>)
      (<pair8> ^2 <o2>)
      (<pair8> ^3 <o3>)}
   -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
    (<p1> ^5 <o5>)
   -{ (<p2> ^negpair <pair15>)
      (<pair15> ^3 <o3>)
      (<pair15> ^5 <o5>)}
   -{ (<p2> ^negpair <pair10>)
      (<pair10> ^2 <o2>)
      (<pair10> ^5 <o5>)}
   -{ (<p2> ^neg <n5>)
      (<n5> ^5 <o5>)}
    (<p1> ^4 <o4>)
   -{ (<p2> ^negpair <pair21>)
      (<pair21> ^5 <o5>)
      (<pair21> ^4 <o4>)}
   -{ (<p2> ^negpair <pair14>)
      (<pair14> ^3 <o3>)
      (<pair14> ^4 <o4>)}
   -{ (<p2> ^negpair <pair9>)
      (<pair9> ^2 <o2>)
      (<pair9> ^4 <o4>)}
   -{ (<p2> ^neg <n4>)
      (<n4> ^4 <o4>)}
    (<p1> ^1 <o1>)
   -{ (<p2> ^negpair <pair4>)
      (<pair4> ^5 <o5>)
      (<pair4> ^1 <o1>)}
   -{ (<p2> ^negpair <pair3>)
      (<pair3> ^4 <o4>)
      (<pair3> ^1 <o1>)}
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^3 <o3>)
      (<pair2> ^1 <o1>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^2 <o2>)
      (<pair1> ^1 <o1>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^5 <o5> +)
    (<i1> ^4 <o4> +)
    (<i1> ^1 <o1> +)
    (<i1> ^2 <o2> +)
    (<i1> ^3 <o3> +)
}

sp {satisfy-predicate-conditions*elaborate*initial-set*2-arguments
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate6)
    (<p2> ^argnum 2)
    (<a1> ^potential-args <p1>)
    (<p1> ^2 <o2>)
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
    (<p1> ^1 <o1>)
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^2 <o2>)
      (<pair1> ^1 <o1>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^1 <o1> +)
    (<i1> ^2 <o2> +)
}

sp {satisfy-predicate-conditions*elaborate*initial-set*3-arguments
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate6)
    (<p2> ^argnum 3)
    (<a1> ^potential-args <p1>)
    (<p1> ^2 <o2>)
   -{ (<p2> ^neg <n2>)
      (<n2> ^2 <o2>)}
    (<p1> ^3 <o3>)
   -{ (<p2> ^negpair <pair8>)
      (<pair8> ^2 <o2>)
      (<pair8> ^3 <o3>)}
   -{ (<p2> ^neg <n3>)
      (<n3> ^3 <o3>)}
    (<p1> ^1 <o1>)
   -{ (<p2> ^negpair <pair2>)
      (<pair2> ^3 <o3>)
      (<pair2> ^1 <o1>)}
   -{ (<p2> ^negpair <pair1>)
      (<pair1> ^2 <o2>)
      (<pair1> ^1 <o1>)}
   -{ (<p2> ^neg <n1>)
      (<n1> ^1 <o1>)}
    -->
    (<p2> ^iset <i1> +)
    (<i1> ^1 <o1> +)
    (<i1> ^2 <o2> +)
    (<i1> ^3 <o3> +)
}

sp {satisfy-predicate-conditions*elaborate*result*set
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate3)
    (<p2> ^tested calculate6)
    (<p2> ^tested calculate4)
    (<p2> ^tested calculate5)
    (<p2> ^tested calculate2)
    (<p2> ^tested calculate1)
    (<p2> ^iset <i1>)
   -{ (<i1> ^<ind1> { <=> <i1> <obja> })
      (<i1> ^<ind1> <obja>)
      (<i1> ^{ <> <ind1> <ind2> } <obja>)}
   -{ (<p2> ^negpair <pair>)
      (<i1> ^<ind1> <obja>)
      (<pair> ^<ind1> <obja>)
      (<i1> ^{ <> <ind1> <ind2> } <objb>)
      (<pair> ^<ind2> <objb>)}
   -{ (<p2> ^negpair3 <pair3>)
      (<i1> ^<ind1> <obja>)
      (<pair3> ^<ind1> <obja>)
      (<i1> ^{ <> <ind1> <ind2> } <objb>)
      (<pair3> ^<ind2> <objb>)
      (<i1> ^{ <> <ind2> <> <ind1> <ind3> } <objc>)
      (<pair3> ^<ind3> <objc>)}
   -{ (<p2> ^neg <neg1>)
      (<i1> ^<ind4> <obj3>)
      (<neg1> ^<ind4> <obj3>)}
    (<a1> ^potential-args <p1>)
    -->
    (<p2> ^set <i1> +)
}

sp {satisfy-predicate-conditions*elaborate*instance*from-predicate-results
    (state <s1> ^gtype predicate)
    (<s1> ^list <l1>)
    (<l1> ^game <g1>)
    (<s1> ^predicate <p1>)
    (<p1> ^parameter-set <p2>)
    (<p2> ^tested calculate6)
    (<p2> ^tested calculate5)
    (<p2> ^tested calculate2)
    (<p2> ^tested calculate1)
    (<p1> ^potential-args <p3>)
    (<p2> ^set <s2>)
    -->
    (<p1> ^instance <s2> +)
}

sp {satisfy-predicate-conditions*elaborate*calculate1
    (state <s1> ^simulated true)
    (<s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<s1> ^<c1> <a1>)
   -{ (<a1> ^condition <c2>)
      (<c2> -^return-type number)
      (<c2> ^result <r*2>)
      (<r*2> ^set <rset2>)
     -{ (<rset2> ^instance <i*2>)
        (<i*2> ^1 <v*3>)
        (<v*3> ^<elem> <e*1>)}}
   -{ (<a1> ^condition <c>)
      (<c> ^return-type number)
      (<c> ^result <r*1>)
      (<r*1> ^set <rset>)
     -{ (<rset> ^instance <i*1>)
        (<i*1> ^1 <v*2>)}}
    (<a1> ^potential-args <p1>)
   -{ (<p1> -^<asdf> <a*2>)
      (state <s1> ^<a*1> <v*1>)}
    (<a1> ^parameter-set <p2>)
    (<l1> ^game <g1>)
    -->
    (<p2> ^tested calculate1 +)
}

sp {satisfy-predicate-conditions*elaborate*calculate2
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate1)
    (<a1> ^potential-args <p1>)
    -->
    (<p2> ^tested calculate2 +)
    (<p2> ^tested calculate3 +)
}

sp {satisfy-predicate-conditions*elaborate*calculate4
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate3)
    (<p2> ^tested calculate2)
    (<a1> ^potential-args <p1>)
    -->
    (<p2> ^tested calculate4 +)
}

sp {satisfy-predicate-conditions*elaborate*calculate5
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate3)
    (<p2> ^tested calculate4)
    (<a1> ^potential-args <p1>)
    -->
    (<p2> ^tested calculate5 +)
}

sp {satisfy-predicate-conditions*elaborate*calculate6
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c1>)
    (<l1> ^game <g1>)
    (<s1> ^<c1> <a1>)
    (<a1> ^parameter-set <p2>)
    (<p2> ^tested calculate4)
    (<p2> ^tested calculate5)
    (<a1> ^potential-args <p1>)
    -->
    (<p2> ^tested calculate6 +)
}

sp {satisfy-predicate-conditions*action*results*no-verb
    (state <s> ^gtype heuristic)
    (<s> ^gtype action)
    (<s> ^list <l1>)
    (<s> ^heuristic <p>)
    (<p> ^condition <c>)
    (<c> -^verb <v*1>)
    (<c> ^type concept)
    (<c> ^attribute action)
    (<s> ^action <t>)
    (<t> ^verb-structure <v1>)
    (<t> ^instance <in>)
    (<v1> ^1 <vs>)
    (<vs> ^verb-name <name>)
    (<c> ^name <name>)
    (<c> ^result <r1>)
    (<r1> ^set <rset>)
    -->
    (<rset> ^instance <in> +)
}

sp {satisfy-predicate-conditions*action*results
    (state <s> ^gtype heuristic)
    (<s> ^gtype action)
    (<s> ^list <l1>)
    (<s> ^heuristic <p>)
    (<p> ^condition <c>)
    (<c> ^type concept)
    (<c> ^attribute action)
    (<c> ^verb <verb>)
    (<s> ^action <t>)
    (<t> ^verb-structure <v1>)
    (<v1> ^1 <vs>)
    (<vs> ^verb-prep <verb>)
    (<vs> ^verb-name <name>)
    (<c> ^name <name>)
    (<t> ^instance <in>)
    (<c> ^result <r1>)
    (<r1> ^set <rset>)
    -->
    (<rset> ^instance <in> +)
}

sp {satisfy-predicate-conditions*elaborate*condition-instance*action
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c3>)
    (<l1> ^game <g1>)
    (<s1> ^action <t1>)
    (<t1> ^nlp-set <n1>)
    (<n1> ^aname <c2>)
    (<t1> ^instance <i1>)
    (<s1> ^<c3> <a1>)
    (<a1> ^condition <c4>)
    (<c4> ^name <c2>)
    (<c4> ^type concept)
    (<c4> ^attribute action)
    (<c4> ^result <r1>)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i1> +)
}

sp {satisfy-predicate-conditions*elaborate*condition-instance*action*any
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c3>)
    (<l1> ^game <g1>)
    (<s1> ^action <t1>)
    (<t1> ^nlp-set <n1>)
    (<t1> ^instance <i1>)
    (<s1> ^<c3> <a1>)
    (<a1> ^condition <c4>)
    (<c4> ^name any)
    (<c4> ^type concept)
    (<c4> ^attribute action)
    (<c4> ^result <r1>)
    (<r1> ^set <s2>)
    -->
    (<s2> ^instance <i1> +)
}

sp {satisfy-predicate-conditions*elaborate*condition-instance*single-to-set*copy-objects
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c3>)
    (<l1> ^game <g1>)
    (<s1> ^<c3> <a1>)
    (<a1> ^condition <c4>)
    (<c4> ^rtype set)
    (<c4> ^type concept)
    (<c4> ^args <a*1>)
    (<c4> ^parameter <p*2>)
    (<p*2> ^num { < 2 <n*1> })
    (<a*1> ^1 <v*1>)
    (<v*1> ^parameter <p*1>)
    (<p*1> ^num 0)
    (<c4> ^result <r1>)
    (<r1> ^set <s*1>)
    (<s*1> ^instance <i*1>)
    (<i*1> ^1 <set>)
    (<c4> ^name <c2>)
    (<c4> ^attribute <c1>)
    (<s1> ^<c1> <t1>)
    (<t1> ^primary-rtype single)
    (<t1> ^link <c4>)
    (<t1> ^nlp-set <n1>)
    (<n1> ^aname <c2>)
    (<t1> ^instance <i*2>)
    (<i*2> ^1 <obj>)
    -->
    (<set> ^<object> <obj> +)
}

sp {satisfy-predicate-conditions*elaborate*condition-instance*single-to-set
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c3>)
    (<l1> ^game <g1>)
    (<s1> ^<c3> <a1>)
    (<a1> ^condition <c4>)
    (<c4> ^rtype set)
    (<c4> ^type concept)
    (<c4> ^args <a*1>)
    (<c4> ^parameter <p*2>)
    (<p*2> ^num { < 2 <n*1> })
    (<a*1> ^1 <v*1>)
    (<v*1> ^parameter <p*1>)
    (<p*1> ^num 0)
    (<c4> ^result <r1>)
    (<r1> ^set <s2>)
    (<c4> ^name <c2>)
    (<c4> ^attribute <c1>)
    (<s1> ^<c1> <t1>)
   -{ (<t1> -^instance <i*1>)
      (state <s1> ^<a*2> <v*2>)}
    (<t1> ^primary-rtype single)
    (<t1> ^link <c4>)
    (<t1> ^nlp-set <n1>)
    (<n1> ^aname <c2>)
    -->
    (<s2> ^instance <i1> +)
    (<i1> ^1 <set> +)
}

sp {satisfy-predicate-conditions*elaborate*condition-instance*single-to-set*parameters
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c3>)
    (<l1> ^game <g1>)
    (<s1> ^<c3> <a1>)
    (<a1> ^condition <c4>)
    (<c4> ^rtype set)
    (<c4> ^type concept)
    (<c4> ^args <a*1>)
    (<a*1> ^1 <arg>)
    (<arg> ^rtype set)
    (<arg> ^parameter <p*3>)
    (<c4> ^parameter <p*2>)
    (<p*2> ^num { < 2 <n*1> })
    (<c4> ^parameter <p*1>)
    (<p*3> ^1 <v*2>)
    (<v*2> ^param-id <pid>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^param-id <pid>)
    (<arg> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <i*1>)
    (<i*1> ^1 <set>)
   -{ (<set> -^<something> <s*2>)
      (state <s1> ^<a*2> <v*3>)}
    (<c4> ^result <r1>)
    (<r1> ^set <s2>)
    (<c4> ^name <c2>)
    (<c4> ^attribute <c1>)
    (<s1> ^<c1> <t1>)
   -{ (<set> ^object <obj>)
     -{ (<t1> ^instance <i1>)
        (<i1> ^1 <obj>)}}
    (<t1> ^primary-rtype single)
    (<t1> ^link <c4>)
    (<t1> ^nlp-set <n1>)
    (<n1> ^aname <c2>)
    -->
    (<s2> ^instance <i1> +)
    (<i1> ^1 <set> +)
}

sp {satisfy-predicate-conditions*elaborate*condition-instance
    (state <s1> ^list <l1>)
    (<s1> ^gtype <c3>)
    (<l1> ^game <g1>)
    (<s1> ^<c3> <a1>)
    (<a1> ^condition <c4>)
    (<c4> ^type concept)
    (<c4> ^rtype <rtype>)
    (<c4> ^result <r1>)
    (<r1> ^set <s2>)
    (<c4> ^name <c2>)
    (<c4> ^attribute <c1>)
    (<s1> ^<c1> <t1>)
    (<t1> ^primary-rtype <rtype>)
    (<t1> ^link <c4>)
    (<t1> ^nlp-set <n1>)
    (<n1> ^aname <c2>)
    (<t1> ^instance <i1>)
    -->
    (<s2> ^instance <i1> +)
}

sp {finished-learning*apply*complete*send-message*goal-state*demo
    (state <s1> ^name finished-learning)
    (<s1> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s1> ^top-state <t*3>)
    (<t*3> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s1> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^goal-relationships <gs>)
    (<dc> ^attend <at>)
    (<dc> ^structure <s*1>)
    (<s*1> ^goals <act>)
    (<i*1> ^status <status>)
    (<act> ^goal <a>)
    (<a> ^handle <name>)
    -->
    (<act> ^goal <a> -)
    (<dc> ^attend <at> -)
    (<act> ^retrieve-handle <name> +)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type describe-final-goal-state +)
    (<msg> ^fields <f> +)
    (<f> ^relationships <gs> +)
    (<f> ^definitive no +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {finished-learning*apply*complete*send-message*failure
    (state <s1> ^name finished-learning)
    (<s1> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s1> ^top-state <t*3>)
    (<t*3> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s1> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^learning-predicate <l*1>)
    (<dc> ^structure <s*1>)
    (<s*1> ^failures <act>)
    (<act> ^failure <a>)
    (<a> ^handle <name>)
    (<i*1> ^status <status>)
    -->
    (<act> ^failure <a> -)
    (<act> ^retrieve-handle <name> +)
    (<dc> ^finalize-chunk <name> +)
}

sp {finished-learning*apply*complete*send-message*goal
    (state <s1> ^name finished-learning)
    (<s1> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s1> ^top-state <t*3>)
    (<t*3> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s1> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^learning-predicate <l*1>)
    (<dc> -^goal-relationships <g*1>)
    (<dc> ^structure <s*1>)
    (<s*1> ^goals <act>)
    (<i*1> ^status <status>)
    (<act> ^goal <a>)
    (<a> ^handle <name>)
    -->
    (<act> ^goal <a> -)
    (<act> ^retrieve-handle <name> +)
    (<dc> ^finalize-chunk <name> +)
}

sp {finished-learning*apply*complete*send-message*action
    (state <s1> ^name finished-learning)
    (<s1> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^learning-predicate <l*1>)
    (<dc> ^structure <s*1>)
    (<s*1> ^actions <act>)
    (<act> ^action <a>)
    (<a> ^handle <name>)
    (<s1> ^superstate <ss>)
    -->
    (<act> ^action <a> -)
    (<act> ^retrieve-handle <name> +)
    (<dc> ^finalize-chunk <name> +)
}

sp {finished-learning*apply*complete*send-message*heuristic
    (state <s1> ^name finished-learning)
    (<s1> ^store-link <sl>)
    (<sl> ^ntype heuristic)
    (<s1> ^operator <o*1>)
    (<o*1> ^name complete)
    (<sl> ^handle <name>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^learning-predicate <l*1>)
    (<dc> ^structure <s*1>)
    (<s*1> ^heuristics <act>)
    -->
    (<act> ^retrieve-handle <name> +)
    (<dc> ^finalize-chunk <name> +)
}

sp {finished-learning*apply*complete*send-message*predicate
    (state <s1> ^name finished-learning)
    (<s1> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s1> ^top-state <t*3>)
    (<t*3> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s1> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learning-predicate <lp>)
    (<dc> ^learn-link <l*1>)
    (<l*1> ^handle <word>)
    (<lp> ^name <word>)
    (<i*1> ^status <status>)
    -->
    (<dc> ^learning-predicate <lp> -)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type learned-unknown-word +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^word <word> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {finished-learning*apply*complete*input-object-2
    (state <s1> ^name finished-learning)
    (<s1> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^input-object-2 <lp>)
    -->
    (<dc> ^input-object-2 <lp> -)
}

sp {finished-learning*apply*complete*input-object-1
    (state <s1> ^name finished-learning)
    (<s1> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^input-object-1 <lp>)
    -->
    (<dc> ^input-object-1 <lp> -)
}

sp {finished-learning*apply*complete*output-object-1
    (state <s1> ^name finished-learning)
    (<s1> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^output-object-1 <lp>)
    -->
    (<dc> ^output-object-1 <lp> -)
}

sp {satisfy-purpose*clean*dialog-world
    (state <s1> ^name satisfy-purpose)
    (<s1> ^operator <o*1>)
    (<o*1> ^name wait-for-response)
    (<s1> ^top-state <ts>)
    (<ts> ^dialog-world <d*1>)
    (<d*1> ^{ << objects predicates >> <a*1> } <dw>)
    (<dw> ^<something> <obj>)
    -->
    (<dw> ^<something> <obj> -)
}

sp {satisfy-purpose*clean*dialog-object-list-saved
    (state <s1> ^name satisfy-purpose)
    (<s1> ^operator <o*1>)
    (<o*1> ^name wait-for-response)
    (<s1> ^top-state <ts>)
    (<ts> ^dialog-object-list-saved { <=> <s1> <dol> })
    -->
    (<ts> ^dialog-object-list-saved <dol> -)
    (<ts> ^dialog-object-list-saved nil +)
}

sp {satisfy-purpose*clean*dialog-object-list
    (state <s1> ^name satisfy-purpose)
    (<s1> ^operator <o*1>)
    (<o*1> ^name wait-for-response)
    (<s1> ^top-state <ts>)
    (<ts> ^dialog-object-list { <=> <s1> <dol> })
    -->
    (<ts> ^dialog-object-list <dol> -)
    (<ts> ^dialog-object-list nil +)
}

sp {satisfy-purpose*finished-learning*apply*complete*remove-learn-link
    (state <s1> ^name interaction)
    (<s1> ^operator <o>)
   -{ (<o> ^event <e*3>)
      (<e*3> ^dialog-event <d*2>)
      (<d*2> ^type process-sentence)}
   -{ (<o> ^event <e*2>)
      (<e*2> ^dialog-event <d*1>)
      (<d*1> ^type process-unknown-word)}
   -{ (<o> ^event <e*1>)
      (<e*1> ^learning-event <l*1>)
      (<l*1> ^type game-name)}
    (<o> ^name performed-event)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learn-link <ll>)
    (<ll> ^argnum <a>)
    -->
    (<dc> ^learn-link <ll> -)
}

sp {finished-learning*apply*complete*remove-learn-link
    (state <s1> ^name finished-learning)
    (<s1> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^store-learn-link <ll>)
    (<dc> ^learn-link { <> <ll> <l2> })
    -->
    (<dc> ^store-learn-link <ll> -)
    (<dc> ^learn-link <ll> +)
    (<dc> ^learn-link <l2> -)
}

sp {finished-learning*propose*complete
    (state <s> ^name finished-learning)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {finished-learning*apply*store-next-level2
    (state <s> ^name finished-learning)
    (<s> ^operator <o>)
    (<o> ^name store-game-level)
    (<s> ^to-store <ts>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    (<ts>
          ^{ <> final <> goal-state <> initial <something> } { <=> <s> <something2> })
    -->
    (<s> ^to-store <something2> +)
    (<sc> ^store <something2> +)
}

sp {finished-learning*apply*store-next-level*finished
    (state <s> ^name finished-learning)
   -{ (<s> ^to-store <t*1>)
      (<t*1> ^<something> { <=> <s> <t2> })
      (<s> -^to-store <t2>)}
    (<s> ^operator <o>)
    (<o> ^name store-game-level)
    -->
    (<s> ^all-stored true +)
}

sp {finished-learning*propose*store-next-level
    (state <s> ^name finished-learning)
    (<s> -^all-stored <a*1>)
    (<s> ^store-link <ts>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name store-game-level +)
    (<o> ^to-store <ts> +)
}

sp {finished-learning*propose*store*primary*rtype
    (state <s> ^operator <o*1>)
    (<o*1> ^name finished-learning)
    (<s> ^store-link <ll>)
    (<ll> ^predicate-structure <p*1>)
    (<p*1> ^conditions <c*1>)
    (<c*1> ^parameter <p*2>)
    (<p*2> ^<num> <p>)
    (<p> ^param-id 1)
    (<p> ^type <rtype>)
    -->
    (<ll> ^primary-rtype <rtype> +)
}

sp {finished-learning*store*predicate*concept
    (state <s> ^name finished-learning)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    (<s> ^superstate <s*2>)
    (<s*2> ^store-link <ll>)
    -->
    (<s> ^store-link <ll> +)
    (<s> ^to-store <ll> +)
    (<sc> ^store <ll> +)
}

sp {satisfy-predicate-conditions*apply*finished-learning*remove-instance5
    (state <s1> ^operator <o*1>)
    (<o*1> ^name finished-learning)
    (<s1> ^store-link <ll>)
    (<ll> ^predicate-structure <p*1>)
    (<p*1> ^conditions <c*1>)
    (<c*1> ^args <a*1>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning true)
    (<a*1> ^<n> <n*1>)
    (<n*1> ^args <a*2>)
    (<a*2> ^<n1> <n*2>)
    (<n*2> ^args <a*3>)
    (<a*3> ^<n2> <n*3>)
    (<n*3> ^args <a*4>)
    (<a*4> ^<n3> <c>)
    (<c> -^name number)
    (<c> ^result <r*1>)
    (<r*1> ^set <res>)
    (<res> ^instance <i>)
    -->
    (<res> ^instance <i> -)
}

sp {satisfy-predicate-conditions*apply*finished-learning*remove-instance4
    (state <s1> ^operator <o*1>)
    (<o*1> ^name finished-learning)
    (<s1> ^store-link <ll>)
    (<ll> ^predicate-structure <p*1>)
    (<p*1> ^conditions <c*1>)
    (<c*1> ^args <a*1>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning true)
    (<a*1> ^<n> <n*1>)
    (<n*1> ^args <a*2>)
    (<a*2> ^<n1> <n*2>)
    (<n*2> ^args <a*3>)
    (<a*3> ^<n2> <c>)
    (<c> -^name number)
    (<c> ^result <r*1>)
    (<r*1> ^set <res>)
    (<res> ^instance <i>)
    -->
    (<res> ^instance <i> -)
}

sp {satisfy-predicate-conditions*apply*finished-learning*remove-instance3
    (state <s1> ^operator <o*1>)
    (<o*1> ^name finished-learning)
    (<s1> ^store-link <ll>)
    (<ll> ^predicate-structure <p*1>)
    (<p*1> ^conditions <c*1>)
    (<c*1> ^args <a*1>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning true)
    (<a*1> ^<n> <n*1>)
    (<n*1> ^args <a*2>)
    (<a*2> ^<n1> <c>)
    (<c> -^name number)
    (<c> ^result <r*1>)
    (<r*1> ^set <res>)
    (<res> ^instance <i>)
    -->
    (<res> ^instance <i> -)
}

sp {satisfy-predicate-conditions*apply*finished-learning*remove-instance2
    (state <s1> ^operator <o*1>)
    (<o*1> ^name finished-learning)
    (<s1> ^store-link <ll>)
    (<ll> ^predicate-structure <p*1>)
    (<p*1> ^conditions <c*1>)
    (<c*1> ^args <a*1>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning true)
    (<a*1> ^<n> <c>)
    (<c> -^name number)
    (<c> ^result <r*1>)
    (<r*1> ^set <res>)
    (<res> ^instance <i>)
    -->
    (<res> ^instance <i> -)
}

sp {satisfy-predicate-conditions*apply*finished-learning*remove-instance
    (state <s1> ^operator <o*1>)
    (<o*1> ^name finished-learning)
    (<s1> ^store-link <ll>)
    (<ll> ^predicate-structure <p*1>)
    (<p*1> ^conditions <c>)
    (<c> -^name number)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning true)
    (<c> ^result <r*1>)
    (<r*1> ^set <res>)
    (<res> ^instance <i>)
    -->
    (<res> ^instance <i> -)
}

sp {satisfy-predicate-conditions*apply*finished-learning*elaborate*source
    (state <s1> ^operator <o*1>)
    (<o*1> ^name finished-learning)
    (<s1> ^store-link <ll>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learning true)
    (<dc> ^name <name>)
    -->
    (<ll> ^from <name> +)
}

sp {satisfy-predicate-conditions*apply*finished-learning*elab-store-link
    (state <s1> ^operator <o*1>)
    (<o*1> ^name finished-learning)
    (<s1> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*2>)
    (<d*2> ^learn-link <ll>)
    (<ll> ^predicate-structure <p*1>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning true)
    -->
    (<s1> ^store-link (deep-copy <ll>) +)
}

sp {satisfy-predicate-conditions*elaborate-finished-learning*goal
    (state <s1> ^operator <o>)
    (<o> -^duplicate-of <d*2>)
    (<s1> ^main-type { << goal failure >> <type> })
    (<o> ^type <type>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning true)
    (<s1> ^superstate <ss>)
    (<s1> ^superstate <s*1>)
    (<s*1> ^superstate <sss>)
    (<s1> ^<type> <a1>)
    (<a1> ^parameter-set <p1>)
    (<p1> ^set <i1>)
    (<a1> ^handle <c1>)
    -->
    (<sss> ^finished-learning <type> +)
    (<ss> ^finished-learning <type> +)
}

sp {satisfy-predicate-conditions*elaborate-finished-learning*heuristic
    (state <s1> ^operator <o>)
    (<o> -^duplicate-of <d*2>)
    (<o> ^type action)
    (<s1> ^main-type { << heuristic >> <type> })
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning true)
    (<s1> ^superstate <ss>)
    (<s1> ^<type> <a1>)
    (<a1> ^parameter-set <p1>)
    (<p1> ^set <i1>)
    (<a1> ^handle <c1>)
    -->
    (<ss> ^finished-learning <type> +)
}

sp {satisfy-predicate-conditions*elaborate-finished-learning
    (state <s1> ^operator <o>)
    (<o> -^duplicate-of <d*2>)
    (<s1> ^main-type { << action >> <type> })
    (<o> ^type <type>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning true)
    (<s1> ^superstate <ss>)
    (<s1> ^<type> <a1>)
    (<a1> ^parameter-set <p1>)
    (<p1> ^set <i1>)
    (<a1> ^handle <c1>)
    -->
    (<ss> ^finished-learning <type> +)
}

sp {satisfy-predicate-conditions*propose*finished-learning
    (state <s1> ^main-type predicate)
    (<s1> ^gtype predicate)
    (<s1> ^list <l1>)
    (<l1> ^game <g1>)
    (<s1> ^predicate <a1>)
    (<a1> ^parameter-set <p1>)
    (<p1> ^set <i1>)
    (<a1> ^handle <c1>)
    (<s1> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learning true)
    (<dc> ^learn-link <l*1>)
    (<l*1> ^handle <c1>)
    -->
    (<s1> ^operator <o1> +)
    (<s1> ^operator <o1> =)
    (<o1> ^name finished-learning +)
    (<o1> ^type predicate +)
}

sp {satisfy-predicate-conditions*propose*predicate-operator*action
    (state <s1> ^list <l1>)
    (<s1> -^main-type heuristic)
    (<s1> ^gtype { << action >> <c2> })
    (<l1> ^game <g1>)
    (<s1> ^<c2> <a1>)
    (<a1> ^aname <c1>)
    (<a1> ^parameter-set <p1>)
    (<p1> ^set <i1>)
    (<a1> ^verb-structure <vs>)
    -->
    (<s1> ^operator <o1> +)
    (<o1> ^type <c2> +)
    (<o1> ^name <c1> +)
    (<o1> ^parameters <i1> +)
    (<o1> ^verb-structure <vs> +)
}

sp {satisfy-predicate-conditions*propose*predicate-operator*action*heuristic
    (state <s1> ^main-type heuristic)
   -{ (<s1> ^heuristic <h*1>)
      (<h*1> ^condition <con>)
     -{ (<con> ^result <r*1>)
        (<r*1> ^set <s*1>)
        (<s*1> ^instance <i*1>)}}
    (<s1> ^list <l1>)
    (<s1> ^gtype { << action >> <c2> })
    (<l1> ^game <g1>)
    (<s1> ^<c2> <a1>)
    (<a1> ^aname <c1>)
    (<a1> ^parameter-set <p1>)
    (<p1> ^set <i1>)
    (<a1> ^verb-structure <vs>)
    -->
    (<s1> ^operator <o1> +)
    (<o1> ^type <c2> +)
    (<o1> ^name <c1> +)
    (<o1> ^parameters <i1> +)
    (<o1> ^verb-structure <vs> +)
}

sp {satisfy-predicate-conditions*propose*predicate-operator*failure
    (state <s1> ^list <l1>)
    (<s1> ^gtype { << failure >> <c2> })
    (<l1> ^game <g1>)
    (<s1> ^<c2> <a1>)
    (<a1> ^aname <c1>)
    (<a1> ^parameter-set <p1>)
    (<p1> ^set <i1>)
    -->
    (<s1> ^operator <o1> +)
    (<o1> ^type <c2> +)
    (<o1> ^name <c1> +)
    (<o1> ^parameters <i1> +)
}

sp {satisfy-predicate-conditions*propose*predicate-operator*goal
    (state <s1> ^list <l1>)
    (<s1> ^gtype { << goal >> <c2> })
    (<l1> ^game <g1>)
    (<s1> ^<c2> <a1>)
    (<a1> ^aname <c1>)
    (<a1> ^parameter-set <p1>)
    (<p1> ^set <i1>)
    -->
    (<s1> ^operator <o1> +)
    (<o1> ^type <c2> +)
    (<o1> ^name <c1> +)
    (<o1> ^parameters <i1> +)
}

sp {topstate*elaborate*game-state-input*object
    (state <s> ^superstate nil)
    (<s> ^world <w*1>)
    (<w*1> ^objects <objs>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^game-state <gs>)
    (<gs> ^relationships <rels>)
    (<gs> ^objects <o*1>)
    (<o*1> ^object <obj>)
    -->
    (<objs> ^object <obj> +)
    (<obj> ^category block +)
    (<obj> ^primitive object +)
}

sp {topstate*elaborate*game-state-input*predicate*instance
    (state <s> ^superstate nil)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <ps>)
    (<ps> ^predicate <p>)
    (<p> ^handle <name>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^game-state <gs>)
    (<gs> ^relationships <r*1>)
    (<r*1> ^prep <rels>)
    (<rels> ^name <name>)
    (<rels> ^pair <pa>)
    (<pa> ^|2| <id2>)
    (<pa> ^|1| <id1>)
    (<gs> ^objects <objs>)
    (<objs> ^object <o2>)
    (<o2> ^id <id2>)
    (<objs> ^object <o1>)
    (<o1> ^id <id1>)
    -->
    (<p> ^instance <i> +)
    (<i> ^1 <o1> +)
    (<i> ^2 <o2> +)
}

sp {topstate*elaborate*game-state-input
    (state <s> ^superstate nil)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <ps>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^game-state <gs>)
    (<gs> ^relationships <r*1>)
    (<r*1> ^prep <rels>)
    (<gs> ^objects <obsj>)
    (<rels> ^name <name>)
    -->
    (<ps> ^predicate <p> +)
    (<p> ^handle <name> +)
}

sp {store-predicate-structure*elaborate*top-state*dialogue-context*multiplayer
    (state <s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^multiplayer <mult>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^structure <pred>)
    -->
    (<pred> ^multiplayer <mult> +)
}

sp {store-predicate-structure*elaborate*found-transferable-knowledge*false
    :o-support
    (state <s> ^name store-predicate-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^failure <f*1>)
    -->
    (<s> ^found-transferable-knowledge false +)
}

sp {store-predicate-structure*propose*transfer-action-goal
    (state <s> ^found-transferable-knowledge true)
    (<s> ^storing name)
    (<s> ^name store-predicate-structure)
    (<s> ^ptype <type>)
    (<s> ^handle <handle>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <struc>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name transfer-action-goal +)
    (<o> ^type <type> +)
    (<o> ^structure <struc> +)
    (<o> ^handle-name <handle> +)
}

sp {store-predicate-structure*elaborate*found-transferable-knowledge*true
    :o-support
    (state <s> ^name store-predicate-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <r*2>)
    -->
    (<s> ^found-transferable-knowledge true +)
}

sp {store-predicate-structure*elaborate*query*find-transferable*knowlege
    (state <s> ^storing name)
    (<s> ^name store-predicate-structure)
    (<s> ^ptype { << action goal failure >> <p*1> })
    (<s> ^message <m*1>)
    (<m*1> ^predicate <pred2>)
    (<s> ^handle <handle>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    -->
    (<sc> ^query <pred2> +)
    (<sc> ^depth 1 +)
    (<pred2> ^handle <handle> +)
    (<pred2> ^item-type predicate +)
}

sp {store-predicate-structure*elaborate*top-state*dialogue-context*action
    (state <s> ^found-transferable-knowledge false)
    (<s> ^ptype action)
    (<s> ^storing name)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^message <m*1>)
    (<m*1> ^predicate <pred2>)
    (<s> ^handle <handle>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^structure <pred>)
    (<pred> ^actions <act>)
    -->
    (<act> ^action <pred2> +)
    (<pred2> ^predicate-structure <ps> +)
    (<pred2> ^type action +)
    (<dc> ^learn-link <pred2> +)
}

sp {store-predicate-structure*elaborate*top-state*dialogue-context*failure
    (state <s> ^found-transferable-knowledge false)
    (<s> ^ptype failure)
    (<s> ^storing name)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^message <m*1>)
    (<m*1> ^predicate <pred2>)
    (<s> ^handle <handle>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^structure <pred>)
    (<pred> ^failures <go>)
    -->
    (<go> ^failure <pred2> +)
    (<pred2> ^predicate-structure <ps> +)
    (<pred2> ^type failure +)
    (<dc> ^learn-link <pred2> +)
    (<dc> ^needs-failure-setup true +)
}

sp {store-predicate-structure*elaborate*top-state*dialogue-context*goal
    (state <s> ^found-transferable-knowledge false)
    (<s> ^ptype goal)
    (<s> ^storing name)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^message <m*1>)
    (<m*1> ^predicate <pred2>)
    (<s> ^handle <handle>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^structure <pred>)
    (<pred> ^goals <go>)
    -->
    (<go> ^goal <pred2> +)
    (<pred2> ^predicate-structure <ps> +)
    (<pred2> ^type goal +)
    (<dc> ^learn-link <pred2> +)
    (<dc> ^needs-goal-setup true +)
}

sp {store-predicate-structure*elaborate*top-state*dialogue-context*game
    (state <s> ^ptype game)
    (<s> ^storing name)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^message <m*1>)
    (<m*1> ^predicate <pred>)
    (<s> ^handle <handle>)
    (<s> ^top-state <ts>)
    -->
    (<ts> ^dialog-context <dc> +)
    (<dc> ^type game-learning +)
    (<dc> ^name <handle> +)
    (<dc> ^structure <pred> +)
    (<dc> ^learning true +)
    (<dc> ^needs-setup true +)
    (<pred> ^actions <act> +)
    (<pred> ^goals <go> +)
    (<pred> ^failures <fa> +)
    (<pred> ^heuristics <heu> +)
    (<pred> ^multiplayer true +)
    (<pred> ^task-type game +)
}

sp {store-predicate-structure*elaborate*top-state*dialogue-context*puzzle
    (state <s> ^ptype puzzle)
    (<s> ^storing name)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^message <m*1>)
    (<m*1> ^predicate <pred>)
    (<s> ^handle <handle>)
    (<s> ^top-state <ts>)
    -->
    (<ts> ^dialog-context <dc> +)
    (<dc> ^type game-learning +)
    (<dc> ^name <handle> +)
    (<dc> ^structure <pred> +)
    (<dc> ^learning true +)
    (<dc> ^needs-setup true +)
    (<pred> ^actions <act> +)
    (<pred> ^goals <go> +)
    (<pred> ^failures <fa> +)
    (<pred> ^heuristics <heu> +)
    (<pred> ^multiplayer false +)
    (<pred> ^task-type puzzle +)
}

sp {store-predicate-structure*apply*complete*remove-learn-link
    (state <s> ^storing name)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^learn-link <ll>)
   -{ (<s> ^message <m*1>)
      (<m*1> ^predicate <ll>)}
    -->
    (<dc> ^learn-link <ll> -)
}

sp {store-predicate-structure*apply*complete*action-goal-failure-transfer
    (state <s> ^found-transferable-knowledge true)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^ptype { << action goal failure >> <ptype> })
    (<s> ^copied <r>)
    (<s> ^handle <handle>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type already-know +)
    (<msg> ^fields <f> +)
    (<f> ^concept-name <handle> +)
    (<f> ^type <ptype> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {store-predicate-structure*apply*complete*action-name
    (state <s> ^found-transferable-knowledge false)
    (<s> ^ptype action)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type describe-action +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game-name +)
    (<de> ^originator agent +)
}

sp {store-predicate-structure*apply*complete*failure-name
    (state <s> ^found-transferable-knowledge false)
    (<s> ^ptype failure)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type setup-failure +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game-name +)
    (<de> ^originator agent +)
}

sp {store-predicate-structure*apply*complete*goal-name
    (state <s> ^found-transferable-knowledge false)
    (<s> ^ptype goal)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type setup-goal +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game-name +)
    (<de> ^originator agent +)
}

sp {store-predicate-structure*apply*complete*puzzle-name
    (state <s> ^ptype puzzle)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type describe-puzzle +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {store-predicate-structure*apply*complete*game-name
    (state <s> ^ptype game)
    (<s> ^name store-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type describe-game +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {store-predicate-structure*propose*complete
    (state <s> ^name store-predicate-structure)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name complete +)
}

sp {store-predicate-structure*elaborate*multiplayer
    (state <s> ^name store-predicate-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^multiplayer <m>)
    -->
    (<s> ^multiplayer <m> +)
}

sp {store-predicate-structure*elaborate*attributes
    (state <s> ^name store-predicate-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^storing <t>)
    (<o> ^message <msg>)
    (<o> ^handle <h>)
    (<o> ^type <y>)
    -->
    (<s> ^storing <t> +)
    (<s> ^handle <h> +)
    (<s> ^message <msg> +)
    (<s> ^ptype <y> +)
}

sp {retrieve-predicate-structure*copy*stucture
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<s> ^copy-structure <copy> +)
    (<copy> ^source <pred> +)
    (<copy> ^destination <pred> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<s> ^condition <co>)
    (<dest> ^predicate-structure <p2>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^predicate <p> +)
    (<ss> ^gtype predicate +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <p2> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^link <co> +)
    (<P124> ^argnum <an> +)
    (<p2> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*failure
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> ^type failure)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^failure <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*goal
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> ^type goal)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^goal <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*consider*moved*modifier
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^modifier <mod>)
    (<dest> ^moved <mo>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^consider <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^consider <pref> +)
    (<p> ^moved <mo> +)
    (<p> ^modifier <mod> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*consider*moved
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> -^modifier <m*1>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^moved <mo>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^consider <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^consider <pref> +)
    (<p> ^moved <mo> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*avoid*moved*modifier
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^modifier <mod>)
    (<dest> ^moved <mo>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^avoid <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^avoid <pref> +)
    (<p> ^moved <mo> +)
    (<p> ^modifier <mod> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*avoid*moved
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> -^modifier <m*1>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^moved <mo>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^avoid <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^avoid <pref> +)
    (<p> ^moved <mo> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*moved*modifier
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^modifier <mod>)
    (<dest> ^moved <mo>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^prefer <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^prefer <pref> +)
    (<p> ^moved <mo> +)
    (<p> ^modifier <mod> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*moved
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> -^modifier <m*1>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^moved <mo>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^prefer <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^prefer <pref> +)
    (<p> ^moved <mo> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*consider*modifier
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> -^moved <m*1>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^modifier <mod>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^consider <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^consider <pref> +)
    (<p> ^modifier <mod> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*avoid*modifier
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> -^moved <m*1>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^modifier <mod>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^avoid <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^avoid <pref> +)
    (<p> ^modifier <mod> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*modifier
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> -^moved <m*1>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^modifier <mod>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^prefer <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^prefer <pref> +)
    (<p> ^modifier <mod> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*consider
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> -^modifier <m*2>)
    (<dest> -^moved <m*1>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^consider <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^consider <pref> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic*avoid
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> -^modifier <m*2>)
    (<dest> -^moved <m*1>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^avoid <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^avoid <pref> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*heuristic
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype heuristic)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> -^modifier <m*2>)
    (<dest> -^moved <m*1>)
    (<dest> ^ntype heuristic)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^prefer <pref>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^heuristic <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<p> ^ntype heuristic +)
    (<p> ^prefer <pref> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link*opponent
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype action)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^verb-structure <vs>)
    (<dest> ^opponent <o>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^action <p> +)
    (<p> ^opponent <o> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^verb-structure <vs> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {retrieve-predicate-structure*apply*complete*smem-query*result*no-condition-link
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <ss>)
    (<ss> ^gtype action)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^copy-structure <c*1>)
    (<c*1> ^destination <dest>)
    (<dest> -^opponent <o*2>)
    (<dest> ^primary-rtype <rtype>)
    (<dest> ^argnum <an>)
    (<dest> ^verb-structure <vs>)
    (<dest> ^predicate-structure <ps>)
    (<dest> ^handle <name>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<ss> ^action <p> +)
    (<p> ^handle <name> +)
    (<p> ^aname <name> +)
    (<p> ^verb-structure <vs> +)
    (<p> ^nlp-set <ps> +)
    (<p> ^primary-rtype <rtype> +)
    (<p> ^formated predicate +)
    (<p> ^parameter-set <P124> +)
    (<p> ^potential-args <P125> +)
    (<P124> ^argnum <an> +)
    (<dest> ^aname <name> +)
    (<ps> ^aname <name> +)
}

sp {DEPRICATEDretrieve-predicate-structure*elaborate*smem-query*unknown
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^failure <f*1>)
    (<s> ^superstate <ss>)
    -->
    (halt)
    (<ss> ^unknown true +)
}

sp {retrieve-predicate-structure*propose*complete
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^retrieved <pred>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {retrieve-predicate-structure*elaborate*smem-query
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^handle <handle>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <c>)
    -->
    (<c> ^query <cue> +)
    (<c> ^link-to-ltm no +)
    (<c> ^depth 15 +)
    (<cue> ^handle <handle> +)
    (<cue> ^item-type predicate +)
}

sp {retrieve-predicate-structure*elaborate*predicate-lti
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^predicate-lti <lti>)
    -->
    (<s> ^predicate-lti <lti> +)
}

sp {retrieve-predicate-structure*elaborate*condition
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^condition <co>)
    -->
    (<s> ^condition <co> +)
}

sp {retrieve-predicate-structure*elaborate*predicate-handle
    (state <s> ^name retrieve-predicate-structure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^handle <handle>)
    -->
    (<s> ^handle <handle> +)
}

sp {format-conditions*apply*calculate1*parameter-set*argnum
    (state <s> ^name format-conditions)
    (<s> ^parameter-set <ps>)
    (<ps> -^argnum <a*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate1)
    (<s> ^condition <co>)
    (<co> ^parameter <p*1>)
    (<p*1> ^{ << 1 2 3 4 5 6 7 8 9 >> <arg2> } <a*2>)
    (<a*2> ^param-id <num>)
   -{ (<s> ^condition <c*1>)
      (<c*1> ^parameter <p*2>)
      (<p*2> ^{ << 1 2 3 4 5 6 7 8 9 >> <arg> } <a*3>)
      (<a*3> ^param-id { > <num> <p*3> })}
    -->
    (<ps> ^argnum <num> +)
}

sp {format-conditions*apply*calculate1*arg-num
    (state <s> ^name format-conditions)
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate2)
    (<s> ^condition <co>)
    (<co> ^args <a>)
    (<a> -^num <n*1>)
    (<a> ^<something> <s*1>)
    -->
    (<a> ^num (size <a>) +)
}

sp {format-conditions*apply*calculate1*parameter-num2
    (state <s> ^name format-conditions)
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate1)
    (<s> ^condition <co>)
    (<co> ^parameter <p>)
    (<p> -^result <r*1>)
    (<p> -^num <n*1>)
    -->
    (<p> ^num (size <p>) +)
}

sp {format-conditions*apply*calculate1*location-block*no-obj
    (state <s> ^name format-conditions)
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate2)
    (<s> ^condition <co>)
    (<co> ^args <a1>)
    (<a1> -^<something> <s*1>)
    (<co> ^rtype <type>)
    (<co> ^name { << location block >> <n*1> })
    -->
    (<a1> ^num 1 +)
    (<a1> ^1 <c2> +)
    (<c2> ^name object +)
    (<c2> ^args <a3> +)
    (<c2> ^negative false +)
    (<c2> ^result <r*1> +)
    (<r*1> ^set <res> +)
    (<c2> ^rtype single +)
    (<c2> ^parameter <p*1> +)
    (<p*1> ^num 0 +)
    (<c2> ^type attribute +)
    (<c2> ^attribute primitive +)
}

sp {format-conditions*apply*calculate2*paramlinking
    (state <s> ^name format-conditions)
    (<s> ^condition <co>)
    (<co> -^attribute input-arg)
    (<co> -^result <r*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate2)
    (<co> ^parameter <p*1>)
    (<p*1> ^num <n*1>)
    -->
    (<co> ^result <r*2> +)
    (<r*2> ^set <p> +)
}

sp {format-conditions*apply*calculate1*empty-parameter
    (state <s> ^name format-conditions)
    (<s> ^condition <co>)
    (<co> -^parameter <p*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate2)
    -->
    (<co> ^parameter <p*2> +)
    (<p*2> ^num 0 +)
}

sp {format-conditions*apply*calculate1*empty-args
    (state <s> ^name format-conditions)
    (<s> ^condition <co>)
    (<co> -^args <a*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate1)
    -->
    (<co> ^args <a1> +)
}

sp {format-conditions*apply*calculate1*type2
    (state <s> ^name format-conditions)
    (<s> ^condition <co>)
    (<co> ^rtype <type>)
    (<co> ^parameter <p>)
    (<p> ^num <arg2>)
    (<p> ^<arg2> <a1>)
    (<a1> -^type <t*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name { << calculate1 calculate2 >> <n*1> })
    -->
    (<a1> ^type <type> +)
}

sp {format-conditions*apply*calculate1*type
    (state <s> ^name format-conditions)
    (<s> ^condition <co>)
    (<co> ^args <a*1>)
    (<co> ^parameter <p>)
    (<p> ^num <arg2>)
    (<s> ^operator <o*1>)
    (<o*1> ^name { << calculate1 calculate2 >> <n*1> })
    (<p> ^{ <> <arg2> << 1 2 3 4 5 6 7 8 9 10 >> <arg> } <a1>)
    (<a1> -^type <t*1>)
    (<a*1> ^<arg> <a*2>)
    (<a*2> ^rtype <type>)
    -->
    (<a1> ^type <type> +)
}

sp {format-conditions*apply*calculate1*rtype*no-type
    (state <s> ^name format-conditions)
    (<s> ^condition <co>)
    (<co> -^parameter <p*1>)
    (<co> -^rtype <r*1>)
    (<co> ^args <a*1>)
    (<a*1> ^1 <v*1>)
    (<v*1> ^rtype <type>)
    (<s> ^operator <o*1>)
    (<o*1> ^name { << calculate1 calculate2 >> <n*1> })
    -->
    (<co> ^rtype <type> +)
}

sp {format-conditions*apply*calculate1*rtype
    (state <s> ^name format-conditions)
    (<s> ^condition <co>)
    (<co> -^rtype <r*1>)
    (<co> ^parameter <p*1>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^type <type>)
    (<s> ^operator <o*1>)
    (<o*1> ^name { << calculate1 calculate2 >> <n*1> })
    -->
    (<co> ^rtype <type> +)
}

sp {format-conditions*apply*calculate1*negative-test
    (state <s> ^name format-conditions)
    (<s> ^condition <co>)
    (<co> -^negative <n*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate1)
    -->
    (<co> ^negative false +)
}

sp {format-conditions*apply*calculate2*default
    (state <s> ^name format-conditions)
   -{ (<s> ^condition <c>)
      (<c> -^attribute input-arg)
      (<c> -^result <r*1>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate2)
    -->
    (<s> ^tested calculate2 +)
}

sp {format-conditions*apply*calculate1*default
    (state <s> ^name format-conditions)
   -{ (<s> ^condition <c>)
      (<c> -^rtype <r*1>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name calculate1)
    -->
    (<s> ^tested calculate1 +)
}

sp {format-conditions*apply*complete*condition
    (state <s> ^name format-conditions)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^condition-set <cs>)
    (<s> ^parameter-set <ps>)
    (<s> ^superstate <ss>)
    (<ss> ^operator <o*2>)
    (<o*2> ^type <type>)
    (<ss> ^<type> <t>)
    -->
    (<t> ^condition <cs> +)
}

sp {format-conditions*apply*complete*parameter-set
    (state <s> ^name format-conditions)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^parameter-set <ps>)
    (<ps> ^argnum <num>)
    (<s> ^superstate <ss>)
    (<ss> ^operator <o*2>)
    (<o*2> ^type <type>)
    (<ss> ^<type> <t>)
    (<t> ^parameter-set <ps2>)
    -->
    (<ps2> ^argnum <num> +)
    (<t> ^formated <type> +)
}

sp {format-conditions*propose*complete
    (state <s> ^tested calculate2)
    (<s> ^tested calculate1)
    (<s> ^name format-conditions)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name complete +)
}

sp {format-conditions*propose*calculate2
    (state <s> ^tested calculate1)
    (<s> -^tested calculate2)
    (<s> ^name format-conditions)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name calculate2 +)
}

sp {format-conditions*propose*calculate1
    (state <s> ^name format-conditions)
    (<s> -^tested calculate1)
    -->
    (<s> ^operator <op> +)
    (<s> ^operator <op> =)
    (<op> ^name calculate1 +)
}

sp {format-conditions*elaborate*sub-conditions
    (state <s> ^name format-conditions)
    (<s> ^condition <co>)
    (<co> ^args <a*1>)
    (<a*1> ^{ << 1 2 3 4 5 6 7 8 9 10 >> <arg> } <cond>)
    (<cond> ^name <name>)
    -->
    (<s> ^condition <cond> +)
}

sp {format-conditions*elaborate*operator*condition
    (state <s> ^name format-conditions)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^nlp-set <n*1>)
    (<n*1> ^nlp <nlp>)
    -->
    (<s> ^condition <nlp> +)
    (<s> ^condition-set <nlp> +)
}

sp {format-conditions*elaborate*parameter-set
    (state <s> ^name format-conditions)
    -->
    (<s> ^parameter-set <ps> +)
}

sp {evaluate-predicate*elaborate*problemspace*game-heuristics
    (state <s> ^superstate <ss>)
    (<ss> ^problemspace game-heuristics)
    (<ss> ^name learn-predicate)
    -->
    (<s> ^problemspace game-heuristics +)
}

sp {evaluate-predicate*elaborate*problemspace*games
    (state <s> ^superstate <s*1>)
    (<s*1> ^problemspace { << games >> <ps> })
    -->
    (<s> ^problemspace <ps> +)
}

sp {evaluate-predicate*propose*resolve-conditions
    (state <s> ^name evaluate-predicate)
   -{ (<s> ^result <r*1>)
      (<r*1> ^set <set>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name resolve-conditions +)
}

sp {evaluate-predicate*eval-condition*impasse
    (state <s> ^choices none)
    (<s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <ss>)
    (<ss> ^list <l*1>)
    (<l*1> ^game <g*1>)
    -->
    (force-learn <s>)
    (<s> ^name evaluate-predicate +)
    (<s> ^linkstate <ss> +)
    (<s> ^result <r> +)
}

sp {learn-predicate*elaborate*nlp-set*verb-structure
    (state <s> ^gtype action)
    (<s> ^name learn-predicate)
    (<s> ^action <t>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^verb-structure <vs>)
    -->
    (<t> ^verb-structure <vs> +)
}

sp {learn-predicate*elaborate*sub-conditions*actiongoal
    (state <s> ^name learn-predicate)
    (<s> ^superstate <s*1>)
    (<s*1> ^name transfer-action-goal)
    (<s> ^gtype { << action goal failure >> <gtype> })
    (<s> ^<gtype> <t>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^conditions <cond>)
    -->
    (<t> ^condition <cond> +)
}

sp {learn-predicate*elaborate*sub-conditions*heuristic
    (state <s> ^gtype action)
    (<s> ^ntype heuristic)
    (<s> ^name learn-predicate)
    (<s> ^action <t>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^conditions <cond>)
    -->
    (<t> ^condition <cond> +)
}

sp {learn-predicate*elaborate*sub-conditions*predicate
    (state <s> ^name learn-predicate)
    (<s> ^gtype { << predicate heuristic >> <type> })
    (<s> ^<type> <t>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^conditions <cond>)
    -->
    (<t> ^condition <cond> +)
}

sp {learn-predicate*elaborate*simulated-true
    (state <s> ^name learn-predicate)
    (<s> ^gtype <type>)
    (<s> ^<type> <t>)
    (<t> ^condition <co>)
    -->
    (<s> ^simulated true +)
}

sp {learn-predicate*elaborate*sub-conditions
    (state <s> ^name learn-predicate)
    (<s> ^gtype <type>)
    (<s> ^<type> <t>)
    (<t> ^condition <co>)
    (<co> ^args <a*1>)
    (<a*1> ^{ << 1 2 3 4 5 6 7 8 9 10 >> <arg> } <cond>)
    (<cond> ^name <name>)
    -->
    (<t> ^condition <cond> +)
}

sp {learn-predicate*propose*formate-conditions
    (state <s> ^name learn-predicate)
    (<s> ^main-type <type>)
    (<s> ^<type> <t>)
    (<t> -^formated <f*1>)
    (<t> ^nlp-set <nlp>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
    (<o> ^name format-conditions +)
    (<o> ^type <type> +)
    (<o> ^nlp-set <nlp> +)
}

sp {learn-predicate*elaborate*handlename
    (state <s> ^name learn-predicate)
    (<s> ^main-type <type>)
    (<s> ^<type> <t>)
    (<t> ^handle <aname>)
    -->
    (<t> ^aname <aname> +)
}

sp {learn-predicate*elaborate*opponent
    (state <s> ^name learn-predicate)
    (<s> ^gtype <type>)
    (<s> ^<type> <t>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^opponent <o>)
    -->
    (<t> ^opponent <o> +)
}

sp {learn-predicate*elaborate*actiongoalname
    (state <s> ^name learn-predicate)
    (<s> ^gtype <type>)
    (<s> ^<type> <t>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^aname <aname>)
    -->
    (<t> ^aname <aname> +)
    (<t> ^handle <aname> +)
}

sp {learn-predicate*elaborate*game-name
    (state <s> ^name learn-predicate)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^name <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    (<op> ^message <m*1>)
    (<op> ^type <type>)
    -->
    (<s> ^game <name> +)
}

sp {learn-predicate*elaborate*list-games
    (state <s> ^name learn-predicate)
    (<s> ^main-type <type2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learn-link <l*1>)
    (<l*1> ^handle <pname>)
    (<s> ^<type2> <gt>)
    (<gt> ^handle <pname>)
    (<gt> ^formated <f*1>)
    (<dc> ^name <name>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    (<op> ^type <type>)
    -->
    (<s> ^list <l*2> +)
    (<l*2> ^game <g> +)
    (<s> ^objects <o> +)
    (<g> ^game <name> +)
    (<g> ^type <type> +)
    (<g> ^type predicate +)
    (<s> ^current <g> +)
}

sp {learn-predicate*store*structure*learned-predicate*conditions
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^main-type { << predicate heuristic >> <type> })
    (<s> ^gtype <type>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<ll> ^predicate-structure <ps>)
    (<ll> ^handle <name>)
    (<s> ^<type> <t>)
    (<t> ^handle <name>)
    (<t> ^formated <f*1>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^nlp <nlp>)
    -->
    (<ps> ^conditions <nlp> +)
}

sp {learn-predicate*store*structure*learned-predicate
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^main-type { << predicate heuristic >> <type> })
    (<s> ^gtype <type>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<ll> ^handle <name>)
    (<s> ^<type> <t>)
    (<t> ^handle <name>)
    (<t> ^parameter-set <p*1>)
    (<p*1> ^argnum <an>)
    (<t> ^formated <f*1>)
    (<t> ^nlp-set <nl>)
    -->
    (<ll> ^predicate-structure <ps> +)
    (<ll> ^argnum <an> +)
}

sp {learn-predicate*store*structure*heuristic
    :o-support
    (state <s> ^main-type heuristic)
    (<s> ^gtype heuristic)
    (<s> ^name learn-predicate)
    (<s> ^heuristic <t>)
    (<t> ^parameter-set <p*1>)
    (<p*1> ^argnum <an>)
    (<t> ^formated <f*1>)
    (<t> ^nlp-set <nl>)
    (<t> ^handle <name>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<ll> ^ntype heuristic)
    (<ll> ^handle <name>)
    -->
    (<s> ^ntype heuristic +)
    (<t> ^ntype heuristic +)
}

sp {learn-predicate*store*structure*argnum
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^main-type { << action goal failure heuristic >> <gtype> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<ll> ^handle <n>)
    (<s> ^<gtype> <t>)
    (<t> ^handle <n>)
    (<t> ^parameter-set <p*1>)
    (<p*1> ^argnum <an>)
    -->
    (<ll> ^argnum <an> +)
}

sp {learn-predicate*store*opponent
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^gtype { << action goal failure heuristic >> <gtype> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<ll> ^handle <n>)
    (<s> ^<gtype> <t>)
    (<t> ^handle <n>)
    (<t> ^formated <f*1>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^opponent <o>)
    -->
    (<ll> ^opponent <o> +)
}

sp {learn-predicate*store*consider
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^gtype { << heuristic >> <gtype> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<s> ^<gtype> <t>)
    (<t> ^formated <f*1>)
    (<t> ^consider <nlp>)
    -->
    (<ll> ^consider <nlp> +)
    (<s> ^problemspace games +)
}

sp {learn-predicate*store*modifier
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^gtype { << heuristic >> <gtype> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<s> ^<gtype> <t>)
    (<t> ^modifier <m>)
    (<t> ^formated <f*1>)
    -->
    (<ll> ^modifier <m> +)
    (<s> ^problemspace game-heuristics +)
}

sp {learn-predicate*store*moved
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^gtype { << heuristic >> <gtype> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<s> ^<gtype> <t>)
    (<t> ^moved <nlp>)
    (<t> ^formated <f*1>)
    -->
    (<ll> ^moved <nlp> +)
}

sp {learn-predicate*store*avoid
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^gtype { << heuristic >> <gtype> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<s> ^<gtype> <t>)
    (<t> ^formated <f*1>)
    (<t> ^avoid <nlp>)
    -->
    (<ll> ^avoid <nlp> +)
}

sp {learn-predicate*store*prefer
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^gtype { << heuristic >> <gtype> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<s> ^<gtype> <t>)
    (<t> ^formated <f*1>)
    (<t> ^prefer <nlp>)
    -->
    (<ll> ^prefer <nlp> +)
}

sp {learn-predicate*store*structure
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^gtype { << action goal failure heuristic >> <gtype> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    (<ll> ^predicate-structure <ps>)
    (<s> ^<gtype> <t>)
    (<t> ^formated <f*1>)
    (<t> ^nlp-set <n*1>)
    (<n*1> ^nlp <nlp>)
    -->
    (<ps> ^conditions <nlp> +)
}

sp {learn-predicate*store*verb-structure
    :o-support
    (state <s> ^name learn-predicate)
    (<s> ^verb-structure <vs>)
    (<s> ^action <t>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <ll>)
    -->
    (<ll> ^verb-structure <vs> +)
}

sp {learn-predicate*propose*convert-language-format
    (state <s> ^name learn-predicate)
    (<s> -^tcn <t*1>)
    (<s> ^gtype <gtype>)
   -{ (<s> ^<gtype> <g*1>)
      (<g*1> ^nlp-set <n*1>)}
    (<s> ^parsed-structure <t>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name convert-parsed-format +)
    (<o> ^structure <t> +)
}

sp {learn-predicate*apply*convert-language-format*clean-old-structures
    (state <s> ^name learn-predicate)
    (<s> -^tcn <t*2>)
    (<s> ^gtype <gtype>)
   -{ (<s> ^<gtype> <g*1>)
      (<g*1> ^nlp-set <n*1>)}
    (<s> ^operator <o>)
    (<o> ^name convert-parsed-format)
    (<s> ^parsed-structure <t>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <ll>)
    (<ll> ^predicate-structure <ps>)
    (<ps> ^conditions <nlp>)
    -->
    (<ps> ^conditions <nlp> -)
}

sp {learn-predicate*elaborate*tcn*nlp-set*stored
    (state <s> ^name learn-predicate)
    (<s> ^quiescence t)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    (<op> ^message <t>)
    (<t> ^learned-structure <nps>)
    (<op> ^type { << predicate action goal failure heuristic >> <type> })
    -->
    (<s> ^parsed-structure <t2> +)
    (<s> ^gtype <type> +)
    (<s> ^main-type <type> +)
    (<s> ^<type> <act> +)
    (<act> ^parameter-set <ps> +)
    (<act> ^nlp-set <nps> +)
    (<act> ^potential-args <po> +)
}

sp {learn-predicate*elaborate*tcn*nlp-set
    (state <s> ^name learn-predicate)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    (<op> ^nlp-set <nps>)
    (<op> ^type { << predicate action goal failure heuristic >> <type> })
    -->
    (<s> ^parsed-structure <t> +)
    (<s> ^gtype <type> +)
    (<s> ^main-type <type> +)
    (<s> ^<type> <act> +)
    (<act> ^parameter-set <ps> +)
    (<act> ^nlp-set <nps> +)
    (<act> ^potential-args <po> +)
}

sp {learn-predicate*elaborate*tcn
    (state <s> ^name learn-predicate)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <op>)
    (<op> ^message <t>)
    (<t> -^learned-structure <l*1>)
    (<op> ^type { << predicate action goal failure heuristic >> <type> })
    -->
    (<s> ^parsed-structure <t> +)
    (<s> ^gtype <type> +)
    (<s> ^main-type <type> +)
    (<s> ^<type> <act> +)
    (<act> ^parameter-set <ps> +)
    (<act> ^potential-args <po> +)
}

sp {learn-predicate*elaborate*problem-space*world
    (state <s> ^name learn-predicate)
    (<s> ^superstate <ss>)
    (<ss> ^name selection)
    (<ss> ^superstate <ts>)
    (<ts> ^name learn-predicate)
    (<ts> ^world <world2>)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^world <world> +)
    (<ps> ^name action +)
    (<ps> ^dont-copy-anything true +)
    (<world> ^source <world2> +)
    (<world> ^copy-type deep +)
}

sp {learn-predicate*elaborate*problem-space*predicate-structure
    (state <s> ^name learn-predicate)
   -{ (<s> ^superstate <s*1>)
      (<s*1> ^name selection)}
    (<s> ^top-state <t*1>)
    (<t*1> ^world <world2>)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^name action +)
    (<ps> ^world <world> +)
    (<world> ^source <world2> +)
    (<world> ^copy-type deep +)
}

sp {learn-predicate*elaborate*input-args*object
    (state <s> ^name learn-predicate)
    (<s> ^predicate <T5>)
    (<T5> ^formated predicate)
    (<T5> ^condition <c>)
    (<c> ^attribute input-arg)
    (<T5> ^potential-args <P125>)
    (<T5> ^parameter-set <P124>)
    (<T5> ^nlp-set <nlps>)
    (<nlps> ^aname <name>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning-predicate <l*1>)
    (<l*1> ^name <name>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<c> ^result <r*1>)
    (<r*1> ^set <res>)
    (<o*1> ^object <obj>)
    -->
    (<res> ^instance <in> +)
    (<in> ^1 <obj> +)
}

sp {learn-predicate*elaborate*input-args*learning-predicate
    (state <s> ^name learn-predicate)
    (<s> ^predicate <T5>)
    (<T5> ^formated predicate)
    (<T5> ^condition <c>)
    (<c> ^attribute input-arg)
    (<T5> ^potential-args <P125>)
    (<T5> ^parameter-set <P124>)
    (<T5> ^nlp-set <nlps>)
    (<nlps> ^aname <name>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning-predicate <l*1>)
    (<l*1> ^name <name>)
    -->
    (<c> ^result <r*1> +)
    (<r*1> ^set <res> +)
}

sp {learn-predicate*elaborate*input-args*set-to-single*objects
    (state <s> ^name learn-predicate)
    (<s> ^predicate <T5>)
    (<T5> ^formated predicate)
    (<T5> ^link <co>)
    (<co> ^type concept)
    (<co> ^attribute predicate)
    (<T5> ^condition <c>)
    (<c> ^rtype single)
    (<c> ^attribute input-arg)
    (<co> ^name <name>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^learning-predicate <l*1>)
      (<l*1> ^name <name>)}
    (<T5> ^nlp-set <nlps>)
    (<nlps> ^aname <name>)
    (<T5> ^potential-args <P125>)
    (<T5> ^parameter-set <P124>)
    (<co> ^args <args>)
    (<args> ^num { > 0 <n*1> })
    (<s> ^gtype <gtype>)
    (<s> ^<gtype> <g*1>)
    (<g*1> ^condition <co>)
    (<c> ^parameter <p*1>)
    (<p*1> ^1 <v*2>)
    (<v*2> ^param-id <a1>)
    (<args> ^<a1> <c1>)
    (<c1> ^rtype set)
    (<c> ^result <r*2>)
    (<r*2> ^set <res>)
    (<c1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <i*1>)
    (<i*1> ^1 <v*1>)
    (<v*1> ^<elem> <obj>)
    -->
    (<res> ^instance <i15> +)
    (<i15> ^1 <obj> +)
}

sp {learn-predicate*elaborate*input-args
    (state <s> ^name learn-predicate)
    (<s> ^predicate <T5>)
    (<T5> ^formated predicate)
    (<T5> ^link <co>)
    (<co> ^type concept)
    (<co> ^attribute predicate)
    (<T5> ^condition <c>)
    (<c> ^attribute input-arg)
    (<T5> ^handle <name>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^learning-predicate <l*1>)
      (<l*1> ^name <name>)}
    (<co> ^name <name>)
    (<T5> ^potential-args <P125>)
    (<T5> ^parameter-set <P124>)
    (<T5> ^nlp-set <nlps>)
    (<c> ^rtype <rtype>)
    (<co> ^args <args>)
    (<args> ^num { > 0 <n*1> })
    (<s> ^gtype <gtype>)
    (<s> ^<gtype> <g*1>)
    (<g*1> ^condition <co>)
    (<c> ^parameter <p*1>)
    (<p*1> ^1 <v*1>)
    (<v*1> ^param-id <a1>)
    (<args> ^<a1> <c1>)
    (<c1> ^rtype <rtype>)
    (<c> ^result <r*2>)
    (<r*2> ^set <res2>)
    (<c1> ^result <r*1>)
    (<r*1> ^set <s*1>)
    (<s*1> ^instance <in1>)
    -->
    (<res2> ^instance <in1> +)
}

sp {learn-predicate*elaborate*verb-structure
    :o-support
    (state <s> ^gtype action)
    (<s> ^name learn-predicate)
    (<s> ^verb-structure <vs>)
    (<s> ^action <a>)
    -->
    (<a> ^verb-structure <vs> +)
}

sp {wait-for-response*elaborate*attend-to-all-scene-changes
    (state <s> ^name wait-for-response)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^perception <p*1> +)
    (<p*1> ^attend-to-all-perception yes +)
}

sp {satisfy-purpose*reject*dialog-event*waiting-for-response
    (state <s> ^name satisfy-purpose)
    (<s> ^purpose <p*2>)
    (<p*2> ^originator agent)
    (<s> ^operator <o> +)
    (<o> ^name dialog-event)
    (<s> ^purpose <p*1>)
    (<p*1> ^satisfaction <s*1>)
    (<s*1> ^dialog-event <d*1>)
    (<d*1> ^type <type>)
    -->
    (<s> ^operator <o> -)
}

sp {satisfy-purpose*propose*wait-for-response
    (state <s> ^name satisfy-purpose)
    (<s> ^purpose <p*2>)
    (<p*2> ^originator agent)
    (<s> ^purpose <p*1>)
    (<p*1> ^satisfaction <s*1>)
    (<s*1> ^dialog-event <d*1>)
    (<d*1> ^type <type>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name wait-for-response +)
}

sp {retrospective-learning*apply*copy-action-context*copy*predicate*arg
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-action-context)
    (<o> ^action-context <a*1>)
    (<s> ^action-context <context>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^2 <v*1>)
    (<v*1> ^handle <obj2-handle>)
    (<arg> ^handle <pred-handle>)
    (<o*1> ^object <obj2>)
    (<obj2> ^handle <obj2-handle>)
    -->
    (<context> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type predicate +)
    (<new-arg> ^handle <pred-handle> +)
    (<new-arg> ^2 <obj2> +)
}

sp {retrospective-learning*apply*copy-action-context*copy*concept*arg
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-action-context)
    (<o> ^action-context <a*1>)
    (<s> ^action-context <context>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type concept)
    (<arg> ^handle <concept-handle>)
    -->
    (<context> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type concept +)
    (<new-arg> ^handle <concept-handle> +)
}

sp {retrospective-learning*apply*copy-action-context*copy*object*arg
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-action-context)
    (<o> ^action-context <a*1>)
    (<s> ^action-context <context>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type object)
    (<arg> ^id <i*1>)
    (<i*1> ^handle <obj-handle>)
    (<o*1> ^object <obj>)
    (<obj> ^handle <obj-handle>)
    -->
    (<context> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type object +)
    (<new-arg> ^id <obj> +)
}

sp {retrospective-learning*apply*copy-action-context*copy*merged*info
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-action-context)
    (<o> ^action-context <a*1>)
    (<a*1> ^merged <m>)
    (<m> ^object2 <o*2>)
    (<m> ^object1 <o*1>)
    (<s> ^action-context <context>)
    (<o*2> ^handle <handle2>)
    (<o*1> ^handle <handle1>)
    -->
    (<context> ^merged <m*1> +)
    (<m*1> ^<handle1> <handle2> +)
}

sp {retrospective-learning*apply*copy-action-context*mark*copied
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-action-context)
    (<s> ^action-context <c>)
    -->
    (<s> ^copied-action-context true +)
}

sp {retrospective-learning*apply*copy-action-context*create*context
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-action-context)
    (<o> ^action-context <context>)
    (<context> ^action-handle <handle>)
    (<context> ^name <op-name>)
    -->
    (<s> ^action-context <context-copy> +)
    (<context-copy> ^action-handle <handle> +)
    (<context-copy> ^name <op-name> +)
    (<context-copy> ^action-type composite +)
}

sp {retrospective-learning*propose*copy-action-context
    (state <s> ^name retrospective-learning)
    (<s> -^copied-action-context <c*1>)
    (<s> ^world <w>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^action-context <context>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name copy-action-context +)
    (<o> ^action-context <context> +)
}

sp {learn-proposal-rule*prefer*deduce-task-goal*over*action*operator
    (state <s> ^name learn-proposal-rule)
    (<s> ^operator <o1> +)
    (<o1> ^name deduce-task-goal)
    (<s> ^operator <o2> +)
    (<o2> ^action-handle <any>)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-proposal-rule*prefer*smem-query*over*action*operator
    (state <s> ^name learn-proposal-rule)
    (<s> ^operator <o1> +)
    (<o1> ^name smem-query)
    (<s> ^operator <o2> +)
    (<o2> ^action-handle <any>)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-proposal-rule*elaborate*action-id*from*smem-query*result
    :o-support
    (state <s> ^name learn-proposal-rule)
    (<s> ^action-context <a*1>)
    (<a*1> ^action-handle <action-handle>)
    (<s> ^smem-query <query>)
    (<query> ^cue <c*1>)
    (<c*1> ^handle <action-handle>)
    (<query> ^result <id>)
    -->
    (<s> ^action-id <id> +)
}

sp {learn-proposal-rule*elaborate*smem-query*retrieve-action-id
    (state <s> ^name learn-proposal-rule)
    (<s> -^action-id <a*2>)
    (<s> ^action-context <a*1>)
    (<a*1> ^action-handle <action-handle>)
    -->
    (<s> ^smem-query <query> +)
    (<query> ^cue <cue> +)
    (<query> ^depth 8 +)
    (<cue> ^handle <action-handle> +)
}

sp {learn-proposal-rule*propose*deduce-task-goal
    (state <s> ^name learn-proposal-rule)
    (<s> ^action-id <id>)
    (<id> -^goal <g*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name deduce-task-goal +)
}

sp {hypothesize-task-goal*copy*goal-predicate*relation*unary
    (state <s> ^name hypothesize-task-goal)
    (<s> ^object-predicates <p>)
    (<s> ^final-state <f*1>)
    (<f*1> ^relationships <rels>)
    (<s> ^goal-state <gs>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^goal-predicates <g*1>)
    (<g*1> ^goal-predicate <pred>)
    (<pred> ^type state)
    (<pred> ^handle <pred-handle>)
    (<pred> ^1 <obj1-handle>)
    (<p> ^<obj1> <desc1>)
    (<obj1> ^handle <obj1-handle>)
    (<o*1> ^object <obj1>)
    -->
    (<rels> ^relations <r> +)
    (<r> ^name <pred-handle> +)
    (<r> ^instance <i> +)
    (<i> ^1 <obj1> +)
    (<gs> ^relation <new-pred> +)
    (<new-pred> ^name <pred-handle> +)
    (<new-pred> ^1 <desc1> +)
}

sp {hypothesize-task-goal*copy*goal-predicate*relations
    (state <s> ^name hypothesize-task-goal)
    (<s> ^object-predicates <p>)
    (<s> ^final-state <f*1>)
    (<f*1> ^relationships <rels>)
    (<s> ^goal-state <gs>)
    (<s> ^top-state <t*2>)
    (<s> ^top-state <t*1>)
    (<t*2> ^world <w*2>)
    (<w*2> ^objects <o*2>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^goal-predicates <g*1>)
    (<g*1> ^goal-predicate <pred>)
    (<pred> ^type relation)
    (<pred> ^2 <obj2-handle>)
    (<pred> ^handle <pred-handle>)
    (<pred> ^1 <obj1-handle>)
    (<p> ^<obj2> <desc2>)
    (<obj2> ^handle <obj2-handle>)
    (<o*2> ^object <obj2>)
    (<p> ^<obj1> <desc1>)
    (<obj1> ^handle <obj1-handle>)
    (<o*1> ^object <obj1>)
    -->
    (<rels> ^relations <r> +)
    (<r> ^name <pred-handle> +)
    (<r> ^instance <i> +)
    (<i> ^1 <obj1> +)
    (<i> ^2 <obj2> +)
    (<gs> ^relation <new-pred> +)
    (<new-pred> ^name <pred-handle> +)
    (<new-pred> ^1 <desc1> +)
    (<new-pred> ^2 <desc2> +)
}

sp {deduce-task-goal*apply*hypothesize-task-goal*copy*goal-predicate*state
    (state <s> ^name hypothesize-task-goal)
    (<s> ^object-predicates <o*1>)
    (<s> ^final-state <f*1>)
    (<f*1> ^predicate-set <ps>)
    (<s> ^goal-state <gs>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <o*2>)
    (<o*1> ^<obj1> <desc>)
    (<obj1> ^predicates <p*1>)
    (<obj1> ^handle <obj1-handle>)
    (<o*2> ^object <obj1>)
    (<p*1>
          ^{ <> door1 <> movable <> indicated <> object-handle <> category <> arm-status <> dialog-object <> value <> handle <> type <> visible <> multiple <> number <attr> } { <> grid-green <val> })
    -->
    (<desc> ^<attr> <val> +)
    (<ps> ^predicate <pred> +)
    (<pred> ^name <attr> +)
    (<pred> ^value <val> +)
    (<pred> ^object <obj1> +)
}

sp {hypothesize-task-goal*elaborate*object-predicates
    (state <s> ^name hypothesize-task-goal)
    (<s> ^object-predicates <preds>)
    (<s> ^final-state <f*1>)
    (<f*1> ^objects <o*1>)
    (<o*1> ^object <obj>)
    -->
    (<preds> ^<obj> <description> +)
}

sp {hypothesize-task-goal*elaborate*objects
    (state <s> ^name hypothesize-task-goal)
    (<s> ^object-predicates <preds>)
    (<s> ^final-state <f*1>)
    (<f*1> ^objects <objs>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<s> ^superstate <s*1>)
    (<s*1> ^goal-predicates <g*1>)
    (<g*1> ^goal-predicate <p>)
    (<p> ^{ << 1 2 >> <a*1> } <obj1-handle>)
    (<o*1> ^object <obj1>)
    (<obj1> ^handle <obj1-handle>)
    -->
    (<objs> ^object <obj1> +)
}

sp {hypothesize-task-goal*elaborate*goal-state
    (state <s> ^name hypothesize-task-goal)
    -->
    (<s> ^goal-state <gs> +)
    (<s> ^final-state <fs> +)
    (<s> ^object-predicates <op> +)
    (<fs> ^objects <objs> +)
    (<fs> ^predicate-set <ps> +)
    (<fs> ^relationships <rel> +)
}

sp {hypothesize-task-goal*apply*complete*dialog-context
    (state <s> ^name hypothesize-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete)
    (<s> ^final-state <fs>)
    (<s> ^goal-state <gs>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <changes>)
    (<s> ^top-state <ts>)
    -->
    (<ts> ^dialog-context <dc> +)
    (<dc> ^goal-relationships <gs> +)
    (<dc> ^ignore <ig> +)
    (<dc> ^attend <at> +)
    (<dc> ^initial <is> +)
    (<dc> ^final <fs> +)
    (<dc> ^goal-state <g22> +)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type describe-goal-state +)
    (<msg> ^fields <f> +)
    (<f> ^relationships <gs> +)
    (<f> ^definitive yes +)
    (<changes> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type wait-for-goal-response +)
    (<p> ^originator agent +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^dialog-event <de> +)
    (<de> ^type finished +)
    (<de> ^originator instructor +)
}

sp {hypothesize-task-goal*propose*complete
    (state <s> ^name hypothesize-task-goal)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete +)
}

sp {deduce-task-goal*prefer*handle-world-change*over*subaction
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o1> +)
    (<o1> ^name handle-world-change)
    (<s> ^operator <o2> +)
    (<o2> ^action-handle <any>)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {deduce-task-goal*apply*handle-world-change*new*relation*predicate*remove*goal*predicate
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o>)
    (<o> ^name handle-world-change)
    (<o> ^type old)
    (<o> ^predicate <new-pred>)
    (<new-pred> ^type relation)
    (<s> ^goal-predicates <goal-preds>)
    (<goal-preds> ^goal-predicate <goal-pred>)
    (<goal-pred> ^type relation)
    (<goal-pred> ^handle <pred-handle>)
    (<new-pred> ^handle <pred-handle>)
    (<goal-pred> ^2 <obj2-handle>)
    (<new-pred> ^2 <v*2>)
    (<v*2> ^handle <obj2-handle>)
    (<goal-pred> ^1 <obj1-handle>)
    (<new-pred> ^1 <v*1>)
    (<v*1> ^handle <obj1-handle>)
    -->
    (<goal-preds> ^goal-predicate <goal-pred> -)
}

sp {deduce-task-goal*apply*handle-world-change*old*state*predicate*remove*from*goal
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o>)
    (<o> ^name handle-world-change)
    (<o> ^type old)
    (<o> ^predicate <new-pred>)
    (<new-pred> ^type state)
    (<s> ^goal-predicates <goal-preds>)
    (<goal-preds> ^goal-predicate <goal-pred>)
    (<goal-pred> ^type state)
    (<goal-pred> ^handle <pred-handle>)
    (<new-pred> ^handle <pred-handle>)
    (<goal-pred> ^1 <obj1-handle>)
    (<new-pred> ^1 <v*1>)
    (<v*1> ^handle <obj1-handle>)
    -->
    (<goal-preds> ^goal-predicate <goal-pred> -)
}

sp {deduce-task-goal*apply*handle-world-change*new*relation*predicate*add*to*goal
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o>)
    (<o> ^name handle-world-change)
    (<o> ^type new)
    (<o> ^predicate <new-pred>)
    (<new-pred> ^type relation)
    (<s> ^goal-predicates <goal-preds>)
    (<new-pred> ^2 <v*2>)
    (<v*2> ^handle <obj2-handle>)
    (<new-pred> ^handle <pred-handle>)
    (<new-pred> ^1 <v*1>)
    (<v*1> ^handle <obj1-handle>)
   -{ (<goal-preds> ^goal-predicate <goal-pred>)
      (<goal-pred> ^2 <obj2-handle>)
      (<goal-pred> ^handle <pred-handle>)
      (<goal-pred> ^1 <obj1-handle>)
      (<goal-pred> ^type relation)}
    -->
    (<goal-preds> ^goal-predicate <goal-pred> +)
    (<goal-pred> ^type relation +)
    (<goal-pred> ^handle <pred-handle> +)
    (<goal-pred> ^1 <obj1-handle> +)
    (<goal-pred> ^2 <obj2-handle> +)
}

sp {deduce-task-goal*apply*handle-world-change*new*state*predicate*add*to*goal
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o>)
    (<o> ^name handle-world-change)
    (<o> ^type new)
    (<o> ^predicate <new-pred>)
    (<new-pred> ^type state)
    (<s> ^goal-predicates <goal-preds>)
    (<new-pred> ^handle <pred-handle>)
    (<new-pred> ^1 <v*1>)
    (<v*1> ^handle <obj1-handle>)
   -{ (<goal-preds> ^goal-predicate <goal-pred>)
      (<goal-pred> ^handle <pred-handle>)
      (<goal-pred> ^1 <obj1-handle>)
      (<goal-pred> ^type state)}
    -->
    (<goal-preds> ^goal-predicate <goal-pred> +)
    (<goal-pred> ^type state +)
    (<goal-pred> ^handle <pred-handle> +)
    (<goal-pred> ^1 <obj1-handle> +)
}

sp {deduce-task-goal*apply*handle-world-change*old*relation*predicate
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o>)
    (<o> ^name handle-world-change)
    (<o> ^type old)
    (<o> ^predicate <old-pred>)
    (<old-pred> ^type relation)
    (<s> ^world-copy <w*1>)
    (<old-pred> ^2 <obj2>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^instance <i>)
    (<i> ^2 <obj2>)
    (<pred> ^handle <pred-handle>)
    (<old-pred> ^handle <pred-handle>)
    (<i> ^1 <obj1>)
    (<old-pred> ^1 <obj1>)
    -->
    (<pred> ^instance <i> -)
}

sp {deduce-task-goal*apply*handle-world-change*old*state*predicate
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o>)
    (<o> ^name handle-world-change)
    (<o> ^type old)
    (<o> ^predicate <old-pred>)
    (<old-pred> ^type state)
    (<old-pred> ^predicate-name <pred-name>)
    (<old-pred> ^handle <pred-handle>)
    (<old-pred> ^1 <v*1>)
    (<v*1> ^predicates <preds>)
    (<preds> ^<pred-name> <pred-handle>)
    -->
    (<preds> ^<pred-name> <pred-handle> -)
}

sp {deduce-task-goal*apply*handle-world-change*new*relation*predicate
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o>)
    (<o> ^name handle-world-change)
    (<o> ^type new)
    (<o> ^predicate <new-pred>)
    (<new-pred> ^type relation)
    (<s> ^world-copy <w*1>)
    (<new-pred> ^2 <obj2>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <pred>)
    (<pred> ^handle <pred-handle>)
    (<new-pred> ^handle <pred-handle>)
    (<new-pred> ^1 <obj1>)
    -->
    (<pred> ^instance <i> +)
    (<i> ^1 <obj1> +)
    (<i> ^2 <obj2> +)
}

sp {deduce-task-goal*apply*handle-world-change*new*state*predicate
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o>)
    (<o> ^name handle-world-change)
    (<o> ^type new)
    (<o> ^predicate <new-pred>)
    (<new-pred> ^type state)
    (<new-pred> ^predicate-name <pred-name>)
    (<new-pred> ^handle <pred-handle>)
    (<new-pred> ^1 <v*1>)
    (<v*1> ^predicates <preds>)
    -->
    (<preds> ^<pred-name> <pred-handle> +)
}

sp {deduce-task-goal*propose*handle-world-change*old
    (state <s> ^name deduce-task-goal)
    (<s> ^world-changes <w*1>)
    (<w*1> ^old-predicate <pred>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-world-change +)
    (<o> ^predicate <pred> +)
    (<o> ^type old +)
}

sp {deduce-task-goal*propose*handle-world-change*new
    (state <s> ^name deduce-task-goal)
    (<s> ^world-changes <w*1>)
    (<w*1> ^new-predicate <pred>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name handle-world-change +)
    (<o> ^predicate <pred> +)
    (<o> ^type new +)
}

sp {deduce-task-goal*elaborate*world-changes*old-predicate*relation
    (state <s> ^name deduce-task-goal)
    (<s> ^world-changes <c>)
    (<s> ^world-copy <w*6>)
    (<s> ^world-copy <w*5>)
    (<s> ^world-copy <w*4>)
    (<w*5> ^objects <o*4>)
    (<w*4> ^objects <o*3>)
    (<w*6> ^predicates <p*2>)
    (<p*2> ^predicate <pred>)
    (<pred> ^instance <i>)
    (<i> ^2 <obj2>)
    (<pred> ^handle <pred-handle>)
    (<obj2> ^handle <handle2>)
    (<s> ^world <w*3>)
    (<w*3> ^predicates <p*1>)
    (<p*1> ^predicate <src-pred>)
    (<src-pred> ^handle <pred-handle>)
    (<s> ^world <w*2>)
    (<w*2> ^objects <o*2>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<i> ^1 <obj1>)
    (<obj1> ^handle <handle1>)
    (<o*4> ^object <obj2>)
    (<o*3> ^object <obj1>)
    (<o*2> ^object <src-obj2>)
    (<src-obj2> ^handle <handle2>)
    (<o*1> ^object <src-obj1>)
   -{ (<src-pred> ^instance <src-i>)
      (<src-i> ^2 <src-obj2>)
      (<src-i> ^1 <src-obj1>)}
    (<src-obj1> ^handle <handle1>)
    -->
    (<c> ^old-predicate <old-pred> +)
    (<old-pred> ^type relation +)
    (<old-pred> ^handle <pred-handle> +)
    (<old-pred> ^1 <obj1> +)
    (<old-pred> ^2 <obj2> +)
}

sp {deduce-task-goal*elaborate*world-changes*old-predicate*state
    (state <s> ^name deduce-task-goal)
    (<s> ^world-changes <c>)
    (<s> ^world-copy <w*2>)
    (<w*2> ^objects <o*2>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*2> ^object <obj>)
    (<obj> ^predicates <p*2>)
    (<obj> ^handle <handle>)
    (<p*2> ^<pred-name> <pred-val>)
    (<o*1> ^object <src-obj>)
   -{ (<src-obj> ^predicates <p*1>)
      (<p*1> ^<pred-name> <pred-val>)}
    (<src-obj> ^handle <handle>)
    -->
    (<c> ^old-predicate <old-pred> +)
    (<old-pred> ^type state +)
    (<old-pred> ^predicate-name <pred-name> +)
    (<old-pred> ^handle <pred-val> +)
    (<old-pred> ^1 <obj> +)
}

sp {deduce-task-goal*elaborate*world-changes*new-predicate*relation
    (state <s> ^name deduce-task-goal)
    (<s> ^world-changes <c>)
    (<s> ^world-copy <w*6>)
    (<s> ^world-copy <w*5>)
    (<s> ^world-copy <w*4>)
    (<w*5> ^objects <o*4>)
    (<w*4> ^objects <o*3>)
    (<w*6> ^predicates <p*2>)
    (<p*2> ^predicate <pred>)
    (<pred> ^handle <pred-handle>)
    (<s> ^world <w*3>)
    (<w*3> ^predicates <p*1>)
    (<p*1> ^predicate <src-pred>)
    (<src-pred> ^handle <pred-handle>)
    (<src-pred> ^instance <src-i>)
    (<src-i> ^2 <src-obj2>)
    (<src-obj2> ^handle <handle2>)
    (<s> ^world <w*2>)
    (<w*2> ^objects <o*2>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<src-i> ^1 <src-obj1>)
    (<src-obj1> ^handle <handle1>)
    (<o*2> ^object <src-obj2>)
    (<o*1> ^object <src-obj1>)
    (<o*4> ^object <obj2>)
    (<obj2> ^handle <handle2>)
    (<o*3> ^object <obj1>)
   -{ (<pred> ^instance <i>)
      (<i> ^2 <obj2>)
      (<i> ^1 <obj1>)}
    (<obj1> ^handle <handle1>)
    -->
    (<c> ^new-predicate <new-pred> +)
    (<new-pred> ^type relation +)
    (<new-pred> ^handle <pred-handle> +)
    (<new-pred> ^1 <obj1> +)
    (<new-pred> ^2 <obj2> +)
}

sp {deduce-task-goal*elaborate*world-changes*new-predicate*state
    (state <s> ^name deduce-task-goal)
    (<s> ^world-changes <c>)
    (<s> ^world-copy <w*2>)
    (<w*2> ^objects <o*2>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<o*2> ^object <obj>)
    (<obj> ^handle <handle>)
    (<o*1> ^object <src-obj>)
    (<src-obj> ^handle <handle>)
    (<src-obj> ^predicates <p*1>)
    (<p*1> ^<pred-name> <pred-val>)
   -{ (<obj> ^predicates <p*2>)
      (<p*2> ^<pred-name> <pred-val>)}
    -->
    (<c> ^new-predicate <new-pred> +)
    (<new-pred> ^type state +)
    (<new-pred> ^predicate-name <pred-name> +)
    (<new-pred> ^handle <pred-val> +)
    (<new-pred> ^1 <obj> +)
}

sp {deduce-task-goal*elaborate*world-changes
    (state <s> ^name deduce-task-goal)
    -->
    (<s> ^world-changes <c> +)
}

sp {deduce-task-goal*apply*create-world-copy*copy*predicate*instance*size*2
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    (<s> ^world-copy <w*6>)
    (<s> ^world-copy <w*5>)
    (<s> ^world-copy <w*4>)
    (<w*5> ^objects <o*5>)
    (<w*4> ^objects <o*4>)
    (<w*6> ^predicates <p*2>)
    (<p*2> ^predicate <pred>)
    (<pred> ^handle <pred-handle>)
    (<s> ^world <w*3>)
    (<w*3> ^predicates <p*1>)
    (<p*1> ^predicate <src-pred>)
    (<src-pred> ^handle <pred-handle>)
    (<src-pred> ^instance <src-instance>)
    (<src-instance> -^3 <v*1>)
    (<src-instance> ^2 <src-obj2>)
    (<src-obj2> ^handle <handle2>)
    (<s> ^world <w*2>)
    (<w*2> ^objects <o*3>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*2>)
    (<src-instance> ^1 <src-obj1>)
    (<src-obj1> ^handle <handle1>)
    (<o*3> ^object <src-obj2>)
    (<o*2> ^object <src-obj1>)
    (<o*5> ^object <obj2>)
    (<obj2> ^handle <handle2>)
    (<o*4> ^object <obj1>)
    (<obj1> ^handle <handle1>)
    -->
    (<pred> ^instance <new-instance> +)
    (<new-instance> ^1 <obj1> +)
    (<new-instance> ^2 <obj2> +)
}

sp {deduce-task-goal*apply*create-world-copy*copy*predicate
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    (<s> ^world-copy <w*2>)
    (<w*2> ^predicates <preds>)
    (<s> ^world <w*1>)
    (<w*1> ^predicates <src-preds>)
    (<src-preds> ^predicate <p*1>)
    (<p*1> ^handle <handle>)
    -->
    (<preds> ^predicate <new-pred> +)
    (<new-pred> ^handle <handle> +)
}

sp {deduce-task-goal*apply*create-world-copy*copy*object*predicates
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    (<s> ^world-copy <w*2>)
    (<w*2> ^objects <o*3>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*2>)
    (<o*3> ^object <obj>)
    (<obj> ^predicates <preds>)
    (<obj> ^handle <handle>)
    (<o*2> ^object <src-obj>)
    (<src-obj> ^handle <handle>)
    (<src-obj> ^predicates <p*1>)
    (<p*1> ^<pred-name> <pred-val>)
    -->
    (<preds> ^<pred-name> <pred-val> +)
}

sp {deduce-task-goal*apply*create-world-copy*copy*object
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    (<s> ^world-copy <w*2>)
    (<w*2> ^objects <objs>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*2>)
    (<o*2> ^object <src-obj>)
    (<src-obj> ^item-type <type>)
    (<src-obj> ^handle <handle>)
    -->
    (<objs> ^object <new-obj> +)
    (<new-obj> ^handle <handle> +)
    (<new-obj> ^item-type <type> +)
    (<new-obj> ^predicates <preds> +)
}

sp {deduce-task-goal*apply*create-world-copy*copy*robot*arm
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    (<s> ^world-copy <w*2>)
    (<w*2> ^robot <r*2>)
    (<r*2> ^arm <arm>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^arm <src-arm>)
    (<src-arm> ^<att-name> <att-val>)
    -->
    (<arm> ^<att-name> <att-val> +)
}

sp {deduce-task-goal*apply*create-world-copy*copy*robot*current-location
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    (<s> ^world-copy <w*3>)
    (<s> ^world-copy <w*2>)
    (<w*3> ^objects <o*2>)
    (<w*2> ^robot <robot>)
    (<s> ^world <w*1>)
    (<w*1> ^robot <src-robot>)
    (<src-robot> ^current-location <c*1>)
    (<c*1> ^handle <loc-handle>)
    (<o*2> ^object <loc>)
    (<loc> ^handle <loc-handle>)
    -->
    (<robot> ^current-location <loc> +)
}

sp {deduce-task-goal*apply*create-world-copy*create*world-copy
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    (<s> ^world <w>)
    -->
    (<s> ^world-copy <wc> +)
    (<wc> ^objects <objs> +)
    (<wc> ^predicates <preds> +)
    (<wc> ^robot <rob> +)
    (<rob> ^arm <arm> +)
}

sp {deduce-task-goal*apply*create-world-copy*mark*world-copy*copied
    (state <s> ^copied level3)
    (<s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    (<s> ^world-copy <copy>)
    -->
    (<copy> ^copied true +)
}

sp {deduce-task-goal*apply*create-world-copy*mark*copied-level3
    (state <s> ^copied level2)
    (<s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    -->
    (<s> ^copied level3 +)
}

sp {deduce-task-goal*apply*create-world-copy*mark*copied-level2
    (state <s> ^copied level1)
    (<s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    -->
    (<s> ^copied level2 +)
}

sp {deduce-task-goal*apply*create-world-copy*mark*copied-level1
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-world-copy)
    -->
    (<s> ^copied level1 +)
}

sp {deduce-task-goal*propose*create-world-copy
    (state <s> ^name deduce-task-goal)
   -{ (<s> ^world-copy <w*1>)
      (<w*1> ^copied true)}
    (<s> ^world <w>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name create-world-copy +)
}

sp {deduce-task-goal*apply*primitive*action*advance*subaction
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o>)
    (<o> ^action-type primitive)
    (<s> ^subactions <subs>)
    (<subs> ^next <sub>)
    (<sub> ^next <next>)
    -->
    (<subs> ^next <sub> -)
    (<subs> ^next <next> +)
}

sp {deduce-task-goal*apply*complete-deduce-task-goal*create*new-segment
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-deduce-task-goal)
    (<s> ^new-segment-info <info>)
    (<info> ^purpose <p*1>)
    (<p*1> ^parameters <p*2>)
    (<p*2> ^goal-predicate <pred>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^new-segment-info <info> +)
}

sp {deduce-task-goal*apply*complete-deduce-task-goal*copy*goal-predicate*relation
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-deduce-task-goal)
    (<s> ^goal-predicates <g*1>)
    (<g*1> ^goal-predicate <pred>)
    (<pred> ^type relation)
    (<pred> ^2 <obj2-handle>)
    (<s> ^new-segment-info <n*1>)
    (<pred> ^handle <pred-handle>)
    (<n*1> ^purpose <p*1>)
    (<p*1> ^parameters <params>)
    (<s> ^top-state <t*2>)
    (<s> ^top-state <t*1>)
    (<t*2> ^world <w*2>)
    (<w*2> ^objects <o*3>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <o*2>)
    (<pred> ^1 <obj1-handle>)
    (<o*3> ^object <obj2>)
    (<obj2> ^handle <obj2-handle>)
    (<o*2> ^object <obj1>)
    (<obj1> ^handle <obj1-handle>)
    -->
    (<params> ^goal-predicate <new-pred> +)
    (<new-pred> ^type relation +)
    (<new-pred> ^handle <pred-handle> +)
    (<new-pred> ^1 <obj1> +)
    (<new-pred> ^2 <obj2> +)
}

sp {deduce-task-goal*apply*complete-deduce-task-goal*copy*goal-predicate*state
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-deduce-task-goal)
    (<s> ^goal-predicates <g*1>)
    (<g*1> ^goal-predicate <pred>)
    (<pred> ^type state)
    (<s> ^new-segment-info <n*1>)
    (<pred> ^handle <pred-handle>)
    (<n*1> ^purpose <p*1>)
    (<p*1> ^parameters <params>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <o*2>)
    (<pred> ^1 <obj1-handle>)
    (<o*2> ^object <obj1>)
    (<obj1> ^handle <obj1-handle>)
    -->
    (<params> ^goal-predicate <new-pred> +)
    (<new-pred> ^type state +)
    (<new-pred> ^handle <pred-handle> +)
    (<new-pred> ^1 <obj1> +)
}

sp {deduce-task-goal*apply*complete-deduce-task-goal
    :interrupt
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-deduce-task-goal)
    -->
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-goal-definition +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type goal +)
}

sp {prefer*hypothesize-task-goal*over*complete-deduce-task-goal
    (state <s> ^name deduce-task-goal)
    (<s> ^operator <o2> +)
    (<o2> ^name complete-deduce-task-goal)
    (<s> ^operator <o1> +)
    (<o1> ^name hypothesize-task-goal)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {deduce-task-goal*propose*hypothesize-task-goal
    :interrupt
    (state <s> ^name deduce-task-goal)
    (<s> ^subactions <s*1>)
    (<s*1> ^next none)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name hypothesize-task-goal +)
}

sp {deduce-task-goal*propose*complete-deduce-task-goal
    (state <s> ^name deduce-task-goal)
    (<s> ^subactions <s*1>)
    (<s*1> ^next none)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-deduce-task-goal +)
}

sp {deduce-task-goal*elaborate*goal-predicates
    (state <s> ^name deduce-task-goal)
    -->
    (<s> ^goal-predicates <preds> +)
}

sp {deduce-task-goal*elaborate*problem-space
    (state <s> ^name deduce-task-goal)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^name action +)
    (<ps> ^action <action> +)
    (<ps> ^world <world> +)
    (<ps> ^subactions <subs> +)
    (<action> ^type simulate +)
    (<action> ^propose-action-operators true +)
    (<world> ^copy-type deep +)
    (<subs> ^copy-type deep +)
}

sp {deduce-task-goal*elaborate*current-subaction
    (state <s> ^name deduce-task-goal)
    (<s> ^subactions <s*1>)
    (<s*1> ^next <sub>)
    -->
    (<s> ^action-to-match <sub> +)
}

sp {retrospective-learning*evaluate-operator*apply*action*advance*subaction
    (state <s> ^name evaluate-operator)
    (<s> ^look-ahead-operator <o>)
    (<s> ^operator <o>)
    (<s> ^subactions <subs>)
    (<subs> ^next <cur>)
    (<cur> ^next <next>)
    -->
    (<subs> ^next <cur> -)
    (<subs> ^next <next> +)
}

sp {action*evaluate-operator*learning*retrospective*elaborate*problem-space*subactions*copy-type
    (state <s> ^name evaluate-operator)
    (<s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^learning <l*1>)
    (<l*1> ^type retrospective)
    -->
    (<ps> ^subactions <s*1> +)
    (<s*1> ^copy-type deep +)
}

sp {action*selection*learning*retrospective*elaborate*current-subaction
    (state <s> ^name selection)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^subactions <s*1>)
    (<s*1> ^next <sub>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^learning <l*1>)
    (<l*1> ^type retrospective)
    -->
    (<s> ^action-to-match <sub> +)
}

sp {action*selection*learning*retrospective*elaborate*learning*use*chunking
    (state <s> ^name selection)
    (<s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^learning <learn>)
    (<learn> ^type retrospective)
    -->
    (<learn> ^use chunking +)
}

sp {action*selection*learning*retrospective*elaborate*problem-space*subactions*copy-type
    (state <s> ^name selection)
    (<s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^learning <l*1>)
    (<l*1> ^type retrospective)
    -->
    (<ps> ^subactions <s*1> +)
    (<s*1> ^copy-type shallow +)
}

sp {action*composite-action*learning*retrospective*elaborate*desired*satisfied*superstate
    (state <s> ^desired <d*1>)
    (<d*1> ^satisfied true)
    (<s> ^superstate <s*1>)
    (<s*1> ^name learn-proposal-rule)
    (<s> ^problem-space <p*1>)
    (<p*1> ^name action)
    (<s> ^superstate <ss>)
    (<s> ^problem-space <p*2>)
    (<p*2> ^learning <l*1>)
    (<l*1> ^type retrospective)
    -->
    (<ss> ^desired <d*2> +)
    (<d*2> ^satisfied true +)
}

sp {action*composite-action*learning*retrospective*elaborate*problem-space*subactions*copy-type
    (state <s> ^superstate <s*1>)
    (<s*1> ^name learn-proposal-rule)
    (<s> ^problem-space <ps>)
    (<ps> ^name action)
    (<ps> ^learning <l*1>)
    (<l*1> ^type retrospective)
    -->
    (<ps> ^subactions <s*2> +)
    (<s*2> ^copy-type shallow +)
}

sp {retrospective-learning*prefer*report-success*over*all*others
    (state <s> ^name learn-proposal-rule)
    (<s> ^operator <o1> +)
    (<o1> ^name report-success)
    (<s> ^operator <o2> +)
    (<o2> ^name { <> report-success <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {retrospective-learning*learn-proposal-rule*apply*report-success
    (state <s> ^name learn-proposal-rule)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <l*1> +)
    (<l*1> ^type retrospective +)
}

sp {retrospective-learning*learn-proposal-rule*propose*report-success
    (state <s> ^name learn-proposal-rule)
    (<s> ^desired <des>)
    (<des> ^satisfied true)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-success +)
}

sp {learn-proposal-rule*propose*composite-action
    (state <s> ^name learn-proposal-rule)
    (<s> ^action-context <o>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
}

sp {learn-proposal-rule*elaborate*problem-space
    (state <s> ^name learn-proposal-rule)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^name action +)
    (<ps> ^action <action> +)
    (<ps> ^world <world> +)
    (<ps> ^learning <learn> +)
    (<ps> ^subactions <subs> +)
    (<action> ^type simulate +)
    (<world> ^copy-type shallow +)
    (<learn> ^type retrospective +)
    (<subs> ^copy-type shallow +)
}

sp {retrospective-learning*state-no-change*elaborate*name*learn-proposal-rule
    (state <s> ^impasse no-change)
    (<s> ^attribute state)
    (<s> ^superstate <s*1>)
    (<s*1> ^name retrospective-learning)
    -->
    (<s> ^name learn-proposal-rule +)
}

sp {retrospective-learning*prefer*copy*subaction*over*retrieve
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o2> +)
    (<o2> ^name retrieve-subaction-episode)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-subaction-info)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {retrospective-learning*prefer*copy-context*over*subactions
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o1> +)
    (<o1> ^name copy-action-context)
    (<s> ^operator <o2> +)
    (<o2> ^name { << copy-subaction-info retrieve-subaction-episode >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {retrospective-learning*apply*copy-subaction-info*cleanup
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<o> ^subaction-episode <ep>)
    (<s> ^subaction-episode <ep>)
    (<s> ^subaction-info <info>)
    (<info> ^action-handle <handle>)
    -->
    (<s> ^subaction-episode <ep> -)
    (<s> ^subaction-info <info> -)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*until-clause*relation*predicate
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*1>)
    (<s> ^world <w*2>)
    (<w*2> ^objects <o*2>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type until-clause)
    (<arg> ^predicate <src-pred>)
    (<src-pred> ^type relation)
    (<src-pred> ^2 <epmem-obj2>)
    (<epmem-obj2> ^handle <obj-handle2>)
    (<src-pred> ^handle <pred>)
    (<src-pred> ^1 <epmem-obj1>)
    (<epmem-obj1> ^handle <obj-handle1>)
    (<o*2> ^object <wmem-obj2>)
    (<wmem-obj2> ^handle <obj-handle2>)
    (<o*1> ^object <wmem-obj1>)
    (<wmem-obj1> ^handle <obj-handle1>)
    -->
    (<info> ^<arg-name> <arg-copy> +)
    (<arg-copy> ^arg-type until-clause +)
    (<arg-copy> ^predicate <new-pred> +)
    (<new-pred> ^type relation +)
    (<new-pred> ^handle <pred> +)
    (<new-pred> ^1 <wmem-obj1> +)
    (<new-pred> ^2 <wmem-obj2> +)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*until-clause*state*predicate
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*1>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type until-clause)
    (<arg> ^predicate <src-pred>)
    (<src-pred> ^type state)
    (<src-pred> ^handle <pred>)
    (<src-pred> ^1 <epmem-obj>)
    (<epmem-obj> ^handle <obj-handle>)
    (<o*1> ^object <wmem-obj>)
    (<wmem-obj> ^handle <obj-handle>)
    -->
    (<info> ^<arg-name> <arg-copy> +)
    (<arg-copy> ^arg-type until-clause +)
    (<arg-copy> ^predicate <new-pred> +)
    (<new-pred> ^type state +)
    (<new-pred> ^handle <pred> +)
    (<new-pred> ^1 <wmem-obj> +)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*predicate*unknown*arg*predicates
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*2>)
    (<a*2> ^<arg-name> <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^2 <epmem-obj>)
    (<epmem-obj> ^handle <obj-handle>)
   -{ (<s> ^action-context <a*1>)
      (<a*1> ^merged <m*1>)
      (<m*1> ^<obj-handle> <o*3>)}
   -{ (<s> ^world <w*1>)
      (<w*1> ^objects <o*1>)
      (<o*1> ^object <o*2>)
      (<o*2> ^handle <obj-handle>)}
    (<epmem-obj> ^predicates <p*1>)
    (<arg> ^handle <pred-handle>)
    (<info> ^<arg-name> <a*3>)
    (<a*3> ^2 <v*1>)
    (<v*1> ^predicates <new-preds>)
    (<p*1> ^<att> <val>)
    -->
    (<new-preds> ^<att> <val> +)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*predicate*unknown*arg
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*2>)
    (<a*2> ^<arg-name> <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^2 <epmem-obj>)
    (<epmem-obj> ^handle <obj-handle>)
   -{ (<s> ^action-context <a*1>)
      (<a*1> ^merged <m*1>)
      (<m*1> ^<obj-handle> <o*3>)}
   -{ (<s> ^world <w*1>)
      (<w*1> ^objects <o*1>)
      (<o*1> ^object <o*2>)
      (<o*2> ^handle <obj-handle>)}
    (<arg> ^handle <pred-handle>)
    -->
    (<info> ^<arg-name> <arg-copy> +)
    (<arg-copy> ^arg-type predicate +)
    (<arg-copy> ^handle <pred-handle> +)
    (<arg-copy> ^2 <new-obj> +)
    (<new-obj> ^handle <obj-handle> +)
    (<new-obj> ^predicates <new-preds> +)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*predicate*merged*arg
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s> ^action-context <a*1>)
    (<a*1> ^merged <m*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*2>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<a*2> ^<arg-name> <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^2 <epmem-obj>)
    (<epmem-obj> ^handle <handle1>)
   -{ (<s> ^world <w*2>)
      (<w*2> ^objects <o*2>)
      (<o*2> ^object <o*3>)
      (<o*3> ^handle <handle1>)}
    (<arg> ^handle <pred-handle>)
    (<m*1> ^<handle1> <handle2>)
    (<o*1> ^object <wmem-obj>)
    (<wmem-obj> ^handle <handle2>)
    -->
    (<info> ^<arg-name> <arg-copy> +)
    (<arg-copy> ^arg-type predicate +)
    (<arg-copy> ^handle <pred-handle> +)
    (<arg-copy> ^2 <wmem-obj> +)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*predicate*arg
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*1>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type predicate)
    (<arg> ^2 <epmem-obj>)
    (<epmem-obj> ^handle <obj-handle>)
    (<arg> ^handle <pred-handle>)
    (<o*1> ^object <wmem-obj>)
    (<wmem-obj> ^handle <obj-handle>)
    -->
    (<info> ^<arg-name> <arg-copy> +)
    (<arg-copy> ^arg-type predicate +)
    (<arg-copy> ^handle <pred-handle> +)
    (<arg-copy> ^2 <wmem-obj> +)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*concept*arg
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type concept)
    (<arg> ^handle <concept-handle>)
    -->
    (<info> ^<arg-name> <arg-copy> +)
    (<arg-copy> ^arg-type concept +)
    (<arg-copy> ^handle <concept-handle> +)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*unknown*object*arg*predicates
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*2>)
    (<a*2> ^<arg-name> <arg>)
    (<arg> ^arg-type object)
    (<arg> ^id <epmem-obj>)
    (<epmem-obj> ^handle <obj-handle>)
   -{ (<s> ^action-context <a*1>)
      (<a*1> ^merged <m*1>)
      (<m*1> ^<obj-handle> <o*3>)}
   -{ (<s> ^world <w*1>)
      (<w*1> ^objects <o*1>)
      (<o*1> ^object <o*2>)
      (<o*2> ^handle <obj-handle>)}
    (<epmem-obj> ^predicates <p*1>)
    (<info> ^<arg-name> <a*3>)
    (<a*3> ^id <i*1>)
    (<i*1> ^predicates <new-preds>)
    (<p*1> ^<att> <val>)
    -->
    (<new-preds> ^<att> <val> +)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*unknown*object*arg
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*2>)
    (<a*2> ^<arg-name> <arg>)
    (<arg> ^arg-type object)
    (<arg> ^id <epmem-obj>)
    (<epmem-obj> ^handle <obj-handle>)
   -{ (<s> ^action-context <a*1>)
      (<a*1> ^merged <m*1>)
      (<m*1> ^<obj-handle> <o*3>)}
   -{ (<s> ^world <w*1>)
      (<w*1> ^objects <o*1>)
      (<o*1> ^object <o*2>)
      (<o*2> ^handle <obj-handle>)}
    -->
    (<info> ^<arg-name> <arg-copy> +)
    (<arg-copy> ^arg-type object +)
    (<arg-copy> ^id <new-obj> +)
    (<new-obj> ^handle <obj-handle> +)
    (<new-obj> ^predicates <new-preds> +)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*merged*object*arg
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s> ^action-context <a*1>)
    (<a*1> ^merged <m*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*2>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<a*2> ^<arg-name> <arg>)
    (<arg> ^arg-type object)
    (<arg> ^id <epmem-obj>)
    (<epmem-obj> ^handle <handle1>)
   -{ (<s> ^world <w*2>)
      (<w*2> ^objects <o*2>)
      (<o*2> ^object <o*3>)
      (<o*3> ^handle <handle1>)}
    (<m*1> ^<handle1> <handle2>)
    (<o*1> ^object <wmem-obj>)
    (<wmem-obj> ^handle <handle2>)
    -->
    (<info> ^<arg-name> <arg-copy> +)
    (<arg-copy> ^arg-type object +)
    (<arg-copy> ^id <wmem-obj> +)
}

sp {retropsective-learning*apply*copy-subaction-info*copy*object*arg
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^arguments <a*1>)
    (<s> ^world <w*1>)
    (<w*1> ^objects <o*1>)
    (<a*1> ^<arg-name> <arg>)
    (<arg> ^arg-type object)
    (<arg> ^id <epmem-obj>)
    (<epmem-obj> ^handle <obj-handle>)
    (<o*1> ^object <wmem-obj>)
    (<wmem-obj> ^handle <obj-handle>)
    -->
    (<info> ^<arg-name> <arg-copy> +)
    (<arg-copy> ^arg-type object +)
    (<arg-copy> ^id <wmem-obj> +)
}

sp {retrospective-learning*apply*copy-subaction-info*copy*name
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name copy-subaction-info)
    (<s> ^subaction-info <info>)
    (<o> ^subaction-episode <s*1>)
    (<s*1> ^current-action <c*1>)
    (<c*1> ^action-handle <action-handle>)
    -->
    (<info> ^action-handle <action-handle> +)
}

sp {retrospective-learning*apply*copy-subaction-info
    (state <s> ^name retrospective-learning)
    (<s> -^subaction-info <s*1>)
    (<s> ^operator <o*1>)
    (<o*1> ^name copy-subaction-info)
    (<s> ^subactions <subs>)
    (<subs> ^next <next>)
    -->
    (<s> ^subaction-info <info> +)
    (<info> ^action-type primitive +)
    (<info> ^next <next> +)
    (<subs> ^next <next> -)
    (<subs> ^next <info> +)
}

sp {retrospective-learning*propose*copy-subaction-info
    (state <s> ^name retrospective-learning)
    (<s> ^subaction-episode <ep>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name copy-subaction-info +)
    (<o> ^subaction-episode <ep> +)
}

sp {retrospective-learning*elaborate*problem-space*world
    (state <s> ^name retrospective-learning)
    (<s> ^initial-episode <i*1>)
    (<i*1> ^world <source>)
    (<s> ^problem-space <p*1>)
    (<p*1> ^world <world>)
    -->
    (<world> ^source <source> +)
    (<world> ^copy-type deep +)
}

sp {retrospective-learning*elaborate*problem-space
    (state <s> ^name retrospective-learning)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^name retrospective-learning +)
    (<ps> ^action <action> +)
    (<ps> ^world <world> +)
    (<ps> ^learning <learning> +)
}

sp {retrospective-learning*apply*report-failure*terminate-segment
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-failure)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^terminate-segment true +)
}

sp {retrospective-learning*propose*report-failure*no-initial-episode
    (state <s> ^initial-episode none)
    (<s> ^name retrospective-learning)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-failure +)
    (<o> ^type no-initial-episode +)
}

sp {retrospective-learning*apply*retrieve-subaction-episode*failure
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o*1>)
    (<o*1> ^name retrieve-subaction-episode)
    (<s> ^subactions <subs>)
    (<s> ^epmem <epmem>)
    (<epmem> ^result <r*1>)
    (<r*1> ^failure <f*1>)
    (<epmem> ^command <cmd>)
    (<cmd> ^query <q>)
    -->
    (<subs> ^retrieved-all true +)
    (<cmd> ^query <q> -)
}

sp {retrospective-learning*apply*retrieve-subaction-episode*success
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o*1>)
    (<o*1> ^name retrieve-subaction-episode)
    (<s> ^subactions <subs>)
    (<subs> ^max-episode-id <old-max>)
    (<s> ^epmem <epmem>)
    (<epmem> ^result <r*1>)
    (<r*1> ^retrieved <episode>)
    (<epmem> ^result <res>)
    (<res> ^retrieved <episode>)
    (<res> ^success <q>)
    (<epmem> ^command <cmd>)
    (<cmd> ^query <q>)
    (<res> ^memory-id <ep-id>)
    -->
    (<subs> ^max-episode-id <old-max> -)
    (<subs> ^max-episode-id <ep-id> +)
    (<s> ^subaction-episode <episode> +)
    (<cmd> ^query <q> -)
}

sp {retrospective-learning*apply*retrieve-subaction-episode*create*cue
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o>)
    (<o> ^name retrieve-subaction-episode)
    (<s> ^subactions <subs>)
    (<subs> ^min-episode-id <min-id>)
    (<subs> ^max-episode-id <max-id>)
    (<s> ^epmem <e*1>)
    (<e*1> ^command <cmd>)
    -->
    (<cmd> ^query <q> +)
    (<cmd> ^after <min-id> +)
    (<cmd> ^before <max-id> +)
    (<q> ^current-action <ca> +)
    (<ca> ^first-appearance true +)
    (<ca> ^learning-action true +)
}

sp {retrospective-learning*propose*retrieve-subaction-episode
    (state <s> ^name retrospective-learning)
    (<s> ^subactions <subs>)
    (<subs> -^retrieved-all true)
    (<subs> ^max-episode-id <ep-id>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name retrieve-subaction-episode +)
    (<o> ^after-episode-id <ep-id> +)
}

sp {retrospective-learning*apply*retrieve-initial-episode*failure
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o*1>)
    (<o*1> ^name retrieve-initial-episode)
    (<s> ^epmem <epmem>)
    (<epmem> ^result <r*1>)
    (<r*1> ^failure <f*1>)
    (<epmem> ^command <cmd>)
    (<cmd> ^query <q>)
    -->
    (<s> ^initial-episode none +)
    (<cmd> ^query <q> -)
}

sp {retrospective-learning*apply*retrieve-initial-episode*success
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o*1>)
    (<o*1> ^name retrieve-initial-episode)
    (<s> ^present-id <present-id>)
    (<s> ^epmem <epmem>)
    (<epmem> ^result <r*1>)
    (<r*1> ^retrieved <episode>)
    (<epmem> ^result <res>)
    (<res> ^retrieved <episode>)
    (<res> ^success <q>)
    (<epmem> ^command <cmd>)
    (<cmd> ^query <q>)
    (<res> ^memory-id <ep-id>)
    -->
    (<s> ^initial-episode <episode> +)
    (<s> ^subactions <subs> +)
    (<subs> ^max-episode-id <present-id> +)
    (<subs> ^min-episode-id <ep-id> +)
    (<subs> ^next none +)
    (<cmd> ^query <q> -)
}

sp {retrospective-learning*apply*retrieve-initial-episode
    (state <s> ^name retrospective-learning)
    (<s> ^operator <o*1>)
    (<o*1> ^name retrieve-initial-episode)
    (<s> ^epmem <e*1>)
    (<e*1> ^command <cmd>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*2>)
    (<o*2> ^action-context <a*1>)
    (<a*1> ^action-handle <action-handle>)
    -->
    (<cmd> ^query <q> +)
    (<q> ^interaction <i*1> +)
    (<i*1> ^stack <s*2> +)
    (<s*2> ^segment <s*3> +)
    (<s*3> ^purpose <p> +)
    (<p> ^type action +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^action-operator <op> +)
    (<op> ^action-handle <action-handle> +)
    (<op> ^first true +)
}

sp {retrospective-learning*propose*retrieve-initial-episode
    (state <s> ^name retrospective-learning)
    (<s> -^initial-episode <i*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name retrieve-initial-episode +)
}

sp {retrospective-learning*elaborate*present-id
    (state <s> ^name retrospective-learning)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^present-id <id>)
    -->
    (<s> ^present-id <id> +)
}

sp {learn-goal-definition*apply*create-new-goal-predicate*copy*predicate*structure
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o>)
    (<o> ^name create-new-goal-predicate)
    (<o> ^predicate-info <info>)
    (<s> ^goal-structure <goal>)
    (<o> ^structure <struct>)
    -->
    (<goal> ^predicate <struct> +)
    (<info> ^added true +)
}

sp {learn-goal-definition*propose*create-new-goal-predicate
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <info>)
    (<info> -^added <a*1>)
    (<info> ^generalized-structure <gen>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name create-new-goal-predicate +)
    (<o> ^predicate-info <info> +)
    (<o> ^structure <gen> +)
}

sp {learn-goal-definition*elaborate*predicate-id*smem-query-cue*retrieved
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <g*1>)
    (<g*1> ^predicate <pred>)
    (<s> ^smem-query <query>)
    (<pred> ^handle <pred-handle>)
    (<query> ^cue <c*1>)
    (<c*1> ^handle <pred-handle>)
    (<query> ^result <id>)
    -->
    (<pred> ^predicate-id <id> +)
}

sp {learn-goal-definition*elaborate*smem-query-cue*predicate
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <g*1>)
    (<g*1> ^predicate <p*1>)
    (<p*1> ^handle <pred-handle>)
    -->
    (<s> ^smem-query <query> +)
    (<query> ^cue <cue> +)
    (<query> ^depth 2 +)
    (<cue> ^handle <pred-handle> +)
}

sp {learn-goal-definition*elaborate*action-id*smem-query-cue
    (state <s> ^name learn-goal-definition)
    (<s> ^action-context <a*1>)
    (<a*1> ^action-handle <action-handle>)
    (<s> ^smem-query <query>)
    (<query> ^cue <c*1>)
    (<c*1> ^handle <action-handle>)
    (<query> ^result <lti>)
    -->
    (<s> ^action-id <lti> +)
}

sp {learn-goal-definition*elaborate*smem-query*action
    (state <s> ^name learn-goal-definition)
    (<s> ^action-context <a*1>)
    (<a*1> ^action-handle <action-handle>)
    -->
    (<s> ^smem-query <query> +)
    (<query> ^cue <cue> +)
    (<query> ^depth 8 +)
    (<cue> ^handle <action-handle> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*generalized-structure*copy*arg*imagined
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <info>)
    (<info> ^arg <arg>)
    (<arg> -^matches <match>)
    (<arg> ^imagined true)
    (<info> ^generalized-structure <gen>)
    (<arg> ^number <arg-num>)
    (<arg> ^default <def>)
    -->
    (<gen> ^<arg-num> <new-arg> +)
    (<new-arg> ^imagined <def> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*generalized-structure*copy*arg*default
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <info>)
    (<info> ^arg <arg>)
    (<arg> -^matches <match>)
    (<arg> -^imagined <i*1>)
    (<info> ^generalized-structure <gen>)
    (<arg> ^number <arg-num>)
    (<arg> ^default <def>)
    -->
    (<gen> ^<arg-num> <new-arg> +)
    (<new-arg> ^default <def> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*generalized-structure*copy*arg*matches
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <info>)
    (<info> ^generalized-structure <gen>)
    (<info> ^arg <arg>)
    (<arg> ^matches <match>)
    (<arg> ^number <arg-num>)
    -->
    (<gen> ^<arg-num> <match> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*generalized-structure*copy*id*default
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <info>)
    (<info> ^id <id>)
    (<id> -^matches <match>)
    (<info> ^generalized-structure <gen>)
    (<id> ^default <def>)
    -->
    (<gen> ^id <new-id> +)
    (<new-id> ^default <def> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*generalized-structure*copy*id*matches
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <info>)
    (<info> ^generalized-structure <gen>)
    (<info> ^id <i*1>)
    (<i*1> ^matches <match>)
    -->
    (<gen> ^id <match> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*generalized-structure
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <info>)
    (<info> ^instance <i*1>)
    (<i*1> ^type <type>)
    -->
    (<info> ^generalized-structure <gen> +)
    (<gen> ^type <type> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*arg*default*predicates
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <g*1>)
    (<g*1> ^arg <arg>)
    (<arg> ^instance <i*1>)
    (<arg> ^default <def>)
    (<i*1> ^predicates <preds>)
    (<preds>
          ^{ << color shape size category property >> <prop-handle> } <pred-handle>)
    -->
    (<def> ^<prop-handle> <pred-handle> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*arg*default
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <g*1>)
    (<g*1> ^arg <arg>)
    -->
    (<arg> ^default <def> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*id*default
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <g*1>)
    (<g*1> ^id <id>)
    (<id> ^predicate-handle <pred-handle>)
    -->
    (<id> ^default <def> +)
    (<def> ^predicate-handle <pred-handle> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*arg*matches*procedural-arg*predicate
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <g*1>)
    (<g*1> ^arg <arg-info>)
    (<arg-info> ^instance <arg>)
    (<s> ^action-id <a*3>)
    (<a*3> ^procedural <proc>)
    (<s> ^action-context <a*1>)
    (<proc> ^<arg-name> <parg>)
    (<parg> ^arg-type predicate)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^2 <arg>)
    (<parg> ^2 <obj-slot>)
    -->
    (<arg-info> ^matches <obj-slot> +)
}

sp {learn-goal-defintion*elaborate*goal-predicate-info*arg*matches*simple
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <g*1>)
    (<g*1> ^arg <arg-info>)
    (<arg-info> ^instance <arg>)
    (<s> ^action-id <a*3>)
    (<a*3> ^procedural <proc>)
    (<s> ^action-context <a*1>)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^id <arg>)
    (<proc> ^<arg-name> <parg>)
    (<parg> ^arg-type { << object concept >> <arg-type> })
    (<parg> ^id <item-slot>)
    -->
    (<arg-info> ^matches <item-slot> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*id*matches
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <g*1>)
    (<s> ^action-id <a*3>)
    (<a*3> ^procedural <p*1>)
    (<s> ^action-context <a*1>)
    (<g*1> ^id <pred-id>)
    (<pred-id> ^predicate-handle <pred-handle>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-type predicate)
    (<a*1> ^<arg-name> <a*2>)
    (<a*2> ^handle <pred-handle>)
    (<parg> ^id <pred-slot>)
    -->
    (<pred-id> ^matches <pred-slot> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*arg*imagined*true
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <g*1>)
    (<g*1> ^arg <arg>)
    (<arg> ^instance <obj>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^world <w*1>)
      (<w*1> ^objects <o*1>)
      (<o*1> ^object <obj>)}
    (<obj> ^item-type object)
    -->
    (<arg> ^imagined true +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*arg
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <info>)
    (<info> ^instance <i*1>)
    (<i*1> ^{ << 1 2 3 4 5 >> <arg-num> } <arg>)
    -->
    (<info> ^arg <new-arg> +)
    (<new-arg> ^number <arg-num> +)
    (<new-arg> ^instance <arg> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info*id
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate-info <info>)
    (<info> ^instance <i*1>)
    (<i*1> ^handle <pred-handle>)
    -->
    (<info> ^id <i*2> +)
    (<i*2> ^predicate-handle <pred-handle> +)
}

sp {learn-goal-definition*elaborate*goal-predicate-info
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-predicate <pred>)
    -->
    (<s> ^goal-predicate-info <info> +)
    (<info> ^instance <pred> +)
}

sp {learn-goal-definition*prefer*smem*operators
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o2> +)
    (<o2>
          ^name { << create-goal-structure create-new-goal-predicate update-goal-predicate store-goal >> <n*2> })
    (<s> ^operator <o1> +)
    (<o1> ^name { << smem-query >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-goal-definition*update-goal-predicate*prefer*better*matches
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o2> +)
    (<o2> ^name update-goal-predicate)
    (<s> ^operator <o1> +)
    (<o1> ^name update-goal-predicate)
    (<o2> ^match <m*1>)
    (<o1> ^match { > <m*1> <m1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-goal-definition*prefer*update*over*create*goal-predicate
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o2> +)
    (<o2> ^name create-new-goal-predicate)
    (<s> ^operator <o1> +)
    (<o1> ^name update-goal-predicate)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-goal-definition*prefer*add-goal-predicate*over*store
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o2> +)
    (<o2> ^name store-goal)
    (<s> ^operator <o1> +)
    (<o1>
          ^name { << create-new-goal-predicate update-goal-predicate >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-goal-definition*prefer*create-goal-structure*over*create*predicates
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o1> +)
    (<o1> ^name create-goal-structure)
    (<s> ^operator <o2> +)
    (<o2>
          ^name { << create-new-goal-predicate update-goal-predicate >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {learn-goal-definition*apply*report-success
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-success)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <l*1> +)
    (<l*1> ^type goal +)
}

sp {learn-goal-definition*propose*report-success
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-structure <goal>)
    (<s> ^stored <goal>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name report-success +)
}

sp {learn-goal-definition*apply*store-goal*predicate*arg*imagined
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o>)
    (<o> ^name store-goal)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<o> ^goal <g*1>)
    (<g*1> ^predicate <p*1>)
    (<p*1> ^{ << id 1 2 3 4 5 >> <a*1> } <v*1>)
    (<v*1> ^imagined <img>)
    -->
    (<cmd> ^store <img> +)
}

sp {learn-goal-definition*apply*store-goal*predicate*arg*default
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o>)
    (<o> ^name store-goal)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<o> ^goal <g*1>)
    (<g*1> ^predicate <p*1>)
    (<p*1> ^{ << id 1 2 3 4 5 >> <a*1> } <v*1>)
    (<v*1> ^default <def>)
    -->
    (<cmd> ^store <def> +)
}

sp {learn-goal-definition*apply*store-goal*predicate*arg
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o>)
    (<o> ^name store-goal)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<o> ^goal <g*1>)
    (<g*1> ^predicate <p*1>)
    (<p*1> ^{ << id 1 2 3 4 5 >> <a*1> } <arg>)
    -->
    (<cmd> ^store <arg> +)
}

sp {learn-goal-definition*apply*store-goal*predicate
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o>)
    (<o> ^name store-goal)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<o> ^goal <g*1>)
    (<g*1> ^predicate <pred>)
    -->
    (<cmd> ^store <pred> +)
}

sp {learn-goal-definition*apply*store-goal
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o>)
    (<o> ^name store-goal)
    (<s> ^action-id <action>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<o> ^goal <goal>)
    -->
    (<cmd> ^store <goal> +)
    (<cmd> ^store <action> +)
    (<s> ^stored <goal> +)
}

sp {learn-goal-definition*propose*store-goal
    (state <s> ^name learn-goal-definition)
    (<s> ^goal-structure <goal>)
    (<s> -^stored <goal>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name store-goal +)
    (<o> ^goal <goal> +)
}

sp {learn-goal-definition*apply*report-failure
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o>)
    (<o> ^name report-failure)
    (<o> ^failure-type <type>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^failure <f*1> +)
    (<f*1> ^type <type> +)
}

sp {learn-goal-definition*propose*report-failure*no*action
    (state <s> ^name learn-goal-definition)
    (<s> -^action-id <a*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name report-failure +)
    (<o> ^failure-type no-action-context-for-goal +)
}

sp {learn-goal-definition*elaborate*action*from*previous*segment*2
    (state <s> ^name learn-goal-definition)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^next <n*1>)
    (<n*1> ^context <c*1>)
    (<c*1> ^parameters <p*1>)
    (<p*1> ^action-operator <action>)
    -->
    (<s> ^action-context <action> +)
}

sp {learn-goal-definition*elaborate*action*from*previous*segment
    (state <s> ^name learn-goal-definition)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^context <c*1>)
    (<c*1> ^parameters <p*1>)
    (<p*1> ^action-operator <action>)
    -->
    (<s> ^action-context <action> +)
}

sp {learn-goal-definition*elaborate*action*from*purpose
    (state <s> ^name learn-goal-definition)
    (<s> ^superstate <s*1>)
    (<s*1> ^purpose <p*1>)
    (<p*1> ^parameters <p*2>)
    (<p*2> ^action <action>)
    -->
    (<s> ^action-context <action> +)
}

sp {learn-goal-definition*elaborate*goal-structure*from*action-id
    (state <s> ^name learn-goal-definition)
    (<s> ^action-id <a*1>)
    (<a*1> ^goal <goal>)
    -->
    (<s> ^goal-structure <goal> +)
}

sp {learn-goal-definition*elaborate*goal-predicate*superoperator
    (state <s> ^name learn-goal-definition)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^goal-predicate <pred>)
    -->
    (<s> ^goal-predicate <pred> +)
}

sp {learn-goal-definition*apply*create-goal-structure
    (state <s> ^name learn-goal-definition)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-goal-structure)
    (<s> ^action-id <id>)
    -->
    (<id> ^goal <goal> +)
}

sp {learn-goal-definition*propose*create-goal-structure
    (state <s> ^name learn-goal-definition)
    (<s> ^action-id <id>)
    (<id> -^goal <g*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-goal-structure +)
}

sp {learn-location*apply*report-failure
    (state <s> ^name learn-location)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-failure)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^failure <f*1> +)
    (<f*1> ^type learn-location-failure +)
}

sp {learn-location*propose*report-failure
    (state <s> ^name learn-location)
    (<s> -^current-waypoint <c*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name report-failure +)
}

sp {learn-location*apply*learn-location-waypoint*report*success
    (state <s> ^name learn-location)
    (<s> ^operator <o>)
    (<o> ^name learn-location-waypoint)
    (<o> ^location-id <loc>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^success <loc>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <l*1> +)
    (<l*1> ^type location +)
}

sp {learn-location*apply*learn-location-waypoint*add*current-location*world
    (state <s> ^name learn-location)
    (<s> ^operator <o>)
    (<o> ^name learn-location-waypoint)
    (<o> ^location-id <loc>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <robot>)
    -->
    (<robot> ^current-location <loc> +)
}

sp {learn-location*apply*learn-location-waypoint*say*ok
    (state <s> ^name learn-location)
    (<s> ^operator <o>)
    (<o> ^name learn-location-waypoint)
    (<o> ^location-id <loc>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <changes>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^success <loc>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type ok +)
}

sp {learn-location*apply*learn-location-waypoint*store
    (state <s> ^name learn-location)
    (<s> ^operator <o>)
    (<o> ^name learn-location-waypoint)
    (<o> ^location-id <loc>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <loc> +)
}

sp {learn-location*apply*learn-location-waypoint*add
    (state <s> ^name learn-location)
    (<s> ^operator <o>)
    (<o> ^name learn-location-waypoint)
    (<o> ^location-id <loc>)
    (<o> ^waypoint <w*1>)
    (<w*1> ^handle <wp-handle>)
    -->
    (<loc> ^waypoint <wp-handle> +)
}

sp {learn-location*propose*learn-location-waypoint
    (state <s> ^name learn-location)
    (<s> ^current-waypoint <wp>)
    (<s> ^location-id <loc>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-location-waypoint +)
    (<o> ^location-id <loc> +)
    (<o> ^waypoint <wp> +)
}

sp {learn-location*elaborate*current-waypoint*from*top-state
    (state <s> ^name learn-location)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^current-waypoint <wp>)
    -->
    (<s> ^current-waypoint <wp> +)
}

sp {learn-location*elaborate*location-id*from*superoperator
    (state <s> ^name learn-location)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^location-id <id>)
    -->
    (<s> ^location-id <id> +)
}

sp {learn-predicate-info*apply*update-smem*stored*mark*performed
    (state <s> ^name learn-predicate-info)
    (<s> ^operator <o*1>)
    (<o*1> ^name update-smem)
    (<s> ^predicate-id <pred>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^success <pred>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <l*1> +)
    (<l*1> ^type predicate +)
}

sp {learn-predicate-info*apply*update-smem*store
    (state <s> ^name learn-predicate-info)
    (<s> ^operator <o*1>)
    (<o*1> ^name update-smem)
    (<s> ^predicate-id <pred>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <pred> +)
}

sp {learn-predicate-info*apply*update-smem*create*property*link
    (state <s> ^name learn-predicate-info)
    (<s> ^operator <o*1>)
    (<o*1> ^name update-smem)
    (<s> ^property-id <prop>)
    (<s> ^predicate-id <pred>)
    -->
    (<pred> ^property <prop> +)
}

sp {learn-predicate-info*propose*update-smem
    (state <s> ^name learn-predicate-info)
    (<s> ^property-id <prop>)
    (<s> ^predicate-id <pred>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name update-smem +)
}

sp {learn-predicate-info*elaborate*property-id
    (state <s> ^name learn-predicate-info)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^property-id <prop>)
    -->
    (<s> ^property-id <prop> +)
}

sp {learn-predicate-info*elaborate*predicate-id
    (state <s> ^name learn-predicate-info)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^predicate-id <pred>)
    -->
    (<s> ^predicate-id <pred> +)
}

sp {learning-event*elaborate*purpose
    (state <s> ^name learning-event)
    (<s> ^superstate <s*1>)
    (<s*1> ^purpose <purp>)
    -->
    (<s> ^purpose <purp> +)
}

sp {learning-event*elaborate*retrospective-learning*present-id
    (state <s> ^name learning-event)
    (<s> ^operator <o> +)
    (<o> ^name retrospective-learning)
    (<s> ^purpose <p*1>)
    (<p*1> ^parameters <p*2>)
    (<p*2> ^present-id <id>)
    -->
    (<o> ^present-id <id> +)
}

sp {learning-event*apply*retrospective-learning*copy*present-id
    (state <s> ^name learning-event)
    (<s> ^operator <o*1>)
    (<o*1> ^name retrospective-learning)
    (<s> ^purpose <p*1>)
    (<p*1> ^parameters <params>)
    (<params> -^present-id <p*2>)
    (<s> ^epmem <e*1>)
    (<e*1> ^present-id <present-id>)
    -->
    (<params> ^present-id <present-id> +)
}

sp {learning-event*propose*retrospective-learning
    (state <s> ^name learning-event)
    (<s> ^purpose <p*1>)
    (<p*1> ^type retrospective-learning)
    (<s> ^purpose <p*2>)
    (<p*2> ^parameters <p*3>)
    (<p*3> ^action-context <context>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name retrospective-learning +)
    (<o> ^action-context <context> +)
}

sp {learning-event*elaborate*learn-goal-definition*goal-predicate
    (state <s> ^name learning-event)
    (<s> ^operator <o> +)
    (<o> ^name learn-goal-definition)
    (<s> ^purpose <p>)
    (<p> ^parameters <p*1>)
    (<p*1> ^goal-predicate <pred>)
    -->
    (<o> ^goal-predicate <pred> +)
}

sp {learning-event*propose*learn-predicate*property
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-property-predicate)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-predicate +)
    (<o> ^message <msg> +)
    (<o> ^type predicate +)
}

sp {learning-event*propose*learn-predicate*heuristic
    (state <s> ^name learning-event)
    (<s> -^finished-learning heuristic)
    (<s> ^purpose <p>)
    (<p> ^type learn-heuristic-predicate)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-predicate +)
    (<o> ^message <msg> +)
    (<o> ^type heuristic +)
}

sp {learning-event*apply*chunk-predicate-structure*finished*failure
    :o-support
    (state <s> ^finished-learning failure)
    (<s> ^name learning-event)
    (<s> ^finished-learning <type>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^finalize-chunk <name>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<s> ^<type> <t*1>)
    (<t*1> ^handle <h>)
    -->
    (<dc> ^finalize-chunk <name> -)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type learned-failure +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {learning-event*apply*chunk-predicate-structure*finished*goal
    :o-support
    (state <s> ^finished-learning goal)
    (<s> ^name learning-event)
    (<s> ^finished-learning <type>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^finalize-chunk <name>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<s> ^<type> <t*1>)
    (<t*1> ^handle <h>)
    -->
    (<dc> ^finalize-chunk <name> -)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type learned-goal +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {learning-event*apply*chunk-predicate-structure*finished*action
    :o-support
    (state <s> ^finished-learning action)
    (<s> ^name learning-event)
    (<s> ^finished-learning <type>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^finalize-chunk <name>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<s> ^<type> <t*1>)
    (<t*1> ^handle <h>)
    -->
    (<dc> ^finalize-chunk <name> -)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type learned-action +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {learning-event*apply*chunk-predicate-structure*finished*heuristic
    :o-support
    (state <s> ^finished-learning heuristic)
    (<s> ^name learning-event)
    (<s> ^finished-learning <type>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^finalize-chunk <name>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<s> ^<type> <t*1>)
    (<t*1> ^handle <h>)
    -->
    (<dc> ^finalize-chunk <name> -)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type learned-heuristic +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {learning-event*propose*chunk-predicate-structure
    (state <s> ^name learning-event)
    (<s> ^finished-learning <type>)
    (<s> ^purpose <p>)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*1>)
    (<d*1> ^finalize-chunk <h>)
   -{ (<s> ^<type> <t*1>)
      (<t*1> ^handle <h>)}
    (<p>
          ^type { << learn-action-predicate learn-heuristic-predicate learn-goal-predicate learn-failure-predicate >> <t*3> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name chunk-predicate-structure +)
    (<o> ^gtype <type> +)
    (<o> ^predicate-handle <h> +)
}

sp {learning-event*apply*chunk-predicate-structure
    (state <s> ^name learning-event)
    (<s> ^operator <o*1>)
    (<o*1> ^name chunk-predicate-structure)
    (<s> ^store-link <dd>)
    -->
    (<s> ^store-link <dd> -)
}

sp {learning-event*propose*learn-predicate*action
    (state <s> ^name learning-event)
    (<s> -^finished-learning action)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^finalize-chunk <f*1>)}
    (<s> ^purpose <p>)
    (<p> ^type learn-action-predicate)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-predicate +)
    (<o> ^message <msg> +)
    (<o> ^type action +)
}

sp {learning-event*apply*learn-search-depth
    :o-support
    (state <s> ^name learning-event)
    (<s> ^operator <o>)
    (<o> ^name learn-search-depth)
    (<o> ^message <msg>)
    (<msg> ^agent <a*2>)
    (<a*2> ^handle solution1)
    (<msg> ^action <a*1>)
    (<a*1> ^handle has)
    (<msg> ^arg1 <a*3>)
    (<a*3> ^predicates <p>)
    (<p> ^shape steps1)
    (<p> ^number <n2>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^structure <st>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<st> ^start-search-depth <n2> +)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type ok +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
}

sp {learning-event*propose*learn-search-depth
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-start-depth)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-search-depth +)
    (<o> ^message <msg> +)
}

sp {learning-event*apply*learn-predicate*failure*clean-setup
    (state <s> ^name learning-event)
    (<s> ^operator <o*1>)
    (<o*1> ^name learn-predicate)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^parsed-failure <m>)
    (<dc> ^needs-failure-setup <t>)
    -->
    (<dc> ^needs-failure-setup <t> -)
    (<dc> ^parsed-failure <m> -)
}

sp {learning-event*apply*learn-predicate*goal*clean-setup
    (state <s> ^name learning-event)
    (<s> ^operator <o*1>)
    (<o*1> ^name learn-predicate)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^parsed-goal <m>)
    (<dc> ^needs-goal-setup <t>)
    -->
    (<dc> ^needs-goal-setup <t> -)
    (<dc> ^parsed-goal <m> -)
}

sp {learning-event*propose*learn-predicate*failure
    (state <s> ^name learning-event)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^finalize-chunk <f*1>)}
    (<s> -^finished-learning failure)
    (<s> ^purpose <p>)
    (<p> ^type learn-failure-predicate)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-predicate +)
    (<o> ^message <msg> +)
    (<o> ^type failure +)
}

sp {learning-event*propose*learn-predicate*goal
    (state <s> ^name learning-event)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^finalize-chunk <f*1>)}
    (<s> -^finished-learning goal)
    (<s> ^purpose <p>)
    (<p> ^type learn-goal-predicate)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-predicate +)
    (<o> ^message <msg> +)
    (<o> ^type goal +)
}

sp {learning-event*propose*finished-learning
    (state <s> ^name learning-event)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^finalize-chunk <f*1>)}
    (<s> ^finished-learning <type>)
    -->
    (<s> ^operator <o1> +)
    (<s> ^operator <o1> >)
    (<o1> ^name finished-learning +)
    (<o1> ^type <type> +)
}

sp {learning-event*propose*learn-failure-name
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-failure-name)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    (<msg> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name store-predicate-structure +)
    (<o> ^type failure +)
    (<o> ^storing name +)
    (<o> ^handle <name> +)
    (<o> ^message <msg> +)
}

sp {learning-event*propose*learn-goal-name
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-goal-name)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    (<msg> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name store-predicate-structure +)
    (<o> ^type goal +)
    (<o> ^storing name +)
    (<o> ^handle <name> +)
    (<o> ^message <msg> +)
}

sp {learning-event*propose*learn-action-name
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-action-name)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    (<msg> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name store-predicate-structure +)
    (<o> ^type action +)
    (<o> ^storing name +)
    (<o> ^handle <name> +)
    (<o> ^message <msg> +)
}

sp {learning-event*propose*learn-puzzle-name
    (state <s> ^name learning-event)
    (<s> -^retrieve-handle <r*1>)
    (<s> ^purpose <p>)
    (<p> ^type learn-puzzle-name)
    (<s> ^retrieve-game <name>)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    (<msg> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name store-predicate-structure +)
    (<o> ^type puzzle +)
    (<o> ^storing name +)
    (<o> ^handle <name> +)
    (<o> ^message <msg> +)
}

sp {learning-event*elaborate*puzzle-retrieval
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-puzzle-name)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    (<msg> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<s> ^retrieve-game <name> +)
    (<s> ^multiplayer false +)
}

sp {learning-event*elaborate*game-retrieval
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-game-name)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    (<msg> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<s> ^retrieve-game <name> +)
    (<s> ^opponent false +)
    (<s> ^multiplayer true +)
}

sp {learning-event*propose*learn-game-name
    (state <s> ^name learning-event)
    (<s> -^retrieve-handle <r*1>)
    (<s> ^purpose <p>)
    (<p> ^type learn-game-name)
    (<s> ^retrieve-game <name>)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    (<msg> ^predicate <p*2>)
    (<p*2> ^handle <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name store-predicate-structure +)
    (<o> ^type game +)
    (<o> ^storing name +)
    (<o> ^handle <name> +)
    (<o> ^message <msg> +)
}

sp {learning-event*propose*finished-game-teaching*learned
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type finished-game-learning)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <yesno>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name finished-game-teaching +)
    (<o> ^response <yesno> +)
}

sp {learning-event*propose*finished-game-teaching
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type finished-game-teaching)
    -->
    (<s> ^operator <o> +)
    (<o> ^name finished-game-teaching +)
    (<o> ^type game +)
}

sp {learning-event*propose*finished-game-teaching*retrieval
    (state <s> ^name learning-event)
    (<s> ^retrieve-handle <r*1>)
    (<s> ^retrieve-game <name>)
    (<s> ^multiplayer <mult>)
    (<s> ^purpose <p>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name finished-game-teaching +)
    (<o> ^multiplayer <mult> +)
    (<o> ^game-name <name> +)
    (<o> ^type replay-game +)
}

sp {learning-event*propose*learn-goal-demonstration*final
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-goal-final-state)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-goal-demonstration +)
    (<o> ^type final +)
}

sp {learning-event*propose*learn-goal-demonstration*initial
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-goal-initial-state)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-goal-demonstration +)
    (<o> ^type initial +)
}

sp {learning-event*apply*learn-teacher-name*send-message
    (state <s> ^name learning-event)
    (<s> ^operator <o>)
    (<o> ^name learn-teacher-name)
    (<o> ^predicate <p>)
    (<p> ^word-structure <w*1>)
    (<w*1> ^spelling <word>)
    (<s> ^top-state <ts>)
    (<ts> ^interaction <i>)
    (<i> ^changes <changes>)
    (<i> ^status <status>)
    -->
    (<ts> ^teacher-name <word> +)
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type learned-teacher-name +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^word <word> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {learning-event*propose*learn-teacher-name
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-teacher-name)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    (<msg> ^predicate <p>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-teacher-name +)
    (<o> ^predicate <p> +)
}

sp {learning-event*apply*modify-attend-ignore-list*send-message
    (state <s> ^name learning-event)
    (<s> ^operator <o*1>)
    (<o*1> ^name modify-attend-ignore-list)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type ok +)
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <de> +)
    (<de> ^type game +)
    (<de> ^originator agent +)
}

sp {learning-event*apply*modify-attend-ignore-list*object*direct
    (state <s> ^name learning-event)
    (<s> ^operator <o>)
    (<o> ^name modify-attend-ignore-list)
    (<o> ^message <msg>)
    (<msg> ^arg1 <obj>)
    (<obj> ^item-type { << object block location >> <i*1> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<o> ^type <type>)
    (<d*1> ^<type> <at>)
    -->
    (<at> ^object <obj> +)
}

sp {learning-event*apply*modify-attend-ignore-list*object
    (state <s> ^name learning-event)
    (<s> ^operator <o>)
    (<o> ^name modify-attend-ignore-list)
    (<o> ^message <msg>)
    (<msg> ^arg1 <a*1>)
    (<a*1> ^2 <obj>)
    (<obj> ^item-type { << object block location >> <i*1> })
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<o> ^type <type>)
    (<d*1> ^<type> <at>)
    -->
    (<at> ^object <obj> +)
}

sp {learning-event*apply*modify-attend-ignore-list*relation
    (state <s> ^name learning-event)
    (<s> ^operator <o>)
    (<o> ^name modify-attend-ignore-list)
    (<o> ^message <msg>)
    (<msg> ^arg1 <arg1>)
    (<arg1> ^handle relation)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<o> ^type <type>)
    (<d*1> ^<type> <at>)
    (<arg1> ^relation <r>)
    (<r> ^handle named)
    (<r> ^2 <name>)
    -->
    (<at> ^relation <name> +)
}

sp {learning-event*apply*modify-attend-ignore-list*modified-true
    (state <s> ^name learning-event)
    (<s> ^operator <o>)
    (<o> ^name modify-attend-ignore-list)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    -->
    (<dc> ^modified true +)
}

sp {learning-event*propose*modify-attend-ignore-list*ignore
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type modify-ignore-list)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name modify-attend-ignore-list +)
    (<o> ^type ignore +)
    (<o> ^message <msg> +)
}

sp {learning-event*propose*modify-attend-ignore-list*attend
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type modify-attend-list)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <msg>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name modify-attend-ignore-list +)
    (<o> ^type attend +)
    (<o> ^message <msg> +)
}

sp {learning-event*propose*learn-goal-definition
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-goal-definition)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-goal-definition +)
}

sp {learning-event*propose*learn-predicate-info
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type learn-predicate-info)
    (<p> ^parameters <params>)
    (<params> ^property-id <prop>)
    (<params> ^predicate-id <pred>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name learn-predicate-info +)
    (<o> ^predicate-id <pred> +)
    (<o> ^property-id <prop> +)
}

sp {learning-event*propose*learn-preposition
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type teach-relation)
    (<p> ^parameters <params>)
    (<params> ^relation <rel>)
    (<rel> ^arg2 <obj2>)
    (<rel> ^id <lti-rel>)
    (<params> ^object <obj>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name learn-preposition +)
    (<o> ^relation-lti <lti-rel> +)
    (<o> ^arg1 <obj> +)
    (<o> ^arg2 <obj2> +)
}

sp {learning-event*propose*learn-location
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type teach-location)
    (<p> ^parameters <p*1>)
    (<p*1> ^location-id <loc>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-location +)
    (<o> ^location-id <loc> +)
}

sp {learning-event*elaborate*train-on-object*predicate
    (state <s> ^name learning-event)
    (<s> ^operator <o> +)
    (<o> ^name train-on-object)
    (<s> ^purpose <p*1>)
    (<p*1> ^parameters <p*2>)
    (<p*2> ^predicate <pred>)
    -->
    (<o> ^predicate <pred> +)
}

sp {learning-event*propose*train-on-object
    (state <s> ^name learning-event)
    (<s> ^purpose <p>)
    (<p> ^type train-on-object)
    (<p> ^parameters <p*1>)
    (<p*1> ^object <obj>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name train-on-object +)
    (<o> ^object <obj> +)
}

sp {train-on-object*apply*complete-train-on-object*store
    (state <s> ^name train-on-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-train-on-object)
    (<s> ^example-object <e*1>)
    (<e*1> ^smem-rep <obj>)
    (<s> ^top-state <t*1>)
    (<t*1> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <obj> +)
}

sp {train-on-object*apply*complete-train-on-object*mark*performed
    (state <s> ^name train-on-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-train-on-object)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^learning-event <l*1> +)
    (<l*1> ^type object +)
}

sp {train-on-object*propose*complete-train-on-object
    (state <s> ^name train-on-object)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-train-on-object +)
}

sp {train-predicate-apply*report-unknown-predicate
    (state <s> ^name train-predicate)
    (<s> ^operator <o>)
    (<o> ^name report-unknown-predicate)
    (<o> ^predicate <pred>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^failure <f> +)
    (<f> ^type unknown-predicate +)
    (<f> ^predicate <pred> +)
}

sp {train-predicate*propose*report-unknown-predicate
    (state <s> ^name train-predicate)
    (<s> ^predicate <pred>)
    (<pred> -^property <p*1>)
    (<pred> ^handle <pred-handle>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-unknown-predicate +)
    (<o> ^predicate <pred> +)
}

sp {train-predicate*elaborate*retrieve*predicate
    (state <s> ^name train-predicate)
    (<s> ^predicate <pred>)
    -->
    (<s> ^smem-retrieve <ret> +)
    (<ret> ^identifier <pred> +)
    (<ret> ^depth 2 +)
}

sp {train-predicate*apply*complete-train-predicate
    (state <s> ^name train-predicate)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-train-predicate)
    (<s> ^predicate <pred>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^trained <pred> +)
}

sp {train-predicate*propose*complete-train-predicate
    (state <s> ^name train-predicate)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-train-predicate +)
}

sp {train-predicate*apply*send-training-example*send*example
    (state <s> ^name train-predicate)
    (<s> ^operator <o*1>)
    (<o*1> ^name send-training-example)
    (<s> ^example-object <e*1>)
    (<s> ^predicate <pred>)
    (<pred> ^handle <pred-handle>)
    (<e*1> ^handle <obj-handle>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <ol>)
    (<pred> ^property <prop>)
    (<prop> ^type visual)
    (<prop> ^handle <prop-handle>)
    -->
    (<ol> ^send-training-label <stl> +)
    (<stl> ^object-handle <obj-handle> +)
    (<stl> ^label <pred-handle> +)
    (<stl> ^property-handle <prop-handle> +)
}

sp {train-predicate*apply*send-training-example*mark*trained
    (state <s> ^name train-predicate)
    (<s> ^operator <o*1>)
    (<o*1> ^name send-training-example)
    -->
    (<s> ^trained true +)
}

sp {train-predicate*propose*send-training-example
    (state <s> ^name train-predicate)
    (<s> -^trained <t*1>)
    (<s> ^example-object <obj>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name send-training-example +)
}

sp {train-predicate*prefer*measure-object*over*send-training-example
    (state <s> ^name train-predicate)
    (<s> ^operator <o2> +)
    (<o2> ^name send-training-example)
    (<s> ^operator <o1> +)
    (<o1> ^name measure-object)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {train-predicate*elaborate*predicate
    (state <s> ^name train-predicate)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^predicate <pred>)
    -->
    (<s> ^predicate <pred> +)
}

sp {train-predicate*elaborate*object
    (state <s> ^name train-predicate)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^example-object <obj>)
    -->
    (<s> ^example-object <obj> +)
}

sp {train-on-object*propose*train-predicate
    (state <s> ^name train-on-object)
    (<s> ^predicate <pred>)
    (<s> -^trained <pred>)
    (<s> ^example-object <obj>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name train-predicate +)
    (<o> ^example-object <obj> +)
    (<o> ^predicate <pred> +)
}

sp {train-on-object*copy*object
    (state <s> ^name train-on-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object <obj>)
    -->
    (<s> ^example-object <obj> +)
}

sp {train-on-object*elaborate*predicate
    (state <s> ^name train-on-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^predicate <pred>)
    -->
    (<s> ^predicate <pred> +)
}

sp {dialog-event*apply*failed-parse
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name failed-parse)
    (<s> ^top-state <ts>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^status <status>)
    (<ts> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type parse-failure-response +)
    (<msg> ^fields <f> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type parse-failure-response +)
    (<de> ^originator agent +)
}

sp {dialog-event*propose*failed-parse
    (state <s> ^name dialog-event)
    (<s> ^purpose <p*1>)
    (<p*1> ^type failed-parse)
    -->
    (<s> ^operator <o> +)
    (<o> ^name failed-parse +)
}

sp {answer-property-question*apply*complete-answer-property-question*store
    (state <s> ^name answer-property-question)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-answer-property-question)
    (<s> ^this-object <t*2>)
    (<t*2> ^smem-rep <obj>)
    (<s> ^top-state <t*1>)
    (<t*1> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <obj> +)
}

sp {answer-property-question*apply*complete-answer-property-question*mark*performed
    (state <s> ^name answer-property-question)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-answer-property-question)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type single-word-response +)
    (<de> ^originator agent +)
}

sp {answer-property-question*apply*complete-answer-property-question*send-message
    (state <s> ^name answer-property-question)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-answer-property-question)
    (<s> ^answer <word>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type single-word-response +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^word <word> +)
}

sp {answer-property-question*propose*complete-answer-property-question
    (state <s> ^name answer-property-question)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-answer-property-question +)
}

sp {answer-property-question*elaborate*answer*dontknow
    (state <s> ^name answer-property-question)
    (<s> -^answer { <> dontknow <a*1> })
    -->
    (<s> ^answer dontknow +)
}

sp {answer-property-question*elaborate*answer*existing
    (state <s> ^name answer-property-question)
    (<s> ^this-object <t*1>)
    (<t*1> ^property <prop>)
    (<prop> ^word <word>)
    (<prop> ^name <prop-name>)
    (<s> ^property <p*1>)
    (<p*1> ^name <prop-name>)
    -->
    (<s> ^answer <word> +)
}

sp {answer-property-question*elaborate*answer*retrieval
    (state <s> ^name answer-property-question)
    (<s> ^sense <s*1>)
    (<s*1> ^word <w*1>)
    (<w*1> ^word <word>)
    -->
    (<s> ^answer <word> +)
}

sp {answer-property-question*smem-retrieve*word
    (state <s> ^name answer-property-question)
    (<s> ^sense <s*1>)
    (<s*1> ^word <word>)
    -->
    (<s> ^retrieve-lti <word> +)
}

sp {answer-property-question*elaborate*sense
    (state <s> ^name answer-property-question)
    (<s> ^retrieved-lti-cue <r*1>)
    (<r*1> ^retrieved-lti <lti>)
    (<lti> ^wme-type sense)
    -->
    (<s> ^sense <lti> +)
}

sp {answer-property-question*smem-query*lookup-label
    (state <s> ^name answer-property-question)
    (<s> ^this-object <t*1>)
    (<t*1> ^property <prop>)
    (<prop> -^word <w*1>)
    (<prop> ^label <label>)
    (<prop> ^name <prop-name>)
    (<s> ^property <smem-prop>)
    (<smem-prop> ^name <prop-name>)
    -->
    (<s> ^smem-query-cue <cue> +)
    (<cue> ^wme-type sense +)
    (<cue> ^label <label> +)
    (<cue> ^property <smem-prop> +)
}

sp {answer-property-question*best-pref*attend-to-scene-change
    (state <s> ^name answer-property-question)
    (<s> ^operator <o> +)
    (<o> ^name attend-to-scene-change)
    -->
    (<s> ^operator <o> >)
}

sp {answer-property-question*attend*to*object*property
    (state <s> ^name answer-property-question)
    (<s> ^this-object <t*1>)
    (<t*1> ^id <id>)
    (<s> ^property <p*1>)
    (<p*1> ^name <prop-name>)
    -->
    (<s> ^attend-to-object <id> +)
    (<s> ^attend-to-property-type <prop-name> +)
}

sp {answer-property-question*elaborate*property
    (state <s> ^name answer-property-question)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^property <prop>)
    -->
    (<s> ^property <prop> +)
}

sp {answer-property-question*elaborate*this-object
    (state <s> ^name answer-property-question)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object <obj>)
    -->
    (<s> ^this-object <obj> +)
}

sp {dialog-event*propose*answer-property-question
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type property-question)
    (<p> ^parameters <p*2>)
    (<p*2> ^indexable <obj-index>)
    (<obj-index> ^type object)
    (<p> ^parameters <p*1>)
    (<p*1> ^indexable <prop-index>)
    (<prop-index> ^type property)
    (<obj-index> ^result <obj>)
    (<prop-index> ^result <prop>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name answer-property-question +)
    (<o> ^object <obj> +)
    (<o> ^property <prop> +)
}

sp {answer-is-question*apply*store*object
    (state <s> ^name answer-is-question)
    (<s> ^operator <o*1>)
    (<o*1> ^name find-relations)
    (<s> ^relation-question <r*1>)
    (<r*1> ^object1 <o*2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^smem <s*1>)
    (<o*2> ^result <r*2>)
    (<r*2> ^smem-rep <obj>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <obj> +)
}

sp {answer-is-question*apply*find-relations*no
    (state <s> ^name answer-is-question)
    (<s> ^operator <o*1>)
    (<o*1> ^name find-relations)
    (<s> ^relationships <rels>)
    (<rels> ^with <id1>)
    (<s> ^relation-question <q>)
    (<q> ^object2 <o*3>)
    (<q> ^object1 <o*2>)
    (<o*2> ^result <r*1>)
    (<r*1> ^id <id1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<o*3> ^result <r*2>)
    (<r*2> ^id <id2>)
   -{ (<rels> ^relations <r*3>)
      (<r*3> ^obj <id2>)}
    (<s> ^io <i*2>)
    (<i*2> ^output-link <out>)
    (<rels> ^preposition <prep>)
    (<q> ^preposition <prep>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type single-word-response +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^word no +)
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type single-word-response +)
    (<de> ^originator agent +)
}

sp {answer-is-question*apply*find-relations*yes
    (state <s> ^name answer-is-question)
    (<s> ^operator <o*1>)
    (<o*1> ^name find-relations)
    (<s> ^relationships <rels>)
    (<rels> ^relations <r*3>)
    (<rels> ^with <id1>)
    (<s> ^relation-question <q>)
    (<q> ^object2 <o*3>)
    (<q> ^object1 <o*2>)
    (<o*2> ^result <r*1>)
    (<r*1> ^id <id1>)
    (<r*3> ^obj <id2>)
    (<o*3> ^result <r*2>)
    (<r*2> ^id <id2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<s> ^io <i*2>)
    (<i*2> ^output-link <out>)
    (<rels> ^preposition <prep>)
    (<q> ^preposition <prep>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type single-word-response +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^word yes +)
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type single-word-response +)
    (<de> ^originator agent +)
}

sp {answer-is-question*propose*find-relations
    (state <s> ^name answer-is-question)
    (<s> ^relation-question <q>)
    (<q> ^object1 <o*1>)
    (<o*1> ^result <r*1>)
    (<r*1> ^id <id1>)
    (<q> ^preposition <prep>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name find-relations +)
    (<o> ^prep <prep> +)
    (<o> ^obj <id1> +)
    (<o> ^ind 1 +)
}

sp {dialog-event*apply*answer-is-question*send*answer
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name answer-is-question)
    (<o> ^answer <ans>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*2>)
    (<i*2> ^status <status>)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type single-word-response +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^word <ans> +)
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type single-word-response +)
    (<de> ^originator agent +)
}

sp {dialog-event*elaborate*answer-is-question*default*no
    (state <s> ^name dialog-event)
    (<s> ^operator <o> +)
    (<o> -^answer yes)
    (<o> ^name answer-is-question)
    (<o> ^questioned <q>)
    -->
    (<o> ^answer no +)
}

sp {dialog-event*elaborate*answer-is-question*yes*name
    (state <s> ^name dialog-event)
    (<s> ^operator <o> +)
    (<o> ^name answer-is-question)
    (<o> ^indexed-object <obj>)
    (<o> ^questioned <q*2>)
    (<o> ^questioned <q*1>)
    (<q*1> ^sense <s*1>)
    (<q*2> ^word <name>)
    (<obj> ^property <p*2>)
    (<p*2> ^word <name>)
    (<s*1> ^property <p*1>)
    (<p*1> ^name name)
    -->
    (<o> ^answer yes +)
}

sp {dialog-event*elaborate*answer-is-question*yes*generic
    (state <s> ^name dialog-event)
    (<s> ^operator <o> +)
    (<o> ^name answer-is-question)
    (<o> ^questioned <q*1>)
    (<q*1> ^sense <s*1>)
    (<s*1> ^property <p*1>)
    (<p*1> ^name generic)
    -->
    (<o> ^answer yes +)
}

sp {dialog-event*elaborate*answer-is-question*yes*word*match
    (state <s> ^name dialog-event)
    (<s> ^operator <o> +)
    (<o> ^name answer-is-question)
    (<o> ^indexed-object <obj>)
    (<o> ^questioned <q*1>)
    (<q*1> ^sense <s*1>)
    (<s*1> ^label <label>)
    (<obj> ^property <p*1>)
    (<p*1> ^label <label>)
    -->
    (<o> ^answer yes +)
}

sp {dialog-event*elaborate*answer-is-question*indexed-object
    (state <s> ^name dialog-event)
    (<s> ^operator <o> +)
    (<o> ^name answer-is-question)
    (<s> ^purpose <p*1>)
    (<p*1> ^parameters <p*2>)
    (<p*2> ^indexable <i>)
    (<i> ^type object)
    (<i> ^result <obj>)
    -->
    (<o> ^indexed-object <obj> +)
}

sp {dialog-event*elaborate*answer-is-question*questioned
    (state <s> ^name dialog-event)
   -{ (<s> ^purpose <p*1>)
      (<p*1> ^parameters <p*2>)
      (<p*2> ^relation-question <r*1>)}
    (<s> ^operator <o> +)
    (<o> ^name answer-is-question)
    (<s> ^purpose <p*5>)
    (<p*5> ^parameters <p*6>)
    (<p*6> ^indexable <i>)
    (<i> ^type object)
    (<i> ^indexable <i*1>)
    (<s> ^purpose <p*3>)
    (<p*3> ^parameters <p*4>)
    (<p*4> ^questioned <adj>)
    (<i*1> ^result <word>)
    (<word> ^word <adj>)
    -->
    (<o> ^questioned <word> +)
}

sp {answer-is-question*elaborate*relation-question
    (state <s> ^name answer-is-question)
    (<s> ^superstate <s*1>)
    (<s*1> ^purpose <p*1>)
    (<p*1> ^parameters <p*2>)
    (<p*2> ^relation-question <rel>)
    -->
    (<s> ^relation-question <rel> +)
}

sp {dialog-event*propose*answer-is-question
    (state <s> ^name dialog-event)
    (<s> ^purpose <p*1>)
    (<p*1> ^type is-question)
    -->
    (<s> ^operator <o> +)
    (<o> ^name answer-is-question +)
}

sp {game-heuristics-finished-message*propose*finish-failures
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type game-heuristics-finished-message)
    (<p> ^parameters <param>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name finish-failures +)
    (<o> ^parameter <type> +)
    (<o> ^category svs +)
}

sp {game-params-finished-message*propose*finish-game-params
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type game-params-finished-message)
    (<p> ^parameters <param>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name finish-game-params +)
    (<o> ^parameter <type> +)
    (<o> ^category svs +)
}

sp {game-over-message*propose*game-over
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type game-over-message)
    (<p> ^parameters <param>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name game-over +)
    (<o> ^category svs +)
}

sp {verbs-finished-message*propose*finish-verbs
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type verbs-finished-message)
    (<p> ^parameters <param>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name finish-verbs +)
    (<o> ^parameter <type> +)
    (<o> ^category svs +)
}

sp {actions-finished-message*propose*finish-actions
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type actions-finished-message)
    (<p> ^parameters <param>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name finish-actions +)
    (<o> ^parameter <type> +)
    (<o> ^category svs +)
}

sp {parameters-finished-message*apply*finish-parameters*finish-conditions
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name finish-parameters)
    (<s> ^top-state <t*1>)
    (<t*1> ^current-game <c*1>)
    (<c*1> ^learning <l>)
    (<l> ^type { << condition >> <cond> })
    -->
    (<l> ^type <cond> -)
    (<l> ^type parameter +)
}

sp {parameters-finished-message*propose*finish-parameters
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type parameters-finished-message)
    -->
    (<s> ^operator <o> +)
    (<o> ^name finish-parameters +)
    (<o> ^category svs +)
}

sp {failure-name-message*propose*learn-failure
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type failure-name-message)
    (<p> ^parameters <param>)
    (<param> ^failure-name <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-failure +)
    (<o> ^failure-name <name> +)
    (<o> ^category svs +)
}

sp {goal-name-message*propose*learn-goal
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type goal-name-message)
    (<p> ^parameters <param>)
    (<param> ^goal-name <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-goal +)
    (<o> ^goal-name <name> +)
    (<o> ^category svs +)
}

sp {heuristic-message*propose*learn-heuristic
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type heuristic-message)
    (<p> ^parameters <param>)
    (<param> ^type action)
    (<param> ^action2 <action2>)
    (<param> ^action1 <action1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-heuristic +)
    (<o> ^type action +)
    (<o> ^action1 <action1> +)
    (<o> ^action2 <action2> +)
    (<o> ^category svs +)
}

sp {verb-name-message*propose*learn-actionref
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type verb-name-message)
    (<p> ^parameters <param>)
    (<param> ^verb-prep <prep>)
    (<param> ^verb-name <name>)
    (<param> ^objb <p2>)
    (<param> ^obja <p1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-action +)
    (<o> ^verb-name <name> +)
    (<o> ^verb-prep <prep> +)
    (<o> ^obja <p1> +)
    (<o> ^objb <p2> +)
    (<o> ^category svs +)
}

sp {verb-name-message*propose*learn-action
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type verb-name-message)
    (<p> ^parameters <param>)
    (<param> ^b <p2>)
    (<param> ^a <p1>)
    (<param> ^verb-prep <prep>)
    (<param> ^verb-name <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-action +)
    (<o> ^verb-name <name> +)
    (<o> ^verb-prep <prep> +)
    (<o> ^a <p1> +)
    (<o> ^b <p2> +)
    (<o> ^category svs +)
}

sp {action-name-message*propose*learn-action*multiplayer
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type action-name-message)
    (<p> ^parameters <param>)
    (<param> ^multiplayer <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-action +)
    (<o> ^multiplayer <name> +)
    (<o> ^category svs +)
}

sp {action-name-message*propose*learn-action
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type action-name-message)
    (<p> ^parameters <param>)
    (<param> ^action-name <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-action +)
    (<o> ^action-name <name> +)
    (<o> ^category svs +)
}

sp {parameter-condition-message-relation*propose*learn-condition*3arg
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type parameter-condition-message-relation)
    (<p> ^parameters <param>)
    (<param> ^objc <objc>)
    (<param> ^objb <objb>)
    (<param> ^obja <obja>)
    (<param> ^negative <val>)
    (<param> ^prep <prep>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-condition +)
    (<o> ^prep <prep> +)
    (<o> ^negative <val> +)
    (<o> ^obja <obja> +)
    (<o> ^objb <objb> +)
    (<o> ^objc <objc> +)
}

sp {parameter-condition-message-relation*propose*learn-condition
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type parameter-condition-message-relation)
    (<p> ^parameters <param>)
    (<param> -^objc <o*1>)
    (<param> ^objb <objb>)
    (<param> ^obja <obja>)
    (<param> ^negative <val>)
    (<param> ^prep <prep>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-condition +)
    (<o> ^category svs +)
    (<o> ^prep <prep> +)
    (<o> ^negative <val> +)
    (<o> ^obja <obja> +)
    (<o> ^objb <objb> +)
}

sp {parameter-condition-message*propose*learn-condition
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type parameter-condition-message)
    (<p> ^parameters <param>)
    (<param> ^parameter <type>)
    (<param> ^attribute <cond>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-condition +)
    (<o> ^prep none +)
    (<o> ^negative false +)
    (<o> ^attribute <cond> +)
    (<o> ^obja <obja> +)
    (<obja> ^word object +)
    (<obja> ^specifier DEF +)
    (<obja> ^word <type> +)
}

sp {action-parameter-message*propose*learn-parameter
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type action-parameter-message)
    (<p> ^parameters <p*1>)
    (<p*1> ^parameter <obj>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-parameter +)
    (<o> ^parameter <obj> +)
}

sp {state-demo-message*propose*learn-goal-demonstration
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type state-demo-message)
    (<p> ^parameters <p*1>)
    (<p*1> ^state-name <type>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learn-goal-demonstration +)
    (<o> ^type <type> +)
}

sp {goal-feature-modify*propose*learn-parameter
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type goal-feature-modify)
    (<p> ^parameters <pa>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name goal-feature-tracking +)
    (<o> ^parameter <pa> +)
}

sp {action-event*propose*start-turn
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type game-turn)
    -->
    (<s> ^operator <o> +)
    (<o> ^name start-turn +)
    (<o> ^category svs +)
}

sp {dialog-event*propose*game-start
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type game-start)
    (<p> ^parameters <p*1>)
    (<p*1> ^game-name <name>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name game-start +)
    (<o> ^category svs +)
    (<o> ^game-name <name> +)
}

sp {dialog-event*propose*query-relation
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type describe-relation)
    (<p> ^parameters <p*2>)
    (<p*2> ^indexable <obj2>)
    (<obj2> ^type preposition)
    (<p> ^parameters <p*1>)
    (<p*1> ^indexable <obj>)
    (<obj> ^type object)
    (<obj2> ^result <prep>)
    (<obj> ^result <obja>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name query-relation +)
    (<o> ^descriptions <d> +)
    (<o> ^message <m> +)
    (<m> ^fields <f> +)
    (<m> ^type query-relation +)
    (<f> ^objects <object> +)
    (<object> ^obj <obja> +)
    (<object> ^type <prep> +)
}

sp {dialog-event*elaborate*purpose
    (state <s> ^name dialog-event)
    (<s> ^superstate <s*1>)
    (<s*1> ^purpose <p>)
    -->
    (<s> ^purpose <p> +)
}

sp {dialog-event*propose*describe-object-location
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type location-question)
    (<p> ^parameters <p*1>)
    (<p*1> ^object <obj>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name describe-object-location +)
    (<o> ^object <obj> +)
}

sp {dialog-event*apply*report-interaction*report
    (state <s> ^name dialog-event)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-interaction)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <seg>)
    (<seg> ^context <context>)
    (<seg> ^info <context>)
    (<seg> ^purpose <p>)
    (<p> ^satisfaction <sat>)
    (<p> ^type <type>)
    (<s> ^io <i*2>)
    (<i*2> ^output-link <out>)
    -->
    (<out> ^report-interaction <ri> +)
    (<ri> ^type <type> +)
    (<ri> ^context <context> +)
    (<ri> ^satisfaction <sat> +)
}

sp {dialog-event*apply*report-interaction*mark*performed
    (state <s> ^name dialog-event)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-interaction)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type report-interaction +)
    (<de> ^originator agent +)
}

sp {dialog-event*propose*report-interaction
    (state <s> ^name dialog-event)
    (<s> ^purpose <p*1>)
    (<p*1> ^type report-interaction)
    -->
    (<s> ^operator <o> +)
    (<o> ^name report-interaction +)
}

sp {describe-object*prefer*attend-to-scene-change*over*lookup-labels
    (state <s> ^name describe-object)
    (<s> ^operator <o2> +)
    (<o2> ^name lookup-labels)
    (<s> ^operator <o1> +)
    (<o1> ^name attend-to-scene-change)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {lookup-label*apply*complete-lookup-label*annotate*object
    (state <s> ^name lookup-label)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-lookup-label)
    (<s> ^sense <sense>)
    (<sense> ^label <label>)
    (<sense> ^word <w*2>)
    (<w*2> ^word <word>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <o*2>)
    (<sense> ^property <p*1>)
    (<p*1> ^handle <prop-handle>)
    (<o*2> ^object <o*3>)
    (<o*3> ^property <prop>)
    (<prop> ^handle <prop-handle>)
    (<prop> ^value <val>)
    (<val> -^word <word>)
    (<val> ^label <label>)
    -->
    (<val> ^word <word> +)
}

sp {lookup-label*apply*complete-lookup-label
    (state <s> ^name lookup-label)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-lookup-label)
    (<s> ^sense <sense>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^lookup-label-result <sense> +)
}

sp {lookup-label*propose*complete-lookup-label
    (state <s> ^name lookup-label)
    (<s> ^sense <sense>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-lookup-label +)
}

sp {lookup-label*propose*smem-retrieve*property
    (state <s> ^name lookup-label)
    (<s> ^sense <s*1>)
    (<s*1> ^property <prop>)
    -->
    (<s> ^retrieve-lti <prop> +)
}

sp {lookup-label*propose*smem-retrieve*word
    (state <s> ^name lookup-label)
    (<s> ^sense <s*1>)
    (<s*1> ^word <word>)
    -->
    (<s> ^retrieve-lti <word> +)
}

sp {lookup-label*apply*smem-query*copy-result*success
    (state <s> ^name lookup-label)
    (<s> ^operator <o*1>)
    (<o*1> ^name smem-query)
    (<s> ^smem-query-result { <> failure <res> })
    -->
    (<s> ^sense <res> +)
    (<s> ^smem-query-result <res> -)
}

sp {lookup-label*apply*smem-query*copy-result*failure
    (state <s> ^smem-query-result failure)
    (<s> ^name lookup-label)
    (<s> ^operator <o*1>)
    (<o*1> ^name smem-query)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^lookup-label-result failure +)
}

sp {lookup-label*propose*smem-query*label
    (state <s> ^name lookup-label)
    (<s> -^sense <s*1>)
    (<s> ^label <label>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name smem-query +)
    (<o> ^category smem +)
    (<o> ^query <q> +)
    (<o> ^return-all false +)
    (<q> ^wme-type sense +)
    (<q> ^label <label> +)
}

sp {lookup-label*copy*parameters
    (state <s> ^name lookup-label)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^{ << label >> <param> } <val>)
    -->
    (<s> ^<param> <val> +)
}

sp {describe-object*apply*complete-describe-object*return*failure
    (state <s> ^name describe-object)
   -{ (<s> ^desc-object <d*1>)
      (<d*1> ^linguistic-desc <desc>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-describe-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <ss-op>)
    -->
    (<ss-op> ^description none +)
}

sp {describe-object*apply*complete-describe-object*description
    (state <s> ^name describe-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-describe-object)
    (<s> ^desc-object <d*1>)
    (<d*1> ^linguistic-desc <desc>)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <ss-op>)
    -->
    (<ss-op> ^description <desc> +)
}

sp {describe-object*propose*complete-describe-object
    (state <s> ^name describe-object)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-describe-object +)
    (<o> ^category object-processing +)
}

sp {describe-object*apply*lookup-label*failure
    (state <s> ^lookup-label-result failure)
    (<s> ^name describe-object)
    (<s> ^operator <o>)
    (<o> ^name lookup-label)
    (<o> ^label <label>)
    -->
    (<s> ^ignore-label <label> +)
}

sp {describe-object*apply*lookup-smem*label
    (state <s> ^name describe-object)
    (<s> ^operator <o*1>)
    (<o*1> ^name lookup-label)
    (<s> ^lookup-label-result <res>)
    (<res> ^label <label>)
    (<s> ^desc-object <d*1>)
    (<res> ^word <w*1>)
    (<w*1> ^word <word>)
    (<res> ^property <p*1>)
    (<p*1> ^name <prop-name>)
    (<d*1> ^property <prop>)
    (<prop> ^name <prop-name>)
    (<prop> ^value <val>)
    (<val> ^label <label>)
    -->
    (<val> ^word <word> +)
    (<s> ^lookup-label-result <res> -)
}

sp {describe-object*propose*lookup-label
    (state <s> ^name describe-object)
    (<s> ^desc-object <d*1>)
    (<d*1> ^property <prop>)
    (<prop> -^word <word>)
    (<prop> ^label <label>)
    (<s> -^ignore-label <label>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name lookup-label +)
    (<o> ^category smem +)
    (<o> ^label <label> +)
}

sp {describe-object*elaborate*object
    (state <s> ^name describe-object)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object <obj>)
    -->
    (<s> ^desc-object <obj> +)
}

sp {dialog-event*apply*describe-object*store
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name describe-object)
    (<s> ^top-state <t*1>)
    (<t*1> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<o> ^object <o*1>)
    (<o*1> ^smem-rep <obj>)
    -->
    (<cmd> ^store <obj> +)
}

sp {dialog-event*apply*describe-object*no-object
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^description none)
    (<o> ^name describe-object)
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type no-object +)
    (<msg> ^fields <f> +)
}

sp {dialog-event*apply*describe-object*describe
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name describe-object)
    (<o> ^description { <> none <desc> })
    (<s> ^io <i*1>)
    (<i*1> ^output-link <out>)
    -->
    (<out> ^send-message <msg> +)
    (<msg> ^type describe-object +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^object <desc> +)
}

sp {dialog-event*apply*describe-object*mark*performed
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name describe-object)
    (<o> ^description <desc>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type describe +)
    (<de> ^originator agent +)
}

sp {dialog-event*propose*describe-object
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type describe-object)
    (<p> ^parameters <p*1>)
    (<p*1> ^indexable <obj>)
    (<obj> ^type object)
    (<obj> ^result <wm-obj>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name describe-object +)
    (<o> ^object <wm-obj> +)
}

sp {satisfy-purpose*propose*dialog-event*instructor
    (state <s> ^name satisfy-purpose)
    (<s> ^purpose <p*1>)
    (<p*1> ^satisfaction <s*1>)
    (<s*1> ^dialog-event <de>)
    (<de> ^originator instructor)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name wait-for-response +)
}

sp {satisfy-purpose*propose*action-event
    (state <s> ^name satsify-purpose)
    (<s> ^purpose <p*1>)
    (<p*1> ^satisfaction <s*1>)
    (<s*1> ^action-event <a*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name action-event +)
}

sp {satisfy-purpose*propose*learning-event
    (state <s> ^name satisfy-purpose)
    (<s> ^purpose <p*1>)
    (<p*1> ^satisfaction <s*1>)
    (<s*1> ^learning-event <l*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name learning-event +)
}

sp {satisfy-purpose*propose*dialog-event*from*agent
    (state <s> ^name satisfy-purpose)
    (<s> ^purpose <p*1>)
    (<p*1> ^satisfaction <s*1>)
    (<s*1> ^dialog-event <de>)
    (<de> ^originator agent)
    -->
    (<s> ^operator <o> +)
    (<o> ^name dialog-event +)
}

sp {satisfy-purpose*elaborate*purpose
    (state <s> ^name satisfy-purpose)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose <purp>)
    -->
    (<s> ^purpose <purp> +)
}

sp {interaction*apply*performed-event*action-event*train-on-location*send-message
    (state <s> ^name interaction)
    (<s> ^operator <o>)
    (<o> ^name performed-event)
    (<o> ^event <e*1>)
    (<e*1> ^action-event <e>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <seg>)
    (<seg> ^context <c*1>)
    (<c*1> ^type get-location-info)
    (<seg> ^purpose <p*1>)
    (<p*1> ^type action)
    -->
    (<changes> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type ok +)
}

sp {interaction*apply*performed-event*learn-predicate-info*send*message
    (state <s> ^name interaction)
    (<s> ^operator <o>)
    (<o> ^name performed-event)
    (<o> ^event <e*1>)
    (<e*1> ^learning-event <l*1>)
    (<l*1> ^type predicate)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose <p*1>)
    (<p*1> ^type learn-predicate-info)
    -->
    (<changes> ^outgoing-message <o*1> +)
    (<o*1> ^type report-successful-training +)
}

sp {interaction*apply*performed-event*teach-relation*send*message
    (state <s> ^name interaction)
    (<s> ^operator <o>)
    (<o> ^name performed-event)
    (<o> ^event <e*1>)
    (<e*1> ^learning-event <l*1>)
    (<l*1> ^type relation)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose <p*1>)
    (<p*1> ^type teach-relation)
    -->
    (<changes> ^outgoing-message <o*1> +)
    (<o*1> ^type report-successful-training +)
}

sp {interaction*apply*performed-event*train-on-object*send*message
    (state <s> ^name interaction)
    (<s> ^operator <o>)
    (<o> ^name performed-event)
    (<o> ^event <e*1>)
    (<e*1> ^learning-event <l*1>)
    (<l*1> ^type object)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose <p*1>)
    (<p*1> ^type train-on-object)
    -->
    (<changes> ^outgoing-message <o*1> +)
    (<o*1> ^type report-successful-training +)
}

sp {interaction*apply*performed-event*satisfied*purpose*pop
    (state <s> ^name interaction)
    (<s> ^operator <o>)
    (<o> ^name performed-event)
    (<o> ^event <event>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i>)
    (<i> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose <p*1>)
    (<p*1> ^satisfaction <sat>)
    (<i> ^changes <changes>)
    (<event> ^<event-cat> <perf-event>)
    (<sat> ^<event-cat> <sat-event>)
   -{ (<sat-event> ^{ <> info <attr> } <val>)
      (<perf-event> -^<attr> <val>)}
    (<perf-event> ^type <event-type>)
    (<sat-event> ^type <event-type>)
    -->
    (<changes> ^terminate-segment true +)
}

sp {interaction*apply*performed-event*remove*performed
    (state <s> ^name interaction)
    (<s> ^operator <o>)
    (<o> ^name performed-event)
    (<o> ^event <event>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<status> ^performed <event>)
    -->
    (<status> ^performed <event> -)
}

sp {send-message*apply*create-learned-teacher-name-message
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-learned-teacher-name-message)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type learned-teacher-name +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-learned-teacher-name-message
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type learned-teacher-name)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-learned-teacher-name-message +)
}

sp {send-message*apply*create-simple-message
    (state <s> ^name send-message)
    (<s> ^operator <o>)
    (<o> ^name create-simple-message)
    (<o> ^message-type <type>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type <type> +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-simple-message
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <msg>)
    (<msg> ^type simple-message)
    (<msg> ^message-type <type>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-simple-message +)
    (<o> ^message-type <type> +)
}

sp {send-message*apply*create-describe-final-goal-state
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-describe-final-goal-state)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type describe-final-goal-state +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-describe-final-goal-state
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type describe-final-goal-state)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-describe-final-goal-state +)
}

sp {send-message*apply*create-describe-goal-state
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-describe-goal-state)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type describe-goal-state +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-describe-goal-state
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type describe-goal-state)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-describe-goal-state +)
}

sp {send-message*apply*create-reset-state
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-reset-state)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type reset-state +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-reset-state
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type reset-state)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-reset-state +)
}

sp {send-message*apply*create-unknown-defined-word
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-unknown-defined-word)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type unknown-defined-word +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-unknown-defined-word
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type unknown-defined-word)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-unknown-defined-word +)
}

sp {send-message*apply*create-learned-unknown-word
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-learned-unknown-word)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type learned-unknown-word +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-learned-unknown-word
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type learned-unknown-word)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-learned-unknown-word +)
}

sp {send-message*apply*create-unknown-word
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-unknown-word)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type unknown-word +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-unknown-word
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type unknown-word)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-unknown-word +)
}

sp {send-message*apply*create-learned-game-message
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-learned-game-message)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type learned-game +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-learned-game
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type learned-game)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-learned-game-message +)
}

sp {send-message*apply*create-already-know-message
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-already-know-message)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type already-know-concept +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-already-know-message
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type already-know)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-already-know-message +)
}

sp {send-message*apply*create-transfer-message
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-transfer-message)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type transfer-concept +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-transfer-message
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type transfer-concept)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-transfer-message +)
}

sp {send-message*apply*create-ask-about-item
    (state <s> ^name send-message)
    (<s> ^operator <o>)
    (<o> ^name create-ask-about-item)
    (<o> ^item <item>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type ask-about-item +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^item <item> +)
}

sp {send-message*propose*create-ask-about-item
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type ask-about-item)
    (<s> ^message <m*2>)
    (<m*2> ^item <item>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-ask-about-item +)
    (<o> ^item <item> +)
}

sp {send-message*apply*create-give-item-request
    (state <s> ^name send-message)
    (<s> ^operator <o>)
    (<o> ^name create-give-item-request)
    (<o> ^item <item>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type give-item-request +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^item <item> +)
}

sp {send-message*propose*create-give-item-request
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type give-item-request)
    (<s> ^message <m*2>)
    (<m*2> ^item <item>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-give-item-request +)
    (<o> ^item <item> +)
}

sp {send-message*apply*create-get-item-request
    (state <s> ^name send-message)
    (<s> ^operator <o>)
    (<o> ^name create-get-item-request)
    (<o> ^item <item>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type get-item-request +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^item <item> +)
}

sp {send-message*propose*create-get-item-request
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type get-item-request)
    (<s> ^message <m*2>)
    (<m*2> ^item <item>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-get-item-request +)
    (<o> ^item <item> +)
}

sp {send-message*apply*create-get-location-info*no*name
    (state <s> ^name send-message)
   -{ (<s> ^message <m*1>)
      (<m*1> ^location-name <l*1>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name create-get-location-info)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type get-location-info +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*apply*create-get-location-info*with*name
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-get-location-info)
    (<s> ^message <m*1>)
    (<m*1> ^location-name <name>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type get-location-info +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^location-name <name> +)
}

sp {send-message*propose*create-get-location-info
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type get-location-info)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-get-location-info +)
}

sp {send-message*apply*create-object-description
    (state <s> ^name send-message)
    (<s> ^operator <o>)
    (<o> ^name create-object-description)
    (<o> ^description <desc>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type object-description +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^object <desc> +)
}

sp {send-message*propose*create-object-description
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type object-description)
    (<s> ^object-description <desc>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-object-description +)
    (<o> ^description <desc> +)
}

sp {send-message*object-description*propose*generate-object-description
    (state <s> ^name send-message)
    (<s> -^object-description <o*1>)
    (<s> ^message <msg>)
    (<msg> ^type object-description)
    (<msg> ^object <obj>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name generate-object-description +)
    (<o> ^object <obj> +)
}

sp {generate-object-description*apply*complete-generate-object-description
    (state <s> ^name generate-object-description)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-generate-object-description)
    (<s> ^description <desc>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^object-description <desc> +)
}

sp {generate-object-description*propose*complete-generate-object-description
    (state <s> ^name generate-object-description)
    (<s> -^waiting-retrievals true)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-generate-object-description +)
}

sp {generate-object-description*apply*retrieve-predicate-word*retrieve*word*failure
    (state <s> ^name generate-object-description)
    (<s> ^operator <o>)
    (<o> ^name retrieve-predicate-word)
    (<o> ^lookup-predicate <lp>)
    (<lp> ^word-query <q>)
    (<s> ^smem <s*2>)
    (<s*2> ^command <cmd>)
    (<cmd> ^query <q>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^failure <q>)
    -->
    (<cmd> ^query <q> -)
    (<lp> ^word-lti lookup-failure +)
}

sp {generate-object-description*apply*retrieve-predicate-word*retrieve*word*success
    (state <s> ^name generate-object-description)
    (<s> ^operator <o>)
    (<o> ^name retrieve-predicate-word)
    (<o> ^lookup-predicate <lp>)
    (<lp> ^word-query <q>)
    (<s> ^description <desc>)
    (<lp> ^category <cat>)
    (<s> ^smem <s*3>)
    (<s*3> ^command <cmd>)
    (<cmd> ^query <q>)
    (<s> ^smem <s*2>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^success <q>)
    (<s*2> ^result <r*2>)
    (<r*2> ^retrieved <lti>)
    (<lti> ^spelling <word>)
    -->
    (<cmd> ^query <q> -)
    (<lp> ^word-lti <lti> +)
    (<desc> ^<cat> <word> +)
}

sp {generate-object-description*apply*retrieve-predicate-word*create*word*query
    (state <s> ^name generate-object-description)
    (<s> ^operator <o>)
    (<o> ^name retrieve-predicate-word)
    (<o> ^lookup-predicate <lp>)
    (<lp> ^predicate-lti <lti>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^query <q> +)
    (<q> ^id <lti> +)
    (<lp> ^word-query <q> +)
}

sp {generate-object-description*apply*retrieve-predicate-word*retrieve*predicate*failure
    (state <s> ^name generate-object-description)
    (<s> ^operator <o>)
    (<o> ^name retrieve-predicate-word)
    (<o> ^lookup-predicate <lp>)
    (<lp> ^predicate-query <q>)
    (<s> ^smem <s*2>)
    (<s*2> ^command <cmd>)
    (<cmd> ^query <q>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^failure <q>)
    -->
    (<cmd> ^query <q> -)
    (<lp> ^word-lti lookup-failure +)
}

sp {generate-object-description*apply*retrieve-predicate-word*retrieve*predicate*success
    (state <s> ^name generate-object-description)
    (<s> ^operator <o>)
    (<o> ^name retrieve-predicate-word)
    (<o> ^lookup-predicate <lp>)
    (<lp> ^predicate-query <q>)
    (<s> ^smem <s*3>)
    (<s*3> ^command <cmd>)
    (<cmd> ^query <q>)
    (<s> ^smem <s*2>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^success <q>)
    (<s*2> ^result <r*2>)
    (<r*2> ^retrieved <lti>)
    -->
    (<cmd> ^query <q> -)
    (<lp> ^predicate-lti <lti> +)
}

sp {generate-object-description*apply*retrieve-predicate-word*create*query
    (state <s> ^name generate-object-description)
    (<s> ^operator <o>)
    (<o> ^name retrieve-predicate-word)
    (<o> ^lookup-predicate <lp>)
    (<lp> ^predicate <pred>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^query <q> +)
    (<q> ^name <pred> +)
    (<lp> ^predicate-query <q> +)
}

sp {generate-object-description*propose*retrieve-predicate-word
    (state <s> ^name generate-object-description)
    (<s> ^lookup-predicate <lp>)
    (<lp> -^word-lti <w*1>)
    (<lp> ^predicate <pred>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name retrieve-predicate-word +)
    (<o> ^lookup-predicate <lp> +)
}

sp {generate-object-description*elaborate*waiting-retrievals
    (state <s> ^name generate-object-description)
    (<s> ^lookup-predicate <lp>)
    (<lp> -^word-lti <w*1>)
    -->
    (<s> ^waiting-retrievals true +)
}

sp {generate-object-description*elaborate*lookup-predicate
    (state <s> ^name generate-object-description)
    (<s> ^object-to-describe <o*1>)
    (<o*1> ^predicates <preds>)
    (<preds> ^{ << color shape size name >> <pred-cat> } <pred>)
    -->
    (<s> ^lookup-predicate <lp> +)
    (<lp> ^predicate <pred> +)
    (<lp> ^category <pred-cat> +)
}

sp {generate-object-description*elaborate*description
    (state <s> ^name generate-object-description)
    -->
    (<s> ^description <desc> +)
}

sp {generate-object-description*elaborate*object-to-descibe*superoperator
    (state <s> ^name generate-object-description)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^object <obj>)
    -->
    (<s> ^object-to-describe <obj> +)
}

sp {send-message*apply*create-generic-message
    (state <s> ^name send-message)
    (<s> ^operator <o>)
    (<o> ^name create-generic-message)
    (<s> ^message <m*1>)
    (<m*1> ^fields <f>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type generic +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-generic-message
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <msg>)
    (<msg> ^type generic)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-generic-message +)
}

sp {send-message*apply*create-unable-to-interpret-message
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-unable-to-interpret-message)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type unable-to-interpret-message +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-unable-to-interpret-message
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type unable-to-interpret-message)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-unable-to-interpret-message +)
}

sp {send-message*apply*create-get-predicate-info*no*name
    (state <s> ^name send-message)
   -{ (<s> ^message <m*1>)
      (<m*1> ^predicate-name <p*1>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name create-get-predicate-info)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type get-predicate-info +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*apply*create-get-predicate-info*with*name
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-get-predicate-info)
    (<s> ^message <m*1>)
    (<m*1> ^predicate-name <name>)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type get-predicate-info +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f*1> +)
    (<f*1> ^predicate-name <name> +)
}

sp {send-message*propose*create-get-predicate-info
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type get-predicate-info)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-get-predicate-info +)
}

sp {send-message*apply*create-unable-to-satisfy
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-unable-to-satisfy)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type unable-to-satisfy +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-unable-to-satisfy
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type unable-to-satisfy)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-unable-to-satisfy +)
}

sp {send-message*apply*create-report-successful-training
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-report-successful-training)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type report-successful-training +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-report-successful-training
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type report-successful-training)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-report-successful-training +)
}

sp {send-message*apply*create-get-next-task
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-get-next-task)
    -->
    (<s> ^created-message <msg> +)
    (<msg> ^type get-next-task +)
    (<msg> ^originator agent +)
    (<msg> ^fields <f> +)
}

sp {send-message*propose*create-get-next-task
    (state <s> ^name send-message)
    (<s> -^created-message <c*1>)
    (<s> ^message <m*1>)
    (<m*1> ^type get-next-task)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-get-next-task +)
}

sp {send-message*apply*complete-send-message*expected*message*terminate
    (state <s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-send-message)
    (<s> ^created-message <c*2>)
    (<s> ^current-purpose <c*1>)
    (<c*1> ^satisfaction <s*1>)
    (<s*1> ^dialog-event <de>)
    (<de> ^originator agent)
    (<de> ^type <type>)
    (<c*2> ^type <type>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^terminate-segment true +)
}

sp {send-message*apply*complete-send-message*delete*message
    (state <s> ^name send-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-send-message)
    (<s> ^message <msg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<c> ^outgoing-message <msg>)
    -->
    (<c> ^outgoing-message <msg> -)
}

sp {send-message*propose*complete-send-message
    (state <s> ^name send-message)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-send-message +)
}

sp {send-message*elaborate*message
    (state <s> ^name send-message)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^message <msg>)
    -->
    (<s> ^message <msg> +)
}

sp {interaction*apply*modify-segment
    (state <s> ^name interaction)
    (<s> ^operator <o>)
    (<o> ^name modify-segment)
    (<o> ^modify-segment-info <minfo>)
    (<minfo> ^modification <m>)
    (<m> ^type satisfaction)
    (<m> ^add <add>)
    (<m> ^delete <del>)
    (<minfo> ^segment <seg>)
    (<seg> ^purpose <p*1>)
    (<p*1> ^satisfaction <sat>)
    (<s> ^top-state <ts>)
    (<ts> ^interaction <i*2>)
    (<i*2> ^changes <change>)
    (<change> ^modify-segment-info <minfo>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <seg>)
    (<sat> ^<arg> <val>)
    (<del> ^<arg> <val>)
    (<add> ^<narg> <nval>)
    -->
    (<sat> ^<arg> <val> -)
    (<sat> ^<narg> <nval> +)
    (<change> ^modify-segment-info <minfo> -)
}

sp {interpret-failure*apply*interpret-no-action-selection-knowledge*create*new*segment
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-no-action-selection-knowledge)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type get-next-subaction +)
    (<p> ^satisfaction <s*1> +)
    (<s*1> ^dialog-event <de> +)
    (<de> ^type command +)
    (<de> ^type object-description +)
    (<de> ^originator instructor +)
}

sp {interpret-failure*apply*interpret-no-action-selection-knowledge*create*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-no-action-selection-knowledge)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type get-next-subaction +)
}

sp {interpret-failure*apply*interpret-no-action-selection-knowledge*mark*handled
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-no-action-selection-knowledge)
    (<s> ^failure <failure>)
    -->
    (<s> ^handled <failure> +)
}

sp {interpret-failure*propose*interpret-no-action-selection-knowledge
    (state <s> ^name interpret-failure)
    (<s> -^handled <failure>)
    (<s> ^failure <f*1>)
    (<f*1> ^type no-action-selection-knowledge)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-no-action-selection-knowledge +)
}

sp {interpret-failure*apply*interpret-no-action-context-for-goal*terminate*segment
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-no-action-context-for-goal)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^terminate-segment true +)
}

sp {interpret-failure*apply*interpret-no-action-context-for-goal*create*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-no-action-context-for-goal)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type no-action-context-for-goal +)
}

sp {interpret-failure*apply*interpret-no-action-context-for-goal*mark*handled
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-no-action-context-for-goal)
    (<s> ^failure <failure>)
    -->
    (<s> ^handled <failure> +)
}

sp {interpret-failure*propose*interpret-no-action-context-for-goal
    (state <s> ^name interpret-failure)
    (<s> -^handled <failure>)
    (<s> ^failure <f*1>)
    (<f*1> ^type no-action-context-for-goal)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-no-action-context-for-goal +)
}

sp {interpret-failure*apply*interpret-unknown-goal*send*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-unknown-goal)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type get-goal-info +)
}

sp {interpret-failure*apply*interpret-unknown-goal*add*purpose
    (state <s> ^name interpret-failure)
    (<s> ^operator <o>)
    (<o> ^name interpret-unknown-goal)
    (<o> ^action <action>)
    -->
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type get-goal-info +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^action <action> +)
    (<p> ^satisfaction <s*1> +)
    (<s*1> ^dialog-event <de> +)
    (<de> ^type goal-description +)
    (<de> ^originator instructor +)
}

sp {interpret-failure*propose*interpret-unknown-goal
    (state <s> ^name interpret-failure)
    (<s> -^new-segment-info <n*1>)
    (<s> ^failure <f>)
    (<f> ^type unknown-goal)
    (<f> ^action <action>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-unknown-goal +)
    (<o> ^action <action> +)
}

sp {interpret-failure*apply*interpret-unknown-location*send*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-unknown-location)
    (<s> ^failure <f*1>)
    (<f*1> ^location <l*1>)
    (<l*1> ^english-description <name>)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type get-location-info +)
    (<msg> ^location-name <name> +)
}

sp {interpret-failure*apply*interpret-unknown-location*add*purpose
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-unknown-location)
    -->
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type get-location-info +)
    (<p> ^satisfaction <s*1> +)
    (<s*1> ^dialog-event <de> +)
    (<de> ^type location-description +)
    (<de> ^originator instructor +)
}

sp {interpret-failure*propose*interpret-unknown-location
    (state <s> ^name interpret-failure)
    (<s> -^new-segment-info <n*1>)
    (<s> ^failure <f*1>)
    (<f*1> ^type unknown-location)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-unknown-location +)
}

sp {interpret-failure*apply*interpret-learn-location-failure*terminate-segment
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-learn-location-failure)
    -->
    (<s> ^terminate-segment true +)
}

sp {interpret-failure*apply*interpret-learn-location-failure*send*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-learn-location-failure)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type learn-location-failure +)
}

sp {interpret-failure*propose*interpret-learn-location-failure
    (state <s> ^name interpret-failure)
    (<s> -^outgoing-message <o*1>)
    (<s> ^failure <f*1>)
    (<f*1> ^type learn-location-failure)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-learn-location-failure +)
}

sp {interpret-failure*apply*interpret-multiple-arguments*terminate*segment
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-multiple-arguments)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^terminate-segment true +)
}

sp {interpret-failure*apply*interpret-multiple-arguments*create*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-multiple-arguments)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type multiple-arguments +)
}

sp {interpret-failure*apply*interpret-multiple-arguments*mark*handled
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-multiple-arguments)
    (<s> ^failure <failure>)
    -->
    (<s> ^handled <failure> +)
}

sp {interpret-failure*propose*interpret-multiple-arguments
    (state <s> ^name interpret-failure)
    (<s> -^handled <failure>)
    (<s> ^failure <f*1>)
    (<f*1> ^type multiple-arguments)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-multiple-arguments +)
}

sp {interpret-failure*apply*interpret-no-proposed-action*terminate*segment
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-no-proposed-action)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^terminate-segment true +)
}

sp {interpret-failure*apply*interpret-no-proposed-action*create*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-no-proposed-action)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type no-proposed-action +)
}

sp {interpret-failure*apply*interpret-no-proposed-action*mark*handled
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-no-proposed-action)
    (<s> ^failure <failure>)
    -->
    (<s> ^handled <failure> +)
}

sp {interpret-failure*propose*interpret-no-proposed-action
    (state <s> ^name interpret-failure)
    (<s> -^handled <failure>)
    (<s> ^failure <f*1>)
    (<f*1> ^type no-proposed-action)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-no-proposed-action +)
}

sp {interpret-failure*apply*interpret-missing-object*terminate*segment
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-missing-object)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^terminate-segment true +)
}

sp {interpret-failure*apply*interpret-missing-object*create*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o>)
    (<o> ^name interpret-missing-object)
    (<o> ^missing-object <obj>)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type missing-object +)
}

sp {interpret-failure*apply*interpret-missing-object*mark*handled
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-missing-object)
    (<s> ^failure <failure>)
    -->
    (<s> ^handled <failure> +)
}

sp {interpret-failure*propose*interpret-missing-object
    (state <s> ^name interpret-failure)
    (<s> ^failure <failure>)
    (<s> -^handled <failure>)
    (<failure> ^type missing-object)
    (<failure> ^missing-object <obj>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-missing-object +)
    (<o> ^missing-object <obj> +)
}

sp {interpret-status*apply*interpret-index-object-failure*create*message
    (state <s> ^operator <o*1>)
    (<o*1> ^name interpret-index-object-failure)
    (<s> ^failure <f*1>)
    (<f*1> ^target-object <obj>)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type simple-message +)
    (<msg> ^message-type index-object-failure +)
}

sp {interpret-status*propose*interpret-index-object-failure
    (state <s> ^name interpret-failure)
    (<s> -^outgoing-message <o*1>)
    (<s> ^failure <f*1>)
    (<f*1> ^type { << index-object-failure >> <t*1> })
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-index-object-failure +)
}

sp {interpret-failure*apply*interpret-failed-to-interpret-message*send*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-failed-to-interpret-message)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type unable-to-interpret-message +)
}

sp {interpret-failure*apply*interpret-failed-to-interpret-message*terminate-segment
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-failed-to-interpret-message)
    -->
    (<s> ^terminate-segment true +)
}

sp {interpret-failure*propose*interpret-failed-to-interpret-message
    (state <s> ^name interpret-failure)
    (<s> -^terminate-segment <t*1>)
    (<s> ^failure <f*1>)
    (<f*1> ^type failed-to-interpret-message)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-failed-to-interpret-message +)
}

sp {interpret-failure*apply*interpret-unknown-predicate*send*message*word
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-unknown-predicate)
    (<s> ^failure <f*1>)
    (<f*1> ^word <name>)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type get-predicate-info +)
    (<msg> ^predicate-name <name> +)
}

sp {interpret-failure*apply*interpret-unknown-predicate*send*message
    (state <s> ^name interpret-failure)
   -{ (<s> ^failure <f*2>)
      (<f*2> ^word <w*1>)}
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-unknown-predicate)
    (<s> ^failure <f*1>)
    (<f*1> ^predicate <p*1>)
    (<p*1> ^handle <handle>)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type get-predicate-info +)
    (<msg> ^predicate-name <handle> +)
}

sp {interpret-failure*apply*interpret-unknown-predicate*add*purpose
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-unknown-predicate)
    -->
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type get-predicate-info +)
    (<p> ^satisfaction <s*1> +)
    (<s*1> ^dialog-event <de> +)
    (<de> ^type adjective-definition +)
    (<de> ^originator instructor +)
}

sp {interpret-failure*propose*interpret-unknown-predicate
    (state <s> ^name interpret-failure)
    (<s> -^new-segment-info <n*1>)
    (<s> ^failure <f*1>)
    (<f*1> ^type { << unknown-predicate unknown-word >> <t*1> })
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-unknown-predicate +)
}

sp {interpret-failure*apply*interpret-bad-smem-structure*send*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-bad-smem-structure)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type unable-to-satisfy +)
}

sp {interpret-failure*apply*interpret-bad-smem-structure*terminate-segment
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-bad-smem-structure)
    -->
    (<s> ^terminate-segment true +)
}

sp {interpret-failure*propose*interpret-bad-smem-structure
    (state <s> ^name interpret-failure)
    (<s> -^terminate-segment <t*1>)
    (<s> ^failure <f*1>)
    (<f*1> ^type bad-smem-structure)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-bad-smem-structure +)
}

sp {interpret-failure*apply*interpret-unknown-task*send*message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-unknown-task)
    -->
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type get-next-task +)
}

sp {interpret-failure*apply*interpret-unknown-task*add*purpose
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-unknown-task)
    -->
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type get-next-task +)
    (<p> ^satisfaction <s*1> +)
    (<s*1> ^dialog-event <de> +)
    (<de> ^type command +)
    (<de> ^originator instructor +)
}

sp {interpret-failure*propose*interpret-unknown-task
    (state <s> ^name interpret-failure)
    (<s> -^new-segment-info <n*1>)
    (<s> ^failure <f*1>)
    (<f*1> ^type unknown-task)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-unknown-task +)
}

sp {interpret-failure*apply*complete-interpret-failure*remove*new-message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-failure)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<s> ^failure <f*1>)
    (<i*1> ^status <status>)
    (<status> ^new-message <msg>)
    (<f*1> ^type { << index-object-failure >> <t*2> })
    -->
    (<status> ^new-message <msg> -)
}

sp {interpret-failure*apply*complete-interpret-failure*terminate-segment
    (state <s> ^terminate-segment true)
    (<s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-failure)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^terminate-segment true +)
}

sp {interpret-failure*apply*complete-interpret-failure*copy*outgoing-message
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-failure)
    (<s> ^outgoing-message <msg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^outgoing-message <msg> +)
}

sp {interpret-failure*apply*complete-interpret-failure*copy*modify-segment-info
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-failure)
    (<s> ^modify-segment-info <info>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^modify-segment-info <info> +)
}

sp {interpret-failure*apply*complete-interpret-failure*copy*new-segment-info
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-failure)
    (<s> ^new-segment-info <info>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^new-segment-info <info> +)
}

sp {interpret-failure*apply*complete-interpret-failure*clear*status
    (state <s> ^name interpret-failure)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-failure)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<s> ^failure <failure>)
    (<i*1> ^status <status>)
    (<status> ^failure <failure>)
    -->
    (<status> ^failure <failure> -)
}

sp {interpret-failure*propose*complete-interpret-failure
    (state <s> ^name interpret-failure)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-interpret-failure +)
}

sp {interpret-failure*elaborate*failure
    (state <s> ^name interpret-failure)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^failure <failure>)
    -->
    (<s> ^failure <failure> +)
}

sp {interpret-message*apply*interpret-unknown-word*store-smem-word*adjacent
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^word adjacent)
    (<o> ^name interpret-unknown-word)
    (<o> ^message <msg>)
    (<o> ^word <word>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    -->
    (<sc> ^store <w1> +)
    (<sc> ^store <spell> +)
    (<sc> ^store <next> +)
    (<sc> ^store <next-to1> +)
    (<w1> ^handle <word> +)
    (<spell> ^spelling <word> +)
    (<spell> ^structure-type P +)
    (<spell> ^converts-to PP +)
    (<spell> ^relation <w1> +)
    (<next> ^prior-word <word> +)
    (<next> ^current-word to +)
    (<next> ^spelling adjacent-to +)
    (<next> ^structure-type P +)
    (<next> ^relation <w1> +)
    (<next> ^assigners <next-to1> +)
    (<next> ^converts-to PP +)
    (<next-to1> ^structure-type DP +)
    (<next-to1> ^relative-position after +)
    (<next-to1> ^syntactic-structure head +)
    (<next-to1> ^required true +)
}

sp {interpret-message*apply*interpret-unknown-word*store-smem-word*husband
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-unknown-word)
    (<o> ^message <msg>)
    (<o> ^word { << passenger husband >> <w*1> })
    (<o> ^word <word>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    -->
    (<sc> ^store <w1> +)
    (<sc> ^store <spell> +)
    (<sc> ^store <p3> +)
    (<w1> ^handle <word> +)
    (<w1> ^property <p3> +)
    (<spell> ^spelling <word> +)
    (<spell> ^structure-type N +)
    (<spell> ^syntactic-referent-type ADJ +)
    (<spell> ^number singular +)
    (<spell> ^referent <w1> +)
    (<p3> ^handle property +)
    (<p3> ^type conceptual +)
}

sp {interpret-message*apply*interpret-unknown-word*store-smem-word
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> -^word adjacent)
    (<o> -^word passenger)
    (<o> -^word husband)
    (<o> ^name interpret-unknown-word)
    (<o> ^message <msg>)
    (<o> ^word <word>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    -->
    (<sc> ^store <w1> +)
    (<sc> ^store <spell> +)
    (<sc> ^store <p3> +)
    (<w1> ^handle <word> +)
    (<w1> ^property <p3> +)
    (<spell> ^spelling <word> +)
    (<spell> ^structure-type ADJ +)
    (<spell> ^referent <w1> +)
    (<p3> ^handle property +)
    (<p3> ^type visual +)
}

sp {interpret-message*apply*interpret-unknown-word*create*segment
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-unknown-word)
    (<o> ^message <msg>)
    (<o> ^word <word>)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    -->
    (<c> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type process-unknown-word +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^word <word> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^dialog-event <de> +)
    (<de> ^type process-unknown-word +)
    (<de> ^originator instructor +)
    (<dc> ^learning-predicate <lp> +)
    (<lp> ^name <word> +)
    (<s> ^mark-interpreted <msg> +)
    (<s> ^outgoing-message <out-msg> +)
    (<out-msg> ^type unknown-word +)
    (<out-msg> ^fields <f*1> +)
    (<f*1> ^word <word> +)
}

sp {interpret-message*apply*interpret-unknown-word*remove-new-unknown
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-unknown-word)
    (<o> ^message <msg>)
    (<o> ^word <word>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^new-unknown <word>)
    -->
    (<dc> ^new-unknown <word> -)
}

sp {interpret-message*prefer*interpret-unknown-word*adjacent
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> -^word adjacent)
    (<o> ^name interpret-unknown-word)
    (<s> ^operator <o2> +)
    (<o2> ^word adjacent)
    (<o2> ^name interpret-unknown-word)
    -->
    (<s> ^operator <o> > <o2>)
}

sp {interpret-message*prefer*interpret-unknown-word*alphabetic*ordering
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> -^word adjacent)
    (<o> ^name interpret-unknown-word)
    (<s> ^operator <o2> +)
    (<o2> ^name interpret-unknown-word)
    (<o2> ^word <w>)
    (<o> ^word { < <w> <word> })
    -->
    (<s> ^operator <o> > <o2>)
}

sp {interpret-message*propose*interpret-unknown-word
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> ^type unknown-word)
    (<msg> ^word <word>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<s> ^operator <o> =)
    (<o> ^name interpret-unknown-word +)
    (<o> ^word <word> +)
    (<o> ^message <msg> +)
}

sp {interpret-message*propose*interpret-game-state-change
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg>
          ^message-type { << init-risk init-8puzzle4 init-sokoban2 final-familycross final-blocksworld fail-tower3 init-blocksworld final-tower3 fail-fox fail-3mens init-i8puzzle init-8puzzle6 init-8puzzle6alt init-fox final-connect-4 final-frog3 second-breakthrough final-mahjong final-frog4 init-8puzzle5 second-mac second-tower5 init-pushmaze final-tictactoe second-frog second-tower3 third-mac final-tower5 fail-tower4 init-mahjong final-maze fail-risk init-frog second-frog4 final-othello init-connect-4 final-frog fail-sudoku4 fail-connect-3 init-frog3 fail-connect-4 second-frog3 final-sokoban init-sudoku4 init-tictactoe final-connect-3 final-peg init-frog4 init-i15puzzle fail-breakthrough final-pushmaze fail-othello final-fox init-peg final-mac init-3mens final-tower4 init-blocksworld2 fail-tower5 final-blocksworld2 init-tower5 fail-husbands init-5puzzle init-othello fail-fox2 final-i5puzzle init-sokoban init-15puzzle final-risk final-husbands final-8puzzle init-i5puzzle init-mac final-i15puzzle init-peg2 init-breakthrough init-8puzzle final-i8puzzle init-familycross final-breakthrough init-tower4 final-3mens init-tower3 fail-mac second-fox init-husbands init-connect-3 final-sudoku4 fail-tictactoe final-5puzzle init-maze second-tower4 >> <type> })
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-game-state-change +)
    (<o> ^type <type> +)
}

sp {dialog-event*apply*game-state-change-respond*second-tower4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type second-tower4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size tiny1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size small1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size medium1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^size large1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o7> +)
    (<in3> ^1 <o7> +)
    (<in3> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o2> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o6> +)
    (<in5> ^2 <o5> +)
    (<in6> ^1 <o7> +)
    (<in6> ^2 <o6> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o7> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in8> +)
    (<larger-than1> ^instance <in9> +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<larger-than1> ^instance <in18> +)
    (<larger-than1> ^instance <in19> +)
    (<larger-than1> ^instance <in20> +)
    (<larger-than1> ^instance <in21> +)
    (<larger-than1> ^instance <in22> +)
    (<larger-than1> ^instance <in23> +)
    (<larger-than1> ^instance <in24> +)
    (<larger-than1> ^instance <in25> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o4> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o5> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o3> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o1> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o6> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o7> +)
    (<in18> ^1 <o2> +)
    (<in18> ^2 <o7> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o7> +)
    (<in20> ^1 <o7> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o7> +)
    (<in21> ^2 <o5> +)
    (<in22> ^1 <o7> +)
    (<in22> ^2 <o4> +)
    (<in23> ^1 <o6> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o6> +)
    (<in24> ^2 <o4> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*init-maze
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-maze)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color black1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color black1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color black1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o13> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o14> +)
    (<in1> ^2 <o5> +)
    (<in2> ^1 <o15> +)
    (<in2> ^2 <o8> +)
    (<in3> ^1 <o16> +)
    (<in3> ^2 <o11> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o1> +)
    (<in4> ^2 <o13> +)
    (<in5> ^1 <o5> +)
    (<in5> ^2 <o14> +)
    (<in6> ^1 <o8> +)
    (<in6> ^2 <o15> +)
    (<in7> ^1 <o11> +)
    (<in7> ^2 <o16> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in8> +)
    (<near1> ^instance <in9> +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<near1> ^instance <in56> +)
    (<near1> ^instance <in57> +)
    (<near1> ^instance <in58> +)
    (<near1> ^instance <in59> +)
    (<near1> ^instance <in60> +)
    (<near1> ^instance <in61> +)
    (<near1> ^instance <in62> +)
    (<near1> ^instance <in63> +)
    (<near1> ^instance <in64> +)
    (<near1> ^instance <in65> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o2> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o4> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o5> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o1> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o3> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o4> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o5> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o6> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o3> +)
    (<in17> ^2 <o5> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o6> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o4> +)
    (<in20> ^2 <o2> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o5> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o7> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o8> +)
    (<in24> ^1 <o5> +)
    (<in24> ^2 <o1> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o2> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o3> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o6> +)
    (<in29> ^1 <o5> +)
    (<in29> ^2 <o7> +)
    (<in30> ^1 <o5> +)
    (<in30> ^2 <o8> +)
    (<in31> ^1 <o5> +)
    (<in31> ^2 <o9> +)
    (<in32> ^1 <o6> +)
    (<in32> ^2 <o2> +)
    (<in33> ^1 <o6> +)
    (<in33> ^2 <o3> +)
    (<in34> ^1 <o6> +)
    (<in34> ^2 <o5> +)
    (<in35> ^1 <o6> +)
    (<in35> ^2 <o8> +)
    (<in36> ^1 <o6> +)
    (<in36> ^2 <o9> +)
    (<in37> ^1 <o7> +)
    (<in37> ^2 <o4> +)
    (<in38> ^1 <o7> +)
    (<in38> ^2 <o5> +)
    (<in39> ^1 <o7> +)
    (<in39> ^2 <o8> +)
    (<in40> ^1 <o8> +)
    (<in40> ^2 <o7> +)
    (<in41> ^1 <o8> +)
    (<in41> ^2 <o4> +)
    (<in42> ^1 <o8> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o8> +)
    (<in43> ^2 <o6> +)
    (<in44> ^1 <o8> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o9> +)
    (<in45> ^2 <o8> +)
    (<in46> ^1 <o9> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o9> +)
    (<in47> ^2 <o6> +)
    (<in48> ^1 <o3> +)
    (<in48> ^2 <o10> +)
    (<in49> ^1 <o3> +)
    (<in49> ^2 <o11> +)
    (<in50> ^1 <o6> +)
    (<in50> ^2 <o10> +)
    (<in51> ^1 <o6> +)
    (<in51> ^2 <o11> +)
    (<in52> ^1 <o6> +)
    (<in52> ^2 <o12> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o11> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o12> +)
    (<in55> ^1 <o10> +)
    (<in55> ^2 <o3> +)
    (<in56> ^1 <o10> +)
    (<in56> ^2 <o6> +)
    (<in57> ^1 <o10> +)
    (<in57> ^2 <o11> +)
    (<in58> ^1 <o11> +)
    (<in58> ^2 <o10> +)
    (<in59> ^1 <o11> +)
    (<in59> ^2 <o3> +)
    (<in60> ^1 <o11> +)
    (<in60> ^2 <o6> +)
    (<in61> ^1 <o11> +)
    (<in61> ^2 <o9> +)
    (<in62> ^1 <o11> +)
    (<in62> ^2 <o12> +)
    (<in63> ^1 <o12> +)
    (<in63> ^2 <o11> +)
    (<in64> ^1 <o12> +)
    (<in64> ^2 <o6> +)
    (<in65> ^1 <o12> +)
    (<in65> ^2 <o9> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<diagonal-with1> ^instance <in72> +)
    (<diagonal-with1> ^instance <in73> +)
    (<diagonal-with1> ^instance <in74> +)
    (<diagonal-with1> ^instance <in75> +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<diagonal-with1> ^instance <in88> +)
    (<diagonal-with1> ^instance <in89> +)
    (<in66> ^1 <o1> +)
    (<in66> ^2 <o5> +)
    (<in67> ^1 <o2> +)
    (<in67> ^2 <o4> +)
    (<in68> ^1 <o2> +)
    (<in68> ^2 <o6> +)
    (<in69> ^1 <o3> +)
    (<in69> ^2 <o5> +)
    (<in70> ^1 <o4> +)
    (<in70> ^2 <o2> +)
    (<in71> ^1 <o4> +)
    (<in71> ^2 <o8> +)
    (<in72> ^1 <o5> +)
    (<in72> ^2 <o1> +)
    (<in73> ^1 <o5> +)
    (<in73> ^2 <o3> +)
    (<in74> ^1 <o5> +)
    (<in74> ^2 <o7> +)
    (<in75> ^1 <o5> +)
    (<in75> ^2 <o9> +)
    (<in76> ^1 <o6> +)
    (<in76> ^2 <o2> +)
    (<in77> ^1 <o6> +)
    (<in77> ^2 <o8> +)
    (<in78> ^1 <o7> +)
    (<in78> ^2 <o5> +)
    (<in79> ^1 <o8> +)
    (<in79> ^2 <o4> +)
    (<in80> ^1 <o8> +)
    (<in80> ^2 <o6> +)
    (<in81> ^1 <o9> +)
    (<in81> ^2 <o5> +)
    (<in82> ^1 <o3> +)
    (<in82> ^2 <o11> +)
    (<in83> ^1 <o11> +)
    (<in83> ^2 <o3> +)
    (<in84> ^1 <o6> +)
    (<in84> ^2 <o10> +)
    (<in85> ^1 <o10> +)
    (<in85> ^2 <o6> +)
    (<in86> ^1 <o9> +)
    (<in86> ^2 <o11> +)
    (<in87> ^1 <o11> +)
    (<in87> ^2 <o9> +)
    (<in88> ^1 <o12> +)
    (<in88> ^2 <o6> +)
    (<in89> ^1 <o6> +)
    (<in89> ^2 <o12> +)
}

sp {dialog-event*apply*game-state-change-respond*final-5puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-5puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color orange1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^color red1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color orange1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color yellow1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color green1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o7> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o8> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o9> +)
    (<in2> ^2 <o4> +)
    (<in3> ^1 <o10> +)
    (<in3> ^2 <o5> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o6> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o4> +)
    (<in7> ^2 <o9> +)
    (<in8> ^1 <o5> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o6> +)
    (<in9> ^2 <o11> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o2> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o1> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o4> +)
    (<in16> ^1 <o2> +)
    (<in16> ^2 <o5> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o3> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o1> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o2> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o5> +)
    (<in24> ^2 <o1> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o2> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o3> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o6> +)
    (<in29> ^1 <o6> +)
    (<in29> ^2 <o2> +)
    (<in30> ^1 <o6> +)
    (<in30> ^2 <o3> +)
    (<in31> ^1 <o6> +)
    (<in31> ^2 <o5> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in32> +)
    (<diagonal-with1> ^instance <in33> +)
    (<diagonal-with1> ^instance <in34> +)
    (<diagonal-with1> ^instance <in35> +)
    (<diagonal-with1> ^instance <in36> +)
    (<diagonal-with1> ^instance <in37> +)
    (<diagonal-with1> ^instance <in38> +)
    (<diagonal-with1> ^instance <in39> +)
    (<in32> ^1 <o1> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o2> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o2> +)
    (<in34> ^2 <o6> +)
    (<in35> ^1 <o3> +)
    (<in35> ^2 <o5> +)
    (<in36> ^1 <o4> +)
    (<in36> ^2 <o2> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o1> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o3> +)
    (<in39> ^1 <o6> +)
    (<in39> ^2 <o2> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-tictactoe
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-tictactoe)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o13> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o14> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o15> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o10> +)
    (<in3> ^2 <o11> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o12> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o13> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o14> +)
    (<in7> ^1 <o3> +)
    (<in7> ^2 <o15> +)
    (<in8> ^1 <o11> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o12> +)
    (<in9> ^2 <o11> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in10> +)
    (<linear> ^instance <in11> +)
    (<linear> ^instance <in12> +)
    (<linear> ^instance <in13> +)
    (<linear> ^instance <in14> +)
    (<linear> ^instance <in15> +)
    (<linear> ^instance <in16> +)
    (<linear> ^instance <in17> +)
    (<in10> ^1 <set10> +)
    (<set10> ^object <o1> +)
    (<set10> ^object <o2> +)
    (<set10> ^object <o3> +)
    (<in11> ^1 <set11> +)
    (<set11> ^object <o1> +)
    (<set11> ^object <o5> +)
    (<set11> ^object <o9> +)
    (<in12> ^1 <set12> +)
    (<set12> ^object <o1> +)
    (<set12> ^object <o4> +)
    (<set12> ^object <o7> +)
    (<in13> ^1 <set13> +)
    (<set13> ^object <o4> +)
    (<set13> ^object <o5> +)
    (<set13> ^object <o6> +)
    (<in14> ^1 <set14> +)
    (<set14> ^object <o7> +)
    (<set14> ^object <o8> +)
    (<set14> ^object <o9> +)
    (<in15> ^1 <set15> +)
    (<set15> ^object <o2> +)
    (<set15> ^object <o5> +)
    (<set15> ^object <o8> +)
    (<in16> ^1 <set16> +)
    (<set16> ^object <o3> +)
    (<set16> ^object <o6> +)
    (<set16> ^object <o9> +)
    (<in17> ^1 <set17> +)
    (<set17> ^object <o3> +)
    (<set17> ^object <o5> +)
    (<set17> ^object <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*final-sudoku4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-sudoku4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<pr0> ^value 3 +)
    (<pr0> ^sub-grid 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<pr1> ^value 1 +)
    (<pr1> ^sub-grid 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<pr2> ^value 2 +)
    (<pr2> ^sub-grid 2 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 4 +)
    (<pr3> ^y 1 +)
    (<pr3> ^value 4 +)
    (<pr3> ^sub-grid 2 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 1 +)
    (<pr4> ^y 2 +)
    (<pr4> ^value 4 +)
    (<pr4> ^sub-grid 1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 2 +)
    (<pr5> ^y 2 +)
    (<pr5> ^value 2 +)
    (<pr5> ^sub-grid 1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 3 +)
    (<pr6> ^y 2 +)
    (<pr6> ^value 1 +)
    (<pr6> ^sub-grid 2 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 4 +)
    (<pr7> ^y 2 +)
    (<pr7> ^value 3 +)
    (<pr7> ^sub-grid 2 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 1 +)
    (<pr8> ^y 3 +)
    (<pr8> ^value 1 +)
    (<pr8> ^sub-grid 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 2 +)
    (<pr9> ^y 3 +)
    (<pr9> ^value 3 +)
    (<pr9> ^sub-grid 3 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 3 +)
    (<pr10> ^y 3 +)
    (<pr10> ^value 4 +)
    (<pr10> ^sub-grid 4 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 4 +)
    (<pr11> ^y 3 +)
    (<pr11> ^value 2 +)
    (<pr11> ^sub-grid 4 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^x 1 +)
    (<pr12> ^y 4 +)
    (<pr12> ^value 2 +)
    (<pr12> ^sub-grid 3 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^x 2 +)
    (<pr13> ^y 4 +)
    (<pr13> ^value 4 +)
    (<pr13> ^sub-grid 3 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^x 3 +)
    (<pr14> ^y 4 +)
    (<pr14> ^value 3 +)
    (<pr14> ^sub-grid 4 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^x 4 +)
    (<pr15> ^y 4 +)
    (<pr15> ^value 1 +)
    (<pr15> ^sub-grid 4 +)
}

sp {dialog-event*apply*game-state-change-respond*init-connect-3
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-connect-3)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<objs> ^object <o26> +)
    (<objs> ^object <o27> +)
    (<objs> ^object <o28> +)
    (<objs> ^object <o29> +)
    (<objs> ^object <o30> +)
    (<objs> ^object <o31> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <above1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-9 +)
    (<o21> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-10 +)
    (<o22> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-11 +)
    (<o23> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-12 +)
    (<o24> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-13 +)
    (<o25> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<o26> ^item-type object +)
    (<o26> ^handle object-14 +)
    (<o26> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<o27> ^item-type object +)
    (<o27> ^handle object-15 +)
    (<o27> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<o28> ^item-type object +)
    (<o28> ^handle object-16 +)
    (<o28> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category location +)
    (<o29> ^item-type object +)
    (<o29> ^handle object-17 +)
    (<o29> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category location +)
    (<o30> ^item-type object +)
    (<o30> ^handle object-18 +)
    (<o30> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category location +)
    (<o31> ^item-type object +)
    (<o31> ^handle object-19 +)
    (<o31> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-20 +)
    (<o10> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-21 +)
    (<o11> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-22 +)
    (<o12> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-23 +)
    (<o13> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-24 +)
    (<o14> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category block +)
    (<pr24> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-25 +)
    (<o15> ^predicates <pr25> +)
    (<pr25> ^visible true +)
    (<pr25> ^category block +)
    (<pr25> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o11> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o12> +)
    (<in2> ^1 <o13> +)
    (<in2> ^2 <o14> +)
    (<in3> ^1 <o14> +)
    (<in3> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o10> +)
    (<in5> ^1 <o12> +)
    (<in5> ^2 <o11> +)
    (<in6> ^1 <o14> +)
    (<in6> ^2 <o13> +)
    (<in7> ^1 <o15> +)
    (<in7> ^2 <o14> +)
    (<above1> ^item-type predicate +)
    (<above1> ^handle above1 +)
    (<above1> ^instance <in8> +)
    (<above1> ^instance <in9> +)
    (<above1> ^instance <in10> +)
    (<above1> ^instance <in11> +)
    (<above1> ^instance <in12> +)
    (<above1> ^instance <in13> +)
    (<above1> ^instance <in14> +)
    (<above1> ^instance <in15> +)
    (<above1> ^instance <in16> +)
    (<above1> ^instance <in17> +)
    (<above1> ^instance <in18> +)
    (<above1> ^instance <in19> +)
    (<above1> ^instance <in20> +)
    (<above1> ^instance <in21> +)
    (<above1> ^instance <in22> +)
    (<in8> ^1 <o7> +)
    (<in8> ^2 <o27> +)
    (<in9> ^1 <o4> +)
    (<in9> ^2 <o7> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o8> +)
    (<in11> ^2 <o28> +)
    (<in12> ^1 <o5> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o6> +)
    (<in15> ^2 <o9> +)
    (<in16> ^1 <o9> +)
    (<in16> ^2 <o29> +)
    (<in17> ^1 <o21> +)
    (<in17> ^2 <o23> +)
    (<in18> ^1 <o23> +)
    (<in18> ^2 <o25> +)
    (<in19> ^1 <o25> +)
    (<in19> ^2 <o30> +)
    (<in20> ^1 <o22> +)
    (<in20> ^2 <o24> +)
    (<in21> ^1 <o24> +)
    (<in21> ^2 <o26> +)
    (<in22> ^1 <o26> +)
    (<in22> ^2 <o31> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in23> +)
    (<linear> ^instance <in24> +)
    (<linear> ^instance <in25> +)
    (<linear> ^instance <in26> +)
    (<linear> ^instance <in27> +)
    (<linear> ^instance <in28> +)
    (<linear> ^instance <in29> +)
    (<linear> ^instance <in30> +)
    (<linear> ^instance <in31> +)
    (<linear> ^instance <in32> +)
    (<linear> ^instance <in33> +)
    (<linear> ^instance <in34> +)
    (<linear> ^instance <in35> +)
    (<linear> ^instance <in36> +)
    (<linear> ^instance <in37> +)
    (<linear> ^instance <in38> +)
    (<linear> ^instance <in39> +)
    (<linear> ^instance <in40> +)
    (<linear> ^instance <in41> +)
    (<linear> ^instance <in42> +)
    (<linear> ^instance <in43> +)
    (<linear> ^instance <in44> +)
    (<linear> ^instance <in45> +)
    (<linear> ^instance <in46> +)
    (<linear> ^instance <in47> +)
    (<linear> ^instance <in48> +)
    (<linear> ^instance <in49> +)
    (<linear> ^instance <in50> +)
    (<linear> ^instance <in51> +)
    (<linear> ^instance <in52> +)
    (<linear> ^instance <in53> +)
    (<linear> ^instance <in54> +)
    (<linear> ^instance <in55> +)
    (<linear> ^instance <in56> +)
    (<linear> ^instance <in57> +)
    (<in23> ^1 <set23> +)
    (<set23> ^object <o1> +)
    (<set23> ^object <o2> +)
    (<set23> ^object <o3> +)
    (<in24> ^1 <set24> +)
    (<set24> ^object <o1> +)
    (<set24> ^object <o5> +)
    (<set24> ^object <o9> +)
    (<in25> ^1 <set25> +)
    (<set25> ^object <o1> +)
    (<set25> ^object <o4> +)
    (<set25> ^object <o7> +)
    (<in26> ^1 <set26> +)
    (<set26> ^object <o4> +)
    (<set26> ^object <o5> +)
    (<set26> ^object <o6> +)
    (<in27> ^1 <set27> +)
    (<set27> ^object <o7> +)
    (<set27> ^object <o8> +)
    (<set27> ^object <o9> +)
    (<in28> ^1 <set28> +)
    (<set28> ^object <o2> +)
    (<set28> ^object <o5> +)
    (<set28> ^object <o8> +)
    (<in29> ^1 <set29> +)
    (<set29> ^object <o3> +)
    (<set29> ^object <o6> +)
    (<set29> ^object <o9> +)
    (<in30> ^1 <set30> +)
    (<set30> ^object <o3> +)
    (<set30> ^object <o5> +)
    (<set30> ^object <o7> +)
    (<in31> ^1 <set31> +)
    (<set31> ^object <o3> +)
    (<set31> ^object <o21> +)
    (<set31> ^object <o22> +)
    (<in32> ^1 <set32> +)
    (<set32> ^object <o6> +)
    (<set32> ^object <o23> +)
    (<set32> ^object <o24> +)
    (<in33> ^1 <set33> +)
    (<set33> ^object <o9> +)
    (<set33> ^object <o25> +)
    (<set33> ^object <o26> +)
    (<in34> ^1 <set34> +)
    (<set34> ^object <o29> +)
    (<set34> ^object <o30> +)
    (<set34> ^object <o31> +)
    (<in35> ^1 <set35> +)
    (<set35> ^object <o27> +)
    (<set35> ^object <o28> +)
    (<set35> ^object <o29> +)
    (<in36> ^1 <set36> +)
    (<set36> ^object <o2> +)
    (<set36> ^object <o3> +)
    (<set36> ^object <o21> +)
    (<in37> ^1 <set37> +)
    (<set37> ^object <o5> +)
    (<set37> ^object <o6> +)
    (<set37> ^object <o23> +)
    (<in38> ^1 <set38> +)
    (<set38> ^object <o8> +)
    (<set38> ^object <o9> +)
    (<set38> ^object <o25> +)
    (<in39> ^1 <set39> +)
    (<set39> ^object <o28> +)
    (<set39> ^object <o29> +)
    (<set39> ^object <o30> +)
    (<in40> ^1 <set40> +)
    (<set40> ^object <o21> +)
    (<set40> ^object <o23> +)
    (<set40> ^object <o25> +)
    (<in41> ^1 <set41> +)
    (<set41> ^object <o22> +)
    (<set41> ^object <o24> +)
    (<set41> ^object <o26> +)
    (<in42> ^1 <set42> +)
    (<set42> ^object <o4> +)
    (<set42> ^object <o7> +)
    (<set42> ^object <o27> +)
    (<in43> ^1 <set43> +)
    (<set43> ^object <o5> +)
    (<set43> ^object <o8> +)
    (<set43> ^object <o28> +)
    (<in44> ^1 <set44> +)
    (<set44> ^object <o6> +)
    (<set44> ^object <o9> +)
    (<set44> ^object <o29> +)
    (<in45> ^1 <set45> +)
    (<set45> ^object <o23> +)
    (<set45> ^object <o25> +)
    (<set45> ^object <o30> +)
    (<in46> ^1 <set46> +)
    (<set46> ^object <o24> +)
    (<set46> ^object <o26> +)
    (<set46> ^object <o31> +)
    (<in47> ^1 <set47> +)
    (<set47> ^object <o4> +)
    (<set47> ^object <o8> +)
    (<set47> ^object <o29> +)
    (<in48> ^1 <set48> +)
    (<set48> ^object <o5> +)
    (<set48> ^object <o9> +)
    (<set48> ^object <o30> +)
    (<in49> ^1 <set49> +)
    (<set49> ^object <o6> +)
    (<set49> ^object <o25> +)
    (<set49> ^object <o31> +)
    (<in50> ^1 <set50> +)
    (<set50> ^object <o2> +)
    (<set50> ^object <o6> +)
    (<set50> ^object <o25> +)
    (<in51> ^1 <set51> +)
    (<set51> ^object <o3> +)
    (<set51> ^object <o23> +)
    (<set51> ^object <o25> +)
    (<in52> ^1 <set52> +)
    (<set52> ^object <o24> +)
    (<set52> ^object <o25> +)
    (<set52> ^object <o29> +)
    (<in53> ^1 <set53> +)
    (<set53> ^object <o23> +)
    (<set53> ^object <o9> +)
    (<set53> ^object <o28> +)
    (<in54> ^1 <set54> +)
    (<set54> ^object <o6> +)
    (<set54> ^object <o8> +)
    (<set54> ^object <o27> +)
    (<in55> ^1 <set55> +)
    (<set55> ^object <o22> +)
    (<set55> ^object <o23> +)
    (<set55> ^object <o9> +)
    (<in56> ^1 <set56> +)
    (<set56> ^object <o21> +)
    (<set56> ^object <o6> +)
    (<set56> ^object <o8> +)
    (<in57> ^1 <set57> +)
    (<set57> ^object <o3> +)
    (<set57> ^object <o5> +)
    (<set57> ^object <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*init-husbands
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-husbands)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^shape woman1 +)
    (<pr2> ^last-name smith1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^shape woman1 +)
    (<pr3> ^last-name bale1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^shape woman1 +)
    (<pr4> ^last-name rogers1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape man1 +)
    (<pr5> ^last-name smith1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^shape man1 +)
    (<pr6> ^last-name bale1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^shape man1 +)
    (<pr7> ^last-name rogers1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o1> +)
    (<in4> ^1 <o7> +)
    (<in4> ^2 <o1> +)
    (<in5> ^1 <o8> +)
    (<in5> ^2 <o1> +)
    (<in6> ^1 <o9> +)
    (<in6> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o3> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o6> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o7> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o1> +)
    (<in13> ^2 <o9> +)
}

sp {dialog-event*apply*game-state-change-respond*second-fox
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type second-fox)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o6> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o3> +)
    (<in3> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o6> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o5> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o6> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o3> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-mac
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-mac)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^shape missionary1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^shape missionary1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^shape missionary1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape cannibal1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^shape cannibal1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^shape cannibal1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o9> +)
    (<in4> ^1 <o7> +)
    (<in4> ^2 <o1> +)
    (<in5> ^1 <o8> +)
    (<in5> ^2 <o1> +)
    (<in6> ^1 <o9> +)
    (<in6> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o3> +)
    (<in8> ^1 <o2> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o9> +)
    (<in10> ^2 <o6> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o7> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o1> +)
    (<in13> ^2 <o9> +)
}

sp {dialog-event*apply*game-state-change-respond*init-tower3
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-tower3)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size small1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size medium1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size large1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o5> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o5> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o6> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o6> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in6> +)
    (<larger-than1> ^instance <in7> +)
    (<larger-than1> ^instance <in8> +)
    (<larger-than1> ^instance <in9> +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o4> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o4> +)
    (<in8> ^1 <o3> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o5> +)
    (<in11> ^1 <o3> +)
    (<in11> ^2 <o5> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o6> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o6> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o6> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o6> +)
    (<in16> ^2 <o4> +)
    (<in17> ^1 <o5> +)
    (<in17> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*final-3mens
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-3mens)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o14> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o10> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o11> +)
    (<in7> ^1 <o3> +)
    (<in7> ^2 <o12> +)
    (<in8> ^1 <o14> +)
    (<in8> ^2 <o13> +)
    (<in9> ^1 <o15> +)
    (<in9> ^2 <o14> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o2> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o1> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o4> +)
    (<in16> ^1 <o2> +)
    (<in16> ^2 <o5> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o3> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o1> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o2> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o4> +)
    (<in24> ^2 <o7> +)
    (<in25> ^1 <o4> +)
    (<in25> ^2 <o8> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o1> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o2> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o3> +)
    (<in29> ^1 <o5> +)
    (<in29> ^2 <o4> +)
    (<in30> ^1 <o5> +)
    (<in30> ^2 <o6> +)
    (<in31> ^1 <o5> +)
    (<in31> ^2 <o7> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o8> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o9> +)
    (<in34> ^1 <o6> +)
    (<in34> ^2 <o2> +)
    (<in35> ^1 <o6> +)
    (<in35> ^2 <o3> +)
    (<in36> ^1 <o6> +)
    (<in36> ^2 <o5> +)
    (<in37> ^1 <o6> +)
    (<in37> ^2 <o8> +)
    (<in38> ^1 <o6> +)
    (<in38> ^2 <o9> +)
    (<in39> ^1 <o7> +)
    (<in39> ^2 <o4> +)
    (<in40> ^1 <o7> +)
    (<in40> ^2 <o5> +)
    (<in41> ^1 <o7> +)
    (<in41> ^2 <o8> +)
    (<in42> ^1 <o8> +)
    (<in42> ^2 <o7> +)
    (<in43> ^1 <o8> +)
    (<in43> ^2 <o4> +)
    (<in44> ^1 <o8> +)
    (<in44> ^2 <o5> +)
    (<in45> ^1 <o8> +)
    (<in45> ^2 <o6> +)
    (<in46> ^1 <o8> +)
    (<in46> ^2 <o9> +)
    (<in47> ^1 <o9> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o9> +)
    (<in48> ^2 <o5> +)
    (<in49> ^1 <o9> +)
    (<in49> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in50> +)
    (<diagonal-with1> ^instance <in51> +)
    (<diagonal-with1> ^instance <in52> +)
    (<diagonal-with1> ^instance <in53> +)
    (<diagonal-with1> ^instance <in54> +)
    (<diagonal-with1> ^instance <in55> +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<in50> ^1 <o1> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o2> +)
    (<in51> ^2 <o4> +)
    (<in52> ^1 <o2> +)
    (<in52> ^2 <o6> +)
    (<in53> ^1 <o3> +)
    (<in53> ^2 <o5> +)
    (<in54> ^1 <o4> +)
    (<in54> ^2 <o2> +)
    (<in55> ^1 <o4> +)
    (<in55> ^2 <o8> +)
    (<in56> ^1 <o5> +)
    (<in56> ^2 <o1> +)
    (<in57> ^1 <o5> +)
    (<in57> ^2 <o3> +)
    (<in58> ^1 <o5> +)
    (<in58> ^2 <o7> +)
    (<in59> ^1 <o5> +)
    (<in59> ^2 <o9> +)
    (<in60> ^1 <o6> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o6> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o7> +)
    (<in62> ^2 <o5> +)
    (<in63> ^1 <o8> +)
    (<in63> ^2 <o4> +)
    (<in64> ^1 <o8> +)
    (<in64> ^2 <o6> +)
    (<in65> ^1 <o9> +)
    (<in65> ^2 <o5> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in66> +)
    (<linear> ^instance <in67> +)
    (<linear> ^instance <in68> +)
    (<linear> ^instance <in69> +)
    (<linear> ^instance <in70> +)
    (<linear> ^instance <in71> +)
    (<linear> ^instance <in72> +)
    (<linear> ^instance <in73> +)
    (<in66> ^1 <set66> +)
    (<set66> ^object <o1> +)
    (<set66> ^object <o2> +)
    (<set66> ^object <o3> +)
    (<in67> ^1 <set67> +)
    (<set67> ^object <o1> +)
    (<set67> ^object <o5> +)
    (<set67> ^object <o9> +)
    (<in68> ^1 <set68> +)
    (<set68> ^object <o1> +)
    (<set68> ^object <o4> +)
    (<set68> ^object <o7> +)
    (<in69> ^1 <set69> +)
    (<set69> ^object <o4> +)
    (<set69> ^object <o5> +)
    (<set69> ^object <o6> +)
    (<in70> ^1 <set70> +)
    (<set70> ^object <o7> +)
    (<set70> ^object <o8> +)
    (<set70> ^object <o9> +)
    (<in71> ^1 <set71> +)
    (<set71> ^object <o2> +)
    (<set71> ^object <o5> +)
    (<set71> ^object <o8> +)
    (<in72> ^1 <set72> +)
    (<set72> ^object <o3> +)
    (<set72> ^object <o6> +)
    (<set72> ^object <o9> +)
    (<in73> ^1 <set73> +)
    (<set73> ^object <o3> +)
    (<set73> ^object <o5> +)
    (<set73> ^object <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*init-tower4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-tower4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size tiny1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size small1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size medium1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^size large1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o5> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o7> +)
    (<in3> ^1 <o7> +)
    (<in3> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o5> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o6> +)
    (<in5> ^2 <o5> +)
    (<in6> ^1 <o7> +)
    (<in6> ^2 <o6> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o7> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in8> +)
    (<larger-than1> ^instance <in9> +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<larger-than1> ^instance <in18> +)
    (<larger-than1> ^instance <in19> +)
    (<larger-than1> ^instance <in20> +)
    (<larger-than1> ^instance <in21> +)
    (<larger-than1> ^instance <in22> +)
    (<larger-than1> ^instance <in23> +)
    (<larger-than1> ^instance <in24> +)
    (<larger-than1> ^instance <in25> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o4> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o5> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o3> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o1> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o6> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o7> +)
    (<in18> ^1 <o2> +)
    (<in18> ^2 <o7> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o7> +)
    (<in20> ^1 <o7> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o7> +)
    (<in21> ^2 <o5> +)
    (<in22> ^1 <o7> +)
    (<in22> ^2 <o4> +)
    (<in23> ^1 <o6> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o6> +)
    (<in24> ^2 <o4> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*final-breakthrough
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-breakthrough)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <above1> +)
    (<preds> ^predicate <under1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color blue1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color blue1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^color red1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^color red1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^color red1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^color red1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color red1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<pr17> ^color red1 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<pr18> ^color red1 +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category block +)
    (<pr19> ^color red1 +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-20 +)
    (<o21> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color blue1 +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-21 +)
    (<o22> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color blue1 +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-22 +)
    (<o23> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color blue1 +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-23 +)
    (<o24> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color blue1 +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-24 +)
    (<o25> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category location +)
    (<pr24> ^name garbage +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o13> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o20> +)
    (<in3> ^2 <o10> +)
    (<in4> ^1 <o21> +)
    (<in4> ^2 <o25> +)
    (<in5> ^1 <o22> +)
    (<in5> ^2 <o14> +)
    (<in6> ^1 <o23> +)
    (<in6> ^2 <o15> +)
    (<in7> ^1 <o24> +)
    (<in7> ^2 <o16> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o13> +)
    (<in8> ^2 <o17> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o18> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o19> +)
    (<in11> ^1 <o10> +)
    (<in11> ^2 <o20> +)
    (<in12> ^1 <o25> +)
    (<in12> ^2 <o21> +)
    (<in13> ^1 <o14> +)
    (<in13> ^2 <o22> +)
    (<in14> ^1 <o15> +)
    (<in14> ^2 <o23> +)
    (<in15> ^1 <o16> +)
    (<in15> ^2 <o24> +)
    (<above1> ^item-type predicate +)
    (<above1> ^handle above1 +)
    (<above1> ^instance <in16> +)
    (<above1> ^instance <in17> +)
    (<above1> ^instance <in18> +)
    (<above1> ^instance <in19> +)
    (<above1> ^instance <in20> +)
    (<above1> ^instance <in21> +)
    (<above1> ^instance <in22> +)
    (<above1> ^instance <in23> +)
    (<above1> ^instance <in24> +)
    (<above1> ^instance <in25> +)
    (<above1> ^instance <in26> +)
    (<above1> ^instance <in27> +)
    (<above1> ^instance <in28> +)
    (<above1> ^instance <in29> +)
    (<above1> ^instance <in30> +)
    (<above1> ^instance <in31> +)
    (<above1> ^instance <in32> +)
    (<above1> ^instance <in33> +)
    (<above1> ^instance <in34> +)
    (<above1> ^instance <in35> +)
    (<above1> ^instance <in36> +)
    (<above1> ^instance <in37> +)
    (<above1> ^instance <in38> +)
    (<above1> ^instance <in39> +)
    (<above1> ^instance <in40> +)
    (<above1> ^instance <in41> +)
    (<above1> ^instance <in42> +)
    (<above1> ^instance <in43> +)
    (<above1> ^instance <in44> +)
    (<above1> ^instance <in45> +)
    (<in16> ^1 <o13> +)
    (<in16> ^2 <o7> +)
    (<in17> ^1 <o14> +)
    (<in17> ^2 <o7> +)
    (<in18> ^1 <o13> +)
    (<in18> ^2 <o8> +)
    (<in19> ^1 <o14> +)
    (<in19> ^2 <o8> +)
    (<in20> ^1 <o15> +)
    (<in20> ^2 <o8> +)
    (<in21> ^1 <o14> +)
    (<in21> ^2 <o9> +)
    (<in22> ^1 <o15> +)
    (<in22> ^2 <o9> +)
    (<in23> ^1 <o16> +)
    (<in23> ^2 <o9> +)
    (<in24> ^1 <o15> +)
    (<in24> ^2 <o12> +)
    (<in25> ^1 <o16> +)
    (<in25> ^2 <o12> +)
    (<in26> ^1 <o7> +)
    (<in26> ^2 <o4> +)
    (<in27> ^1 <o8> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o7> +)
    (<in28> ^2 <o5> +)
    (<in29> ^1 <o8> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o9> +)
    (<in30> ^2 <o5> +)
    (<in31> ^1 <o8> +)
    (<in31> ^2 <o6> +)
    (<in32> ^1 <o9> +)
    (<in32> ^2 <o6> +)
    (<in33> ^1 <o12> +)
    (<in33> ^2 <o6> +)
    (<in34> ^1 <o9> +)
    (<in34> ^2 <o11> +)
    (<in35> ^1 <o12> +)
    (<in35> ^2 <o11> +)
    (<in36> ^1 <o4> +)
    (<in36> ^2 <o1> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o1> +)
    (<in38> ^1 <o4> +)
    (<in38> ^2 <o2> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o2> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o5> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o3> +)
    (<in43> ^1 <o11> +)
    (<in43> ^2 <o3> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o10> +)
    (<in45> ^1 <o11> +)
    (<in45> ^2 <o10> +)
    (<under1> ^item-type predicate +)
    (<under1> ^handle under1 +)
    (<under1> ^instance <in46> +)
    (<under1> ^instance <in47> +)
    (<under1> ^instance <in48> +)
    (<under1> ^instance <in49> +)
    (<under1> ^instance <in50> +)
    (<under1> ^instance <in51> +)
    (<under1> ^instance <in52> +)
    (<under1> ^instance <in53> +)
    (<under1> ^instance <in54> +)
    (<under1> ^instance <in55> +)
    (<under1> ^instance <in56> +)
    (<under1> ^instance <in57> +)
    (<under1> ^instance <in58> +)
    (<under1> ^instance <in59> +)
    (<under1> ^instance <in60> +)
    (<under1> ^instance <in61> +)
    (<under1> ^instance <in62> +)
    (<under1> ^instance <in63> +)
    (<under1> ^instance <in64> +)
    (<under1> ^instance <in65> +)
    (<under1> ^instance <in66> +)
    (<under1> ^instance <in67> +)
    (<under1> ^instance <in68> +)
    (<under1> ^instance <in69> +)
    (<under1> ^instance <in70> +)
    (<under1> ^instance <in71> +)
    (<under1> ^instance <in72> +)
    (<under1> ^instance <in73> +)
    (<under1> ^instance <in74> +)
    (<under1> ^instance <in75> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o13> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o14> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o13> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o14> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o15> +)
    (<in51> ^1 <o9> +)
    (<in51> ^2 <o14> +)
    (<in52> ^1 <o9> +)
    (<in52> ^2 <o15> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o16> +)
    (<in54> ^1 <o12> +)
    (<in54> ^2 <o15> +)
    (<in55> ^1 <o12> +)
    (<in55> ^2 <o16> +)
    (<in56> ^1 <o4> +)
    (<in56> ^2 <o7> +)
    (<in57> ^1 <o4> +)
    (<in57> ^2 <o8> +)
    (<in58> ^1 <o5> +)
    (<in58> ^2 <o7> +)
    (<in59> ^1 <o5> +)
    (<in59> ^2 <o8> +)
    (<in60> ^1 <o5> +)
    (<in60> ^2 <o9> +)
    (<in61> ^1 <o6> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o6> +)
    (<in62> ^2 <o9> +)
    (<in63> ^1 <o6> +)
    (<in63> ^2 <o12> +)
    (<in64> ^1 <o11> +)
    (<in64> ^2 <o9> +)
    (<in65> ^1 <o11> +)
    (<in65> ^2 <o12> +)
    (<in66> ^1 <o1> +)
    (<in66> ^2 <o4> +)
    (<in67> ^1 <o1> +)
    (<in67> ^2 <o5> +)
    (<in68> ^1 <o2> +)
    (<in68> ^2 <o4> +)
    (<in69> ^1 <o2> +)
    (<in69> ^2 <o5> +)
    (<in70> ^1 <o2> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o3> +)
    (<in71> ^2 <o5> +)
    (<in72> ^1 <o3> +)
    (<in72> ^2 <o6> +)
    (<in73> ^1 <o3> +)
    (<in73> ^2 <o11> +)
    (<in74> ^1 <o10> +)
    (<in74> ^2 <o6> +)
    (<in75> ^1 <o10> +)
    (<in75> ^2 <o11> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<diagonal-with1> ^instance <in88> +)
    (<diagonal-with1> ^instance <in89> +)
    (<diagonal-with1> ^instance <in90> +)
    (<diagonal-with1> ^instance <in91> +)
    (<diagonal-with1> ^instance <in92> +)
    (<diagonal-with1> ^instance <in93> +)
    (<diagonal-with1> ^instance <in94> +)
    (<diagonal-with1> ^instance <in95> +)
    (<diagonal-with1> ^instance <in96> +)
    (<diagonal-with1> ^instance <in97> +)
    (<diagonal-with1> ^instance <in98> +)
    (<diagonal-with1> ^instance <in99> +)
    (<diagonal-with1> ^instance <in100> +)
    (<diagonal-with1> ^instance <in101> +)
    (<diagonal-with1> ^instance <in102> +)
    (<diagonal-with1> ^instance <in103> +)
    (<diagonal-with1> ^instance <in104> +)
    (<diagonal-with1> ^instance <in105> +)
    (<diagonal-with1> ^instance <in106> +)
    (<diagonal-with1> ^instance <in107> +)
    (<diagonal-with1> ^instance <in108> +)
    (<diagonal-with1> ^instance <in109> +)
    (<diagonal-with1> ^instance <in110> +)
    (<diagonal-with1> ^instance <in111> +)
    (<in76> ^1 <o1> +)
    (<in76> ^2 <o5> +)
    (<in77> ^1 <o2> +)
    (<in77> ^2 <o4> +)
    (<in78> ^1 <o2> +)
    (<in78> ^2 <o6> +)
    (<in79> ^1 <o3> +)
    (<in79> ^2 <o5> +)
    (<in80> ^1 <o4> +)
    (<in80> ^2 <o2> +)
    (<in81> ^1 <o4> +)
    (<in81> ^2 <o8> +)
    (<in82> ^1 <o5> +)
    (<in82> ^2 <o1> +)
    (<in83> ^1 <o5> +)
    (<in83> ^2 <o3> +)
    (<in84> ^1 <o5> +)
    (<in84> ^2 <o7> +)
    (<in85> ^1 <o5> +)
    (<in85> ^2 <o9> +)
    (<in86> ^1 <o6> +)
    (<in86> ^2 <o2> +)
    (<in87> ^1 <o6> +)
    (<in87> ^2 <o8> +)
    (<in88> ^1 <o7> +)
    (<in88> ^2 <o5> +)
    (<in89> ^1 <o8> +)
    (<in89> ^2 <o4> +)
    (<in90> ^1 <o8> +)
    (<in90> ^2 <o6> +)
    (<in91> ^1 <o9> +)
    (<in91> ^2 <o5> +)
    (<in92> ^1 <o3> +)
    (<in92> ^2 <o11> +)
    (<in93> ^1 <o11> +)
    (<in93> ^2 <o3> +)
    (<in94> ^1 <o6> +)
    (<in94> ^2 <o10> +)
    (<in95> ^1 <o10> +)
    (<in95> ^2 <o6> +)
    (<in96> ^1 <o9> +)
    (<in96> ^2 <o11> +)
    (<in97> ^1 <o11> +)
    (<in97> ^2 <o9> +)
    (<in98> ^1 <o12> +)
    (<in98> ^2 <o6> +)
    (<in99> ^1 <o6> +)
    (<in99> ^2 <o12> +)
    (<in100> ^1 <o16> +)
    (<in100> ^2 <o9> +)
    (<in101> ^1 <o9> +)
    (<in101> ^2 <o16> +)
    (<in102> ^1 <o12> +)
    (<in102> ^2 <o15> +)
    (<in103> ^1 <o15> +)
    (<in103> ^2 <o12> +)
    (<in104> ^1 <o14> +)
    (<in104> ^2 <o9> +)
    (<in105> ^1 <o9> +)
    (<in105> ^2 <o14> +)
    (<in106> ^1 <o8> +)
    (<in106> ^2 <o15> +)
    (<in107> ^1 <o15> +)
    (<in107> ^2 <o8> +)
    (<in108> ^1 <o14> +)
    (<in108> ^2 <o7> +)
    (<in109> ^1 <o7> +)
    (<in109> ^2 <o14> +)
    (<in110> ^1 <o13> +)
    (<in110> ^2 <o8> +)
    (<in111> ^1 <o8> +)
    (<in111> ^2 <o13> +)
}

sp {dialog-event*apply*game-state-change-respond*init-familycross
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-familycross)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^shape adult1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^shape adult1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^shape child1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape child1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o1> +)
    (<in4> ^1 <o7> +)
    (<in4> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o3> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o4> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o5> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o6> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*final-i8puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-i8puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^value 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^value 2 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^value 3 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^value 4 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^value 5 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^value 6 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^value 7 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^value 8 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^value 1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^value 2 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^value 3 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^value 4 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^value 5 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^value 6 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^value 7 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^value 8 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o4> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o5> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o4> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o5> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o6> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o4> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o4> +)
    (<in31> ^2 <o8> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o1> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o2> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o5> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o5> +)
    (<in36> ^2 <o6> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o7> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o8> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o9> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o6> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o6> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o7> +)
    (<in45> ^2 <o4> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o7> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o8> +)
    (<in51> ^2 <o6> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o9> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o8> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o5> +)
    (<in55> ^1 <o9> +)
    (<in55> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<in56> ^1 <o1> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o2> +)
    (<in57> ^2 <o4> +)
    (<in58> ^1 <o2> +)
    (<in58> ^2 <o6> +)
    (<in59> ^1 <o3> +)
    (<in59> ^2 <o5> +)
    (<in60> ^1 <o4> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o4> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o5> +)
    (<in62> ^2 <o1> +)
    (<in63> ^1 <o5> +)
    (<in63> ^2 <o3> +)
    (<in64> ^1 <o5> +)
    (<in64> ^2 <o7> +)
    (<in65> ^1 <o5> +)
    (<in65> ^2 <o9> +)
    (<in66> ^1 <o6> +)
    (<in66> ^2 <o2> +)
    (<in67> ^1 <o6> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o7> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o8> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o8> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o9> +)
    (<in71> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*init-8puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-8puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color orange1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color purple1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^color gray1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^color brown1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color orange1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color yellow1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color green1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color purple1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color gray1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color brown1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o3> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o5> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o2> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o3> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o5> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o6> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o4> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o4> +)
    (<in31> ^2 <o8> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o1> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o2> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o5> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o5> +)
    (<in36> ^2 <o6> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o7> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o8> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o9> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o6> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o6> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o7> +)
    (<in45> ^2 <o4> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o7> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o8> +)
    (<in51> ^2 <o6> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o9> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o8> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o5> +)
    (<in55> ^1 <o9> +)
    (<in55> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<in56> ^1 <o1> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o2> +)
    (<in57> ^2 <o4> +)
    (<in58> ^1 <o2> +)
    (<in58> ^2 <o6> +)
    (<in59> ^1 <o3> +)
    (<in59> ^2 <o5> +)
    (<in60> ^1 <o4> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o4> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o5> +)
    (<in62> ^2 <o1> +)
    (<in63> ^1 <o5> +)
    (<in63> ^2 <o3> +)
    (<in64> ^1 <o5> +)
    (<in64> ^2 <o7> +)
    (<in65> ^1 <o5> +)
    (<in65> ^2 <o9> +)
    (<in66> ^1 <o6> +)
    (<in66> ^2 <o2> +)
    (<in67> ^1 <o6> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o7> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o8> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o8> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o9> +)
    (<in71> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*init-breakthrough
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-breakthrough)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <above1> +)
    (<preds> ^predicate <under1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color blue1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color blue1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^color red1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^color red1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^color red1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^color red1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color red1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<pr17> ^color red1 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<pr18> ^color red1 +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category block +)
    (<pr19> ^color red1 +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-20 +)
    (<o21> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color blue1 +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-21 +)
    (<o22> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color blue1 +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-22 +)
    (<o23> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color blue1 +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-23 +)
    (<o24> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color blue1 +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-24 +)
    (<o25> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category location +)
    (<pr24> ^name garbage +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o20> +)
    (<in3> ^2 <o10> +)
    (<in4> ^1 <o21> +)
    (<in4> ^2 <o13> +)
    (<in5> ^1 <o22> +)
    (<in5> ^2 <o14> +)
    (<in6> ^1 <o23> +)
    (<in6> ^2 <o15> +)
    (<in7> ^1 <o24> +)
    (<in7> ^2 <o16> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o17> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o18> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o19> +)
    (<in11> ^1 <o10> +)
    (<in11> ^2 <o20> +)
    (<in12> ^1 <o13> +)
    (<in12> ^2 <o21> +)
    (<in13> ^1 <o14> +)
    (<in13> ^2 <o22> +)
    (<in14> ^1 <o15> +)
    (<in14> ^2 <o23> +)
    (<in15> ^1 <o16> +)
    (<in15> ^2 <o24> +)
    (<above1> ^item-type predicate +)
    (<above1> ^handle above1 +)
    (<above1> ^instance <in16> +)
    (<above1> ^instance <in17> +)
    (<above1> ^instance <in18> +)
    (<above1> ^instance <in19> +)
    (<above1> ^instance <in20> +)
    (<above1> ^instance <in21> +)
    (<above1> ^instance <in22> +)
    (<above1> ^instance <in23> +)
    (<above1> ^instance <in24> +)
    (<above1> ^instance <in25> +)
    (<above1> ^instance <in26> +)
    (<above1> ^instance <in27> +)
    (<above1> ^instance <in28> +)
    (<above1> ^instance <in29> +)
    (<above1> ^instance <in30> +)
    (<above1> ^instance <in31> +)
    (<above1> ^instance <in32> +)
    (<above1> ^instance <in33> +)
    (<above1> ^instance <in34> +)
    (<above1> ^instance <in35> +)
    (<above1> ^instance <in36> +)
    (<above1> ^instance <in37> +)
    (<above1> ^instance <in38> +)
    (<above1> ^instance <in39> +)
    (<above1> ^instance <in40> +)
    (<above1> ^instance <in41> +)
    (<above1> ^instance <in42> +)
    (<above1> ^instance <in43> +)
    (<above1> ^instance <in44> +)
    (<above1> ^instance <in45> +)
    (<in16> ^1 <o13> +)
    (<in16> ^2 <o7> +)
    (<in17> ^1 <o14> +)
    (<in17> ^2 <o7> +)
    (<in18> ^1 <o13> +)
    (<in18> ^2 <o8> +)
    (<in19> ^1 <o14> +)
    (<in19> ^2 <o8> +)
    (<in20> ^1 <o15> +)
    (<in20> ^2 <o8> +)
    (<in21> ^1 <o14> +)
    (<in21> ^2 <o9> +)
    (<in22> ^1 <o15> +)
    (<in22> ^2 <o9> +)
    (<in23> ^1 <o16> +)
    (<in23> ^2 <o9> +)
    (<in24> ^1 <o15> +)
    (<in24> ^2 <o12> +)
    (<in25> ^1 <o16> +)
    (<in25> ^2 <o12> +)
    (<in26> ^1 <o7> +)
    (<in26> ^2 <o4> +)
    (<in27> ^1 <o8> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o7> +)
    (<in28> ^2 <o5> +)
    (<in29> ^1 <o8> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o9> +)
    (<in30> ^2 <o5> +)
    (<in31> ^1 <o8> +)
    (<in31> ^2 <o6> +)
    (<in32> ^1 <o9> +)
    (<in32> ^2 <o6> +)
    (<in33> ^1 <o12> +)
    (<in33> ^2 <o6> +)
    (<in34> ^1 <o9> +)
    (<in34> ^2 <o11> +)
    (<in35> ^1 <o12> +)
    (<in35> ^2 <o11> +)
    (<in36> ^1 <o4> +)
    (<in36> ^2 <o1> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o1> +)
    (<in38> ^1 <o4> +)
    (<in38> ^2 <o2> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o2> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o5> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o3> +)
    (<in43> ^1 <o11> +)
    (<in43> ^2 <o3> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o10> +)
    (<in45> ^1 <o11> +)
    (<in45> ^2 <o10> +)
    (<under1> ^item-type predicate +)
    (<under1> ^handle under1 +)
    (<under1> ^instance <in46> +)
    (<under1> ^instance <in47> +)
    (<under1> ^instance <in48> +)
    (<under1> ^instance <in49> +)
    (<under1> ^instance <in50> +)
    (<under1> ^instance <in51> +)
    (<under1> ^instance <in52> +)
    (<under1> ^instance <in53> +)
    (<under1> ^instance <in54> +)
    (<under1> ^instance <in55> +)
    (<under1> ^instance <in56> +)
    (<under1> ^instance <in57> +)
    (<under1> ^instance <in58> +)
    (<under1> ^instance <in59> +)
    (<under1> ^instance <in60> +)
    (<under1> ^instance <in61> +)
    (<under1> ^instance <in62> +)
    (<under1> ^instance <in63> +)
    (<under1> ^instance <in64> +)
    (<under1> ^instance <in65> +)
    (<under1> ^instance <in66> +)
    (<under1> ^instance <in67> +)
    (<under1> ^instance <in68> +)
    (<under1> ^instance <in69> +)
    (<under1> ^instance <in70> +)
    (<under1> ^instance <in71> +)
    (<under1> ^instance <in72> +)
    (<under1> ^instance <in73> +)
    (<under1> ^instance <in74> +)
    (<under1> ^instance <in75> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o13> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o14> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o13> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o14> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o15> +)
    (<in51> ^1 <o9> +)
    (<in51> ^2 <o14> +)
    (<in52> ^1 <o9> +)
    (<in52> ^2 <o15> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o16> +)
    (<in54> ^1 <o12> +)
    (<in54> ^2 <o15> +)
    (<in55> ^1 <o12> +)
    (<in55> ^2 <o16> +)
    (<in56> ^1 <o4> +)
    (<in56> ^2 <o7> +)
    (<in57> ^1 <o4> +)
    (<in57> ^2 <o8> +)
    (<in58> ^1 <o5> +)
    (<in58> ^2 <o7> +)
    (<in59> ^1 <o5> +)
    (<in59> ^2 <o8> +)
    (<in60> ^1 <o5> +)
    (<in60> ^2 <o9> +)
    (<in61> ^1 <o6> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o6> +)
    (<in62> ^2 <o9> +)
    (<in63> ^1 <o6> +)
    (<in63> ^2 <o12> +)
    (<in64> ^1 <o11> +)
    (<in64> ^2 <o9> +)
    (<in65> ^1 <o11> +)
    (<in65> ^2 <o12> +)
    (<in66> ^1 <o1> +)
    (<in66> ^2 <o4> +)
    (<in67> ^1 <o1> +)
    (<in67> ^2 <o5> +)
    (<in68> ^1 <o2> +)
    (<in68> ^2 <o4> +)
    (<in69> ^1 <o2> +)
    (<in69> ^2 <o5> +)
    (<in70> ^1 <o2> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o3> +)
    (<in71> ^2 <o5> +)
    (<in72> ^1 <o3> +)
    (<in72> ^2 <o6> +)
    (<in73> ^1 <o3> +)
    (<in73> ^2 <o11> +)
    (<in74> ^1 <o10> +)
    (<in74> ^2 <o6> +)
    (<in75> ^1 <o10> +)
    (<in75> ^2 <o11> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<diagonal-with1> ^instance <in88> +)
    (<diagonal-with1> ^instance <in89> +)
    (<diagonal-with1> ^instance <in90> +)
    (<diagonal-with1> ^instance <in91> +)
    (<diagonal-with1> ^instance <in92> +)
    (<diagonal-with1> ^instance <in93> +)
    (<diagonal-with1> ^instance <in94> +)
    (<diagonal-with1> ^instance <in95> +)
    (<diagonal-with1> ^instance <in96> +)
    (<diagonal-with1> ^instance <in97> +)
    (<diagonal-with1> ^instance <in98> +)
    (<diagonal-with1> ^instance <in99> +)
    (<diagonal-with1> ^instance <in100> +)
    (<diagonal-with1> ^instance <in101> +)
    (<diagonal-with1> ^instance <in102> +)
    (<diagonal-with1> ^instance <in103> +)
    (<diagonal-with1> ^instance <in104> +)
    (<diagonal-with1> ^instance <in105> +)
    (<diagonal-with1> ^instance <in106> +)
    (<diagonal-with1> ^instance <in107> +)
    (<diagonal-with1> ^instance <in108> +)
    (<diagonal-with1> ^instance <in109> +)
    (<diagonal-with1> ^instance <in110> +)
    (<diagonal-with1> ^instance <in111> +)
    (<in76> ^1 <o1> +)
    (<in76> ^2 <o5> +)
    (<in77> ^1 <o2> +)
    (<in77> ^2 <o4> +)
    (<in78> ^1 <o2> +)
    (<in78> ^2 <o6> +)
    (<in79> ^1 <o3> +)
    (<in79> ^2 <o5> +)
    (<in80> ^1 <o4> +)
    (<in80> ^2 <o2> +)
    (<in81> ^1 <o4> +)
    (<in81> ^2 <o8> +)
    (<in82> ^1 <o5> +)
    (<in82> ^2 <o1> +)
    (<in83> ^1 <o5> +)
    (<in83> ^2 <o3> +)
    (<in84> ^1 <o5> +)
    (<in84> ^2 <o7> +)
    (<in85> ^1 <o5> +)
    (<in85> ^2 <o9> +)
    (<in86> ^1 <o6> +)
    (<in86> ^2 <o2> +)
    (<in87> ^1 <o6> +)
    (<in87> ^2 <o8> +)
    (<in88> ^1 <o7> +)
    (<in88> ^2 <o5> +)
    (<in89> ^1 <o8> +)
    (<in89> ^2 <o4> +)
    (<in90> ^1 <o8> +)
    (<in90> ^2 <o6> +)
    (<in91> ^1 <o9> +)
    (<in91> ^2 <o5> +)
    (<in92> ^1 <o3> +)
    (<in92> ^2 <o11> +)
    (<in93> ^1 <o11> +)
    (<in93> ^2 <o3> +)
    (<in94> ^1 <o6> +)
    (<in94> ^2 <o10> +)
    (<in95> ^1 <o10> +)
    (<in95> ^2 <o6> +)
    (<in96> ^1 <o9> +)
    (<in96> ^2 <o11> +)
    (<in97> ^1 <o11> +)
    (<in97> ^2 <o9> +)
    (<in98> ^1 <o12> +)
    (<in98> ^2 <o6> +)
    (<in99> ^1 <o6> +)
    (<in99> ^2 <o12> +)
    (<in100> ^1 <o16> +)
    (<in100> ^2 <o9> +)
    (<in101> ^1 <o9> +)
    (<in101> ^2 <o16> +)
    (<in102> ^1 <o12> +)
    (<in102> ^2 <o15> +)
    (<in103> ^1 <o15> +)
    (<in103> ^2 <o12> +)
    (<in104> ^1 <o14> +)
    (<in104> ^2 <o9> +)
    (<in105> ^1 <o9> +)
    (<in105> ^2 <o14> +)
    (<in106> ^1 <o8> +)
    (<in106> ^2 <o15> +)
    (<in107> ^1 <o15> +)
    (<in107> ^2 <o8> +)
    (<in108> ^1 <o14> +)
    (<in108> ^2 <o7> +)
    (<in109> ^1 <o7> +)
    (<in109> ^2 <o14> +)
    (<in110> ^1 <o13> +)
    (<in110> ^2 <o8> +)
    (<in111> ^1 <o8> +)
    (<in111> ^2 <o13> +)
}

sp {dialog-event*apply*game-state-change-respond*init-peg2
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-peg2)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <oobject> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 2 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 3 +)
    (<pr1> ^y 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 4 +)
    (<pr2> ^y 1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 2 +)
    (<pr3> ^y 2 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 3 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 2 +)
    (<pr5> ^y 3 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 2 +)
    (<pr6> ^y 0 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 3 +)
    (<pr7> ^y 0 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 4 +)
    (<pr8> ^y 0 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 5 +)
    (<pr9> ^y 0 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<oobject> ^item-type object +)
    (<oobject> ^handle object-20 +)
    (<oobject> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^name garbage +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<on1> ^instance <in8> +)
    (<in0> ^1 <o11> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o12> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o13> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o14> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o15> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o16> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o17> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o18> +)
    (<in7> ^2 <o9> +)
    (<in8> ^1 <o19> +)
    (<in8> ^2 <o10> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<below1> ^instance <in16> +)
    (<below1> ^instance <in17> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o3> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o4> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o6> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o7> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o8> +)
    (<in15> ^2 <o17> +)
    (<in16> ^1 <o9> +)
    (<in16> ^2 <o18> +)
    (<in17> ^1 <o10> +)
    (<in17> ^2 <o19> +)
}

sp {dialog-event*apply*game-state-change-respond*final-i15puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-i15puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<objs> ^object <o26> +)
    (<objs> ^object <o27> +)
    (<objs> ^object <o28> +)
    (<objs> ^object <o29> +)
    (<objs> ^object <o30> +)
    (<objs> ^object <o31> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^value 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^value 2 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^value 3 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^value 4 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^value 5 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^value 6 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^value 7 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^value 8 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^value 9 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^value 10 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^value 11 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^value 12 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^value 13 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^value 14 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^value 15 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^value 16 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^value 1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<pr17> ^value 2 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<pr18> ^value 3 +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category block +)
    (<pr19> ^value 4 +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-20 +)
    (<o21> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^value 5 +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-21 +)
    (<o22> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^value 6 +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-22 +)
    (<o23> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^value 7 +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-23 +)
    (<o24> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^value 8 +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-24 +)
    (<o25> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category block +)
    (<pr24> ^value 9 +)
    (<o26> ^item-type object +)
    (<o26> ^handle object-25 +)
    (<o26> ^predicates <pr25> +)
    (<pr25> ^visible true +)
    (<pr25> ^category block +)
    (<pr25> ^value 16 +)
    (<o27> ^item-type object +)
    (<o27> ^handle object-26 +)
    (<o27> ^predicates <pr26> +)
    (<pr26> ^visible true +)
    (<pr26> ^category block +)
    (<pr26> ^value 11 +)
    (<o28> ^item-type object +)
    (<o28> ^handle object-27 +)
    (<o28> ^predicates <pr27> +)
    (<pr27> ^visible true +)
    (<pr27> ^category block +)
    (<pr27> ^value 12 +)
    (<o29> ^item-type object +)
    (<o29> ^handle object-28 +)
    (<o29> ^predicates <pr28> +)
    (<pr28> ^visible true +)
    (<pr28> ^category block +)
    (<pr28> ^value 13 +)
    (<o30> ^item-type object +)
    (<o30> ^handle object-29 +)
    (<o30> ^predicates <pr29> +)
    (<pr29> ^visible true +)
    (<pr29> ^category block +)
    (<pr29> ^value 14 +)
    (<o31> ^item-type object +)
    (<o31> ^handle object-30 +)
    (<o31> ^predicates <pr30> +)
    (<pr30> ^visible true +)
    (<pr30> ^category block +)
    (<pr30> ^value 15 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<on1> ^instance <in8> +)
    (<on1> ^instance <in9> +)
    (<on1> ^instance <in10> +)
    (<on1> ^instance <in11> +)
    (<on1> ^instance <in12> +)
    (<on1> ^instance <in13> +)
    (<on1> ^instance <in14> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o20> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o21> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o22> +)
    (<in5> ^2 <o6> +)
    (<in6> ^1 <o23> +)
    (<in6> ^2 <o7> +)
    (<in7> ^1 <o24> +)
    (<in7> ^2 <o8> +)
    (<in8> ^1 <o25> +)
    (<in8> ^2 <o9> +)
    (<in9> ^1 <o26> +)
    (<in9> ^2 <o16> +)
    (<in10> ^1 <o27> +)
    (<in10> ^2 <o11> +)
    (<in11> ^1 <o28> +)
    (<in11> ^2 <o12> +)
    (<in12> ^1 <o29> +)
    (<in12> ^2 <o13> +)
    (<in13> ^1 <o30> +)
    (<in13> ^2 <o14> +)
    (<in14> ^1 <o31> +)
    (<in14> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in15> +)
    (<below1> ^instance <in16> +)
    (<below1> ^instance <in17> +)
    (<below1> ^instance <in18> +)
    (<below1> ^instance <in19> +)
    (<below1> ^instance <in20> +)
    (<below1> ^instance <in21> +)
    (<below1> ^instance <in22> +)
    (<below1> ^instance <in23> +)
    (<below1> ^instance <in24> +)
    (<below1> ^instance <in25> +)
    (<below1> ^instance <in26> +)
    (<below1> ^instance <in27> +)
    (<below1> ^instance <in28> +)
    (<below1> ^instance <in29> +)
    (<in15> ^1 <o1> +)
    (<in15> ^2 <o17> +)
    (<in16> ^1 <o2> +)
    (<in16> ^2 <o18> +)
    (<in17> ^1 <o3> +)
    (<in17> ^2 <o19> +)
    (<in18> ^1 <o4> +)
    (<in18> ^2 <o20> +)
    (<in19> ^1 <o5> +)
    (<in19> ^2 <o21> +)
    (<in20> ^1 <o6> +)
    (<in20> ^2 <o22> +)
    (<in21> ^1 <o7> +)
    (<in21> ^2 <o23> +)
    (<in22> ^1 <o8> +)
    (<in22> ^2 <o24> +)
    (<in23> ^1 <o9> +)
    (<in23> ^2 <o25> +)
    (<in24> ^1 <o16> +)
    (<in24> ^2 <o26> +)
    (<in25> ^1 <o11> +)
    (<in25> ^2 <o27> +)
    (<in26> ^1 <o12> +)
    (<in26> ^2 <o28> +)
    (<in27> ^1 <o13> +)
    (<in27> ^2 <o29> +)
    (<in28> ^1 <o14> +)
    (<in28> ^2 <o30> +)
    (<in29> ^1 <o15> +)
    (<in29> ^2 <o31> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<near1> ^instance <in56> +)
    (<near1> ^instance <in57> +)
    (<near1> ^instance <in58> +)
    (<near1> ^instance <in59> +)
    (<near1> ^instance <in60> +)
    (<near1> ^instance <in61> +)
    (<near1> ^instance <in62> +)
    (<near1> ^instance <in63> +)
    (<near1> ^instance <in64> +)
    (<near1> ^instance <in65> +)
    (<near1> ^instance <in66> +)
    (<near1> ^instance <in67> +)
    (<near1> ^instance <in68> +)
    (<near1> ^instance <in69> +)
    (<near1> ^instance <in70> +)
    (<near1> ^instance <in71> +)
    (<near1> ^instance <in72> +)
    (<near1> ^instance <in73> +)
    (<near1> ^instance <in74> +)
    (<near1> ^instance <in75> +)
    (<near1> ^instance <in76> +)
    (<near1> ^instance <in77> +)
    (<near1> ^instance <in78> +)
    (<near1> ^instance <in79> +)
    (<near1> ^instance <in80> +)
    (<near1> ^instance <in81> +)
    (<near1> ^instance <in82> +)
    (<near1> ^instance <in83> +)
    (<near1> ^instance <in84> +)
    (<near1> ^instance <in85> +)
    (<near1> ^instance <in86> +)
    (<near1> ^instance <in87> +)
    (<near1> ^instance <in88> +)
    (<near1> ^instance <in89> +)
    (<near1> ^instance <in90> +)
    (<near1> ^instance <in91> +)
    (<near1> ^instance <in92> +)
    (<near1> ^instance <in93> +)
    (<near1> ^instance <in94> +)
    (<near1> ^instance <in95> +)
    (<near1> ^instance <in96> +)
    (<near1> ^instance <in97> +)
    (<near1> ^instance <in98> +)
    (<near1> ^instance <in99> +)
    (<near1> ^instance <in100> +)
    (<near1> ^instance <in101> +)
    (<near1> ^instance <in102> +)
    (<near1> ^instance <in103> +)
    (<near1> ^instance <in104> +)
    (<near1> ^instance <in105> +)
    (<near1> ^instance <in106> +)
    (<near1> ^instance <in107> +)
    (<near1> ^instance <in108> +)
    (<near1> ^instance <in109> +)
    (<near1> ^instance <in110> +)
    (<near1> ^instance <in111> +)
    (<near1> ^instance <in112> +)
    (<near1> ^instance <in113> +)
    (<in30> ^1 <o1> +)
    (<in30> ^2 <o2> +)
    (<in31> ^1 <o1> +)
    (<in31> ^2 <o4> +)
    (<in32> ^1 <o1> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o2> +)
    (<in33> ^2 <o1> +)
    (<in34> ^1 <o2> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o2> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o2> +)
    (<in36> ^2 <o5> +)
    (<in37> ^1 <o2> +)
    (<in37> ^2 <o6> +)
    (<in38> ^1 <o3> +)
    (<in38> ^2 <o2> +)
    (<in39> ^1 <o3> +)
    (<in39> ^2 <o5> +)
    (<in40> ^1 <o3> +)
    (<in40> ^2 <o6> +)
    (<in41> ^1 <o4> +)
    (<in41> ^2 <o1> +)
    (<in42> ^1 <o4> +)
    (<in42> ^2 <o2> +)
    (<in43> ^1 <o4> +)
    (<in43> ^2 <o5> +)
    (<in44> ^1 <o4> +)
    (<in44> ^2 <o7> +)
    (<in45> ^1 <o4> +)
    (<in45> ^2 <o8> +)
    (<in46> ^1 <o5> +)
    (<in46> ^2 <o1> +)
    (<in47> ^1 <o5> +)
    (<in47> ^2 <o2> +)
    (<in48> ^1 <o5> +)
    (<in48> ^2 <o3> +)
    (<in49> ^1 <o5> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o5> +)
    (<in50> ^2 <o6> +)
    (<in51> ^1 <o5> +)
    (<in51> ^2 <o7> +)
    (<in52> ^1 <o5> +)
    (<in52> ^2 <o8> +)
    (<in53> ^1 <o5> +)
    (<in53> ^2 <o9> +)
    (<in54> ^1 <o6> +)
    (<in54> ^2 <o2> +)
    (<in55> ^1 <o6> +)
    (<in55> ^2 <o3> +)
    (<in56> ^1 <o6> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o6> +)
    (<in57> ^2 <o8> +)
    (<in58> ^1 <o6> +)
    (<in58> ^2 <o9> +)
    (<in59> ^1 <o7> +)
    (<in59> ^2 <o4> +)
    (<in60> ^1 <o7> +)
    (<in60> ^2 <o5> +)
    (<in61> ^1 <o7> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o8> +)
    (<in62> ^2 <o7> +)
    (<in63> ^1 <o8> +)
    (<in63> ^2 <o4> +)
    (<in64> ^1 <o8> +)
    (<in64> ^2 <o5> +)
    (<in65> ^1 <o8> +)
    (<in65> ^2 <o6> +)
    (<in66> ^1 <o8> +)
    (<in66> ^2 <o9> +)
    (<in67> ^1 <o9> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o9> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o9> +)
    (<in69> ^2 <o6> +)
    (<in70> ^1 <o3> +)
    (<in70> ^2 <o10> +)
    (<in71> ^1 <o3> +)
    (<in71> ^2 <o11> +)
    (<in72> ^1 <o6> +)
    (<in72> ^2 <o10> +)
    (<in73> ^1 <o6> +)
    (<in73> ^2 <o11> +)
    (<in74> ^1 <o6> +)
    (<in74> ^2 <o12> +)
    (<in75> ^1 <o9> +)
    (<in75> ^2 <o11> +)
    (<in76> ^1 <o9> +)
    (<in76> ^2 <o12> +)
    (<in77> ^1 <o9> +)
    (<in77> ^2 <o16> +)
    (<in78> ^1 <o9> +)
    (<in78> ^2 <o15> +)
    (<in79> ^1 <o9> +)
    (<in79> ^2 <o14> +)
    (<in80> ^1 <o8> +)
    (<in80> ^2 <o13> +)
    (<in81> ^1 <o8> +)
    (<in81> ^2 <o14> +)
    (<in82> ^1 <o8> +)
    (<in82> ^2 <o15> +)
    (<in83> ^1 <o7> +)
    (<in83> ^2 <o13> +)
    (<in84> ^1 <o7> +)
    (<in84> ^2 <o14> +)
    (<in85> ^1 <o10> +)
    (<in85> ^2 <o3> +)
    (<in86> ^1 <o10> +)
    (<in86> ^2 <o6> +)
    (<in87> ^1 <o10> +)
    (<in87> ^2 <o11> +)
    (<in88> ^1 <o11> +)
    (<in88> ^2 <o10> +)
    (<in89> ^1 <o11> +)
    (<in89> ^2 <o3> +)
    (<in90> ^1 <o11> +)
    (<in90> ^2 <o6> +)
    (<in91> ^1 <o11> +)
    (<in91> ^2 <o9> +)
    (<in92> ^1 <o11> +)
    (<in92> ^2 <o12> +)
    (<in93> ^1 <o12> +)
    (<in93> ^2 <o11> +)
    (<in94> ^1 <o12> +)
    (<in94> ^2 <o6> +)
    (<in95> ^1 <o12> +)
    (<in95> ^2 <o9> +)
    (<in96> ^1 <o12> +)
    (<in96> ^2 <o15> +)
    (<in97> ^1 <o12> +)
    (<in97> ^2 <o16> +)
    (<in98> ^1 <o16> +)
    (<in98> ^2 <o12> +)
    (<in99> ^1 <o16> +)
    (<in99> ^2 <o9> +)
    (<in100> ^1 <o16> +)
    (<in100> ^2 <o15> +)
    (<in101> ^1 <o15> +)
    (<in101> ^2 <o16> +)
    (<in102> ^1 <o15> +)
    (<in102> ^2 <o12> +)
    (<in103> ^1 <o15> +)
    (<in103> ^2 <o9> +)
    (<in104> ^1 <o15> +)
    (<in104> ^2 <o8> +)
    (<in105> ^1 <o15> +)
    (<in105> ^2 <o14> +)
    (<in106> ^1 <o14> +)
    (<in106> ^2 <o15> +)
    (<in107> ^1 <o14> +)
    (<in107> ^2 <o9> +)
    (<in108> ^1 <o14> +)
    (<in108> ^2 <o8> +)
    (<in109> ^1 <o14> +)
    (<in109> ^2 <o7> +)
    (<in110> ^1 <o14> +)
    (<in110> ^2 <o13> +)
    (<in111> ^1 <o13> +)
    (<in111> ^2 <o7> +)
    (<in112> ^1 <o13> +)
    (<in112> ^2 <o8> +)
    (<in113> ^1 <o13> +)
    (<in113> ^2 <o14> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in114> +)
    (<diagonal-with1> ^instance <in115> +)
    (<diagonal-with1> ^instance <in116> +)
    (<diagonal-with1> ^instance <in117> +)
    (<diagonal-with1> ^instance <in118> +)
    (<diagonal-with1> ^instance <in119> +)
    (<diagonal-with1> ^instance <in120> +)
    (<diagonal-with1> ^instance <in121> +)
    (<diagonal-with1> ^instance <in122> +)
    (<diagonal-with1> ^instance <in123> +)
    (<diagonal-with1> ^instance <in124> +)
    (<diagonal-with1> ^instance <in125> +)
    (<diagonal-with1> ^instance <in126> +)
    (<diagonal-with1> ^instance <in127> +)
    (<diagonal-with1> ^instance <in128> +)
    (<diagonal-with1> ^instance <in129> +)
    (<diagonal-with1> ^instance <in130> +)
    (<diagonal-with1> ^instance <in131> +)
    (<diagonal-with1> ^instance <in132> +)
    (<diagonal-with1> ^instance <in133> +)
    (<diagonal-with1> ^instance <in134> +)
    (<diagonal-with1> ^instance <in135> +)
    (<diagonal-with1> ^instance <in136> +)
    (<diagonal-with1> ^instance <in137> +)
    (<diagonal-with1> ^instance <in138> +)
    (<diagonal-with1> ^instance <in139> +)
    (<diagonal-with1> ^instance <in140> +)
    (<diagonal-with1> ^instance <in141> +)
    (<diagonal-with1> ^instance <in142> +)
    (<diagonal-with1> ^instance <in143> +)
    (<diagonal-with1> ^instance <in144> +)
    (<diagonal-with1> ^instance <in145> +)
    (<diagonal-with1> ^instance <in146> +)
    (<diagonal-with1> ^instance <in147> +)
    (<diagonal-with1> ^instance <in148> +)
    (<diagonal-with1> ^instance <in149> +)
    (<in114> ^1 <o1> +)
    (<in114> ^2 <o5> +)
    (<in115> ^1 <o2> +)
    (<in115> ^2 <o4> +)
    (<in116> ^1 <o2> +)
    (<in116> ^2 <o6> +)
    (<in117> ^1 <o3> +)
    (<in117> ^2 <o5> +)
    (<in118> ^1 <o4> +)
    (<in118> ^2 <o2> +)
    (<in119> ^1 <o4> +)
    (<in119> ^2 <o8> +)
    (<in120> ^1 <o5> +)
    (<in120> ^2 <o1> +)
    (<in121> ^1 <o5> +)
    (<in121> ^2 <o3> +)
    (<in122> ^1 <o5> +)
    (<in122> ^2 <o7> +)
    (<in123> ^1 <o5> +)
    (<in123> ^2 <o9> +)
    (<in124> ^1 <o6> +)
    (<in124> ^2 <o2> +)
    (<in125> ^1 <o6> +)
    (<in125> ^2 <o8> +)
    (<in126> ^1 <o7> +)
    (<in126> ^2 <o5> +)
    (<in127> ^1 <o8> +)
    (<in127> ^2 <o4> +)
    (<in128> ^1 <o8> +)
    (<in128> ^2 <o6> +)
    (<in129> ^1 <o9> +)
    (<in129> ^2 <o5> +)
    (<in130> ^1 <o3> +)
    (<in130> ^2 <o11> +)
    (<in131> ^1 <o11> +)
    (<in131> ^2 <o3> +)
    (<in132> ^1 <o6> +)
    (<in132> ^2 <o10> +)
    (<in133> ^1 <o10> +)
    (<in133> ^2 <o6> +)
    (<in134> ^1 <o9> +)
    (<in134> ^2 <o11> +)
    (<in135> ^1 <o11> +)
    (<in135> ^2 <o9> +)
    (<in136> ^1 <o12> +)
    (<in136> ^2 <o6> +)
    (<in137> ^1 <o6> +)
    (<in137> ^2 <o12> +)
    (<in138> ^1 <o16> +)
    (<in138> ^2 <o9> +)
    (<in139> ^1 <o9> +)
    (<in139> ^2 <o16> +)
    (<in140> ^1 <o12> +)
    (<in140> ^2 <o15> +)
    (<in141> ^1 <o15> +)
    (<in141> ^2 <o12> +)
    (<in142> ^1 <o14> +)
    (<in142> ^2 <o9> +)
    (<in143> ^1 <o9> +)
    (<in143> ^2 <o14> +)
    (<in144> ^1 <o8> +)
    (<in144> ^2 <o15> +)
    (<in145> ^1 <o15> +)
    (<in145> ^2 <o8> +)
    (<in146> ^1 <o14> +)
    (<in146> ^2 <o7> +)
    (<in147> ^1 <o7> +)
    (<in147> ^2 <o14> +)
    (<in148> ^1 <o13> +)
    (<in148> ^2 <o8> +)
    (<in149> ^1 <o8> +)
    (<in149> ^2 <o13> +)
}

sp {dialog-event*apply*game-state-change-respond*init-mac
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-mac)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^shape missionary1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^shape missionary1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^shape missionary1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape cannibal1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^shape cannibal1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^shape cannibal1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o1> +)
    (<in4> ^1 <o7> +)
    (<in4> ^2 <o1> +)
    (<in5> ^1 <o8> +)
    (<in5> ^2 <o1> +)
    (<in6> ^1 <o9> +)
    (<in6> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o3> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o6> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o7> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o1> +)
    (<in13> ^2 <o9> +)
}

sp {dialog-event*apply*game-state-change-respond*init-i5puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-i5puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^value 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^value 2 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^value 3 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^value 4 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^value 5 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^value 1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^value 2 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^value 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^value 4 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^value 5 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o7> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o8> +)
    (<in1> ^2 <o3> +)
    (<in2> ^1 <o9> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o10> +)
    (<in3> ^2 <o5> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o6> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o2> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o3> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o9> +)
    (<in8> ^1 <o5> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o6> +)
    (<in9> ^2 <o11> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o2> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o1> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o4> +)
    (<in16> ^1 <o2> +)
    (<in16> ^2 <o5> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o3> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o1> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o2> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o5> +)
    (<in24> ^2 <o1> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o2> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o3> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o6> +)
    (<in29> ^1 <o6> +)
    (<in29> ^2 <o2> +)
    (<in30> ^1 <o6> +)
    (<in30> ^2 <o3> +)
    (<in31> ^1 <o6> +)
    (<in31> ^2 <o5> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in32> +)
    (<diagonal-with1> ^instance <in33> +)
    (<diagonal-with1> ^instance <in34> +)
    (<diagonal-with1> ^instance <in35> +)
    (<diagonal-with1> ^instance <in36> +)
    (<diagonal-with1> ^instance <in37> +)
    (<diagonal-with1> ^instance <in38> +)
    (<diagonal-with1> ^instance <in39> +)
    (<in32> ^1 <o1> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o2> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o2> +)
    (<in34> ^2 <o6> +)
    (<in35> ^1 <o3> +)
    (<in35> ^2 <o5> +)
    (<in36> ^1 <o4> +)
    (<in36> ^2 <o2> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o1> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o3> +)
    (<in39> ^1 <o6> +)
    (<in39> ^2 <o2> +)
}

sp {dialog-event*apply*game-state-change-respond*final-8puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-8puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color orange1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color purple1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^color gray1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^color brown1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color orange1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color yellow1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color green1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color purple1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color gray1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color brown1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o4> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o5> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o4> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o5> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o6> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o4> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o4> +)
    (<in31> ^2 <o8> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o1> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o2> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o5> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o5> +)
    (<in36> ^2 <o6> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o7> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o8> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o9> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o6> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o6> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o7> +)
    (<in45> ^2 <o4> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o7> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o8> +)
    (<in51> ^2 <o6> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o9> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o8> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o5> +)
    (<in55> ^1 <o9> +)
    (<in55> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<in56> ^1 <o1> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o2> +)
    (<in57> ^2 <o4> +)
    (<in58> ^1 <o2> +)
    (<in58> ^2 <o6> +)
    (<in59> ^1 <o3> +)
    (<in59> ^2 <o5> +)
    (<in60> ^1 <o4> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o4> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o5> +)
    (<in62> ^2 <o1> +)
    (<in63> ^1 <o5> +)
    (<in63> ^2 <o3> +)
    (<in64> ^1 <o5> +)
    (<in64> ^2 <o7> +)
    (<in65> ^1 <o5> +)
    (<in65> ^2 <o9> +)
    (<in66> ^1 <o6> +)
    (<in66> ^2 <o2> +)
    (<in67> ^1 <o6> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o7> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o8> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o8> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o9> +)
    (<in71> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*final-husbands
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-husbands)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^shape woman1 +)
    (<pr2> ^last-name smith1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^shape woman1 +)
    (<pr3> ^last-name bale1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^shape woman1 +)
    (<pr4> ^last-name rogers1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape man1 +)
    (<pr5> ^last-name smith1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^shape man1 +)
    (<pr6> ^last-name bale1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^shape man1 +)
    (<pr7> ^last-name rogers1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o2> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o2> +)
    (<in4> ^1 <o7> +)
    (<in4> ^2 <o2> +)
    (<in5> ^1 <o8> +)
    (<in5> ^2 <o2> +)
    (<in6> ^1 <o9> +)
    (<in6> ^2 <o2> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o3> +)
    (<in8> ^1 <o2> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o6> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o7> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o9> +)
}

sp {dialog-event*apply*game-state-change-respond*final-risk
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-risk)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^color red1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color red1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color red1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color red1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o7> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o8> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o9> +)
    (<in2> ^2 <o2> +)
    (<in3> ^1 <o10> +)
    (<in3> ^2 <o6> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o3> +)
    (<in5> ^1 <o12> +)
    (<in5> ^2 <o3> +)
    (<in6> ^1 <o13> +)
    (<in6> ^2 <o4> +)
    (<in7> ^1 <o14> +)
    (<in7> ^2 <o5> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o7> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o8> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o9> +)
    (<in11> ^1 <o6> +)
    (<in11> ^2 <o10> +)
    (<in12> ^1 <o3> +)
    (<in12> ^2 <o11> +)
    (<in13> ^1 <o3> +)
    (<in13> ^2 <o12> +)
    (<in14> ^1 <o4> +)
    (<in14> ^2 <o13> +)
    (<in15> ^1 <o5> +)
    (<in15> ^2 <o14> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o5> +)
    (<in30> ^2 <o1> +)
    (<in31> ^1 <o5> +)
    (<in31> ^2 <o2> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o3> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o6> +)
    (<in35> ^1 <o6> +)
    (<in35> ^2 <o2> +)
    (<in36> ^1 <o6> +)
    (<in36> ^2 <o3> +)
    (<in37> ^1 <o6> +)
    (<in37> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*init-15puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-15puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color orange1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color purple1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^color gray1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^color brown1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color orange1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color yellow1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color green1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color purple1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color gray1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color brown1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o3> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o5> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o2> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o3> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o5> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o6> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o4> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o4> +)
    (<in31> ^2 <o8> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o1> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o2> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o5> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o5> +)
    (<in36> ^2 <o6> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o7> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o8> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o9> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o6> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o6> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o7> +)
    (<in45> ^2 <o4> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o7> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o8> +)
    (<in51> ^2 <o6> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o9> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o8> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o5> +)
    (<in55> ^1 <o9> +)
    (<in55> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<in56> ^1 <o1> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o2> +)
    (<in57> ^2 <o4> +)
    (<in58> ^1 <o2> +)
    (<in58> ^2 <o6> +)
    (<in59> ^1 <o3> +)
    (<in59> ^2 <o5> +)
    (<in60> ^1 <o4> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o4> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o5> +)
    (<in62> ^2 <o1> +)
    (<in63> ^1 <o5> +)
    (<in63> ^2 <o3> +)
    (<in64> ^1 <o5> +)
    (<in64> ^2 <o7> +)
    (<in65> ^1 <o5> +)
    (<in65> ^2 <o9> +)
    (<in66> ^1 <o6> +)
    (<in66> ^2 <o2> +)
    (<in67> ^1 <o6> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o7> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o8> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o8> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o9> +)
    (<in71> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*init-sokoban
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-sokoban)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 1 +)
    (<pr3> ^y 2 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 2 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 3 +)
    (<pr5> ^y 2 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 1 +)
    (<pr6> ^y 3 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 2 +)
    (<pr7> ^y 3 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 3 +)
    (<pr8> ^y 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 1 +)
    (<pr9> ^y 4 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 2 +)
    (<pr10> ^y 4 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 3 +)
    (<pr11> ^y 4 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-12 +)
    (<o17> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-13 +)
    (<o18> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color red1 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-14 +)
    (<o19> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color green1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o8> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o1> +)
    (<in3> ^2 <o17> +)
    (<in4> ^1 <o2> +)
    (<in4> ^2 <o18> +)
    (<in5> ^1 <o8> +)
    (<in5> ^2 <o19> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in6> +)
    (<near1> ^instance <in7> +)
    (<near1> ^instance <in8> +)
    (<near1> ^instance <in9> +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<near1> ^instance <in56> +)
    (<near1> ^instance <in57> +)
    (<near1> ^instance <in58> +)
    (<near1> ^instance <in59> +)
    (<near1> ^instance <in60> +)
    (<near1> ^instance <in61> +)
    (<near1> ^instance <in62> +)
    (<near1> ^instance <in63> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o2> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o4> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o5> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o1> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o3> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o6> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o2> +)
    (<in15> ^1 <o3> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o4> +)
    (<in17> ^2 <o1> +)
    (<in18> ^1 <o4> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o4> +)
    (<in20> ^2 <o7> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o8> +)
    (<in22> ^1 <o5> +)
    (<in22> ^2 <o1> +)
    (<in23> ^1 <o5> +)
    (<in23> ^2 <o2> +)
    (<in24> ^1 <o5> +)
    (<in24> ^2 <o3> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o4> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o7> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o8> +)
    (<in29> ^1 <o5> +)
    (<in29> ^2 <o9> +)
    (<in30> ^1 <o6> +)
    (<in30> ^2 <o2> +)
    (<in31> ^1 <o6> +)
    (<in31> ^2 <o3> +)
    (<in32> ^1 <o6> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o6> +)
    (<in33> ^2 <o8> +)
    (<in34> ^1 <o6> +)
    (<in34> ^2 <o9> +)
    (<in35> ^1 <o7> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o7> +)
    (<in36> ^2 <o5> +)
    (<in37> ^1 <o7> +)
    (<in37> ^2 <o8> +)
    (<in38> ^1 <o8> +)
    (<in38> ^2 <o7> +)
    (<in39> ^1 <o8> +)
    (<in39> ^2 <o4> +)
    (<in40> ^1 <o8> +)
    (<in40> ^2 <o5> +)
    (<in41> ^1 <o8> +)
    (<in41> ^2 <o6> +)
    (<in42> ^1 <o8> +)
    (<in42> ^2 <o9> +)
    (<in43> ^1 <o9> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o9> +)
    (<in44> ^2 <o5> +)
    (<in45> ^1 <o9> +)
    (<in45> ^2 <o6> +)
    (<in46> ^1 <o9> +)
    (<in46> ^2 <o11> +)
    (<in47> ^1 <o9> +)
    (<in47> ^2 <o12> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o19> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o11> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o12> +)
    (<in51> ^1 <o7> +)
    (<in51> ^2 <o10> +)
    (<in52> ^1 <o7> +)
    (<in52> ^2 <o11> +)
    (<in53> ^1 <o10> +)
    (<in53> ^2 <o7> +)
    (<in54> ^1 <o10> +)
    (<in54> ^2 <o8> +)
    (<in55> ^1 <o10> +)
    (<in55> ^2 <o11> +)
    (<in56> ^1 <o11> +)
    (<in56> ^2 <o10> +)
    (<in57> ^1 <o11> +)
    (<in57> ^2 <o7> +)
    (<in58> ^1 <o11> +)
    (<in58> ^2 <o8> +)
    (<in59> ^1 <o11> +)
    (<in59> ^2 <o9> +)
    (<in60> ^1 <o11> +)
    (<in60> ^2 <o12> +)
    (<in61> ^1 <o12> +)
    (<in61> ^2 <o11> +)
    (<in62> ^1 <o12> +)
    (<in62> ^2 <o8> +)
    (<in63> ^1 <o12> +)
    (<in63> ^2 <o9> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<diagonal-with1> ^instance <in72> +)
    (<diagonal-with1> ^instance <in73> +)
    (<diagonal-with1> ^instance <in74> +)
    (<diagonal-with1> ^instance <in75> +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<in64> ^1 <o1> +)
    (<in64> ^2 <o5> +)
    (<in65> ^1 <o2> +)
    (<in65> ^2 <o4> +)
    (<in66> ^1 <o2> +)
    (<in66> ^2 <o6> +)
    (<in67> ^1 <o3> +)
    (<in67> ^2 <o5> +)
    (<in68> ^1 <o4> +)
    (<in68> ^2 <o2> +)
    (<in69> ^1 <o4> +)
    (<in69> ^2 <o8> +)
    (<in70> ^1 <o5> +)
    (<in70> ^2 <o1> +)
    (<in71> ^1 <o5> +)
    (<in71> ^2 <o3> +)
    (<in72> ^1 <o5> +)
    (<in72> ^2 <o7> +)
    (<in73> ^1 <o5> +)
    (<in73> ^2 <o9> +)
    (<in74> ^1 <o6> +)
    (<in74> ^2 <o2> +)
    (<in75> ^1 <o6> +)
    (<in75> ^2 <o8> +)
    (<in76> ^1 <o7> +)
    (<in76> ^2 <o5> +)
    (<in77> ^1 <o8> +)
    (<in77> ^2 <o4> +)
    (<in78> ^1 <o8> +)
    (<in78> ^2 <o6> +)
    (<in79> ^1 <o9> +)
    (<in79> ^2 <o5> +)
    (<in80> ^1 <o9> +)
    (<in80> ^2 <o11> +)
    (<in81> ^1 <o11> +)
    (<in81> ^2 <o9> +)
    (<in82> ^1 <o12> +)
    (<in82> ^2 <o8> +)
    (<in83> ^1 <o8> +)
    (<in83> ^2 <o12> +)
    (<in84> ^1 <o10> +)
    (<in84> ^2 <o8> +)
    (<in85> ^1 <o8> +)
    (<in85> ^2 <o10> +)
    (<in86> ^1 <o11> +)
    (<in86> ^2 <o7> +)
    (<in87> ^1 <o7> +)
    (<in87> ^2 <o11> +)
}

sp {dialog-event*apply*game-state-change-respond*final-i5puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-i5puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^value 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^value 2 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^value 3 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^value 4 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^value 5 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^value 1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^value 2 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^value 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^value 4 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^value 5 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o7> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o8> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o9> +)
    (<in2> ^2 <o4> +)
    (<in3> ^1 <o10> +)
    (<in3> ^2 <o5> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o6> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o4> +)
    (<in7> ^2 <o9> +)
    (<in8> ^1 <o5> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o6> +)
    (<in9> ^2 <o11> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o2> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o1> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o4> +)
    (<in16> ^1 <o2> +)
    (<in16> ^2 <o5> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o3> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o1> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o2> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o5> +)
    (<in24> ^2 <o1> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o2> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o3> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o6> +)
    (<in29> ^1 <o6> +)
    (<in29> ^2 <o2> +)
    (<in30> ^1 <o6> +)
    (<in30> ^2 <o3> +)
    (<in31> ^1 <o6> +)
    (<in31> ^2 <o5> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in32> +)
    (<diagonal-with1> ^instance <in33> +)
    (<diagonal-with1> ^instance <in34> +)
    (<diagonal-with1> ^instance <in35> +)
    (<diagonal-with1> ^instance <in36> +)
    (<diagonal-with1> ^instance <in37> +)
    (<diagonal-with1> ^instance <in38> +)
    (<diagonal-with1> ^instance <in39> +)
    (<in32> ^1 <o1> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o2> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o2> +)
    (<in34> ^2 <o6> +)
    (<in35> ^1 <o3> +)
    (<in35> ^2 <o5> +)
    (<in36> ^1 <o4> +)
    (<in36> ^2 <o2> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o1> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o3> +)
    (<in39> ^1 <o6> +)
    (<in39> ^2 <o2> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-fox2
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-fox2)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o2> +)
    (<in3> ^1 <o3> +)
    (<in3> ^2 <o2> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o1> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o5> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o6> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o3> +)
}

sp {dialog-event*apply*game-state-change-respond*init-othello
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-othello)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 4 +)
    (<pr3> ^y 1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 1 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 2 +)
    (<pr5> ^y 2 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 3 +)
    (<pr6> ^y 2 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 4 +)
    (<pr7> ^y 2 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 1 +)
    (<pr8> ^y 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 2 +)
    (<pr9> ^y 3 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 3 +)
    (<pr10> ^y 3 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 4 +)
    (<pr11> ^y 3 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^x 1 +)
    (<pr12> ^y 4 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^x 2 +)
    (<pr13> ^y 4 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^x 3 +)
    (<pr14> ^y 4 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^x 4 +)
    (<pr15> ^y 4 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color red1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<pr17> ^color red1 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<pr18> ^color red1 +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category block +)
    (<pr19> ^color blue1 +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-20 +)
    (<o21> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color blue1 +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-21 +)
    (<o22> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color blue1 +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-22 +)
    (<o23> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o10> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o8> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o20> +)
    (<in3> ^2 <o6> +)
    (<in4> ^1 <o21> +)
    (<in4> ^2 <o7> +)
    (<in5> ^1 <o22> +)
    (<in5> ^2 <o11> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<in6> ^1 <o10> +)
    (<in6> ^2 <o17> +)
    (<in7> ^1 <o8> +)
    (<in7> ^2 <o18> +)
    (<in8> ^1 <o3> +)
    (<in8> ^2 <o19> +)
    (<in9> ^1 <o6> +)
    (<in9> ^2 <o20> +)
    (<in10> ^1 <o7> +)
    (<in10> ^2 <o21> +)
    (<in11> ^1 <o11> +)
    (<in11> ^2 <o22> +)
}

sp {dialog-event*apply*game-state-change-respond*init-5puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-5puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color orange1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^color red1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color orange1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color yellow1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color green1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o7> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o8> +)
    (<in1> ^2 <o3> +)
    (<in2> ^1 <o9> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o10> +)
    (<in3> ^2 <o5> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o6> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o2> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o3> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o9> +)
    (<in8> ^1 <o5> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o6> +)
    (<in9> ^2 <o11> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o2> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o1> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o4> +)
    (<in16> ^1 <o2> +)
    (<in16> ^2 <o5> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o3> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o1> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o2> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o5> +)
    (<in24> ^2 <o1> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o2> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o3> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o6> +)
    (<in29> ^1 <o6> +)
    (<in29> ^2 <o2> +)
    (<in30> ^1 <o6> +)
    (<in30> ^2 <o3> +)
    (<in31> ^1 <o6> +)
    (<in31> ^2 <o5> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in32> +)
    (<diagonal-with1> ^instance <in33> +)
    (<diagonal-with1> ^instance <in34> +)
    (<diagonal-with1> ^instance <in35> +)
    (<diagonal-with1> ^instance <in36> +)
    (<diagonal-with1> ^instance <in37> +)
    (<diagonal-with1> ^instance <in38> +)
    (<diagonal-with1> ^instance <in39> +)
    (<in32> ^1 <o1> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o2> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o2> +)
    (<in34> ^2 <o6> +)
    (<in35> ^1 <o3> +)
    (<in35> ^2 <o5> +)
    (<in36> ^1 <o4> +)
    (<in36> ^2 <o2> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o1> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o3> +)
    (<in39> ^1 <o6> +)
    (<in39> ^2 <o2> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-husbands
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-husbands)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^shape woman1 +)
    (<pr2> ^last-name smith1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^shape woman1 +)
    (<pr3> ^last-name bale1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^shape woman1 +)
    (<pr4> ^last-name rogers1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape man1 +)
    (<pr5> ^last-name smith1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^shape man1 +)
    (<pr6> ^last-name bale1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^shape man1 +)
    (<pr7> ^last-name rogers1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o1> +)
    (<in4> ^1 <o7> +)
    (<in4> ^2 <o2> +)
    (<in5> ^1 <o8> +)
    (<in5> ^2 <o1> +)
    (<in6> ^1 <o9> +)
    (<in6> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o3> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o6> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o7> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o1> +)
    (<in13> ^2 <o9> +)
}

sp {dialog-event*apply*game-state-change-respond*init-tower5
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-tower5)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size tiny1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size small1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size medium1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^size large1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^size giant1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o5> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o7> +)
    (<in3> ^1 <o7> +)
    (<in3> ^2 <o8> +)
    (<in4> ^1 <o8> +)
    (<in4> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o5> +)
    (<in5> ^2 <o4> +)
    (<in6> ^1 <o6> +)
    (<in6> ^2 <o5> +)
    (<in7> ^1 <o7> +)
    (<in7> ^2 <o6> +)
    (<in8> ^1 <o8> +)
    (<in8> ^2 <o7> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o8> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<larger-than1> ^instance <in18> +)
    (<larger-than1> ^instance <in19> +)
    (<larger-than1> ^instance <in20> +)
    (<larger-than1> ^instance <in21> +)
    (<larger-than1> ^instance <in22> +)
    (<larger-than1> ^instance <in23> +)
    (<larger-than1> ^instance <in24> +)
    (<larger-than1> ^instance <in25> +)
    (<larger-than1> ^instance <in26> +)
    (<larger-than1> ^instance <in27> +)
    (<larger-than1> ^instance <in28> +)
    (<larger-than1> ^instance <in29> +)
    (<larger-than1> ^instance <in30> +)
    (<larger-than1> ^instance <in31> +)
    (<larger-than1> ^instance <in32> +)
    (<larger-than1> ^instance <in33> +)
    (<larger-than1> ^instance <in34> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o3> +)
    (<in12> ^2 <o4> +)
    (<in13> ^1 <o1> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o5> +)
    (<in15> ^1 <o3> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o6> +)
    (<in19> ^1 <o1> +)
    (<in19> ^2 <o7> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o7> +)
    (<in21> ^1 <o3> +)
    (<in21> ^2 <o7> +)
    (<in22> ^1 <o1> +)
    (<in22> ^2 <o8> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o8> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o8> +)
    (<in25> ^1 <o8> +)
    (<in25> ^2 <o7> +)
    (<in26> ^1 <o8> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o8> +)
    (<in27> ^2 <o5> +)
    (<in28> ^1 <o8> +)
    (<in28> ^2 <o4> +)
    (<in29> ^1 <o7> +)
    (<in29> ^2 <o6> +)
    (<in30> ^1 <o7> +)
    (<in30> ^2 <o5> +)
    (<in31> ^1 <o7> +)
    (<in31> ^2 <o4> +)
    (<in32> ^1 <o6> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o6> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*final-blocksworld2
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-blocksworld2)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^color blue1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color purple1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^color yellow1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o6> +)
    (<in0> ^2 <o4> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o5> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o4> +)
    (<in3> ^2 <o6> +)
    (<in4> ^1 <o5> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-tower5
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-tower5)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size tiny1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size small1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size medium1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^size large1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^size giant1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o6> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o4> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o7> +)
    (<in3> ^1 <o7> +)
    (<in3> ^2 <o8> +)
    (<in4> ^1 <o8> +)
    (<in4> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o6> +)
    (<in5> ^2 <o4> +)
    (<in6> ^1 <o4> +)
    (<in6> ^2 <o5> +)
    (<in7> ^1 <o7> +)
    (<in7> ^2 <o6> +)
    (<in8> ^1 <o8> +)
    (<in8> ^2 <o7> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o8> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<larger-than1> ^instance <in18> +)
    (<larger-than1> ^instance <in19> +)
    (<larger-than1> ^instance <in20> +)
    (<larger-than1> ^instance <in21> +)
    (<larger-than1> ^instance <in22> +)
    (<larger-than1> ^instance <in23> +)
    (<larger-than1> ^instance <in24> +)
    (<larger-than1> ^instance <in25> +)
    (<larger-than1> ^instance <in26> +)
    (<larger-than1> ^instance <in27> +)
    (<larger-than1> ^instance <in28> +)
    (<larger-than1> ^instance <in29> +)
    (<larger-than1> ^instance <in30> +)
    (<larger-than1> ^instance <in31> +)
    (<larger-than1> ^instance <in32> +)
    (<larger-than1> ^instance <in33> +)
    (<larger-than1> ^instance <in34> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o3> +)
    (<in12> ^2 <o4> +)
    (<in13> ^1 <o1> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o5> +)
    (<in15> ^1 <o3> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o6> +)
    (<in19> ^1 <o1> +)
    (<in19> ^2 <o7> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o7> +)
    (<in21> ^1 <o3> +)
    (<in21> ^2 <o7> +)
    (<in22> ^1 <o1> +)
    (<in22> ^2 <o8> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o8> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o8> +)
    (<in25> ^1 <o8> +)
    (<in25> ^2 <o7> +)
    (<in26> ^1 <o8> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o8> +)
    (<in27> ^2 <o5> +)
    (<in28> ^1 <o8> +)
    (<in28> ^2 <o4> +)
    (<in29> ^1 <o7> +)
    (<in29> ^2 <o6> +)
    (<in30> ^1 <o7> +)
    (<in30> ^2 <o5> +)
    (<in31> ^1 <o7> +)
    (<in31> ^2 <o4> +)
    (<in32> ^1 <o6> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o6> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*init-blocksworld2
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-blocksworld2)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^color blue1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color purple1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^color yellow1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o5> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o5> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o6> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o6> +)
}

sp {dialog-event*apply*game-state-change-respond*final-tower4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-tower4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size tiny1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size small1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size medium1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^size large1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o5> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o7> +)
    (<in3> ^1 <o7> +)
    (<in3> ^2 <o3> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o5> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o6> +)
    (<in5> ^2 <o5> +)
    (<in6> ^1 <o7> +)
    (<in6> ^2 <o6> +)
    (<in7> ^1 <o3> +)
    (<in7> ^2 <o7> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in8> +)
    (<larger-than1> ^instance <in9> +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<larger-than1> ^instance <in18> +)
    (<larger-than1> ^instance <in19> +)
    (<larger-than1> ^instance <in20> +)
    (<larger-than1> ^instance <in21> +)
    (<larger-than1> ^instance <in22> +)
    (<larger-than1> ^instance <in23> +)
    (<larger-than1> ^instance <in24> +)
    (<larger-than1> ^instance <in25> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o4> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o5> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o3> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o1> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o6> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o7> +)
    (<in18> ^1 <o2> +)
    (<in18> ^2 <o7> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o7> +)
    (<in20> ^1 <o7> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o7> +)
    (<in21> ^2 <o5> +)
    (<in22> ^1 <o7> +)
    (<in22> ^2 <o4> +)
    (<in23> ^1 <o6> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o6> +)
    (<in24> ^2 <o4> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*init-3mens
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-3mens)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o11> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o12> +)
    (<in2> ^1 <o13> +)
    (<in2> ^2 <o14> +)
    (<in3> ^1 <o14> +)
    (<in3> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o10> +)
    (<in5> ^1 <o12> +)
    (<in5> ^2 <o11> +)
    (<in6> ^1 <o14> +)
    (<in6> ^2 <o13> +)
    (<in7> ^1 <o15> +)
    (<in7> ^2 <o14> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in8> +)
    (<near1> ^instance <in9> +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o2> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o4> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o5> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o1> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o3> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o4> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o5> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o6> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o3> +)
    (<in17> ^2 <o5> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o6> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o4> +)
    (<in20> ^2 <o2> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o5> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o7> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o8> +)
    (<in24> ^1 <o5> +)
    (<in24> ^2 <o1> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o2> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o3> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o6> +)
    (<in29> ^1 <o5> +)
    (<in29> ^2 <o7> +)
    (<in30> ^1 <o5> +)
    (<in30> ^2 <o8> +)
    (<in31> ^1 <o5> +)
    (<in31> ^2 <o9> +)
    (<in32> ^1 <o6> +)
    (<in32> ^2 <o2> +)
    (<in33> ^1 <o6> +)
    (<in33> ^2 <o3> +)
    (<in34> ^1 <o6> +)
    (<in34> ^2 <o5> +)
    (<in35> ^1 <o6> +)
    (<in35> ^2 <o8> +)
    (<in36> ^1 <o6> +)
    (<in36> ^2 <o9> +)
    (<in37> ^1 <o7> +)
    (<in37> ^2 <o4> +)
    (<in38> ^1 <o7> +)
    (<in38> ^2 <o5> +)
    (<in39> ^1 <o7> +)
    (<in39> ^2 <o8> +)
    (<in40> ^1 <o8> +)
    (<in40> ^2 <o7> +)
    (<in41> ^1 <o8> +)
    (<in41> ^2 <o4> +)
    (<in42> ^1 <o8> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o8> +)
    (<in43> ^2 <o6> +)
    (<in44> ^1 <o8> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o9> +)
    (<in45> ^2 <o8> +)
    (<in46> ^1 <o9> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o9> +)
    (<in47> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in48> +)
    (<diagonal-with1> ^instance <in49> +)
    (<diagonal-with1> ^instance <in50> +)
    (<diagonal-with1> ^instance <in51> +)
    (<diagonal-with1> ^instance <in52> +)
    (<diagonal-with1> ^instance <in53> +)
    (<diagonal-with1> ^instance <in54> +)
    (<diagonal-with1> ^instance <in55> +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<in48> ^1 <o1> +)
    (<in48> ^2 <o5> +)
    (<in49> ^1 <o2> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o2> +)
    (<in50> ^2 <o6> +)
    (<in51> ^1 <o3> +)
    (<in51> ^2 <o5> +)
    (<in52> ^1 <o4> +)
    (<in52> ^2 <o2> +)
    (<in53> ^1 <o4> +)
    (<in53> ^2 <o8> +)
    (<in54> ^1 <o5> +)
    (<in54> ^2 <o1> +)
    (<in55> ^1 <o5> +)
    (<in55> ^2 <o3> +)
    (<in56> ^1 <o5> +)
    (<in56> ^2 <o7> +)
    (<in57> ^1 <o5> +)
    (<in57> ^2 <o9> +)
    (<in58> ^1 <o6> +)
    (<in58> ^2 <o2> +)
    (<in59> ^1 <o6> +)
    (<in59> ^2 <o8> +)
    (<in60> ^1 <o7> +)
    (<in60> ^2 <o5> +)
    (<in61> ^1 <o8> +)
    (<in61> ^2 <o4> +)
    (<in62> ^1 <o8> +)
    (<in62> ^2 <o6> +)
    (<in63> ^1 <o9> +)
    (<in63> ^2 <o5> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in64> +)
    (<linear> ^instance <in65> +)
    (<linear> ^instance <in66> +)
    (<linear> ^instance <in67> +)
    (<linear> ^instance <in68> +)
    (<linear> ^instance <in69> +)
    (<linear> ^instance <in70> +)
    (<linear> ^instance <in71> +)
    (<in64> ^1 <set64> +)
    (<set64> ^object <o1> +)
    (<set64> ^object <o2> +)
    (<set64> ^object <o3> +)
    (<in65> ^1 <set65> +)
    (<set65> ^object <o1> +)
    (<set65> ^object <o5> +)
    (<set65> ^object <o9> +)
    (<in66> ^1 <set66> +)
    (<set66> ^object <o1> +)
    (<set66> ^object <o4> +)
    (<set66> ^object <o7> +)
    (<in67> ^1 <set67> +)
    (<set67> ^object <o4> +)
    (<set67> ^object <o5> +)
    (<set67> ^object <o6> +)
    (<in68> ^1 <set68> +)
    (<set68> ^object <o7> +)
    (<set68> ^object <o8> +)
    (<set68> ^object <o9> +)
    (<in69> ^1 <set69> +)
    (<set69> ^object <o2> +)
    (<set69> ^object <o5> +)
    (<set69> ^object <o8> +)
    (<in70> ^1 <set70> +)
    (<set70> ^object <o3> +)
    (<set70> ^object <o6> +)
    (<set70> ^object <o9> +)
    (<in71> ^1 <set71> +)
    (<set71> ^object <o3> +)
    (<set71> ^object <o5> +)
    (<set71> ^object <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*final-mac
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-mac)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^shape missionary1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^shape missionary1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^shape missionary1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape cannibal1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^shape cannibal1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^shape cannibal1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o2> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o2> +)
    (<in4> ^1 <o7> +)
    (<in4> ^2 <o2> +)
    (<in5> ^1 <o8> +)
    (<in5> ^2 <o2> +)
    (<in6> ^1 <o9> +)
    (<in6> ^2 <o2> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o3> +)
    (<in8> ^1 <o2> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o6> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o7> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o9> +)
}

sp {dialog-event*apply*game-state-change-respond*init-peg
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-peg)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <oobject> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 4 +)
    (<pr3> ^y 1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 1 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 2 +)
    (<pr5> ^y 2 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 3 +)
    (<pr6> ^y 2 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 1 +)
    (<pr7> ^y 3 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 2 +)
    (<pr8> ^y 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 1 +)
    (<pr9> ^y 4 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<oobject> ^item-type object +)
    (<oobject> ^handle object-20 +)
    (<oobject> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^name garbage +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<on1> ^instance <in8> +)
    (<in0> ^1 <o11> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o12> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o13> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o14> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o15> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o16> +)
    (<in5> ^2 <o6> +)
    (<in6> ^1 <o17> +)
    (<in6> ^2 <o7> +)
    (<in7> ^1 <o18> +)
    (<in7> ^2 <o9> +)
    (<in8> ^1 <o19> +)
    (<in8> ^2 <o10> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<below1> ^instance <in16> +)
    (<below1> ^instance <in17> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o3> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o4> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o5> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o6> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o7> +)
    (<in15> ^2 <o17> +)
    (<in16> ^1 <o9> +)
    (<in16> ^2 <o18> +)
    (<in17> ^1 <o10> +)
    (<in17> ^2 <o19> +)
}

sp {dialog-event*apply*game-state-change-respond*final-fox
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-fox)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o2> +)
    (<in3> ^1 <o3> +)
    (<in3> ^2 <o2> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o2> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o2> +)
    (<in5> ^2 <o5> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o6> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o3> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-othello
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-othello)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<objs> ^object <o26> +)
    (<objs> ^object <o27> +)
    (<objs> ^object <o28> +)
    (<objs> ^object <o29> +)
    (<objs> ^object <o30> +)
    (<objs> ^object <o31> +)
    (<objs> ^object <o32> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 4 +)
    (<pr3> ^y 1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 1 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 2 +)
    (<pr5> ^y 2 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 3 +)
    (<pr6> ^y 2 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 4 +)
    (<pr7> ^y 2 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 1 +)
    (<pr8> ^y 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 2 +)
    (<pr9> ^y 3 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 3 +)
    (<pr10> ^y 3 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 4 +)
    (<pr11> ^y 3 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^x 1 +)
    (<pr12> ^y 4 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^x 2 +)
    (<pr13> ^y 4 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^x 3 +)
    (<pr14> ^y 4 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^x 4 +)
    (<pr15> ^y 4 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color red1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<pr17> ^color red1 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<pr18> ^color red1 +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category block +)
    (<pr19> ^color blue1 +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-20 +)
    (<o21> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color blue1 +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-21 +)
    (<o22> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color blue1 +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-22 +)
    (<o23> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color blue1 +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-23 +)
    (<o24> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color blue1 +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-24 +)
    (<o25> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category block +)
    (<pr24> ^color red1 +)
    (<o26> ^item-type object +)
    (<o26> ^handle object-25 +)
    (<o26> ^predicates <pr25> +)
    (<pr25> ^visible true +)
    (<pr25> ^category block +)
    (<pr25> ^color blue1 +)
    (<o27> ^item-type object +)
    (<o27> ^handle object-26 +)
    (<o27> ^predicates <pr26> +)
    (<pr26> ^visible true +)
    (<pr26> ^category block +)
    (<pr26> ^color red1 +)
    (<o28> ^item-type object +)
    (<o28> ^handle object-27 +)
    (<o28> ^predicates <pr27> +)
    (<pr27> ^visible true +)
    (<pr27> ^category block +)
    (<pr27> ^color blue1 +)
    (<o29> ^item-type object +)
    (<o29> ^handle object-28 +)
    (<o29> ^predicates <pr28> +)
    (<pr28> ^visible true +)
    (<pr28> ^category block +)
    (<pr28> ^color red1 +)
    (<o30> ^item-type object +)
    (<o30> ^handle object-29 +)
    (<o30> ^predicates <pr29> +)
    (<pr29> ^visible true +)
    (<pr29> ^category block +)
    (<pr29> ^color blue1 +)
    (<o31> ^item-type object +)
    (<o31> ^handle object-30 +)
    (<o31> ^predicates <pr30> +)
    (<pr30> ^visible true +)
    (<pr30> ^category block +)
    (<pr30> ^color blue1 +)
    (<o32> ^item-type object +)
    (<o32> ^handle object-31 +)
    (<o32> ^predicates <pr31> +)
    (<pr31> ^visible true +)
    (<pr31> ^category block +)
    (<pr31> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<on1> ^instance <in8> +)
    (<on1> ^instance <in9> +)
    (<on1> ^instance <in10> +)
    (<on1> ^instance <in11> +)
    (<on1> ^instance <in12> +)
    (<on1> ^instance <in13> +)
    (<on1> ^instance <in14> +)
    (<on1> ^instance <in15> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o20> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o21> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o22> +)
    (<in5> ^2 <o6> +)
    (<in6> ^1 <o23> +)
    (<in6> ^2 <o7> +)
    (<in7> ^1 <o24> +)
    (<in7> ^2 <o8> +)
    (<in8> ^1 <o25> +)
    (<in8> ^2 <o9> +)
    (<in9> ^1 <o26> +)
    (<in9> ^2 <o10> +)
    (<in10> ^1 <o27> +)
    (<in10> ^2 <o11> +)
    (<in11> ^1 <o28> +)
    (<in11> ^2 <o12> +)
    (<in12> ^1 <o29> +)
    (<in12> ^2 <o13> +)
    (<in13> ^1 <o30> +)
    (<in13> ^2 <o14> +)
    (<in14> ^1 <o31> +)
    (<in14> ^2 <o15> +)
    (<in15> ^1 <o32> +)
    (<in15> ^2 <o16> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in16> +)
    (<below1> ^instance <in17> +)
    (<below1> ^instance <in18> +)
    (<below1> ^instance <in19> +)
    (<below1> ^instance <in20> +)
    (<below1> ^instance <in21> +)
    (<below1> ^instance <in22> +)
    (<below1> ^instance <in23> +)
    (<below1> ^instance <in24> +)
    (<below1> ^instance <in25> +)
    (<below1> ^instance <in26> +)
    (<below1> ^instance <in27> +)
    (<below1> ^instance <in28> +)
    (<below1> ^instance <in29> +)
    (<below1> ^instance <in30> +)
    (<below1> ^instance <in31> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o17> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o18> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o19> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o20> +)
    (<in20> ^1 <o5> +)
    (<in20> ^2 <o21> +)
    (<in21> ^1 <o6> +)
    (<in21> ^2 <o22> +)
    (<in22> ^1 <o7> +)
    (<in22> ^2 <o23> +)
    (<in23> ^1 <o8> +)
    (<in23> ^2 <o24> +)
    (<in24> ^1 <o9> +)
    (<in24> ^2 <o25> +)
    (<in25> ^1 <o10> +)
    (<in25> ^2 <o26> +)
    (<in26> ^1 <o11> +)
    (<in26> ^2 <o27> +)
    (<in27> ^1 <o12> +)
    (<in27> ^2 <o28> +)
    (<in28> ^1 <o13> +)
    (<in28> ^2 <o29> +)
    (<in29> ^1 <o14> +)
    (<in29> ^2 <o30> +)
    (<in30> ^1 <o15> +)
    (<in30> ^2 <o31> +)
    (<in31> ^1 <o16> +)
    (<in31> ^2 <o32> +)
}

sp {dialog-event*apply*game-state-change-respond*final-pushmaze
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-pushmaze)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 1 +)
    (<pr3> ^y 2 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 2 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 3 +)
    (<pr5> ^y 2 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 1 +)
    (<pr6> ^y 3 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 2 +)
    (<pr7> ^y 3 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 3 +)
    (<pr8> ^y 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 1 +)
    (<pr9> ^y 4 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 2 +)
    (<pr10> ^y 4 +)
    (<pr10> ^color blue1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 3 +)
    (<pr11> ^y 4 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color black1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color black1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color black1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color black1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o13> +)
    (<in0> ^2 <o11> +)
    (<in1> ^1 <o14> +)
    (<in1> ^2 <o10> +)
    (<in2> ^1 <o15> +)
    (<in2> ^2 <o5> +)
    (<in3> ^1 <o16> +)
    (<in3> ^2 <o6> +)
    (<in4> ^1 <o17> +)
    (<in4> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o11> +)
    (<in5> ^2 <o13> +)
    (<in6> ^1 <o10> +)
    (<in6> ^2 <o14> +)
    (<in7> ^1 <o5> +)
    (<in7> ^2 <o15> +)
    (<in8> ^1 <o6> +)
    (<in8> ^2 <o16> +)
    (<in9> ^1 <o9> +)
    (<in9> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<near1> ^instance <in56> +)
    (<near1> ^instance <in57> +)
    (<near1> ^instance <in58> +)
    (<near1> ^instance <in59> +)
    (<near1> ^instance <in60> +)
    (<near1> ^instance <in61> +)
    (<near1> ^instance <in62> +)
    (<near1> ^instance <in63> +)
    (<near1> ^instance <in64> +)
    (<near1> ^instance <in65> +)
    (<near1> ^instance <in66> +)
    (<near1> ^instance <in67> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o2> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o1> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o4> +)
    (<in16> ^1 <o2> +)
    (<in16> ^2 <o5> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o3> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o1> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o2> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o4> +)
    (<in24> ^2 <o7> +)
    (<in25> ^1 <o4> +)
    (<in25> ^2 <o8> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o1> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o2> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o3> +)
    (<in29> ^1 <o5> +)
    (<in29> ^2 <o4> +)
    (<in30> ^1 <o5> +)
    (<in30> ^2 <o6> +)
    (<in31> ^1 <o5> +)
    (<in31> ^2 <o7> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o8> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o9> +)
    (<in34> ^1 <o6> +)
    (<in34> ^2 <o2> +)
    (<in35> ^1 <o6> +)
    (<in35> ^2 <o3> +)
    (<in36> ^1 <o6> +)
    (<in36> ^2 <o5> +)
    (<in37> ^1 <o6> +)
    (<in37> ^2 <o8> +)
    (<in38> ^1 <o6> +)
    (<in38> ^2 <o9> +)
    (<in39> ^1 <o7> +)
    (<in39> ^2 <o4> +)
    (<in40> ^1 <o7> +)
    (<in40> ^2 <o5> +)
    (<in41> ^1 <o7> +)
    (<in41> ^2 <o8> +)
    (<in42> ^1 <o8> +)
    (<in42> ^2 <o7> +)
    (<in43> ^1 <o8> +)
    (<in43> ^2 <o4> +)
    (<in44> ^1 <o8> +)
    (<in44> ^2 <o5> +)
    (<in45> ^1 <o8> +)
    (<in45> ^2 <o6> +)
    (<in46> ^1 <o8> +)
    (<in46> ^2 <o9> +)
    (<in47> ^1 <o9> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o9> +)
    (<in48> ^2 <o5> +)
    (<in49> ^1 <o9> +)
    (<in49> ^2 <o6> +)
    (<in50> ^1 <o9> +)
    (<in50> ^2 <o11> +)
    (<in51> ^1 <o9> +)
    (<in51> ^2 <o12> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o19> +)
    (<in53> ^1 <o8> +)
    (<in53> ^2 <o11> +)
    (<in54> ^1 <o8> +)
    (<in54> ^2 <o12> +)
    (<in55> ^1 <o7> +)
    (<in55> ^2 <o10> +)
    (<in56> ^1 <o7> +)
    (<in56> ^2 <o11> +)
    (<in57> ^1 <o10> +)
    (<in57> ^2 <o7> +)
    (<in58> ^1 <o10> +)
    (<in58> ^2 <o8> +)
    (<in59> ^1 <o10> +)
    (<in59> ^2 <o11> +)
    (<in60> ^1 <o11> +)
    (<in60> ^2 <o10> +)
    (<in61> ^1 <o11> +)
    (<in61> ^2 <o7> +)
    (<in62> ^1 <o11> +)
    (<in62> ^2 <o8> +)
    (<in63> ^1 <o11> +)
    (<in63> ^2 <o9> +)
    (<in64> ^1 <o11> +)
    (<in64> ^2 <o12> +)
    (<in65> ^1 <o12> +)
    (<in65> ^2 <o11> +)
    (<in66> ^1 <o12> +)
    (<in66> ^2 <o8> +)
    (<in67> ^1 <o12> +)
    (<in67> ^2 <o9> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<diagonal-with1> ^instance <in72> +)
    (<diagonal-with1> ^instance <in73> +)
    (<diagonal-with1> ^instance <in74> +)
    (<diagonal-with1> ^instance <in75> +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<diagonal-with1> ^instance <in88> +)
    (<diagonal-with1> ^instance <in89> +)
    (<diagonal-with1> ^instance <in90> +)
    (<diagonal-with1> ^instance <in91> +)
    (<in68> ^1 <o1> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o2> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o2> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o3> +)
    (<in71> ^2 <o5> +)
    (<in72> ^1 <o4> +)
    (<in72> ^2 <o2> +)
    (<in73> ^1 <o4> +)
    (<in73> ^2 <o8> +)
    (<in74> ^1 <o5> +)
    (<in74> ^2 <o1> +)
    (<in75> ^1 <o5> +)
    (<in75> ^2 <o3> +)
    (<in76> ^1 <o5> +)
    (<in76> ^2 <o7> +)
    (<in77> ^1 <o5> +)
    (<in77> ^2 <o9> +)
    (<in78> ^1 <o6> +)
    (<in78> ^2 <o2> +)
    (<in79> ^1 <o6> +)
    (<in79> ^2 <o8> +)
    (<in80> ^1 <o7> +)
    (<in80> ^2 <o5> +)
    (<in81> ^1 <o8> +)
    (<in81> ^2 <o4> +)
    (<in82> ^1 <o8> +)
    (<in82> ^2 <o6> +)
    (<in83> ^1 <o9> +)
    (<in83> ^2 <o5> +)
    (<in84> ^1 <o9> +)
    (<in84> ^2 <o11> +)
    (<in85> ^1 <o11> +)
    (<in85> ^2 <o9> +)
    (<in86> ^1 <o12> +)
    (<in86> ^2 <o8> +)
    (<in87> ^1 <o8> +)
    (<in87> ^2 <o12> +)
    (<in88> ^1 <o10> +)
    (<in88> ^2 <o8> +)
    (<in89> ^1 <o8> +)
    (<in89> ^2 <o10> +)
    (<in90> ^1 <o11> +)
    (<in90> ^2 <o7> +)
    (<in91> ^1 <o7> +)
    (<in91> ^2 <o11> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-breakthrough
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-breakthrough)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <above1> +)
    (<preds> ^predicate <under1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color blue1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color blue1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^color red1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^color red1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^color red1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^color red1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color red1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<pr17> ^color red1 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<pr18> ^color red1 +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category block +)
    (<pr19> ^color red1 +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-20 +)
    (<o21> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color blue1 +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-21 +)
    (<o22> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color blue1 +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-22 +)
    (<o23> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color blue1 +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-23 +)
    (<o24> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color blue1 +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-24 +)
    (<o25> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category location +)
    (<pr24> ^name garbage +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o25> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o20> +)
    (<in3> ^2 <o10> +)
    (<in4> ^1 <o21> +)
    (<in4> ^2 <o1> +)
    (<in5> ^1 <o22> +)
    (<in5> ^2 <o14> +)
    (<in6> ^1 <o23> +)
    (<in6> ^2 <o15> +)
    (<in7> ^1 <o24> +)
    (<in7> ^2 <o16> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o25> +)
    (<in8> ^2 <o17> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o18> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o19> +)
    (<in11> ^1 <o10> +)
    (<in11> ^2 <o20> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o21> +)
    (<in13> ^1 <o14> +)
    (<in13> ^2 <o22> +)
    (<in14> ^1 <o15> +)
    (<in14> ^2 <o23> +)
    (<in15> ^1 <o16> +)
    (<in15> ^2 <o24> +)
    (<above1> ^item-type predicate +)
    (<above1> ^handle above1 +)
    (<above1> ^instance <in16> +)
    (<above1> ^instance <in17> +)
    (<above1> ^instance <in18> +)
    (<above1> ^instance <in19> +)
    (<above1> ^instance <in20> +)
    (<above1> ^instance <in21> +)
    (<above1> ^instance <in22> +)
    (<above1> ^instance <in23> +)
    (<above1> ^instance <in24> +)
    (<above1> ^instance <in25> +)
    (<above1> ^instance <in26> +)
    (<above1> ^instance <in27> +)
    (<above1> ^instance <in28> +)
    (<above1> ^instance <in29> +)
    (<above1> ^instance <in30> +)
    (<above1> ^instance <in31> +)
    (<above1> ^instance <in32> +)
    (<above1> ^instance <in33> +)
    (<above1> ^instance <in34> +)
    (<above1> ^instance <in35> +)
    (<above1> ^instance <in36> +)
    (<above1> ^instance <in37> +)
    (<above1> ^instance <in38> +)
    (<above1> ^instance <in39> +)
    (<above1> ^instance <in40> +)
    (<above1> ^instance <in41> +)
    (<above1> ^instance <in42> +)
    (<above1> ^instance <in43> +)
    (<above1> ^instance <in44> +)
    (<above1> ^instance <in45> +)
    (<in16> ^1 <o13> +)
    (<in16> ^2 <o7> +)
    (<in17> ^1 <o14> +)
    (<in17> ^2 <o7> +)
    (<in18> ^1 <o13> +)
    (<in18> ^2 <o8> +)
    (<in19> ^1 <o14> +)
    (<in19> ^2 <o8> +)
    (<in20> ^1 <o15> +)
    (<in20> ^2 <o8> +)
    (<in21> ^1 <o14> +)
    (<in21> ^2 <o9> +)
    (<in22> ^1 <o15> +)
    (<in22> ^2 <o9> +)
    (<in23> ^1 <o16> +)
    (<in23> ^2 <o9> +)
    (<in24> ^1 <o15> +)
    (<in24> ^2 <o12> +)
    (<in25> ^1 <o16> +)
    (<in25> ^2 <o12> +)
    (<in26> ^1 <o7> +)
    (<in26> ^2 <o4> +)
    (<in27> ^1 <o8> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o7> +)
    (<in28> ^2 <o5> +)
    (<in29> ^1 <o8> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o9> +)
    (<in30> ^2 <o5> +)
    (<in31> ^1 <o8> +)
    (<in31> ^2 <o6> +)
    (<in32> ^1 <o9> +)
    (<in32> ^2 <o6> +)
    (<in33> ^1 <o12> +)
    (<in33> ^2 <o6> +)
    (<in34> ^1 <o9> +)
    (<in34> ^2 <o11> +)
    (<in35> ^1 <o12> +)
    (<in35> ^2 <o11> +)
    (<in36> ^1 <o4> +)
    (<in36> ^2 <o1> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o1> +)
    (<in38> ^1 <o4> +)
    (<in38> ^2 <o2> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o2> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o5> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o3> +)
    (<in43> ^1 <o11> +)
    (<in43> ^2 <o3> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o10> +)
    (<in45> ^1 <o11> +)
    (<in45> ^2 <o10> +)
    (<under1> ^item-type predicate +)
    (<under1> ^handle under1 +)
    (<under1> ^instance <in46> +)
    (<under1> ^instance <in47> +)
    (<under1> ^instance <in48> +)
    (<under1> ^instance <in49> +)
    (<under1> ^instance <in50> +)
    (<under1> ^instance <in51> +)
    (<under1> ^instance <in52> +)
    (<under1> ^instance <in53> +)
    (<under1> ^instance <in54> +)
    (<under1> ^instance <in55> +)
    (<under1> ^instance <in56> +)
    (<under1> ^instance <in57> +)
    (<under1> ^instance <in58> +)
    (<under1> ^instance <in59> +)
    (<under1> ^instance <in60> +)
    (<under1> ^instance <in61> +)
    (<under1> ^instance <in62> +)
    (<under1> ^instance <in63> +)
    (<under1> ^instance <in64> +)
    (<under1> ^instance <in65> +)
    (<under1> ^instance <in66> +)
    (<under1> ^instance <in67> +)
    (<under1> ^instance <in68> +)
    (<under1> ^instance <in69> +)
    (<under1> ^instance <in70> +)
    (<under1> ^instance <in71> +)
    (<under1> ^instance <in72> +)
    (<under1> ^instance <in73> +)
    (<under1> ^instance <in74> +)
    (<under1> ^instance <in75> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o13> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o14> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o13> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o14> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o15> +)
    (<in51> ^1 <o9> +)
    (<in51> ^2 <o14> +)
    (<in52> ^1 <o9> +)
    (<in52> ^2 <o15> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o16> +)
    (<in54> ^1 <o12> +)
    (<in54> ^2 <o15> +)
    (<in55> ^1 <o12> +)
    (<in55> ^2 <o16> +)
    (<in56> ^1 <o4> +)
    (<in56> ^2 <o7> +)
    (<in57> ^1 <o4> +)
    (<in57> ^2 <o8> +)
    (<in58> ^1 <o5> +)
    (<in58> ^2 <o7> +)
    (<in59> ^1 <o5> +)
    (<in59> ^2 <o8> +)
    (<in60> ^1 <o5> +)
    (<in60> ^2 <o9> +)
    (<in61> ^1 <o6> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o6> +)
    (<in62> ^2 <o9> +)
    (<in63> ^1 <o6> +)
    (<in63> ^2 <o12> +)
    (<in64> ^1 <o11> +)
    (<in64> ^2 <o9> +)
    (<in65> ^1 <o11> +)
    (<in65> ^2 <o12> +)
    (<in66> ^1 <o1> +)
    (<in66> ^2 <o4> +)
    (<in67> ^1 <o1> +)
    (<in67> ^2 <o5> +)
    (<in68> ^1 <o2> +)
    (<in68> ^2 <o4> +)
    (<in69> ^1 <o2> +)
    (<in69> ^2 <o5> +)
    (<in70> ^1 <o2> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o3> +)
    (<in71> ^2 <o5> +)
    (<in72> ^1 <o3> +)
    (<in72> ^2 <o6> +)
    (<in73> ^1 <o3> +)
    (<in73> ^2 <o11> +)
    (<in74> ^1 <o10> +)
    (<in74> ^2 <o6> +)
    (<in75> ^1 <o10> +)
    (<in75> ^2 <o11> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<diagonal-with1> ^instance <in88> +)
    (<diagonal-with1> ^instance <in89> +)
    (<diagonal-with1> ^instance <in90> +)
    (<diagonal-with1> ^instance <in91> +)
    (<diagonal-with1> ^instance <in92> +)
    (<diagonal-with1> ^instance <in93> +)
    (<diagonal-with1> ^instance <in94> +)
    (<diagonal-with1> ^instance <in95> +)
    (<diagonal-with1> ^instance <in96> +)
    (<diagonal-with1> ^instance <in97> +)
    (<diagonal-with1> ^instance <in98> +)
    (<diagonal-with1> ^instance <in99> +)
    (<diagonal-with1> ^instance <in100> +)
    (<diagonal-with1> ^instance <in101> +)
    (<diagonal-with1> ^instance <in102> +)
    (<diagonal-with1> ^instance <in103> +)
    (<diagonal-with1> ^instance <in104> +)
    (<diagonal-with1> ^instance <in105> +)
    (<diagonal-with1> ^instance <in106> +)
    (<diagonal-with1> ^instance <in107> +)
    (<diagonal-with1> ^instance <in108> +)
    (<diagonal-with1> ^instance <in109> +)
    (<diagonal-with1> ^instance <in110> +)
    (<diagonal-with1> ^instance <in111> +)
    (<in76> ^1 <o1> +)
    (<in76> ^2 <o5> +)
    (<in77> ^1 <o2> +)
    (<in77> ^2 <o4> +)
    (<in78> ^1 <o2> +)
    (<in78> ^2 <o6> +)
    (<in79> ^1 <o3> +)
    (<in79> ^2 <o5> +)
    (<in80> ^1 <o4> +)
    (<in80> ^2 <o2> +)
    (<in81> ^1 <o4> +)
    (<in81> ^2 <o8> +)
    (<in82> ^1 <o5> +)
    (<in82> ^2 <o1> +)
    (<in83> ^1 <o5> +)
    (<in83> ^2 <o3> +)
    (<in84> ^1 <o5> +)
    (<in84> ^2 <o7> +)
    (<in85> ^1 <o5> +)
    (<in85> ^2 <o9> +)
    (<in86> ^1 <o6> +)
    (<in86> ^2 <o2> +)
    (<in87> ^1 <o6> +)
    (<in87> ^2 <o8> +)
    (<in88> ^1 <o7> +)
    (<in88> ^2 <o5> +)
    (<in89> ^1 <o8> +)
    (<in89> ^2 <o4> +)
    (<in90> ^1 <o8> +)
    (<in90> ^2 <o6> +)
    (<in91> ^1 <o9> +)
    (<in91> ^2 <o5> +)
    (<in92> ^1 <o3> +)
    (<in92> ^2 <o11> +)
    (<in93> ^1 <o11> +)
    (<in93> ^2 <o3> +)
    (<in94> ^1 <o6> +)
    (<in94> ^2 <o10> +)
    (<in95> ^1 <o10> +)
    (<in95> ^2 <o6> +)
    (<in96> ^1 <o9> +)
    (<in96> ^2 <o11> +)
    (<in97> ^1 <o11> +)
    (<in97> ^2 <o9> +)
    (<in98> ^1 <o12> +)
    (<in98> ^2 <o6> +)
    (<in99> ^1 <o6> +)
    (<in99> ^2 <o12> +)
    (<in100> ^1 <o16> +)
    (<in100> ^2 <o9> +)
    (<in101> ^1 <o9> +)
    (<in101> ^2 <o16> +)
    (<in102> ^1 <o12> +)
    (<in102> ^2 <o15> +)
    (<in103> ^1 <o15> +)
    (<in103> ^2 <o12> +)
    (<in104> ^1 <o14> +)
    (<in104> ^2 <o9> +)
    (<in105> ^1 <o9> +)
    (<in105> ^2 <o14> +)
    (<in106> ^1 <o8> +)
    (<in106> ^2 <o15> +)
    (<in107> ^1 <o15> +)
    (<in107> ^2 <o8> +)
    (<in108> ^1 <o14> +)
    (<in108> ^2 <o7> +)
    (<in109> ^1 <o7> +)
    (<in109> ^2 <o14> +)
    (<in110> ^1 <o13> +)
    (<in110> ^2 <o8> +)
    (<in111> ^1 <o8> +)
    (<in111> ^2 <o13> +)
}

sp {dialog-event*apply*game-state-change-respond*init-i15puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-i15puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<objs> ^object <o26> +)
    (<objs> ^object <o27> +)
    (<objs> ^object <o28> +)
    (<objs> ^object <o29> +)
    (<objs> ^object <o30> +)
    (<objs> ^object <o31> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^value 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^value 2 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^value 3 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^value 4 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^value 5 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^value 6 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^value 7 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^value 8 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^value 9 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^value 10 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^value 11 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^value 12 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^value 13 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^value 14 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^value 15 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^value 16 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^value 1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<pr17> ^value 2 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<pr18> ^value 3 +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category block +)
    (<pr19> ^value 4 +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-20 +)
    (<o21> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^value 5 +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-21 +)
    (<o22> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^value 6 +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-22 +)
    (<o23> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^value 7 +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-23 +)
    (<o24> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^value 8 +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-24 +)
    (<o25> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category block +)
    (<pr24> ^value 9 +)
    (<o26> ^item-type object +)
    (<o26> ^handle object-25 +)
    (<o26> ^predicates <pr25> +)
    (<pr25> ^visible true +)
    (<pr25> ^category block +)
    (<pr25> ^value 16 +)
    (<o27> ^item-type object +)
    (<o27> ^handle object-26 +)
    (<o27> ^predicates <pr26> +)
    (<pr26> ^visible true +)
    (<pr26> ^category block +)
    (<pr26> ^value 11 +)
    (<o28> ^item-type object +)
    (<o28> ^handle object-27 +)
    (<o28> ^predicates <pr27> +)
    (<pr27> ^visible true +)
    (<pr27> ^category block +)
    (<pr27> ^value 12 +)
    (<o29> ^item-type object +)
    (<o29> ^handle object-28 +)
    (<o29> ^predicates <pr28> +)
    (<pr28> ^visible true +)
    (<pr28> ^category block +)
    (<pr28> ^value 13 +)
    (<o30> ^item-type object +)
    (<o30> ^handle object-29 +)
    (<o30> ^predicates <pr29> +)
    (<pr29> ^visible true +)
    (<pr29> ^category block +)
    (<pr29> ^value 14 +)
    (<o31> ^item-type object +)
    (<o31> ^handle object-30 +)
    (<o31> ^predicates <pr30> +)
    (<pr30> ^visible true +)
    (<pr30> ^category block +)
    (<pr30> ^value 15 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<on1> ^instance <in8> +)
    (<on1> ^instance <in9> +)
    (<on1> ^instance <in10> +)
    (<on1> ^instance <in11> +)
    (<on1> ^instance <in12> +)
    (<on1> ^instance <in13> +)
    (<on1> ^instance <in14> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o10> +)
    (<in3> ^1 <o20> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o21> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o22> +)
    (<in5> ^2 <o6> +)
    (<in6> ^1 <o23> +)
    (<in6> ^2 <o7> +)
    (<in7> ^1 <o24> +)
    (<in7> ^2 <o8> +)
    (<in8> ^1 <o25> +)
    (<in8> ^2 <o9> +)
    (<in9> ^1 <o26> +)
    (<in9> ^2 <o16> +)
    (<in10> ^1 <o27> +)
    (<in10> ^2 <o11> +)
    (<in11> ^1 <o28> +)
    (<in11> ^2 <o12> +)
    (<in12> ^1 <o29> +)
    (<in12> ^2 <o13> +)
    (<in13> ^1 <o30> +)
    (<in13> ^2 <o14> +)
    (<in14> ^1 <o31> +)
    (<in14> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in15> +)
    (<below1> ^instance <in16> +)
    (<below1> ^instance <in17> +)
    (<below1> ^instance <in18> +)
    (<below1> ^instance <in19> +)
    (<below1> ^instance <in20> +)
    (<below1> ^instance <in21> +)
    (<below1> ^instance <in22> +)
    (<below1> ^instance <in23> +)
    (<below1> ^instance <in24> +)
    (<below1> ^instance <in25> +)
    (<below1> ^instance <in26> +)
    (<below1> ^instance <in27> +)
    (<below1> ^instance <in28> +)
    (<below1> ^instance <in29> +)
    (<in15> ^1 <o1> +)
    (<in15> ^2 <o17> +)
    (<in16> ^1 <o2> +)
    (<in16> ^2 <o18> +)
    (<in17> ^1 <o10> +)
    (<in17> ^2 <o19> +)
    (<in18> ^1 <o4> +)
    (<in18> ^2 <o20> +)
    (<in19> ^1 <o5> +)
    (<in19> ^2 <o21> +)
    (<in20> ^1 <o6> +)
    (<in20> ^2 <o22> +)
    (<in21> ^1 <o7> +)
    (<in21> ^2 <o23> +)
    (<in22> ^1 <o8> +)
    (<in22> ^2 <o24> +)
    (<in23> ^1 <o9> +)
    (<in23> ^2 <o25> +)
    (<in24> ^1 <o16> +)
    (<in24> ^2 <o26> +)
    (<in25> ^1 <o11> +)
    (<in25> ^2 <o27> +)
    (<in26> ^1 <o12> +)
    (<in26> ^2 <o28> +)
    (<in27> ^1 <o13> +)
    (<in27> ^2 <o29> +)
    (<in28> ^1 <o14> +)
    (<in28> ^2 <o30> +)
    (<in29> ^1 <o15> +)
    (<in29> ^2 <o31> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<near1> ^instance <in56> +)
    (<near1> ^instance <in57> +)
    (<near1> ^instance <in58> +)
    (<near1> ^instance <in59> +)
    (<near1> ^instance <in60> +)
    (<near1> ^instance <in61> +)
    (<near1> ^instance <in62> +)
    (<near1> ^instance <in63> +)
    (<near1> ^instance <in64> +)
    (<near1> ^instance <in65> +)
    (<near1> ^instance <in66> +)
    (<near1> ^instance <in67> +)
    (<near1> ^instance <in68> +)
    (<near1> ^instance <in69> +)
    (<near1> ^instance <in70> +)
    (<near1> ^instance <in71> +)
    (<near1> ^instance <in72> +)
    (<near1> ^instance <in73> +)
    (<near1> ^instance <in74> +)
    (<near1> ^instance <in75> +)
    (<near1> ^instance <in76> +)
    (<near1> ^instance <in77> +)
    (<near1> ^instance <in78> +)
    (<near1> ^instance <in79> +)
    (<near1> ^instance <in80> +)
    (<near1> ^instance <in81> +)
    (<near1> ^instance <in82> +)
    (<near1> ^instance <in83> +)
    (<near1> ^instance <in84> +)
    (<near1> ^instance <in85> +)
    (<near1> ^instance <in86> +)
    (<near1> ^instance <in87> +)
    (<near1> ^instance <in88> +)
    (<near1> ^instance <in89> +)
    (<near1> ^instance <in90> +)
    (<near1> ^instance <in91> +)
    (<near1> ^instance <in92> +)
    (<near1> ^instance <in93> +)
    (<near1> ^instance <in94> +)
    (<near1> ^instance <in95> +)
    (<near1> ^instance <in96> +)
    (<near1> ^instance <in97> +)
    (<near1> ^instance <in98> +)
    (<near1> ^instance <in99> +)
    (<near1> ^instance <in100> +)
    (<near1> ^instance <in101> +)
    (<near1> ^instance <in102> +)
    (<near1> ^instance <in103> +)
    (<near1> ^instance <in104> +)
    (<near1> ^instance <in105> +)
    (<near1> ^instance <in106> +)
    (<near1> ^instance <in107> +)
    (<near1> ^instance <in108> +)
    (<near1> ^instance <in109> +)
    (<near1> ^instance <in110> +)
    (<near1> ^instance <in111> +)
    (<near1> ^instance <in112> +)
    (<near1> ^instance <in113> +)
    (<in30> ^1 <o1> +)
    (<in30> ^2 <o2> +)
    (<in31> ^1 <o1> +)
    (<in31> ^2 <o4> +)
    (<in32> ^1 <o1> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o2> +)
    (<in33> ^2 <o1> +)
    (<in34> ^1 <o2> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o2> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o2> +)
    (<in36> ^2 <o5> +)
    (<in37> ^1 <o2> +)
    (<in37> ^2 <o6> +)
    (<in38> ^1 <o3> +)
    (<in38> ^2 <o2> +)
    (<in39> ^1 <o3> +)
    (<in39> ^2 <o5> +)
    (<in40> ^1 <o3> +)
    (<in40> ^2 <o6> +)
    (<in41> ^1 <o4> +)
    (<in41> ^2 <o1> +)
    (<in42> ^1 <o4> +)
    (<in42> ^2 <o2> +)
    (<in43> ^1 <o4> +)
    (<in43> ^2 <o5> +)
    (<in44> ^1 <o4> +)
    (<in44> ^2 <o7> +)
    (<in45> ^1 <o4> +)
    (<in45> ^2 <o8> +)
    (<in46> ^1 <o5> +)
    (<in46> ^2 <o1> +)
    (<in47> ^1 <o5> +)
    (<in47> ^2 <o2> +)
    (<in48> ^1 <o5> +)
    (<in48> ^2 <o3> +)
    (<in49> ^1 <o5> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o5> +)
    (<in50> ^2 <o6> +)
    (<in51> ^1 <o5> +)
    (<in51> ^2 <o7> +)
    (<in52> ^1 <o5> +)
    (<in52> ^2 <o8> +)
    (<in53> ^1 <o5> +)
    (<in53> ^2 <o9> +)
    (<in54> ^1 <o6> +)
    (<in54> ^2 <o2> +)
    (<in55> ^1 <o6> +)
    (<in55> ^2 <o3> +)
    (<in56> ^1 <o6> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o6> +)
    (<in57> ^2 <o8> +)
    (<in58> ^1 <o6> +)
    (<in58> ^2 <o9> +)
    (<in59> ^1 <o7> +)
    (<in59> ^2 <o4> +)
    (<in60> ^1 <o7> +)
    (<in60> ^2 <o5> +)
    (<in61> ^1 <o7> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o8> +)
    (<in62> ^2 <o7> +)
    (<in63> ^1 <o8> +)
    (<in63> ^2 <o4> +)
    (<in64> ^1 <o8> +)
    (<in64> ^2 <o5> +)
    (<in65> ^1 <o8> +)
    (<in65> ^2 <o6> +)
    (<in66> ^1 <o8> +)
    (<in66> ^2 <o9> +)
    (<in67> ^1 <o9> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o9> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o9> +)
    (<in69> ^2 <o6> +)
    (<in70> ^1 <o3> +)
    (<in70> ^2 <o10> +)
    (<in71> ^1 <o3> +)
    (<in71> ^2 <o11> +)
    (<in72> ^1 <o6> +)
    (<in72> ^2 <o10> +)
    (<in73> ^1 <o6> +)
    (<in73> ^2 <o11> +)
    (<in74> ^1 <o6> +)
    (<in74> ^2 <o12> +)
    (<in75> ^1 <o9> +)
    (<in75> ^2 <o11> +)
    (<in76> ^1 <o9> +)
    (<in76> ^2 <o12> +)
    (<in77> ^1 <o9> +)
    (<in77> ^2 <o16> +)
    (<in78> ^1 <o9> +)
    (<in78> ^2 <o15> +)
    (<in79> ^1 <o9> +)
    (<in79> ^2 <o14> +)
    (<in80> ^1 <o8> +)
    (<in80> ^2 <o13> +)
    (<in81> ^1 <o8> +)
    (<in81> ^2 <o14> +)
    (<in82> ^1 <o8> +)
    (<in82> ^2 <o15> +)
    (<in83> ^1 <o7> +)
    (<in83> ^2 <o13> +)
    (<in84> ^1 <o7> +)
    (<in84> ^2 <o14> +)
    (<in85> ^1 <o10> +)
    (<in85> ^2 <o3> +)
    (<in86> ^1 <o10> +)
    (<in86> ^2 <o6> +)
    (<in87> ^1 <o10> +)
    (<in87> ^2 <o11> +)
    (<in88> ^1 <o11> +)
    (<in88> ^2 <o10> +)
    (<in89> ^1 <o11> +)
    (<in89> ^2 <o3> +)
    (<in90> ^1 <o11> +)
    (<in90> ^2 <o6> +)
    (<in91> ^1 <o11> +)
    (<in91> ^2 <o9> +)
    (<in92> ^1 <o11> +)
    (<in92> ^2 <o12> +)
    (<in93> ^1 <o12> +)
    (<in93> ^2 <o11> +)
    (<in94> ^1 <o12> +)
    (<in94> ^2 <o6> +)
    (<in95> ^1 <o12> +)
    (<in95> ^2 <o9> +)
    (<in96> ^1 <o12> +)
    (<in96> ^2 <o15> +)
    (<in97> ^1 <o12> +)
    (<in97> ^2 <o16> +)
    (<in98> ^1 <o16> +)
    (<in98> ^2 <o12> +)
    (<in99> ^1 <o16> +)
    (<in99> ^2 <o9> +)
    (<in100> ^1 <o16> +)
    (<in100> ^2 <o15> +)
    (<in101> ^1 <o15> +)
    (<in101> ^2 <o16> +)
    (<in102> ^1 <o15> +)
    (<in102> ^2 <o12> +)
    (<in103> ^1 <o15> +)
    (<in103> ^2 <o9> +)
    (<in104> ^1 <o15> +)
    (<in104> ^2 <o8> +)
    (<in105> ^1 <o15> +)
    (<in105> ^2 <o14> +)
    (<in106> ^1 <o14> +)
    (<in106> ^2 <o15> +)
    (<in107> ^1 <o14> +)
    (<in107> ^2 <o9> +)
    (<in108> ^1 <o14> +)
    (<in108> ^2 <o8> +)
    (<in109> ^1 <o14> +)
    (<in109> ^2 <o7> +)
    (<in110> ^1 <o14> +)
    (<in110> ^2 <o13> +)
    (<in111> ^1 <o13> +)
    (<in111> ^2 <o7> +)
    (<in112> ^1 <o13> +)
    (<in112> ^2 <o8> +)
    (<in113> ^1 <o13> +)
    (<in113> ^2 <o14> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in114> +)
    (<diagonal-with1> ^instance <in115> +)
    (<diagonal-with1> ^instance <in116> +)
    (<diagonal-with1> ^instance <in117> +)
    (<diagonal-with1> ^instance <in118> +)
    (<diagonal-with1> ^instance <in119> +)
    (<diagonal-with1> ^instance <in120> +)
    (<diagonal-with1> ^instance <in121> +)
    (<diagonal-with1> ^instance <in122> +)
    (<diagonal-with1> ^instance <in123> +)
    (<diagonal-with1> ^instance <in124> +)
    (<diagonal-with1> ^instance <in125> +)
    (<diagonal-with1> ^instance <in126> +)
    (<diagonal-with1> ^instance <in127> +)
    (<diagonal-with1> ^instance <in128> +)
    (<diagonal-with1> ^instance <in129> +)
    (<diagonal-with1> ^instance <in130> +)
    (<diagonal-with1> ^instance <in131> +)
    (<diagonal-with1> ^instance <in132> +)
    (<diagonal-with1> ^instance <in133> +)
    (<diagonal-with1> ^instance <in134> +)
    (<diagonal-with1> ^instance <in135> +)
    (<diagonal-with1> ^instance <in136> +)
    (<diagonal-with1> ^instance <in137> +)
    (<diagonal-with1> ^instance <in138> +)
    (<diagonal-with1> ^instance <in139> +)
    (<diagonal-with1> ^instance <in140> +)
    (<diagonal-with1> ^instance <in141> +)
    (<diagonal-with1> ^instance <in142> +)
    (<diagonal-with1> ^instance <in143> +)
    (<diagonal-with1> ^instance <in144> +)
    (<diagonal-with1> ^instance <in145> +)
    (<diagonal-with1> ^instance <in146> +)
    (<diagonal-with1> ^instance <in147> +)
    (<diagonal-with1> ^instance <in148> +)
    (<diagonal-with1> ^instance <in149> +)
    (<in114> ^1 <o1> +)
    (<in114> ^2 <o5> +)
    (<in115> ^1 <o2> +)
    (<in115> ^2 <o4> +)
    (<in116> ^1 <o2> +)
    (<in116> ^2 <o6> +)
    (<in117> ^1 <o3> +)
    (<in117> ^2 <o5> +)
    (<in118> ^1 <o4> +)
    (<in118> ^2 <o2> +)
    (<in119> ^1 <o4> +)
    (<in119> ^2 <o8> +)
    (<in120> ^1 <o5> +)
    (<in120> ^2 <o1> +)
    (<in121> ^1 <o5> +)
    (<in121> ^2 <o3> +)
    (<in122> ^1 <o5> +)
    (<in122> ^2 <o7> +)
    (<in123> ^1 <o5> +)
    (<in123> ^2 <o9> +)
    (<in124> ^1 <o6> +)
    (<in124> ^2 <o2> +)
    (<in125> ^1 <o6> +)
    (<in125> ^2 <o8> +)
    (<in126> ^1 <o7> +)
    (<in126> ^2 <o5> +)
    (<in127> ^1 <o8> +)
    (<in127> ^2 <o4> +)
    (<in128> ^1 <o8> +)
    (<in128> ^2 <o6> +)
    (<in129> ^1 <o9> +)
    (<in129> ^2 <o5> +)
    (<in130> ^1 <o3> +)
    (<in130> ^2 <o11> +)
    (<in131> ^1 <o11> +)
    (<in131> ^2 <o3> +)
    (<in132> ^1 <o6> +)
    (<in132> ^2 <o10> +)
    (<in133> ^1 <o10> +)
    (<in133> ^2 <o6> +)
    (<in134> ^1 <o9> +)
    (<in134> ^2 <o11> +)
    (<in135> ^1 <o11> +)
    (<in135> ^2 <o9> +)
    (<in136> ^1 <o12> +)
    (<in136> ^2 <o6> +)
    (<in137> ^1 <o6> +)
    (<in137> ^2 <o12> +)
    (<in138> ^1 <o16> +)
    (<in138> ^2 <o9> +)
    (<in139> ^1 <o9> +)
    (<in139> ^2 <o16> +)
    (<in140> ^1 <o12> +)
    (<in140> ^2 <o15> +)
    (<in141> ^1 <o15> +)
    (<in141> ^2 <o12> +)
    (<in142> ^1 <o14> +)
    (<in142> ^2 <o9> +)
    (<in143> ^1 <o9> +)
    (<in143> ^2 <o14> +)
    (<in144> ^1 <o8> +)
    (<in144> ^2 <o15> +)
    (<in145> ^1 <o15> +)
    (<in145> ^2 <o8> +)
    (<in146> ^1 <o14> +)
    (<in146> ^2 <o7> +)
    (<in147> ^1 <o7> +)
    (<in147> ^2 <o14> +)
    (<in148> ^1 <o13> +)
    (<in148> ^2 <o8> +)
    (<in149> ^1 <o8> +)
    (<in149> ^2 <o13> +)
}

sp {dialog-event*apply*game-state-change-respond*init-frog4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-frog4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <left-of1> +)
    (<preds> ^predicate <right-of1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color red1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color blue1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^color blue1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^color blue1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color blue1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color blue1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color red1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color red1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color red1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o6> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<left-of1> ^item-type predicate +)
    (<left-of1> ^handle left-of1 +)
    (<left-of1> ^instance <in16> +)
    (<left-of1> ^instance <in17> +)
    (<left-of1> ^instance <in18> +)
    (<left-of1> ^instance <in19> +)
    (<left-of1> ^instance <in20> +)
    (<left-of1> ^instance <in21> +)
    (<left-of1> ^instance <in22> +)
    (<left-of1> ^instance <in23> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o3> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o4> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o5> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o6> +)
    (<in21> ^2 <o7> +)
    (<in22> ^1 <o7> +)
    (<in22> ^2 <o8> +)
    (<in23> ^1 <o8> +)
    (<in23> ^2 <o9> +)
    (<right-of1> ^item-type predicate +)
    (<right-of1> ^handle right-of1 +)
    (<right-of1> ^instance <in24> +)
    (<right-of1> ^instance <in25> +)
    (<right-of1> ^instance <in26> +)
    (<right-of1> ^instance <in27> +)
    (<right-of1> ^instance <in28> +)
    (<right-of1> ^instance <in29> +)
    (<right-of1> ^instance <in30> +)
    (<right-of1> ^instance <in31> +)
    (<in24> ^1 <o2> +)
    (<in24> ^2 <o1> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o2> +)
    (<in26> ^1 <o4> +)
    (<in26> ^2 <o3> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o6> +)
    (<in28> ^2 <o5> +)
    (<in29> ^1 <o7> +)
    (<in29> ^2 <o6> +)
    (<in30> ^1 <o8> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o9> +)
    (<in31> ^2 <o8> +)
}

sp {dialog-event*apply*game-state-change-respond*final-peg
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-peg)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <oobject> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 4 +)
    (<pr3> ^y 1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 1 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 2 +)
    (<pr5> ^y 2 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 3 +)
    (<pr6> ^y 2 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 1 +)
    (<pr7> ^y 3 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 2 +)
    (<pr8> ^y 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 1 +)
    (<pr9> ^y 4 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<oobject> ^item-type object +)
    (<oobject> ^handle object-20 +)
    (<oobject> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^name garbage +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<on1> ^instance <in8> +)
    (<in0> ^1 <o11> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o12> +)
    (<in1> ^2 <o20> +)
    (<in2> ^1 <o13> +)
    (<in2> ^2 <o20> +)
    (<in3> ^1 <o14> +)
    (<in3> ^2 <o20> +)
    (<in4> ^1 <o15> +)
    (<in4> ^2 <o20> +)
    (<in5> ^1 <o16> +)
    (<in5> ^2 <o20> +)
    (<in6> ^1 <o17> +)
    (<in6> ^2 <o20> +)
    (<in7> ^1 <o18> +)
    (<in7> ^2 <o20> +)
    (<in8> ^1 <o19> +)
    (<in8> ^2 <o20> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<below1> ^instance <in16> +)
    (<below1> ^instance <in17> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o20> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o20> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o20> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o20> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o20> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o20> +)
    (<in15> ^2 <o17> +)
    (<in16> ^1 <o20> +)
    (<in16> ^2 <o18> +)
    (<in17> ^1 <o20> +)
    (<in17> ^2 <o19> +)
}

sp {dialog-event*apply*game-state-change-respond*final-connect-3
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-connect-3)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<objs> ^object <o26> +)
    (<objs> ^object <o27> +)
    (<objs> ^object <o28> +)
    (<objs> ^object <o29> +)
    (<objs> ^object <o30> +)
    (<objs> ^object <o31> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <above1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-9 +)
    (<o21> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-10 +)
    (<o22> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-11 +)
    (<o23> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-12 +)
    (<o24> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-13 +)
    (<o25> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<o26> ^item-type object +)
    (<o26> ^handle object-14 +)
    (<o26> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<o27> ^item-type object +)
    (<o27> ^handle object-15 +)
    (<o27> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<o28> ^item-type object +)
    (<o28> ^handle object-16 +)
    (<o28> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category location +)
    (<o29> ^item-type object +)
    (<o29> ^handle object-17 +)
    (<o29> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category location +)
    (<o30> ^item-type object +)
    (<o30> ^handle object-18 +)
    (<o30> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category location +)
    (<o31> ^item-type object +)
    (<o31> ^handle object-19 +)
    (<o31> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-20 +)
    (<o10> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-21 +)
    (<o11> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-22 +)
    (<o12> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-23 +)
    (<o13> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color red1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-24 +)
    (<o14> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category block +)
    (<pr24> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-25 +)
    (<o15> ^predicates <pr25> +)
    (<pr25> ^visible true +)
    (<pr25> ^category block +)
    (<pr25> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o27> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o28> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o29> +)
    (<in3> ^1 <o14> +)
    (<in3> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o27> +)
    (<in4> ^2 <o10> +)
    (<in5> ^1 <o28> +)
    (<in5> ^2 <o11> +)
    (<in6> ^1 <o29> +)
    (<in6> ^2 <o12> +)
    (<in7> ^1 <o15> +)
    (<in7> ^2 <o14> +)
    (<above1> ^item-type predicate +)
    (<above1> ^handle above1 +)
    (<above1> ^instance <in8> +)
    (<above1> ^instance <in9> +)
    (<above1> ^instance <in10> +)
    (<above1> ^instance <in11> +)
    (<above1> ^instance <in12> +)
    (<above1> ^instance <in13> +)
    (<above1> ^instance <in14> +)
    (<above1> ^instance <in15> +)
    (<above1> ^instance <in16> +)
    (<above1> ^instance <in17> +)
    (<above1> ^instance <in18> +)
    (<above1> ^instance <in19> +)
    (<above1> ^instance <in20> +)
    (<above1> ^instance <in21> +)
    (<above1> ^instance <in22> +)
    (<in8> ^1 <o7> +)
    (<in8> ^2 <o27> +)
    (<in9> ^1 <o4> +)
    (<in9> ^2 <o7> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o8> +)
    (<in11> ^2 <o28> +)
    (<in12> ^1 <o5> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o6> +)
    (<in15> ^2 <o9> +)
    (<in16> ^1 <o9> +)
    (<in16> ^2 <o29> +)
    (<in17> ^1 <o21> +)
    (<in17> ^2 <o23> +)
    (<in18> ^1 <o23> +)
    (<in18> ^2 <o25> +)
    (<in19> ^1 <o25> +)
    (<in19> ^2 <o30> +)
    (<in20> ^1 <o22> +)
    (<in20> ^2 <o24> +)
    (<in21> ^1 <o24> +)
    (<in21> ^2 <o26> +)
    (<in22> ^1 <o26> +)
    (<in22> ^2 <o31> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in23> +)
    (<linear> ^instance <in24> +)
    (<linear> ^instance <in25> +)
    (<linear> ^instance <in26> +)
    (<linear> ^instance <in27> +)
    (<linear> ^instance <in28> +)
    (<linear> ^instance <in29> +)
    (<linear> ^instance <in30> +)
    (<linear> ^instance <in31> +)
    (<linear> ^instance <in32> +)
    (<linear> ^instance <in33> +)
    (<linear> ^instance <in34> +)
    (<linear> ^instance <in35> +)
    (<linear> ^instance <in36> +)
    (<linear> ^instance <in37> +)
    (<linear> ^instance <in38> +)
    (<linear> ^instance <in39> +)
    (<linear> ^instance <in40> +)
    (<linear> ^instance <in41> +)
    (<linear> ^instance <in42> +)
    (<linear> ^instance <in43> +)
    (<linear> ^instance <in44> +)
    (<linear> ^instance <in45> +)
    (<linear> ^instance <in46> +)
    (<linear> ^instance <in47> +)
    (<linear> ^instance <in48> +)
    (<linear> ^instance <in49> +)
    (<linear> ^instance <in50> +)
    (<linear> ^instance <in51> +)
    (<linear> ^instance <in52> +)
    (<linear> ^instance <in53> +)
    (<linear> ^instance <in54> +)
    (<linear> ^instance <in55> +)
    (<linear> ^instance <in56> +)
    (<linear> ^instance <in57> +)
    (<in23> ^1 <set23> +)
    (<set23> ^object <o1> +)
    (<set23> ^object <o2> +)
    (<set23> ^object <o3> +)
    (<in24> ^1 <set24> +)
    (<set24> ^object <o1> +)
    (<set24> ^object <o5> +)
    (<set24> ^object <o9> +)
    (<in25> ^1 <set25> +)
    (<set25> ^object <o1> +)
    (<set25> ^object <o4> +)
    (<set25> ^object <o7> +)
    (<in26> ^1 <set26> +)
    (<set26> ^object <o4> +)
    (<set26> ^object <o5> +)
    (<set26> ^object <o6> +)
    (<in27> ^1 <set27> +)
    (<set27> ^object <o7> +)
    (<set27> ^object <o8> +)
    (<set27> ^object <o9> +)
    (<in28> ^1 <set28> +)
    (<set28> ^object <o2> +)
    (<set28> ^object <o5> +)
    (<set28> ^object <o8> +)
    (<in29> ^1 <set29> +)
    (<set29> ^object <o3> +)
    (<set29> ^object <o6> +)
    (<set29> ^object <o9> +)
    (<in30> ^1 <set30> +)
    (<set30> ^object <o3> +)
    (<set30> ^object <o5> +)
    (<set30> ^object <o7> +)
    (<in31> ^1 <set31> +)
    (<set31> ^object <o3> +)
    (<set31> ^object <o21> +)
    (<set31> ^object <o22> +)
    (<in32> ^1 <set32> +)
    (<set32> ^object <o6> +)
    (<set32> ^object <o23> +)
    (<set32> ^object <o24> +)
    (<in33> ^1 <set33> +)
    (<set33> ^object <o9> +)
    (<set33> ^object <o25> +)
    (<set33> ^object <o26> +)
    (<in34> ^1 <set34> +)
    (<set34> ^object <o29> +)
    (<set34> ^object <o30> +)
    (<set34> ^object <o31> +)
    (<in35> ^1 <set35> +)
    (<set35> ^object <o27> +)
    (<set35> ^object <o28> +)
    (<set35> ^object <o29> +)
    (<in36> ^1 <set36> +)
    (<set36> ^object <o2> +)
    (<set36> ^object <o3> +)
    (<set36> ^object <o21> +)
    (<in37> ^1 <set37> +)
    (<set37> ^object <o5> +)
    (<set37> ^object <o6> +)
    (<set37> ^object <o23> +)
    (<in38> ^1 <set38> +)
    (<set38> ^object <o8> +)
    (<set38> ^object <o9> +)
    (<set38> ^object <o25> +)
    (<in39> ^1 <set39> +)
    (<set39> ^object <o28> +)
    (<set39> ^object <o29> +)
    (<set39> ^object <o30> +)
    (<in40> ^1 <set40> +)
    (<set40> ^object <o21> +)
    (<set40> ^object <o23> +)
    (<set40> ^object <o25> +)
    (<in41> ^1 <set41> +)
    (<set41> ^object <o22> +)
    (<set41> ^object <o24> +)
    (<set41> ^object <o26> +)
    (<in42> ^1 <set42> +)
    (<set42> ^object <o4> +)
    (<set42> ^object <o7> +)
    (<set42> ^object <o27> +)
    (<in43> ^1 <set43> +)
    (<set43> ^object <o5> +)
    (<set43> ^object <o8> +)
    (<set43> ^object <o28> +)
    (<in44> ^1 <set44> +)
    (<set44> ^object <o6> +)
    (<set44> ^object <o9> +)
    (<set44> ^object <o29> +)
    (<in45> ^1 <set45> +)
    (<set45> ^object <o23> +)
    (<set45> ^object <o25> +)
    (<set45> ^object <o30> +)
    (<in46> ^1 <set46> +)
    (<set46> ^object <o24> +)
    (<set46> ^object <o26> +)
    (<set46> ^object <o31> +)
    (<in47> ^1 <set47> +)
    (<set47> ^object <o4> +)
    (<set47> ^object <o8> +)
    (<set47> ^object <o29> +)
    (<in48> ^1 <set48> +)
    (<set48> ^object <o5> +)
    (<set48> ^object <o9> +)
    (<set48> ^object <o30> +)
    (<in49> ^1 <set49> +)
    (<set49> ^object <o6> +)
    (<set49> ^object <o25> +)
    (<set49> ^object <o31> +)
    (<in50> ^1 <set50> +)
    (<set50> ^object <o2> +)
    (<set50> ^object <o6> +)
    (<set50> ^object <o25> +)
    (<in51> ^1 <set51> +)
    (<set51> ^object <o3> +)
    (<set51> ^object <o23> +)
    (<set51> ^object <o25> +)
    (<in52> ^1 <set52> +)
    (<set52> ^object <o24> +)
    (<set52> ^object <o25> +)
    (<set52> ^object <o29> +)
    (<in53> ^1 <set53> +)
    (<set53> ^object <o23> +)
    (<set53> ^object <o9> +)
    (<set53> ^object <o28> +)
    (<in54> ^1 <set54> +)
    (<set54> ^object <o6> +)
    (<set54> ^object <o8> +)
    (<set54> ^object <o27> +)
    (<in55> ^1 <set55> +)
    (<set55> ^object <o22> +)
    (<set55> ^object <o23> +)
    (<set55> ^object <o9> +)
    (<in56> ^1 <set56> +)
    (<set56> ^object <o21> +)
    (<set56> ^object <o6> +)
    (<set56> ^object <o8> +)
    (<in57> ^1 <set57> +)
    (<set57> ^object <o3> +)
    (<set57> ^object <o5> +)
    (<set57> ^object <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*init-tictactoe
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-tictactoe)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o11> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o12> +)
    (<in2> ^1 <o13> +)
    (<in2> ^2 <o14> +)
    (<in3> ^1 <o14> +)
    (<in3> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o10> +)
    (<in5> ^1 <o12> +)
    (<in5> ^2 <o11> +)
    (<in6> ^1 <o14> +)
    (<in6> ^2 <o13> +)
    (<in7> ^1 <o15> +)
    (<in7> ^2 <o14> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in8> +)
    (<linear> ^instance <in9> +)
    (<linear> ^instance <in10> +)
    (<linear> ^instance <in11> +)
    (<linear> ^instance <in12> +)
    (<linear> ^instance <in13> +)
    (<linear> ^instance <in14> +)
    (<linear> ^instance <in15> +)
    (<in8> ^1 <set8> +)
    (<set8> ^object <o1> +)
    (<set8> ^object <o2> +)
    (<set8> ^object <o3> +)
    (<in9> ^1 <set9> +)
    (<set9> ^object <o1> +)
    (<set9> ^object <o5> +)
    (<set9> ^object <o9> +)
    (<in10> ^1 <set10> +)
    (<set10> ^object <o1> +)
    (<set10> ^object <o4> +)
    (<set10> ^object <o7> +)
    (<in11> ^1 <set11> +)
    (<set11> ^object <o4> +)
    (<set11> ^object <o5> +)
    (<set11> ^object <o6> +)
    (<in12> ^1 <set12> +)
    (<set12> ^object <o7> +)
    (<set12> ^object <o8> +)
    (<set12> ^object <o9> +)
    (<in13> ^1 <set13> +)
    (<set13> ^object <o2> +)
    (<set13> ^object <o5> +)
    (<set13> ^object <o8> +)
    (<in14> ^1 <set14> +)
    (<set14> ^object <o3> +)
    (<set14> ^object <o6> +)
    (<set14> ^object <o9> +)
    (<in15> ^1 <set15> +)
    (<set15> ^object <o3> +)
    (<set15> ^object <o5> +)
    (<set15> ^object <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*init-sudoku4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-sudoku4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<pr0> ^value 0 +)
    (<pr0> ^sub-grid 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<pr1> ^value 1 +)
    (<pr1> ^sub-grid 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<pr2> ^value 2 +)
    (<pr2> ^sub-grid 2 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 4 +)
    (<pr3> ^y 1 +)
    (<pr3> ^value 0 +)
    (<pr3> ^sub-grid 2 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 1 +)
    (<pr4> ^y 2 +)
    (<pr4> ^value 4 +)
    (<pr4> ^sub-grid 1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 2 +)
    (<pr5> ^y 2 +)
    (<pr5> ^value 0 +)
    (<pr5> ^sub-grid 1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 3 +)
    (<pr6> ^y 2 +)
    (<pr6> ^value 0 +)
    (<pr6> ^sub-grid 2 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 4 +)
    (<pr7> ^y 2 +)
    (<pr7> ^value 0 +)
    (<pr7> ^sub-grid 2 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 1 +)
    (<pr8> ^y 3 +)
    (<pr8> ^value 0 +)
    (<pr8> ^sub-grid 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 2 +)
    (<pr9> ^y 3 +)
    (<pr9> ^value 0 +)
    (<pr9> ^sub-grid 3 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 3 +)
    (<pr10> ^y 3 +)
    (<pr10> ^value 0 +)
    (<pr10> ^sub-grid 4 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 4 +)
    (<pr11> ^y 3 +)
    (<pr11> ^value 2 +)
    (<pr11> ^sub-grid 4 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^x 1 +)
    (<pr12> ^y 4 +)
    (<pr12> ^value 0 +)
    (<pr12> ^sub-grid 3 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^x 2 +)
    (<pr13> ^y 4 +)
    (<pr13> ^value 4 +)
    (<pr13> ^sub-grid 3 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^x 3 +)
    (<pr14> ^y 4 +)
    (<pr14> ^value 3 +)
    (<pr14> ^sub-grid 4 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^x 4 +)
    (<pr15> ^y 4 +)
    (<pr15> ^value 0 +)
    (<pr15> ^sub-grid 4 +)
}

sp {dialog-event*apply*game-state-change-respond*final-sokoban
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-sokoban)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 1 +)
    (<pr3> ^y 2 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 2 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 3 +)
    (<pr5> ^y 2 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 1 +)
    (<pr6> ^y 3 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 2 +)
    (<pr7> ^y 3 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 3 +)
    (<pr8> ^y 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 1 +)
    (<pr9> ^y 4 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 2 +)
    (<pr10> ^y 4 +)
    (<pr10> ^color green1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 3 +)
    (<pr11> ^y 4 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-12 +)
    (<o17> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-13 +)
    (<o18> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color red1 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-14 +)
    (<o19> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color green1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o8> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o3> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o11> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o8> +)
    (<in3> ^2 <o17> +)
    (<in4> ^1 <o3> +)
    (<in4> ^2 <o18> +)
    (<in5> ^1 <o11> +)
    (<in5> ^2 <o19> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in6> +)
    (<near1> ^instance <in7> +)
    (<near1> ^instance <in8> +)
    (<near1> ^instance <in9> +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<near1> ^instance <in56> +)
    (<near1> ^instance <in57> +)
    (<near1> ^instance <in58> +)
    (<near1> ^instance <in59> +)
    (<near1> ^instance <in60> +)
    (<near1> ^instance <in61> +)
    (<near1> ^instance <in62> +)
    (<near1> ^instance <in63> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o2> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o4> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o5> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o1> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o3> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o6> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o2> +)
    (<in15> ^1 <o3> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o4> +)
    (<in17> ^2 <o1> +)
    (<in18> ^1 <o4> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o4> +)
    (<in20> ^2 <o7> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o8> +)
    (<in22> ^1 <o5> +)
    (<in22> ^2 <o1> +)
    (<in23> ^1 <o5> +)
    (<in23> ^2 <o2> +)
    (<in24> ^1 <o5> +)
    (<in24> ^2 <o3> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o4> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o7> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o8> +)
    (<in29> ^1 <o5> +)
    (<in29> ^2 <o9> +)
    (<in30> ^1 <o6> +)
    (<in30> ^2 <o2> +)
    (<in31> ^1 <o6> +)
    (<in31> ^2 <o3> +)
    (<in32> ^1 <o6> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o6> +)
    (<in33> ^2 <o8> +)
    (<in34> ^1 <o6> +)
    (<in34> ^2 <o9> +)
    (<in35> ^1 <o7> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o7> +)
    (<in36> ^2 <o5> +)
    (<in37> ^1 <o7> +)
    (<in37> ^2 <o8> +)
    (<in38> ^1 <o8> +)
    (<in38> ^2 <o7> +)
    (<in39> ^1 <o8> +)
    (<in39> ^2 <o4> +)
    (<in40> ^1 <o8> +)
    (<in40> ^2 <o5> +)
    (<in41> ^1 <o8> +)
    (<in41> ^2 <o6> +)
    (<in42> ^1 <o8> +)
    (<in42> ^2 <o9> +)
    (<in43> ^1 <o9> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o9> +)
    (<in44> ^2 <o5> +)
    (<in45> ^1 <o9> +)
    (<in45> ^2 <o6> +)
    (<in46> ^1 <o9> +)
    (<in46> ^2 <o11> +)
    (<in47> ^1 <o9> +)
    (<in47> ^2 <o12> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o19> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o11> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o12> +)
    (<in51> ^1 <o7> +)
    (<in51> ^2 <o10> +)
    (<in52> ^1 <o7> +)
    (<in52> ^2 <o11> +)
    (<in53> ^1 <o10> +)
    (<in53> ^2 <o7> +)
    (<in54> ^1 <o10> +)
    (<in54> ^2 <o8> +)
    (<in55> ^1 <o10> +)
    (<in55> ^2 <o11> +)
    (<in56> ^1 <o11> +)
    (<in56> ^2 <o10> +)
    (<in57> ^1 <o11> +)
    (<in57> ^2 <o7> +)
    (<in58> ^1 <o11> +)
    (<in58> ^2 <o8> +)
    (<in59> ^1 <o11> +)
    (<in59> ^2 <o9> +)
    (<in60> ^1 <o11> +)
    (<in60> ^2 <o12> +)
    (<in61> ^1 <o12> +)
    (<in61> ^2 <o11> +)
    (<in62> ^1 <o12> +)
    (<in62> ^2 <o8> +)
    (<in63> ^1 <o12> +)
    (<in63> ^2 <o9> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<diagonal-with1> ^instance <in72> +)
    (<diagonal-with1> ^instance <in73> +)
    (<diagonal-with1> ^instance <in74> +)
    (<diagonal-with1> ^instance <in75> +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<in64> ^1 <o1> +)
    (<in64> ^2 <o5> +)
    (<in65> ^1 <o2> +)
    (<in65> ^2 <o4> +)
    (<in66> ^1 <o2> +)
    (<in66> ^2 <o6> +)
    (<in67> ^1 <o3> +)
    (<in67> ^2 <o5> +)
    (<in68> ^1 <o4> +)
    (<in68> ^2 <o2> +)
    (<in69> ^1 <o4> +)
    (<in69> ^2 <o8> +)
    (<in70> ^1 <o5> +)
    (<in70> ^2 <o1> +)
    (<in71> ^1 <o5> +)
    (<in71> ^2 <o3> +)
    (<in72> ^1 <o5> +)
    (<in72> ^2 <o7> +)
    (<in73> ^1 <o5> +)
    (<in73> ^2 <o9> +)
    (<in74> ^1 <o6> +)
    (<in74> ^2 <o2> +)
    (<in75> ^1 <o6> +)
    (<in75> ^2 <o8> +)
    (<in76> ^1 <o7> +)
    (<in76> ^2 <o5> +)
    (<in77> ^1 <o8> +)
    (<in77> ^2 <o4> +)
    (<in78> ^1 <o8> +)
    (<in78> ^2 <o6> +)
    (<in79> ^1 <o9> +)
    (<in79> ^2 <o5> +)
    (<in80> ^1 <o9> +)
    (<in80> ^2 <o11> +)
    (<in81> ^1 <o11> +)
    (<in81> ^2 <o9> +)
    (<in82> ^1 <o12> +)
    (<in82> ^2 <o8> +)
    (<in83> ^1 <o8> +)
    (<in83> ^2 <o12> +)
    (<in84> ^1 <o10> +)
    (<in84> ^2 <o8> +)
    (<in85> ^1 <o8> +)
    (<in85> ^2 <o10> +)
    (<in86> ^1 <o11> +)
    (<in86> ^2 <o7> +)
    (<in87> ^1 <o7> +)
    (<in87> ^2 <o11> +)
}

sp {dialog-event*apply*game-state-change-respond*second-frog3
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type second-frog3)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <left-of1> +)
    (<preds> ^predicate <right-of1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color blue1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color blue1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color blue1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color blue1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<in0> ^1 <o8> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o9> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o10> +)
    (<in2> ^2 <o5> +)
    (<in3> ^1 <o11> +)
    (<in3> ^2 <o3> +)
    (<in4> ^1 <o12> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o13> +)
    (<in5> ^2 <o7> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o9> +)
    (<in8> ^1 <o5> +)
    (<in8> ^2 <o19> +)
    (<in9> ^1 <o3> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o6> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o7> +)
    (<in11> ^2 <o13> +)
    (<left-of1> ^item-type predicate +)
    (<left-of1> ^handle left-of1 +)
    (<left-of1> ^instance <in12> +)
    (<left-of1> ^instance <in13> +)
    (<left-of1> ^instance <in14> +)
    (<left-of1> ^instance <in15> +)
    (<left-of1> ^instance <in16> +)
    (<left-of1> ^instance <in17> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o2> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o3> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o4> +)
    (<in15> ^1 <o4> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o5> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o6> +)
    (<in17> ^2 <o7> +)
    (<right-of1> ^item-type predicate +)
    (<right-of1> ^handle right-of1 +)
    (<right-of1> ^instance <in18> +)
    (<right-of1> ^instance <in19> +)
    (<right-of1> ^instance <in20> +)
    (<right-of1> ^instance <in21> +)
    (<right-of1> ^instance <in22> +)
    (<right-of1> ^instance <in23> +)
    (<in18> ^1 <o2> +)
    (<in18> ^2 <o1> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o2> +)
    (<in20> ^1 <o4> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o5> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o6> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o7> +)
    (<in23> ^2 <o6> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-connect-4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-connect-4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<objs> ^object <o26> +)
    (<objs> ^object <o27> +)
    (<objs> ^object <o28> +)
    (<objs> ^object <o29> +)
    (<objs> ^object <o30> +)
    (<objs> ^object <o31> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <above1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-9 +)
    (<o21> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-10 +)
    (<o22> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-11 +)
    (<o23> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-12 +)
    (<o24> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-13 +)
    (<o25> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<o26> ^item-type object +)
    (<o26> ^handle object-14 +)
    (<o26> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<o27> ^item-type object +)
    (<o27> ^handle object-15 +)
    (<o27> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<o28> ^item-type object +)
    (<o28> ^handle object-16 +)
    (<o28> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category location +)
    (<o29> ^item-type object +)
    (<o29> ^handle object-17 +)
    (<o29> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category location +)
    (<o30> ^item-type object +)
    (<o30> ^handle object-18 +)
    (<o30> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category location +)
    (<o31> ^item-type object +)
    (<o31> ^handle object-19 +)
    (<o31> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-20 +)
    (<o10> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-21 +)
    (<o11> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color blue1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-22 +)
    (<o12> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color blue1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-23 +)
    (<o13> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-24 +)
    (<o14> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category block +)
    (<pr24> ^color red1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-25 +)
    (<o15> ^predicates <pr25> +)
    (<pr25> ^visible true +)
    (<pr25> ^category block +)
    (<pr25> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o27> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o28> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o29> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o30> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o27> +)
    (<in5> ^2 <o10> +)
    (<in6> ^1 <o28> +)
    (<in6> ^2 <o11> +)
    (<in7> ^1 <o29> +)
    (<in7> ^2 <o12> +)
    (<in8> ^1 <o30> +)
    (<in8> ^2 <o13> +)
    (<in9> ^1 <o15> +)
    (<in9> ^2 <o14> +)
    (<above1> ^item-type predicate +)
    (<above1> ^handle above1 +)
    (<above1> ^instance <in10> +)
    (<above1> ^instance <in11> +)
    (<above1> ^instance <in12> +)
    (<above1> ^instance <in13> +)
    (<above1> ^instance <in14> +)
    (<above1> ^instance <in15> +)
    (<above1> ^instance <in16> +)
    (<above1> ^instance <in17> +)
    (<above1> ^instance <in18> +)
    (<above1> ^instance <in19> +)
    (<above1> ^instance <in20> +)
    (<above1> ^instance <in21> +)
    (<above1> ^instance <in22> +)
    (<above1> ^instance <in23> +)
    (<above1> ^instance <in24> +)
    (<in10> ^1 <o7> +)
    (<in10> ^2 <o27> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o7> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o4> +)
    (<in13> ^1 <o8> +)
    (<in13> ^2 <o28> +)
    (<in14> ^1 <o5> +)
    (<in14> ^2 <o8> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o6> +)
    (<in17> ^2 <o9> +)
    (<in18> ^1 <o9> +)
    (<in18> ^2 <o29> +)
    (<in19> ^1 <o21> +)
    (<in19> ^2 <o23> +)
    (<in20> ^1 <o23> +)
    (<in20> ^2 <o25> +)
    (<in21> ^1 <o25> +)
    (<in21> ^2 <o30> +)
    (<in22> ^1 <o22> +)
    (<in22> ^2 <o24> +)
    (<in23> ^1 <o24> +)
    (<in23> ^2 <o26> +)
    (<in24> ^1 <o26> +)
    (<in24> ^2 <o31> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in25> +)
    (<linear> ^instance <in26> +)
    (<linear> ^instance <in27> +)
    (<linear> ^instance <in28> +)
    (<linear> ^instance <in29> +)
    (<linear> ^instance <in30> +)
    (<linear> ^instance <in31> +)
    (<linear> ^instance <in32> +)
    (<linear> ^instance <in33> +)
    (<linear> ^instance <in34> +)
    (<linear> ^instance <in35> +)
    (<linear> ^instance <in36> +)
    (<linear> ^instance <in37> +)
    (<linear> ^instance <in38> +)
    (<linear> ^instance <in39> +)
    (<linear> ^instance <in40> +)
    (<linear> ^instance <in41> +)
    (<in25> ^1 <set25> +)
    (<set25> ^object <o1> +)
    (<set25> ^object <o2> +)
    (<set25> ^object <o3> +)
    (<set25> ^object <o21> +)
    (<in26> ^1 <set26> +)
    (<set26> ^object <o1> +)
    (<set26> ^object <o5> +)
    (<set26> ^object <o9> +)
    (<set26> ^object <o30> +)
    (<in27> ^1 <set27> +)
    (<set27> ^object <o1> +)
    (<set27> ^object <o4> +)
    (<set27> ^object <o7> +)
    (<set27> ^object <o27> +)
    (<in28> ^1 <set28> +)
    (<set28> ^object <o4> +)
    (<set28> ^object <o5> +)
    (<set28> ^object <o6> +)
    (<set28> ^object <o23> +)
    (<in29> ^1 <set29> +)
    (<set29> ^object <o7> +)
    (<set29> ^object <o8> +)
    (<set29> ^object <o9> +)
    (<set29> ^object <o25> +)
    (<in30> ^1 <set30> +)
    (<set30> ^object <o27> +)
    (<set30> ^object <o28> +)
    (<set30> ^object <o29> +)
    (<set30> ^object <o30> +)
    (<in31> ^1 <set31> +)
    (<set31> ^object <o2> +)
    (<set31> ^object <o5> +)
    (<set31> ^object <o8> +)
    (<set31> ^object <o28> +)
    (<in32> ^1 <set32> +)
    (<set32> ^object <o3> +)
    (<set32> ^object <o6> +)
    (<set32> ^object <o9> +)
    (<set32> ^object <o29> +)
    (<in33> ^1 <set33> +)
    (<set33> ^object <o21> +)
    (<set33> ^object <o23> +)
    (<set33> ^object <o25> +)
    (<set33> ^object <o30> +)
    (<in34> ^1 <set34> +)
    (<set34> ^object <o21> +)
    (<set34> ^object <o6> +)
    (<set34> ^object <o8> +)
    (<set34> ^object <o27> +)
    (<in35> ^1 <set35> +)
    (<set35> ^object <o2> +)
    (<set35> ^object <o3> +)
    (<set35> ^object <o21> +)
    (<set35> ^object <o22> +)
    (<in36> ^1 <set36> +)
    (<set36> ^object <o5> +)
    (<set36> ^object <o6> +)
    (<set36> ^object <o23> +)
    (<set36> ^object <o24> +)
    (<in37> ^1 <set37> +)
    (<set37> ^object <o8> +)
    (<set37> ^object <o9> +)
    (<set37> ^object <o25> +)
    (<set37> ^object <o26> +)
    (<in38> ^1 <set38> +)
    (<set38> ^object <o28> +)
    (<set38> ^object <o29> +)
    (<set38> ^object <o30> +)
    (<set38> ^object <o31> +)
    (<in39> ^1 <set39> +)
    (<set39> ^object <o22> +)
    (<set39> ^object <o24> +)
    (<set39> ^object <o26> +)
    (<set39> ^object <o31> +)
    (<in40> ^1 <set40> +)
    (<set40> ^object <o2> +)
    (<set40> ^object <o6> +)
    (<set40> ^object <o25> +)
    (<set40> ^object <o31> +)
    (<in41> ^1 <set41> +)
    (<set41> ^object <o22> +)
    (<set41> ^object <o23> +)
    (<set41> ^object <o9> +)
    (<set41> ^object <o28> +)
}

sp {dialog-event*apply*game-state-change-respond*init-frog3
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-frog3)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <left-of1> +)
    (<preds> ^predicate <right-of1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color blue1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color blue1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color blue1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color blue1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<in0> ^1 <o8> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o9> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o10> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o11> +)
    (<in3> ^2 <o5> +)
    (<in4> ^1 <o12> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o13> +)
    (<in5> ^2 <o7> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o9> +)
    (<in8> ^1 <o3> +)
    (<in8> ^2 <o19> +)
    (<in9> ^1 <o5> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o6> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o7> +)
    (<in11> ^2 <o13> +)
    (<left-of1> ^item-type predicate +)
    (<left-of1> ^handle left-of1 +)
    (<left-of1> ^instance <in12> +)
    (<left-of1> ^instance <in13> +)
    (<left-of1> ^instance <in14> +)
    (<left-of1> ^instance <in15> +)
    (<left-of1> ^instance <in16> +)
    (<left-of1> ^instance <in17> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o2> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o3> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o4> +)
    (<in15> ^1 <o4> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o5> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o6> +)
    (<in17> ^2 <o7> +)
    (<right-of1> ^item-type predicate +)
    (<right-of1> ^handle right-of1 +)
    (<right-of1> ^instance <in18> +)
    (<right-of1> ^instance <in19> +)
    (<right-of1> ^instance <in20> +)
    (<right-of1> ^instance <in21> +)
    (<right-of1> ^instance <in22> +)
    (<right-of1> ^instance <in23> +)
    (<in18> ^1 <o2> +)
    (<in18> ^2 <o1> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o2> +)
    (<in20> ^1 <o4> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o5> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o6> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o7> +)
    (<in23> ^2 <o6> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-connect-3
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-connect-3)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<objs> ^object <o26> +)
    (<objs> ^object <o27> +)
    (<objs> ^object <o28> +)
    (<objs> ^object <o29> +)
    (<objs> ^object <o30> +)
    (<objs> ^object <o31> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <above1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-9 +)
    (<o21> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-10 +)
    (<o22> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-11 +)
    (<o23> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-12 +)
    (<o24> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-13 +)
    (<o25> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<o26> ^item-type object +)
    (<o26> ^handle object-14 +)
    (<o26> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<o27> ^item-type object +)
    (<o27> ^handle object-15 +)
    (<o27> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<o28> ^item-type object +)
    (<o28> ^handle object-16 +)
    (<o28> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category location +)
    (<o29> ^item-type object +)
    (<o29> ^handle object-17 +)
    (<o29> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category location +)
    (<o30> ^item-type object +)
    (<o30> ^handle object-18 +)
    (<o30> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category location +)
    (<o31> ^item-type object +)
    (<o31> ^handle object-19 +)
    (<o31> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-20 +)
    (<o10> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-21 +)
    (<o11> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color blue1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-22 +)
    (<o12> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color blue1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-23 +)
    (<o13> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-24 +)
    (<o14> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category block +)
    (<pr24> ^color red1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-25 +)
    (<o15> ^predicates <pr25> +)
    (<pr25> ^visible true +)
    (<pr25> ^category block +)
    (<pr25> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o27> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o28> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o29> +)
    (<in3> ^1 <o14> +)
    (<in3> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o27> +)
    (<in4> ^2 <o10> +)
    (<in5> ^1 <o28> +)
    (<in5> ^2 <o11> +)
    (<in6> ^1 <o29> +)
    (<in6> ^2 <o12> +)
    (<in7> ^1 <o15> +)
    (<in7> ^2 <o14> +)
    (<above1> ^item-type predicate +)
    (<above1> ^handle above1 +)
    (<above1> ^instance <in8> +)
    (<above1> ^instance <in9> +)
    (<above1> ^instance <in10> +)
    (<above1> ^instance <in11> +)
    (<above1> ^instance <in12> +)
    (<above1> ^instance <in13> +)
    (<above1> ^instance <in14> +)
    (<above1> ^instance <in15> +)
    (<above1> ^instance <in16> +)
    (<above1> ^instance <in17> +)
    (<above1> ^instance <in18> +)
    (<above1> ^instance <in19> +)
    (<above1> ^instance <in20> +)
    (<above1> ^instance <in21> +)
    (<above1> ^instance <in22> +)
    (<in8> ^1 <o7> +)
    (<in8> ^2 <o27> +)
    (<in9> ^1 <o4> +)
    (<in9> ^2 <o7> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o8> +)
    (<in11> ^2 <o28> +)
    (<in12> ^1 <o5> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o6> +)
    (<in15> ^2 <o9> +)
    (<in16> ^1 <o9> +)
    (<in16> ^2 <o29> +)
    (<in17> ^1 <o21> +)
    (<in17> ^2 <o23> +)
    (<in18> ^1 <o23> +)
    (<in18> ^2 <o25> +)
    (<in19> ^1 <o25> +)
    (<in19> ^2 <o30> +)
    (<in20> ^1 <o22> +)
    (<in20> ^2 <o24> +)
    (<in21> ^1 <o24> +)
    (<in21> ^2 <o26> +)
    (<in22> ^1 <o26> +)
    (<in22> ^2 <o31> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in23> +)
    (<linear> ^instance <in24> +)
    (<linear> ^instance <in25> +)
    (<linear> ^instance <in26> +)
    (<linear> ^instance <in27> +)
    (<linear> ^instance <in28> +)
    (<linear> ^instance <in29> +)
    (<linear> ^instance <in30> +)
    (<linear> ^instance <in31> +)
    (<linear> ^instance <in32> +)
    (<linear> ^instance <in33> +)
    (<linear> ^instance <in34> +)
    (<linear> ^instance <in35> +)
    (<linear> ^instance <in36> +)
    (<linear> ^instance <in37> +)
    (<linear> ^instance <in38> +)
    (<linear> ^instance <in39> +)
    (<linear> ^instance <in40> +)
    (<linear> ^instance <in41> +)
    (<linear> ^instance <in42> +)
    (<linear> ^instance <in43> +)
    (<linear> ^instance <in44> +)
    (<linear> ^instance <in45> +)
    (<linear> ^instance <in46> +)
    (<linear> ^instance <in47> +)
    (<linear> ^instance <in48> +)
    (<linear> ^instance <in49> +)
    (<linear> ^instance <in50> +)
    (<linear> ^instance <in51> +)
    (<linear> ^instance <in52> +)
    (<linear> ^instance <in53> +)
    (<linear> ^instance <in54> +)
    (<linear> ^instance <in55> +)
    (<linear> ^instance <in56> +)
    (<linear> ^instance <in57> +)
    (<in23> ^1 <set23> +)
    (<set23> ^object <o1> +)
    (<set23> ^object <o2> +)
    (<set23> ^object <o3> +)
    (<in24> ^1 <set24> +)
    (<set24> ^object <o1> +)
    (<set24> ^object <o5> +)
    (<set24> ^object <o9> +)
    (<in25> ^1 <set25> +)
    (<set25> ^object <o1> +)
    (<set25> ^object <o4> +)
    (<set25> ^object <o7> +)
    (<in26> ^1 <set26> +)
    (<set26> ^object <o4> +)
    (<set26> ^object <o5> +)
    (<set26> ^object <o6> +)
    (<in27> ^1 <set27> +)
    (<set27> ^object <o7> +)
    (<set27> ^object <o8> +)
    (<set27> ^object <o9> +)
    (<in28> ^1 <set28> +)
    (<set28> ^object <o2> +)
    (<set28> ^object <o5> +)
    (<set28> ^object <o8> +)
    (<in29> ^1 <set29> +)
    (<set29> ^object <o3> +)
    (<set29> ^object <o6> +)
    (<set29> ^object <o9> +)
    (<in30> ^1 <set30> +)
    (<set30> ^object <o3> +)
    (<set30> ^object <o5> +)
    (<set30> ^object <o7> +)
    (<in31> ^1 <set31> +)
    (<set31> ^object <o3> +)
    (<set31> ^object <o21> +)
    (<set31> ^object <o22> +)
    (<in32> ^1 <set32> +)
    (<set32> ^object <o6> +)
    (<set32> ^object <o23> +)
    (<set32> ^object <o24> +)
    (<in33> ^1 <set33> +)
    (<set33> ^object <o9> +)
    (<set33> ^object <o25> +)
    (<set33> ^object <o26> +)
    (<in34> ^1 <set34> +)
    (<set34> ^object <o29> +)
    (<set34> ^object <o30> +)
    (<set34> ^object <o31> +)
    (<in35> ^1 <set35> +)
    (<set35> ^object <o27> +)
    (<set35> ^object <o28> +)
    (<set35> ^object <o29> +)
    (<in36> ^1 <set36> +)
    (<set36> ^object <o2> +)
    (<set36> ^object <o3> +)
    (<set36> ^object <o21> +)
    (<in37> ^1 <set37> +)
    (<set37> ^object <o5> +)
    (<set37> ^object <o6> +)
    (<set37> ^object <o23> +)
    (<in38> ^1 <set38> +)
    (<set38> ^object <o8> +)
    (<set38> ^object <o9> +)
    (<set38> ^object <o25> +)
    (<in39> ^1 <set39> +)
    (<set39> ^object <o28> +)
    (<set39> ^object <o29> +)
    (<set39> ^object <o30> +)
    (<in40> ^1 <set40> +)
    (<set40> ^object <o21> +)
    (<set40> ^object <o23> +)
    (<set40> ^object <o25> +)
    (<in41> ^1 <set41> +)
    (<set41> ^object <o22> +)
    (<set41> ^object <o24> +)
    (<set41> ^object <o26> +)
    (<in42> ^1 <set42> +)
    (<set42> ^object <o4> +)
    (<set42> ^object <o7> +)
    (<set42> ^object <o27> +)
    (<in43> ^1 <set43> +)
    (<set43> ^object <o5> +)
    (<set43> ^object <o8> +)
    (<set43> ^object <o28> +)
    (<in44> ^1 <set44> +)
    (<set44> ^object <o6> +)
    (<set44> ^object <o9> +)
    (<set44> ^object <o29> +)
    (<in45> ^1 <set45> +)
    (<set45> ^object <o23> +)
    (<set45> ^object <o25> +)
    (<set45> ^object <o30> +)
    (<in46> ^1 <set46> +)
    (<set46> ^object <o24> +)
    (<set46> ^object <o26> +)
    (<set46> ^object <o31> +)
    (<in47> ^1 <set47> +)
    (<set47> ^object <o4> +)
    (<set47> ^object <o8> +)
    (<set47> ^object <o29> +)
    (<in48> ^1 <set48> +)
    (<set48> ^object <o5> +)
    (<set48> ^object <o9> +)
    (<set48> ^object <o30> +)
    (<in49> ^1 <set49> +)
    (<set49> ^object <o6> +)
    (<set49> ^object <o25> +)
    (<set49> ^object <o31> +)
    (<in50> ^1 <set50> +)
    (<set50> ^object <o2> +)
    (<set50> ^object <o6> +)
    (<set50> ^object <o25> +)
    (<in51> ^1 <set51> +)
    (<set51> ^object <o3> +)
    (<set51> ^object <o23> +)
    (<set51> ^object <o25> +)
    (<in52> ^1 <set52> +)
    (<set52> ^object <o24> +)
    (<set52> ^object <o25> +)
    (<set52> ^object <o29> +)
    (<in53> ^1 <set53> +)
    (<set53> ^object <o23> +)
    (<set53> ^object <o9> +)
    (<set53> ^object <o28> +)
    (<in54> ^1 <set54> +)
    (<set54> ^object <o6> +)
    (<set54> ^object <o8> +)
    (<set54> ^object <o27> +)
    (<in55> ^1 <set55> +)
    (<set55> ^object <o22> +)
    (<set55> ^object <o23> +)
    (<set55> ^object <o9> +)
    (<in56> ^1 <set56> +)
    (<set56> ^object <o21> +)
    (<set56> ^object <o6> +)
    (<set56> ^object <o8> +)
    (<in57> ^1 <set57> +)
    (<set57> ^object <o3> +)
    (<set57> ^object <o5> +)
    (<set57> ^object <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-sudoku4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-sudoku4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<pr0> ^value 0 +)
    (<pr0> ^sub-grid 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<pr1> ^value 1 +)
    (<pr1> ^sub-grid 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<pr2> ^value 2 +)
    (<pr2> ^sub-grid 2 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 4 +)
    (<pr3> ^y 1 +)
    (<pr3> ^value 0 +)
    (<pr3> ^sub-grid 2 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 1 +)
    (<pr4> ^y 2 +)
    (<pr4> ^value 4 +)
    (<pr4> ^sub-grid 1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 2 +)
    (<pr5> ^y 2 +)
    (<pr5> ^value 4 +)
    (<pr5> ^sub-grid 1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 3 +)
    (<pr6> ^y 2 +)
    (<pr6> ^value 0 +)
    (<pr6> ^sub-grid 2 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 4 +)
    (<pr7> ^y 2 +)
    (<pr7> ^value 0 +)
    (<pr7> ^sub-grid 2 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 1 +)
    (<pr8> ^y 3 +)
    (<pr8> ^value 0 +)
    (<pr8> ^sub-grid 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 2 +)
    (<pr9> ^y 3 +)
    (<pr9> ^value 0 +)
    (<pr9> ^sub-grid 3 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 3 +)
    (<pr10> ^y 3 +)
    (<pr10> ^value 0 +)
    (<pr10> ^sub-grid 4 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 4 +)
    (<pr11> ^y 3 +)
    (<pr11> ^value 2 +)
    (<pr11> ^sub-grid 4 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^x 1 +)
    (<pr12> ^y 4 +)
    (<pr12> ^value 0 +)
    (<pr12> ^sub-grid 3 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^x 2 +)
    (<pr13> ^y 4 +)
    (<pr13> ^value 4 +)
    (<pr13> ^sub-grid 3 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^x 3 +)
    (<pr14> ^y 4 +)
    (<pr14> ^value 3 +)
    (<pr14> ^sub-grid 4 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^x 4 +)
    (<pr15> ^y 4 +)
    (<pr15> ^value 0 +)
    (<pr15> ^sub-grid 4 +)
}

sp {dialog-event*apply*game-state-change-respond*final-frog
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-frog)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <left-of1> +)
    (<preds> ^predicate <right-of1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color blue1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color blue1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^color blue1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color red1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o6> +)
    (<in0> ^2 <o4> +)
    (<in1> ^1 <o7> +)
    (<in1> ^2 <o5> +)
    (<in2> ^1 <o8> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o9> +)
    (<in3> ^2 <o2> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o4> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o5> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o9> +)
    (<left-of1> ^item-type predicate +)
    (<left-of1> ^handle left-of1 +)
    (<left-of1> ^instance <in8> +)
    (<left-of1> ^instance <in9> +)
    (<left-of1> ^instance <in10> +)
    (<left-of1> ^instance <in11> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o2> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o3> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o5> +)
    (<right-of1> ^item-type predicate +)
    (<right-of1> ^handle right-of1 +)
    (<right-of1> ^instance <in12> +)
    (<right-of1> ^instance <in13> +)
    (<right-of1> ^instance <in14> +)
    (<right-of1> ^instance <in15> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o1> +)
    (<in13> ^1 <o3> +)
    (<in13> ^2 <o2> +)
    (<in14> ^1 <o4> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o5> +)
    (<in15> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*init-connect-4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-connect-4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<objs> ^object <o26> +)
    (<objs> ^object <o27> +)
    (<objs> ^object <o28> +)
    (<objs> ^object <o29> +)
    (<objs> ^object <o30> +)
    (<objs> ^object <o31> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <above1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-9 +)
    (<o21> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-10 +)
    (<o22> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-11 +)
    (<o23> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-12 +)
    (<o24> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-13 +)
    (<o25> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<o26> ^item-type object +)
    (<o26> ^handle object-14 +)
    (<o26> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<o27> ^item-type object +)
    (<o27> ^handle object-15 +)
    (<o27> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<o28> ^item-type object +)
    (<o28> ^handle object-16 +)
    (<o28> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category location +)
    (<o29> ^item-type object +)
    (<o29> ^handle object-17 +)
    (<o29> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category location +)
    (<o30> ^item-type object +)
    (<o30> ^handle object-18 +)
    (<o30> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category location +)
    (<o31> ^item-type object +)
    (<o31> ^handle object-19 +)
    (<o31> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-20 +)
    (<o10> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-21 +)
    (<o11> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-22 +)
    (<o12> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-23 +)
    (<o13> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-24 +)
    (<o14> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category block +)
    (<pr24> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-25 +)
    (<o15> ^predicates <pr25> +)
    (<pr25> ^visible true +)
    (<pr25> ^category block +)
    (<pr25> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o11> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o12> +)
    (<in2> ^1 <o13> +)
    (<in2> ^2 <o14> +)
    (<in3> ^1 <o14> +)
    (<in3> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o10> +)
    (<in5> ^1 <o12> +)
    (<in5> ^2 <o11> +)
    (<in6> ^1 <o14> +)
    (<in6> ^2 <o13> +)
    (<in7> ^1 <o15> +)
    (<in7> ^2 <o14> +)
    (<above1> ^item-type predicate +)
    (<above1> ^handle above1 +)
    (<above1> ^instance <in8> +)
    (<above1> ^instance <in9> +)
    (<above1> ^instance <in10> +)
    (<above1> ^instance <in11> +)
    (<above1> ^instance <in12> +)
    (<above1> ^instance <in13> +)
    (<above1> ^instance <in14> +)
    (<above1> ^instance <in15> +)
    (<above1> ^instance <in16> +)
    (<above1> ^instance <in17> +)
    (<above1> ^instance <in18> +)
    (<above1> ^instance <in19> +)
    (<above1> ^instance <in20> +)
    (<above1> ^instance <in21> +)
    (<above1> ^instance <in22> +)
    (<in8> ^1 <o7> +)
    (<in8> ^2 <o27> +)
    (<in9> ^1 <o4> +)
    (<in9> ^2 <o7> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o8> +)
    (<in11> ^2 <o28> +)
    (<in12> ^1 <o5> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o6> +)
    (<in15> ^2 <o9> +)
    (<in16> ^1 <o9> +)
    (<in16> ^2 <o29> +)
    (<in17> ^1 <o21> +)
    (<in17> ^2 <o23> +)
    (<in18> ^1 <o23> +)
    (<in18> ^2 <o25> +)
    (<in19> ^1 <o25> +)
    (<in19> ^2 <o30> +)
    (<in20> ^1 <o22> +)
    (<in20> ^2 <o24> +)
    (<in21> ^1 <o24> +)
    (<in21> ^2 <o26> +)
    (<in22> ^1 <o26> +)
    (<in22> ^2 <o31> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in23> +)
    (<linear> ^instance <in24> +)
    (<linear> ^instance <in25> +)
    (<linear> ^instance <in26> +)
    (<linear> ^instance <in27> +)
    (<linear> ^instance <in28> +)
    (<linear> ^instance <in29> +)
    (<linear> ^instance <in30> +)
    (<linear> ^instance <in31> +)
    (<linear> ^instance <in32> +)
    (<linear> ^instance <in33> +)
    (<linear> ^instance <in34> +)
    (<linear> ^instance <in35> +)
    (<linear> ^instance <in36> +)
    (<linear> ^instance <in37> +)
    (<linear> ^instance <in38> +)
    (<linear> ^instance <in39> +)
    (<in23> ^1 <set23> +)
    (<set23> ^object <o1> +)
    (<set23> ^object <o2> +)
    (<set23> ^object <o3> +)
    (<set23> ^object <o21> +)
    (<in24> ^1 <set24> +)
    (<set24> ^object <o1> +)
    (<set24> ^object <o5> +)
    (<set24> ^object <o9> +)
    (<set24> ^object <o30> +)
    (<in25> ^1 <set25> +)
    (<set25> ^object <o1> +)
    (<set25> ^object <o4> +)
    (<set25> ^object <o7> +)
    (<set25> ^object <o27> +)
    (<in26> ^1 <set26> +)
    (<set26> ^object <o4> +)
    (<set26> ^object <o5> +)
    (<set26> ^object <o6> +)
    (<set26> ^object <o23> +)
    (<in27> ^1 <set27> +)
    (<set27> ^object <o7> +)
    (<set27> ^object <o8> +)
    (<set27> ^object <o9> +)
    (<set27> ^object <o25> +)
    (<in28> ^1 <set28> +)
    (<set28> ^object <o27> +)
    (<set28> ^object <o28> +)
    (<set28> ^object <o29> +)
    (<set28> ^object <o30> +)
    (<in29> ^1 <set29> +)
    (<set29> ^object <o2> +)
    (<set29> ^object <o5> +)
    (<set29> ^object <o8> +)
    (<set29> ^object <o28> +)
    (<in30> ^1 <set30> +)
    (<set30> ^object <o3> +)
    (<set30> ^object <o6> +)
    (<set30> ^object <o9> +)
    (<set30> ^object <o29> +)
    (<in31> ^1 <set31> +)
    (<set31> ^object <o21> +)
    (<set31> ^object <o23> +)
    (<set31> ^object <o25> +)
    (<set31> ^object <o30> +)
    (<in32> ^1 <set32> +)
    (<set32> ^object <o21> +)
    (<set32> ^object <o6> +)
    (<set32> ^object <o8> +)
    (<set32> ^object <o27> +)
    (<in33> ^1 <set33> +)
    (<set33> ^object <o2> +)
    (<set33> ^object <o3> +)
    (<set33> ^object <o21> +)
    (<set33> ^object <o22> +)
    (<in34> ^1 <set34> +)
    (<set34> ^object <o5> +)
    (<set34> ^object <o6> +)
    (<set34> ^object <o23> +)
    (<set34> ^object <o24> +)
    (<in35> ^1 <set35> +)
    (<set35> ^object <o8> +)
    (<set35> ^object <o9> +)
    (<set35> ^object <o25> +)
    (<set35> ^object <o26> +)
    (<in36> ^1 <set36> +)
    (<set36> ^object <o28> +)
    (<set36> ^object <o29> +)
    (<set36> ^object <o30> +)
    (<set36> ^object <o31> +)
    (<in37> ^1 <set37> +)
    (<set37> ^object <o22> +)
    (<set37> ^object <o24> +)
    (<set37> ^object <o26> +)
    (<set37> ^object <o31> +)
    (<in38> ^1 <set38> +)
    (<set38> ^object <o2> +)
    (<set38> ^object <o6> +)
    (<set38> ^object <o25> +)
    (<set38> ^object <o31> +)
    (<in39> ^1 <set39> +)
    (<set39> ^object <o22> +)
    (<set39> ^object <o23> +)
    (<set39> ^object <o9> +)
    (<set39> ^object <o28> +)
}

sp {dialog-event*apply*game-state-change-respond*final-othello
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-othello)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<objs> ^object <o26> +)
    (<objs> ^object <o27> +)
    (<objs> ^object <o28> +)
    (<objs> ^object <o29> +)
    (<objs> ^object <o30> +)
    (<objs> ^object <o31> +)
    (<objs> ^object <o32> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 4 +)
    (<pr3> ^y 1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 1 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 2 +)
    (<pr5> ^y 2 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 3 +)
    (<pr6> ^y 2 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 4 +)
    (<pr7> ^y 2 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 1 +)
    (<pr8> ^y 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 2 +)
    (<pr9> ^y 3 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 3 +)
    (<pr10> ^y 3 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 4 +)
    (<pr11> ^y 3 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^x 1 +)
    (<pr12> ^y 4 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^x 2 +)
    (<pr13> ^y 4 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^x 3 +)
    (<pr14> ^y 4 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^x 4 +)
    (<pr15> ^y 4 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color red1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<pr17> ^color red1 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<pr18> ^color red1 +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category block +)
    (<pr19> ^color blue1 +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-20 +)
    (<o21> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color blue1 +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-21 +)
    (<o22> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color blue1 +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-22 +)
    (<o23> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color red1 +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-23 +)
    (<o24> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color red1 +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-24 +)
    (<o25> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category block +)
    (<pr24> ^color red1 +)
    (<o26> ^item-type object +)
    (<o26> ^handle object-25 +)
    (<o26> ^predicates <pr25> +)
    (<pr25> ^visible true +)
    (<pr25> ^category block +)
    (<pr25> ^color blue1 +)
    (<o27> ^item-type object +)
    (<o27> ^handle object-26 +)
    (<o27> ^predicates <pr26> +)
    (<pr26> ^visible true +)
    (<pr26> ^category block +)
    (<pr26> ^color red1 +)
    (<o28> ^item-type object +)
    (<o28> ^handle object-27 +)
    (<o28> ^predicates <pr27> +)
    (<pr27> ^visible true +)
    (<pr27> ^category block +)
    (<pr27> ^color blue1 +)
    (<o29> ^item-type object +)
    (<o29> ^handle object-28 +)
    (<o29> ^predicates <pr28> +)
    (<pr28> ^visible true +)
    (<pr28> ^category block +)
    (<pr28> ^color red1 +)
    (<o30> ^item-type object +)
    (<o30> ^handle object-29 +)
    (<o30> ^predicates <pr29> +)
    (<pr29> ^visible true +)
    (<pr29> ^category block +)
    (<pr29> ^color blue1 +)
    (<o31> ^item-type object +)
    (<o31> ^handle object-30 +)
    (<o31> ^predicates <pr30> +)
    (<pr30> ^visible true +)
    (<pr30> ^category block +)
    (<pr30> ^color red1 +)
    (<o32> ^item-type object +)
    (<o32> ^handle object-31 +)
    (<o32> ^predicates <pr31> +)
    (<pr31> ^visible true +)
    (<pr31> ^category block +)
    (<pr31> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<on1> ^instance <in8> +)
    (<on1> ^instance <in9> +)
    (<on1> ^instance <in10> +)
    (<on1> ^instance <in11> +)
    (<on1> ^instance <in12> +)
    (<on1> ^instance <in13> +)
    (<on1> ^instance <in14> +)
    (<on1> ^instance <in15> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o20> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o21> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o22> +)
    (<in5> ^2 <o6> +)
    (<in6> ^1 <o23> +)
    (<in6> ^2 <o7> +)
    (<in7> ^1 <o24> +)
    (<in7> ^2 <o8> +)
    (<in8> ^1 <o25> +)
    (<in8> ^2 <o9> +)
    (<in9> ^1 <o26> +)
    (<in9> ^2 <o10> +)
    (<in10> ^1 <o27> +)
    (<in10> ^2 <o11> +)
    (<in11> ^1 <o28> +)
    (<in11> ^2 <o12> +)
    (<in12> ^1 <o29> +)
    (<in12> ^2 <o13> +)
    (<in13> ^1 <o30> +)
    (<in13> ^2 <o14> +)
    (<in14> ^1 <o31> +)
    (<in14> ^2 <o15> +)
    (<in15> ^1 <o32> +)
    (<in15> ^2 <o16> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in16> +)
    (<below1> ^instance <in17> +)
    (<below1> ^instance <in18> +)
    (<below1> ^instance <in19> +)
    (<below1> ^instance <in20> +)
    (<below1> ^instance <in21> +)
    (<below1> ^instance <in22> +)
    (<below1> ^instance <in23> +)
    (<below1> ^instance <in24> +)
    (<below1> ^instance <in25> +)
    (<below1> ^instance <in26> +)
    (<below1> ^instance <in27> +)
    (<below1> ^instance <in28> +)
    (<below1> ^instance <in29> +)
    (<below1> ^instance <in30> +)
    (<below1> ^instance <in31> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o17> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o18> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o19> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o20> +)
    (<in20> ^1 <o5> +)
    (<in20> ^2 <o21> +)
    (<in21> ^1 <o6> +)
    (<in21> ^2 <o22> +)
    (<in22> ^1 <o7> +)
    (<in22> ^2 <o23> +)
    (<in23> ^1 <o8> +)
    (<in23> ^2 <o24> +)
    (<in24> ^1 <o9> +)
    (<in24> ^2 <o25> +)
    (<in25> ^1 <o10> +)
    (<in25> ^2 <o26> +)
    (<in26> ^1 <o11> +)
    (<in26> ^2 <o27> +)
    (<in27> ^1 <o12> +)
    (<in27> ^2 <o28> +)
    (<in28> ^1 <o13> +)
    (<in28> ^2 <o29> +)
    (<in29> ^1 <o14> +)
    (<in29> ^2 <o30> +)
    (<in30> ^1 <o15> +)
    (<in30> ^2 <o31> +)
    (<in31> ^1 <o16> +)
    (<in31> ^2 <o32> +)
}

sp {dialog-event*apply*game-state-change-respond*second-frog4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type second-frog4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <left-of1> +)
    (<preds> ^predicate <right-of1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color red1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color blue1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^color blue1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^color blue1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color blue1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color blue1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color red1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color red1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color red1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o6> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o6> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o4> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<left-of1> ^item-type predicate +)
    (<left-of1> ^handle left-of1 +)
    (<left-of1> ^instance <in16> +)
    (<left-of1> ^instance <in17> +)
    (<left-of1> ^instance <in18> +)
    (<left-of1> ^instance <in19> +)
    (<left-of1> ^instance <in20> +)
    (<left-of1> ^instance <in21> +)
    (<left-of1> ^instance <in22> +)
    (<left-of1> ^instance <in23> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o3> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o4> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o5> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o6> +)
    (<in21> ^2 <o7> +)
    (<in22> ^1 <o7> +)
    (<in22> ^2 <o8> +)
    (<in23> ^1 <o8> +)
    (<in23> ^2 <o9> +)
    (<right-of1> ^item-type predicate +)
    (<right-of1> ^handle right-of1 +)
    (<right-of1> ^instance <in24> +)
    (<right-of1> ^instance <in25> +)
    (<right-of1> ^instance <in26> +)
    (<right-of1> ^instance <in27> +)
    (<right-of1> ^instance <in28> +)
    (<right-of1> ^instance <in29> +)
    (<right-of1> ^instance <in30> +)
    (<right-of1> ^instance <in31> +)
    (<in24> ^1 <o2> +)
    (<in24> ^2 <o1> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o2> +)
    (<in26> ^1 <o4> +)
    (<in26> ^2 <o3> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o6> +)
    (<in28> ^2 <o5> +)
    (<in29> ^1 <o7> +)
    (<in29> ^2 <o6> +)
    (<in30> ^1 <o8> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o9> +)
    (<in31> ^2 <o8> +)
}

sp {dialog-event*apply*game-state-change-respond*init-frog
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-frog)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <left-of1> +)
    (<preds> ^predicate <right-of1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color blue1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color blue1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^color blue1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color red1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o6> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o7> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o8> +)
    (<in2> ^2 <o4> +)
    (<in3> ^1 <o9> +)
    (<in3> ^2 <o5> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o1> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o2> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o4> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o5> +)
    (<in7> ^2 <o9> +)
    (<left-of1> ^item-type predicate +)
    (<left-of1> ^handle left-of1 +)
    (<left-of1> ^instance <in8> +)
    (<left-of1> ^instance <in9> +)
    (<left-of1> ^instance <in10> +)
    (<left-of1> ^instance <in11> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o2> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o3> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o5> +)
    (<right-of1> ^item-type predicate +)
    (<right-of1> ^handle right-of1 +)
    (<right-of1> ^instance <in12> +)
    (<right-of1> ^instance <in13> +)
    (<right-of1> ^instance <in14> +)
    (<right-of1> ^instance <in15> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o1> +)
    (<in13> ^1 <o3> +)
    (<in13> ^2 <o2> +)
    (<in14> ^1 <o4> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o5> +)
    (<in15> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-risk
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-risk)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^color blue1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color blue1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color blue1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color blue1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color blue1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o7> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o8> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o9> +)
    (<in2> ^2 <o2> +)
    (<in3> ^1 <o10> +)
    (<in3> ^2 <o6> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o3> +)
    (<in5> ^1 <o12> +)
    (<in5> ^2 <o3> +)
    (<in6> ^1 <o13> +)
    (<in6> ^2 <o4> +)
    (<in7> ^1 <o14> +)
    (<in7> ^2 <o5> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o7> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o8> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o9> +)
    (<in11> ^1 <o6> +)
    (<in11> ^2 <o10> +)
    (<in12> ^1 <o3> +)
    (<in12> ^2 <o11> +)
    (<in13> ^1 <o3> +)
    (<in13> ^2 <o12> +)
    (<in14> ^1 <o4> +)
    (<in14> ^2 <o13> +)
    (<in15> ^1 <o5> +)
    (<in15> ^2 <o14> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o5> +)
    (<in30> ^2 <o1> +)
    (<in31> ^1 <o5> +)
    (<in31> ^2 <o2> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o3> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o6> +)
    (<in35> ^1 <o6> +)
    (<in35> ^2 <o2> +)
    (<in36> ^1 <o6> +)
    (<in36> ^2 <o3> +)
    (<in37> ^1 <o6> +)
    (<in37> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*final-maze
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-maze)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color black1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color black1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color black1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o13> +)
    (<in0> ^2 <o10> +)
    (<in1> ^1 <o14> +)
    (<in1> ^2 <o5> +)
    (<in2> ^1 <o15> +)
    (<in2> ^2 <o8> +)
    (<in3> ^1 <o16> +)
    (<in3> ^2 <o11> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o10> +)
    (<in4> ^2 <o13> +)
    (<in5> ^1 <o5> +)
    (<in5> ^2 <o14> +)
    (<in6> ^1 <o8> +)
    (<in6> ^2 <o15> +)
    (<in7> ^1 <o11> +)
    (<in7> ^2 <o16> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in8> +)
    (<near1> ^instance <in9> +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<near1> ^instance <in56> +)
    (<near1> ^instance <in57> +)
    (<near1> ^instance <in58> +)
    (<near1> ^instance <in59> +)
    (<near1> ^instance <in60> +)
    (<near1> ^instance <in61> +)
    (<near1> ^instance <in62> +)
    (<near1> ^instance <in63> +)
    (<near1> ^instance <in64> +)
    (<near1> ^instance <in65> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o2> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o4> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o5> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o1> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o3> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o4> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o5> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o6> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o3> +)
    (<in17> ^2 <o5> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o6> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o4> +)
    (<in20> ^2 <o2> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o5> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o7> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o8> +)
    (<in24> ^1 <o5> +)
    (<in24> ^2 <o1> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o2> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o3> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o6> +)
    (<in29> ^1 <o5> +)
    (<in29> ^2 <o7> +)
    (<in30> ^1 <o5> +)
    (<in30> ^2 <o8> +)
    (<in31> ^1 <o5> +)
    (<in31> ^2 <o9> +)
    (<in32> ^1 <o6> +)
    (<in32> ^2 <o2> +)
    (<in33> ^1 <o6> +)
    (<in33> ^2 <o3> +)
    (<in34> ^1 <o6> +)
    (<in34> ^2 <o5> +)
    (<in35> ^1 <o6> +)
    (<in35> ^2 <o8> +)
    (<in36> ^1 <o6> +)
    (<in36> ^2 <o9> +)
    (<in37> ^1 <o7> +)
    (<in37> ^2 <o4> +)
    (<in38> ^1 <o7> +)
    (<in38> ^2 <o5> +)
    (<in39> ^1 <o7> +)
    (<in39> ^2 <o8> +)
    (<in40> ^1 <o8> +)
    (<in40> ^2 <o7> +)
    (<in41> ^1 <o8> +)
    (<in41> ^2 <o4> +)
    (<in42> ^1 <o8> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o8> +)
    (<in43> ^2 <o6> +)
    (<in44> ^1 <o8> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o9> +)
    (<in45> ^2 <o8> +)
    (<in46> ^1 <o9> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o9> +)
    (<in47> ^2 <o6> +)
    (<in48> ^1 <o3> +)
    (<in48> ^2 <o10> +)
    (<in49> ^1 <o3> +)
    (<in49> ^2 <o11> +)
    (<in50> ^1 <o6> +)
    (<in50> ^2 <o10> +)
    (<in51> ^1 <o6> +)
    (<in51> ^2 <o11> +)
    (<in52> ^1 <o6> +)
    (<in52> ^2 <o12> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o11> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o12> +)
    (<in55> ^1 <o10> +)
    (<in55> ^2 <o3> +)
    (<in56> ^1 <o10> +)
    (<in56> ^2 <o6> +)
    (<in57> ^1 <o10> +)
    (<in57> ^2 <o11> +)
    (<in58> ^1 <o11> +)
    (<in58> ^2 <o10> +)
    (<in59> ^1 <o11> +)
    (<in59> ^2 <o3> +)
    (<in60> ^1 <o11> +)
    (<in60> ^2 <o6> +)
    (<in61> ^1 <o11> +)
    (<in61> ^2 <o9> +)
    (<in62> ^1 <o11> +)
    (<in62> ^2 <o12> +)
    (<in63> ^1 <o12> +)
    (<in63> ^2 <o11> +)
    (<in64> ^1 <o12> +)
    (<in64> ^2 <o6> +)
    (<in65> ^1 <o12> +)
    (<in65> ^2 <o9> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<diagonal-with1> ^instance <in72> +)
    (<diagonal-with1> ^instance <in73> +)
    (<diagonal-with1> ^instance <in74> +)
    (<diagonal-with1> ^instance <in75> +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<diagonal-with1> ^instance <in88> +)
    (<diagonal-with1> ^instance <in89> +)
    (<in66> ^1 <o1> +)
    (<in66> ^2 <o5> +)
    (<in67> ^1 <o2> +)
    (<in67> ^2 <o4> +)
    (<in68> ^1 <o2> +)
    (<in68> ^2 <o6> +)
    (<in69> ^1 <o3> +)
    (<in69> ^2 <o5> +)
    (<in70> ^1 <o4> +)
    (<in70> ^2 <o2> +)
    (<in71> ^1 <o4> +)
    (<in71> ^2 <o8> +)
    (<in72> ^1 <o5> +)
    (<in72> ^2 <o1> +)
    (<in73> ^1 <o5> +)
    (<in73> ^2 <o3> +)
    (<in74> ^1 <o5> +)
    (<in74> ^2 <o7> +)
    (<in75> ^1 <o5> +)
    (<in75> ^2 <o9> +)
    (<in76> ^1 <o6> +)
    (<in76> ^2 <o2> +)
    (<in77> ^1 <o6> +)
    (<in77> ^2 <o8> +)
    (<in78> ^1 <o7> +)
    (<in78> ^2 <o5> +)
    (<in79> ^1 <o8> +)
    (<in79> ^2 <o4> +)
    (<in80> ^1 <o8> +)
    (<in80> ^2 <o6> +)
    (<in81> ^1 <o9> +)
    (<in81> ^2 <o5> +)
    (<in82> ^1 <o3> +)
    (<in82> ^2 <o11> +)
    (<in83> ^1 <o11> +)
    (<in83> ^2 <o3> +)
    (<in84> ^1 <o6> +)
    (<in84> ^2 <o10> +)
    (<in85> ^1 <o10> +)
    (<in85> ^2 <o6> +)
    (<in86> ^1 <o9> +)
    (<in86> ^2 <o11> +)
    (<in87> ^1 <o11> +)
    (<in87> ^2 <o9> +)
    (<in88> ^1 <o12> +)
    (<in88> ^2 <o6> +)
    (<in89> ^1 <o6> +)
    (<in89> ^2 <o12> +)
}

sp {dialog-event*apply*game-state-change-respond*init-mahjong
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-mahjong)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category block +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category block +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^color yellow1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^name garbage +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^color red1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^color yellow1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color green1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color green1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o8> +)
    (<in2> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o9> +)
    (<in3> ^2 <o8> +)
    (<in4> ^1 <o6> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o2> +)
    (<in5> ^2 <o3> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-tower4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-tower4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size tiny1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size small1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size medium1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^size large1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o5> +)
    (<in0> ^2 <o4> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o7> +)
    (<in3> ^1 <o7> +)
    (<in3> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o4> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o6> +)
    (<in5> ^2 <o4> +)
    (<in6> ^1 <o7> +)
    (<in6> ^2 <o6> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o7> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in8> +)
    (<larger-than1> ^instance <in9> +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<larger-than1> ^instance <in18> +)
    (<larger-than1> ^instance <in19> +)
    (<larger-than1> ^instance <in20> +)
    (<larger-than1> ^instance <in21> +)
    (<larger-than1> ^instance <in22> +)
    (<larger-than1> ^instance <in23> +)
    (<larger-than1> ^instance <in24> +)
    (<larger-than1> ^instance <in25> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o4> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o5> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o3> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o1> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o6> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o7> +)
    (<in18> ^1 <o2> +)
    (<in18> ^2 <o7> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o7> +)
    (<in20> ^1 <o7> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o7> +)
    (<in21> ^2 <o5> +)
    (<in22> ^1 <o7> +)
    (<in22> ^2 <o4> +)
    (<in23> ^1 <o6> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o6> +)
    (<in24> ^2 <o4> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*final-tower5
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-tower5)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size tiny1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size small1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size medium1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^size large1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^size giant1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o5> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o7> +)
    (<in3> ^1 <o7> +)
    (<in3> ^2 <o8> +)
    (<in4> ^1 <o8> +)
    (<in4> ^2 <o3> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o5> +)
    (<in5> ^2 <o4> +)
    (<in6> ^1 <o6> +)
    (<in6> ^2 <o5> +)
    (<in7> ^1 <o7> +)
    (<in7> ^2 <o6> +)
    (<in8> ^1 <o8> +)
    (<in8> ^2 <o7> +)
    (<in9> ^1 <o3> +)
    (<in9> ^2 <o8> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<larger-than1> ^instance <in18> +)
    (<larger-than1> ^instance <in19> +)
    (<larger-than1> ^instance <in20> +)
    (<larger-than1> ^instance <in21> +)
    (<larger-than1> ^instance <in22> +)
    (<larger-than1> ^instance <in23> +)
    (<larger-than1> ^instance <in24> +)
    (<larger-than1> ^instance <in25> +)
    (<larger-than1> ^instance <in26> +)
    (<larger-than1> ^instance <in27> +)
    (<larger-than1> ^instance <in28> +)
    (<larger-than1> ^instance <in29> +)
    (<larger-than1> ^instance <in30> +)
    (<larger-than1> ^instance <in31> +)
    (<larger-than1> ^instance <in32> +)
    (<larger-than1> ^instance <in33> +)
    (<larger-than1> ^instance <in34> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o3> +)
    (<in12> ^2 <o4> +)
    (<in13> ^1 <o1> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o5> +)
    (<in15> ^1 <o3> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o6> +)
    (<in19> ^1 <o1> +)
    (<in19> ^2 <o7> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o7> +)
    (<in21> ^1 <o3> +)
    (<in21> ^2 <o7> +)
    (<in22> ^1 <o1> +)
    (<in22> ^2 <o8> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o8> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o8> +)
    (<in25> ^1 <o8> +)
    (<in25> ^2 <o7> +)
    (<in26> ^1 <o8> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o8> +)
    (<in27> ^2 <o5> +)
    (<in28> ^1 <o8> +)
    (<in28> ^2 <o4> +)
    (<in29> ^1 <o7> +)
    (<in29> ^2 <o6> +)
    (<in30> ^1 <o7> +)
    (<in30> ^2 <o5> +)
    (<in31> ^1 <o7> +)
    (<in31> ^2 <o4> +)
    (<in32> ^1 <o6> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o6> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*third-mac
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type third-mac)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^shape missionary1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^shape missionary1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^shape missionary1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape cannibal1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^shape cannibal1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^shape cannibal1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o9> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o9> +)
    (<in4> ^1 <o7> +)
    (<in4> ^2 <o1> +)
    (<in5> ^1 <o8> +)
    (<in5> ^2 <o1> +)
    (<in6> ^1 <o9> +)
    (<in6> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o3> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o9> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o9> +)
    (<in10> ^2 <o6> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o7> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o1> +)
    (<in13> ^2 <o9> +)
}

sp {dialog-event*apply*game-state-change-respond*second-tower3
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type second-tower3)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size small1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size medium1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size large1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o3> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o2> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o6> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o3> +)
    (<in5> ^2 <o6> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in6> +)
    (<larger-than1> ^instance <in7> +)
    (<larger-than1> ^instance <in8> +)
    (<larger-than1> ^instance <in9> +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o4> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o4> +)
    (<in8> ^1 <o3> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o5> +)
    (<in11> ^1 <o3> +)
    (<in11> ^2 <o5> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o6> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o6> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o6> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o6> +)
    (<in16> ^2 <o4> +)
    (<in17> ^1 <o5> +)
    (<in17> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*second-frog
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type second-frog)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <left-of1> +)
    (<preds> ^predicate <right-of1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color blue1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color blue1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^color blue1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color red1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o6> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o7> +)
    (<in1> ^2 <o4> +)
    (<in2> ^1 <o8> +)
    (<in2> ^2 <o2> +)
    (<in3> ^1 <o9> +)
    (<in3> ^2 <o5> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o1> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o4> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o5> +)
    (<in7> ^2 <o9> +)
    (<left-of1> ^item-type predicate +)
    (<left-of1> ^handle left-of1 +)
    (<left-of1> ^instance <in8> +)
    (<left-of1> ^instance <in9> +)
    (<left-of1> ^instance <in10> +)
    (<left-of1> ^instance <in11> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o2> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o3> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o5> +)
    (<right-of1> ^item-type predicate +)
    (<right-of1> ^handle right-of1 +)
    (<right-of1> ^instance <in12> +)
    (<right-of1> ^instance <in13> +)
    (<right-of1> ^instance <in14> +)
    (<right-of1> ^instance <in15> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o1> +)
    (<in13> ^1 <o3> +)
    (<in13> ^2 <o2> +)
    (<in14> ^1 <o4> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o5> +)
    (<in15> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*final-tictactoe
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-tictactoe)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o14> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o10> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o11> +)
    (<in7> ^1 <o3> +)
    (<in7> ^2 <o12> +)
    (<in8> ^1 <o14> +)
    (<in8> ^2 <o13> +)
    (<in9> ^1 <o15> +)
    (<in9> ^2 <o14> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in10> +)
    (<linear> ^instance <in11> +)
    (<linear> ^instance <in12> +)
    (<linear> ^instance <in13> +)
    (<linear> ^instance <in14> +)
    (<linear> ^instance <in15> +)
    (<linear> ^instance <in16> +)
    (<linear> ^instance <in17> +)
    (<in10> ^1 <set10> +)
    (<set10> ^object <o1> +)
    (<set10> ^object <o2> +)
    (<set10> ^object <o3> +)
    (<in11> ^1 <set11> +)
    (<set11> ^object <o1> +)
    (<set11> ^object <o5> +)
    (<set11> ^object <o9> +)
    (<in12> ^1 <set12> +)
    (<set12> ^object <o1> +)
    (<set12> ^object <o4> +)
    (<set12> ^object <o7> +)
    (<in13> ^1 <set13> +)
    (<set13> ^object <o4> +)
    (<set13> ^object <o5> +)
    (<set13> ^object <o6> +)
    (<in14> ^1 <set14> +)
    (<set14> ^object <o7> +)
    (<set14> ^object <o8> +)
    (<set14> ^object <o9> +)
    (<in15> ^1 <set15> +)
    (<set15> ^object <o2> +)
    (<set15> ^object <o5> +)
    (<set15> ^object <o8> +)
    (<in16> ^1 <set16> +)
    (<set16> ^object <o3> +)
    (<set16> ^object <o6> +)
    (<set16> ^object <o9> +)
    (<in17> ^1 <set17> +)
    (<set17> ^object <o3> +)
    (<set17> ^object <o5> +)
    (<set17> ^object <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*init-pushmaze
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-pushmaze)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 1 +)
    (<pr3> ^y 2 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 2 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 3 +)
    (<pr5> ^y 2 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 1 +)
    (<pr6> ^y 3 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 2 +)
    (<pr7> ^y 3 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 3 +)
    (<pr8> ^y 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 1 +)
    (<pr9> ^y 4 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 2 +)
    (<pr10> ^y 4 +)
    (<pr10> ^color blue1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 3 +)
    (<pr11> ^y 4 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color black1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color black1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color black1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color black1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o13> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o14> +)
    (<in1> ^2 <o4> +)
    (<in2> ^1 <o15> +)
    (<in2> ^2 <o5> +)
    (<in3> ^1 <o16> +)
    (<in3> ^2 <o6> +)
    (<in4> ^1 <o17> +)
    (<in4> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o13> +)
    (<in6> ^1 <o4> +)
    (<in6> ^2 <o14> +)
    (<in7> ^1 <o5> +)
    (<in7> ^2 <o15> +)
    (<in8> ^1 <o6> +)
    (<in8> ^2 <o16> +)
    (<in9> ^1 <o9> +)
    (<in9> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<near1> ^instance <in56> +)
    (<near1> ^instance <in57> +)
    (<near1> ^instance <in58> +)
    (<near1> ^instance <in59> +)
    (<near1> ^instance <in60> +)
    (<near1> ^instance <in61> +)
    (<near1> ^instance <in62> +)
    (<near1> ^instance <in63> +)
    (<near1> ^instance <in64> +)
    (<near1> ^instance <in65> +)
    (<near1> ^instance <in66> +)
    (<near1> ^instance <in67> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o2> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o1> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o4> +)
    (<in16> ^1 <o2> +)
    (<in16> ^2 <o5> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o3> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o1> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o2> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o4> +)
    (<in24> ^2 <o7> +)
    (<in25> ^1 <o4> +)
    (<in25> ^2 <o8> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o1> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o2> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o3> +)
    (<in29> ^1 <o5> +)
    (<in29> ^2 <o4> +)
    (<in30> ^1 <o5> +)
    (<in30> ^2 <o6> +)
    (<in31> ^1 <o5> +)
    (<in31> ^2 <o7> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o8> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o9> +)
    (<in34> ^1 <o6> +)
    (<in34> ^2 <o2> +)
    (<in35> ^1 <o6> +)
    (<in35> ^2 <o3> +)
    (<in36> ^1 <o6> +)
    (<in36> ^2 <o5> +)
    (<in37> ^1 <o6> +)
    (<in37> ^2 <o8> +)
    (<in38> ^1 <o6> +)
    (<in38> ^2 <o9> +)
    (<in39> ^1 <o7> +)
    (<in39> ^2 <o4> +)
    (<in40> ^1 <o7> +)
    (<in40> ^2 <o5> +)
    (<in41> ^1 <o7> +)
    (<in41> ^2 <o8> +)
    (<in42> ^1 <o8> +)
    (<in42> ^2 <o7> +)
    (<in43> ^1 <o8> +)
    (<in43> ^2 <o4> +)
    (<in44> ^1 <o8> +)
    (<in44> ^2 <o5> +)
    (<in45> ^1 <o8> +)
    (<in45> ^2 <o6> +)
    (<in46> ^1 <o8> +)
    (<in46> ^2 <o9> +)
    (<in47> ^1 <o9> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o9> +)
    (<in48> ^2 <o5> +)
    (<in49> ^1 <o9> +)
    (<in49> ^2 <o6> +)
    (<in50> ^1 <o9> +)
    (<in50> ^2 <o11> +)
    (<in51> ^1 <o9> +)
    (<in51> ^2 <o12> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o19> +)
    (<in53> ^1 <o8> +)
    (<in53> ^2 <o11> +)
    (<in54> ^1 <o8> +)
    (<in54> ^2 <o12> +)
    (<in55> ^1 <o7> +)
    (<in55> ^2 <o10> +)
    (<in56> ^1 <o7> +)
    (<in56> ^2 <o11> +)
    (<in57> ^1 <o10> +)
    (<in57> ^2 <o7> +)
    (<in58> ^1 <o10> +)
    (<in58> ^2 <o8> +)
    (<in59> ^1 <o10> +)
    (<in59> ^2 <o11> +)
    (<in60> ^1 <o11> +)
    (<in60> ^2 <o10> +)
    (<in61> ^1 <o11> +)
    (<in61> ^2 <o7> +)
    (<in62> ^1 <o11> +)
    (<in62> ^2 <o8> +)
    (<in63> ^1 <o11> +)
    (<in63> ^2 <o9> +)
    (<in64> ^1 <o11> +)
    (<in64> ^2 <o12> +)
    (<in65> ^1 <o12> +)
    (<in65> ^2 <o11> +)
    (<in66> ^1 <o12> +)
    (<in66> ^2 <o8> +)
    (<in67> ^1 <o12> +)
    (<in67> ^2 <o9> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<diagonal-with1> ^instance <in72> +)
    (<diagonal-with1> ^instance <in73> +)
    (<diagonal-with1> ^instance <in74> +)
    (<diagonal-with1> ^instance <in75> +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<diagonal-with1> ^instance <in88> +)
    (<diagonal-with1> ^instance <in89> +)
    (<diagonal-with1> ^instance <in90> +)
    (<diagonal-with1> ^instance <in91> +)
    (<in68> ^1 <o1> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o2> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o2> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o3> +)
    (<in71> ^2 <o5> +)
    (<in72> ^1 <o4> +)
    (<in72> ^2 <o2> +)
    (<in73> ^1 <o4> +)
    (<in73> ^2 <o8> +)
    (<in74> ^1 <o5> +)
    (<in74> ^2 <o1> +)
    (<in75> ^1 <o5> +)
    (<in75> ^2 <o3> +)
    (<in76> ^1 <o5> +)
    (<in76> ^2 <o7> +)
    (<in77> ^1 <o5> +)
    (<in77> ^2 <o9> +)
    (<in78> ^1 <o6> +)
    (<in78> ^2 <o2> +)
    (<in79> ^1 <o6> +)
    (<in79> ^2 <o8> +)
    (<in80> ^1 <o7> +)
    (<in80> ^2 <o5> +)
    (<in81> ^1 <o8> +)
    (<in81> ^2 <o4> +)
    (<in82> ^1 <o8> +)
    (<in82> ^2 <o6> +)
    (<in83> ^1 <o9> +)
    (<in83> ^2 <o5> +)
    (<in84> ^1 <o9> +)
    (<in84> ^2 <o11> +)
    (<in85> ^1 <o11> +)
    (<in85> ^2 <o9> +)
    (<in86> ^1 <o12> +)
    (<in86> ^2 <o8> +)
    (<in87> ^1 <o8> +)
    (<in87> ^2 <o12> +)
    (<in88> ^1 <o10> +)
    (<in88> ^2 <o8> +)
    (<in89> ^1 <o8> +)
    (<in89> ^2 <o10> +)
    (<in90> ^1 <o11> +)
    (<in90> ^2 <o7> +)
    (<in91> ^1 <o7> +)
    (<in91> ^2 <o11> +)
}

sp {dialog-event*apply*game-state-change-respond*second-tower5
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type second-tower5)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size tiny1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size small1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size medium1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^size large1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^size giant1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o7> +)
    (<in3> ^1 <o7> +)
    (<in3> ^2 <o8> +)
    (<in4> ^1 <o8> +)
    (<in4> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o2> +)
    (<in5> ^2 <o4> +)
    (<in6> ^1 <o6> +)
    (<in6> ^2 <o5> +)
    (<in7> ^1 <o7> +)
    (<in7> ^2 <o6> +)
    (<in8> ^1 <o8> +)
    (<in8> ^2 <o7> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o8> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<larger-than1> ^instance <in18> +)
    (<larger-than1> ^instance <in19> +)
    (<larger-than1> ^instance <in20> +)
    (<larger-than1> ^instance <in21> +)
    (<larger-than1> ^instance <in22> +)
    (<larger-than1> ^instance <in23> +)
    (<larger-than1> ^instance <in24> +)
    (<larger-than1> ^instance <in25> +)
    (<larger-than1> ^instance <in26> +)
    (<larger-than1> ^instance <in27> +)
    (<larger-than1> ^instance <in28> +)
    (<larger-than1> ^instance <in29> +)
    (<larger-than1> ^instance <in30> +)
    (<larger-than1> ^instance <in31> +)
    (<larger-than1> ^instance <in32> +)
    (<larger-than1> ^instance <in33> +)
    (<larger-than1> ^instance <in34> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o4> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o3> +)
    (<in12> ^2 <o4> +)
    (<in13> ^1 <o1> +)
    (<in13> ^2 <o5> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o5> +)
    (<in15> ^1 <o3> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o6> +)
    (<in19> ^1 <o1> +)
    (<in19> ^2 <o7> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o7> +)
    (<in21> ^1 <o3> +)
    (<in21> ^2 <o7> +)
    (<in22> ^1 <o1> +)
    (<in22> ^2 <o8> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o8> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o8> +)
    (<in25> ^1 <o8> +)
    (<in25> ^2 <o7> +)
    (<in26> ^1 <o8> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o8> +)
    (<in27> ^2 <o5> +)
    (<in28> ^1 <o8> +)
    (<in28> ^2 <o4> +)
    (<in29> ^1 <o7> +)
    (<in29> ^2 <o6> +)
    (<in30> ^1 <o7> +)
    (<in30> ^2 <o5> +)
    (<in31> ^1 <o7> +)
    (<in31> ^2 <o4> +)
    (<in32> ^1 <o6> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o6> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*second-mac
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type second-mac)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^shape missionary1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^shape missionary1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^shape missionary1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape cannibal1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^shape cannibal1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^shape cannibal1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o9> +)
    (<in4> ^1 <o7> +)
    (<in4> ^2 <o1> +)
    (<in5> ^1 <o8> +)
    (<in5> ^2 <o1> +)
    (<in6> ^1 <o9> +)
    (<in6> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o3> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o9> +)
    (<in10> ^2 <o6> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o7> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o8> +)
    (<in13> ^1 <o1> +)
    (<in13> ^2 <o9> +)
}

sp {dialog-event*apply*game-state-change-respond*init-8puzzle5
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-8puzzle5)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color orange1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color purple1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^color gray1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^color brown1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color orange1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color yellow1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color green1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color purple1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color gray1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color brown1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o3> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o2> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o3> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o5> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o4> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o4> +)
    (<in31> ^2 <o8> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o1> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o2> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o5> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o5> +)
    (<in36> ^2 <o6> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o7> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o8> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o9> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o6> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o6> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o7> +)
    (<in45> ^2 <o4> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o7> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o8> +)
    (<in51> ^2 <o6> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o9> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o8> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o5> +)
    (<in55> ^1 <o9> +)
    (<in55> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<in56> ^1 <o1> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o2> +)
    (<in57> ^2 <o4> +)
    (<in58> ^1 <o2> +)
    (<in58> ^2 <o6> +)
    (<in59> ^1 <o3> +)
    (<in59> ^2 <o5> +)
    (<in60> ^1 <o4> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o4> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o5> +)
    (<in62> ^2 <o1> +)
    (<in63> ^1 <o5> +)
    (<in63> ^2 <o3> +)
    (<in64> ^1 <o5> +)
    (<in64> ^2 <o7> +)
    (<in65> ^1 <o5> +)
    (<in65> ^2 <o9> +)
    (<in66> ^1 <o6> +)
    (<in66> ^2 <o2> +)
    (<in67> ^1 <o6> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o7> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o8> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o8> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o9> +)
    (<in71> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*final-frog4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-frog4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <left-of1> +)
    (<preds> ^predicate <right-of1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color red1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color blue1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^color blue1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^color blue1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color blue1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color blue1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color red1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color red1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color red1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o6> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o7> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o8> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o9> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o1> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o2> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o3> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o4> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o6> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o7> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o8> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o9> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o4> +)
    (<in15> ^2 <o17> +)
    (<left-of1> ^item-type predicate +)
    (<left-of1> ^handle left-of1 +)
    (<left-of1> ^instance <in16> +)
    (<left-of1> ^instance <in17> +)
    (<left-of1> ^instance <in18> +)
    (<left-of1> ^instance <in19> +)
    (<left-of1> ^instance <in20> +)
    (<left-of1> ^instance <in21> +)
    (<left-of1> ^instance <in22> +)
    (<left-of1> ^instance <in23> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o3> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o4> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o5> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o6> +)
    (<in21> ^2 <o7> +)
    (<in22> ^1 <o7> +)
    (<in22> ^2 <o8> +)
    (<in23> ^1 <o8> +)
    (<in23> ^2 <o9> +)
    (<right-of1> ^item-type predicate +)
    (<right-of1> ^handle right-of1 +)
    (<right-of1> ^instance <in24> +)
    (<right-of1> ^instance <in25> +)
    (<right-of1> ^instance <in26> +)
    (<right-of1> ^instance <in27> +)
    (<right-of1> ^instance <in28> +)
    (<right-of1> ^instance <in29> +)
    (<right-of1> ^instance <in30> +)
    (<right-of1> ^instance <in31> +)
    (<in24> ^1 <o2> +)
    (<in24> ^2 <o1> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o2> +)
    (<in26> ^1 <o4> +)
    (<in26> ^2 <o3> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o6> +)
    (<in28> ^2 <o5> +)
    (<in29> ^1 <o7> +)
    (<in29> ^2 <o6> +)
    (<in30> ^1 <o8> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o9> +)
    (<in31> ^2 <o8> +)
}

sp {dialog-event*apply*game-state-change-respond*final-mahjong
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-mahjong)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category block +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category block +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^color yellow1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^name garbage +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^color red1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^color yellow1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color green1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color green1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o1> +)
    (<in0> ^2 <o4> +)
    (<in1> ^1 <o2> +)
    (<in1> ^2 <o4> +)
    (<in2> ^1 <o3> +)
    (<in2> ^2 <o4> +)
    (<in3> ^1 <o5> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o6> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o7> +)
    (<in5> ^2 <o4> +)
    (<in6> ^1 <o8> +)
    (<in6> ^2 <o4> +)
    (<in7> ^1 <o9> +)
    (<in7> ^2 <o4> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o4> +)
    (<in8> ^2 <o1> +)
    (<in9> ^1 <o4> +)
    (<in9> ^2 <o2> +)
    (<in10> ^1 <o4> +)
    (<in10> ^2 <o3> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o5> +)
    (<in12> ^1 <o4> +)
    (<in12> ^2 <o6> +)
    (<in13> ^1 <o4> +)
    (<in13> ^2 <o7> +)
    (<in14> ^1 <o4> +)
    (<in14> ^2 <o8> +)
    (<in15> ^1 <o4> +)
    (<in15> ^2 <o9> +)
}

sp {dialog-event*apply*game-state-change-respond*second-breakthrough
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type second-breakthrough)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<objs> ^object <o20> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <above1> +)
    (<preds> ^predicate <under1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color blue1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color blue1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<pr12> ^color red1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<pr13> ^color red1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<pr14> ^color red1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<pr15> ^color red1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color red1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-17 +)
    (<o18> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category block +)
    (<pr17> ^color red1 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-18 +)
    (<o19> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category block +)
    (<pr18> ^color red1 +)
    (<o20> ^item-type object +)
    (<o20> ^handle object-19 +)
    (<o20> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category block +)
    (<pr19> ^color red1 +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-20 +)
    (<o21> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color blue1 +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-21 +)
    (<o22> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color blue1 +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-22 +)
    (<o23> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color blue1 +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-23 +)
    (<o24> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color blue1 +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-24 +)
    (<o25> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category location +)
    (<pr24> ^name garbage +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o8> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o20> +)
    (<in3> ^2 <o10> +)
    (<in4> ^1 <o21> +)
    (<in4> ^2 <o13> +)
    (<in5> ^1 <o22> +)
    (<in5> ^2 <o14> +)
    (<in6> ^1 <o23> +)
    (<in6> ^2 <o15> +)
    (<in7> ^1 <o24> +)
    (<in7> ^2 <o16> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o8> +)
    (<in8> ^2 <o17> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o18> +)
    (<in10> ^1 <o3> +)
    (<in10> ^2 <o19> +)
    (<in11> ^1 <o10> +)
    (<in11> ^2 <o20> +)
    (<in12> ^1 <o13> +)
    (<in12> ^2 <o21> +)
    (<in13> ^1 <o14> +)
    (<in13> ^2 <o22> +)
    (<in14> ^1 <o15> +)
    (<in14> ^2 <o23> +)
    (<in15> ^1 <o16> +)
    (<in15> ^2 <o24> +)
    (<above1> ^item-type predicate +)
    (<above1> ^handle above1 +)
    (<above1> ^instance <in16> +)
    (<above1> ^instance <in17> +)
    (<above1> ^instance <in18> +)
    (<above1> ^instance <in19> +)
    (<above1> ^instance <in20> +)
    (<above1> ^instance <in21> +)
    (<above1> ^instance <in22> +)
    (<above1> ^instance <in23> +)
    (<above1> ^instance <in24> +)
    (<above1> ^instance <in25> +)
    (<above1> ^instance <in26> +)
    (<above1> ^instance <in27> +)
    (<above1> ^instance <in28> +)
    (<above1> ^instance <in29> +)
    (<above1> ^instance <in30> +)
    (<above1> ^instance <in31> +)
    (<above1> ^instance <in32> +)
    (<above1> ^instance <in33> +)
    (<above1> ^instance <in34> +)
    (<above1> ^instance <in35> +)
    (<above1> ^instance <in36> +)
    (<above1> ^instance <in37> +)
    (<above1> ^instance <in38> +)
    (<above1> ^instance <in39> +)
    (<above1> ^instance <in40> +)
    (<above1> ^instance <in41> +)
    (<above1> ^instance <in42> +)
    (<above1> ^instance <in43> +)
    (<above1> ^instance <in44> +)
    (<above1> ^instance <in45> +)
    (<in16> ^1 <o13> +)
    (<in16> ^2 <o7> +)
    (<in17> ^1 <o14> +)
    (<in17> ^2 <o7> +)
    (<in18> ^1 <o13> +)
    (<in18> ^2 <o8> +)
    (<in19> ^1 <o14> +)
    (<in19> ^2 <o8> +)
    (<in20> ^1 <o15> +)
    (<in20> ^2 <o8> +)
    (<in21> ^1 <o14> +)
    (<in21> ^2 <o9> +)
    (<in22> ^1 <o15> +)
    (<in22> ^2 <o9> +)
    (<in23> ^1 <o16> +)
    (<in23> ^2 <o9> +)
    (<in24> ^1 <o15> +)
    (<in24> ^2 <o12> +)
    (<in25> ^1 <o16> +)
    (<in25> ^2 <o12> +)
    (<in26> ^1 <o7> +)
    (<in26> ^2 <o4> +)
    (<in27> ^1 <o8> +)
    (<in27> ^2 <o4> +)
    (<in28> ^1 <o7> +)
    (<in28> ^2 <o5> +)
    (<in29> ^1 <o8> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o9> +)
    (<in30> ^2 <o5> +)
    (<in31> ^1 <o8> +)
    (<in31> ^2 <o6> +)
    (<in32> ^1 <o9> +)
    (<in32> ^2 <o6> +)
    (<in33> ^1 <o12> +)
    (<in33> ^2 <o6> +)
    (<in34> ^1 <o9> +)
    (<in34> ^2 <o11> +)
    (<in35> ^1 <o12> +)
    (<in35> ^2 <o11> +)
    (<in36> ^1 <o4> +)
    (<in36> ^2 <o1> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o1> +)
    (<in38> ^1 <o4> +)
    (<in38> ^2 <o2> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o2> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o5> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o3> +)
    (<in43> ^1 <o11> +)
    (<in43> ^2 <o3> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o10> +)
    (<in45> ^1 <o11> +)
    (<in45> ^2 <o10> +)
    (<under1> ^item-type predicate +)
    (<under1> ^handle under1 +)
    (<under1> ^instance <in46> +)
    (<under1> ^instance <in47> +)
    (<under1> ^instance <in48> +)
    (<under1> ^instance <in49> +)
    (<under1> ^instance <in50> +)
    (<under1> ^instance <in51> +)
    (<under1> ^instance <in52> +)
    (<under1> ^instance <in53> +)
    (<under1> ^instance <in54> +)
    (<under1> ^instance <in55> +)
    (<under1> ^instance <in56> +)
    (<under1> ^instance <in57> +)
    (<under1> ^instance <in58> +)
    (<under1> ^instance <in59> +)
    (<under1> ^instance <in60> +)
    (<under1> ^instance <in61> +)
    (<under1> ^instance <in62> +)
    (<under1> ^instance <in63> +)
    (<under1> ^instance <in64> +)
    (<under1> ^instance <in65> +)
    (<under1> ^instance <in66> +)
    (<under1> ^instance <in67> +)
    (<under1> ^instance <in68> +)
    (<under1> ^instance <in69> +)
    (<under1> ^instance <in70> +)
    (<under1> ^instance <in71> +)
    (<under1> ^instance <in72> +)
    (<under1> ^instance <in73> +)
    (<under1> ^instance <in74> +)
    (<under1> ^instance <in75> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o13> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o14> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o13> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o14> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o15> +)
    (<in51> ^1 <o9> +)
    (<in51> ^2 <o14> +)
    (<in52> ^1 <o9> +)
    (<in52> ^2 <o15> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o16> +)
    (<in54> ^1 <o12> +)
    (<in54> ^2 <o15> +)
    (<in55> ^1 <o12> +)
    (<in55> ^2 <o16> +)
    (<in56> ^1 <o4> +)
    (<in56> ^2 <o7> +)
    (<in57> ^1 <o4> +)
    (<in57> ^2 <o8> +)
    (<in58> ^1 <o5> +)
    (<in58> ^2 <o7> +)
    (<in59> ^1 <o5> +)
    (<in59> ^2 <o8> +)
    (<in60> ^1 <o5> +)
    (<in60> ^2 <o9> +)
    (<in61> ^1 <o6> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o6> +)
    (<in62> ^2 <o9> +)
    (<in63> ^1 <o6> +)
    (<in63> ^2 <o12> +)
    (<in64> ^1 <o11> +)
    (<in64> ^2 <o9> +)
    (<in65> ^1 <o11> +)
    (<in65> ^2 <o12> +)
    (<in66> ^1 <o1> +)
    (<in66> ^2 <o4> +)
    (<in67> ^1 <o1> +)
    (<in67> ^2 <o5> +)
    (<in68> ^1 <o2> +)
    (<in68> ^2 <o4> +)
    (<in69> ^1 <o2> +)
    (<in69> ^2 <o5> +)
    (<in70> ^1 <o2> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o3> +)
    (<in71> ^2 <o5> +)
    (<in72> ^1 <o3> +)
    (<in72> ^2 <o6> +)
    (<in73> ^1 <o3> +)
    (<in73> ^2 <o11> +)
    (<in74> ^1 <o10> +)
    (<in74> ^2 <o6> +)
    (<in75> ^1 <o10> +)
    (<in75> ^2 <o11> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<diagonal-with1> ^instance <in88> +)
    (<diagonal-with1> ^instance <in89> +)
    (<diagonal-with1> ^instance <in90> +)
    (<diagonal-with1> ^instance <in91> +)
    (<diagonal-with1> ^instance <in92> +)
    (<diagonal-with1> ^instance <in93> +)
    (<diagonal-with1> ^instance <in94> +)
    (<diagonal-with1> ^instance <in95> +)
    (<diagonal-with1> ^instance <in96> +)
    (<diagonal-with1> ^instance <in97> +)
    (<diagonal-with1> ^instance <in98> +)
    (<diagonal-with1> ^instance <in99> +)
    (<diagonal-with1> ^instance <in100> +)
    (<diagonal-with1> ^instance <in101> +)
    (<diagonal-with1> ^instance <in102> +)
    (<diagonal-with1> ^instance <in103> +)
    (<diagonal-with1> ^instance <in104> +)
    (<diagonal-with1> ^instance <in105> +)
    (<diagonal-with1> ^instance <in106> +)
    (<diagonal-with1> ^instance <in107> +)
    (<diagonal-with1> ^instance <in108> +)
    (<diagonal-with1> ^instance <in109> +)
    (<diagonal-with1> ^instance <in110> +)
    (<diagonal-with1> ^instance <in111> +)
    (<in76> ^1 <o1> +)
    (<in76> ^2 <o5> +)
    (<in77> ^1 <o2> +)
    (<in77> ^2 <o4> +)
    (<in78> ^1 <o2> +)
    (<in78> ^2 <o6> +)
    (<in79> ^1 <o3> +)
    (<in79> ^2 <o5> +)
    (<in80> ^1 <o4> +)
    (<in80> ^2 <o2> +)
    (<in81> ^1 <o4> +)
    (<in81> ^2 <o8> +)
    (<in82> ^1 <o5> +)
    (<in82> ^2 <o1> +)
    (<in83> ^1 <o5> +)
    (<in83> ^2 <o3> +)
    (<in84> ^1 <o5> +)
    (<in84> ^2 <o7> +)
    (<in85> ^1 <o5> +)
    (<in85> ^2 <o9> +)
    (<in86> ^1 <o6> +)
    (<in86> ^2 <o2> +)
    (<in87> ^1 <o6> +)
    (<in87> ^2 <o8> +)
    (<in88> ^1 <o7> +)
    (<in88> ^2 <o5> +)
    (<in89> ^1 <o8> +)
    (<in89> ^2 <o4> +)
    (<in90> ^1 <o8> +)
    (<in90> ^2 <o6> +)
    (<in91> ^1 <o9> +)
    (<in91> ^2 <o5> +)
    (<in92> ^1 <o3> +)
    (<in92> ^2 <o11> +)
    (<in93> ^1 <o11> +)
    (<in93> ^2 <o3> +)
    (<in94> ^1 <o6> +)
    (<in94> ^2 <o10> +)
    (<in95> ^1 <o10> +)
    (<in95> ^2 <o6> +)
    (<in96> ^1 <o9> +)
    (<in96> ^2 <o11> +)
    (<in97> ^1 <o11> +)
    (<in97> ^2 <o9> +)
    (<in98> ^1 <o12> +)
    (<in98> ^2 <o6> +)
    (<in99> ^1 <o6> +)
    (<in99> ^2 <o12> +)
    (<in100> ^1 <o16> +)
    (<in100> ^2 <o9> +)
    (<in101> ^1 <o9> +)
    (<in101> ^2 <o16> +)
    (<in102> ^1 <o12> +)
    (<in102> ^2 <o15> +)
    (<in103> ^1 <o15> +)
    (<in103> ^2 <o12> +)
    (<in104> ^1 <o14> +)
    (<in104> ^2 <o9> +)
    (<in105> ^1 <o9> +)
    (<in105> ^2 <o14> +)
    (<in106> ^1 <o8> +)
    (<in106> ^2 <o15> +)
    (<in107> ^1 <o15> +)
    (<in107> ^2 <o8> +)
    (<in108> ^1 <o14> +)
    (<in108> ^2 <o7> +)
    (<in109> ^1 <o7> +)
    (<in109> ^2 <o14> +)
    (<in110> ^1 <o13> +)
    (<in110> ^2 <o8> +)
    (<in111> ^1 <o8> +)
    (<in111> ^2 <o13> +)
}

sp {dialog-event*apply*game-state-change-respond*final-frog3
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-frog3)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <left-of1> +)
    (<preds> ^predicate <right-of1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color red1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color blue1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color blue1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color blue1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color blue1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color blue1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color red1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<in0> ^1 <o8> +)
    (<in0> ^2 <o5> +)
    (<in1> ^1 <o9> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o10> +)
    (<in2> ^2 <o7> +)
    (<in3> ^1 <o11> +)
    (<in3> ^2 <o1> +)
    (<in4> ^1 <o12> +)
    (<in4> ^2 <o2> +)
    (<in5> ^1 <o13> +)
    (<in5> ^2 <o3> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<in6> ^1 <o5> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o6> +)
    (<in7> ^2 <o9> +)
    (<in8> ^1 <o7> +)
    (<in8> ^2 <o19> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o3> +)
    (<in11> ^2 <o13> +)
    (<left-of1> ^item-type predicate +)
    (<left-of1> ^handle left-of1 +)
    (<left-of1> ^instance <in12> +)
    (<left-of1> ^instance <in13> +)
    (<left-of1> ^instance <in14> +)
    (<left-of1> ^instance <in15> +)
    (<left-of1> ^instance <in16> +)
    (<left-of1> ^instance <in17> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o2> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o3> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o4> +)
    (<in15> ^1 <o4> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o5> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o6> +)
    (<in17> ^2 <o7> +)
    (<right-of1> ^item-type predicate +)
    (<right-of1> ^handle right-of1 +)
    (<right-of1> ^instance <in18> +)
    (<right-of1> ^instance <in19> +)
    (<right-of1> ^instance <in20> +)
    (<right-of1> ^instance <in21> +)
    (<right-of1> ^instance <in22> +)
    (<right-of1> ^instance <in23> +)
    (<in18> ^1 <o2> +)
    (<in18> ^2 <o1> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o2> +)
    (<in20> ^1 <o4> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o5> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o6> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o7> +)
    (<in23> ^2 <o6> +)
}

sp {dialog-event*apply*game-state-change-respond*final-connect-4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-connect-4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o21> +)
    (<objs> ^object <o22> +)
    (<objs> ^object <o23> +)
    (<objs> ^object <o24> +)
    (<objs> ^object <o25> +)
    (<objs> ^object <o26> +)
    (<objs> ^object <o27> +)
    (<objs> ^object <o28> +)
    (<objs> ^object <o29> +)
    (<objs> ^object <o30> +)
    (<objs> ^object <o31> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <above1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o21> ^item-type object +)
    (<o21> ^handle object-9 +)
    (<o21> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<o22> ^item-type object +)
    (<o22> ^handle object-10 +)
    (<o22> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<o23> ^item-type object +)
    (<o23> ^handle object-11 +)
    (<o23> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<o24> ^item-type object +)
    (<o24> ^handle object-12 +)
    (<o24> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category location +)
    (<o25> ^item-type object +)
    (<o25> ^handle object-13 +)
    (<o25> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category location +)
    (<o26> ^item-type object +)
    (<o26> ^handle object-14 +)
    (<o26> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category location +)
    (<o27> ^item-type object +)
    (<o27> ^handle object-15 +)
    (<o27> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category location +)
    (<o28> ^item-type object +)
    (<o28> ^handle object-16 +)
    (<o28> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category location +)
    (<o29> ^item-type object +)
    (<o29> ^handle object-17 +)
    (<o29> ^predicates <pr17> +)
    (<pr17> ^visible true +)
    (<pr17> ^category location +)
    (<o30> ^item-type object +)
    (<o30> ^handle object-18 +)
    (<o30> ^predicates <pr18> +)
    (<pr18> ^visible true +)
    (<pr18> ^category location +)
    (<o31> ^item-type object +)
    (<o31> ^handle object-19 +)
    (<o31> ^predicates <pr19> +)
    (<pr19> ^visible true +)
    (<pr19> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-20 +)
    (<o10> ^predicates <pr20> +)
    (<pr20> ^visible true +)
    (<pr20> ^category block +)
    (<pr20> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-21 +)
    (<o11> ^predicates <pr21> +)
    (<pr21> ^visible true +)
    (<pr21> ^category block +)
    (<pr21> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-22 +)
    (<o12> ^predicates <pr22> +)
    (<pr22> ^visible true +)
    (<pr22> ^category block +)
    (<pr22> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-23 +)
    (<o13> ^predicates <pr23> +)
    (<pr23> ^visible true +)
    (<pr23> ^category block +)
    (<pr23> ^color red1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-24 +)
    (<o14> ^predicates <pr24> +)
    (<pr24> ^visible true +)
    (<pr24> ^category block +)
    (<pr24> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-25 +)
    (<o15> ^predicates <pr25> +)
    (<pr25> ^visible true +)
    (<pr25> ^category block +)
    (<pr25> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o27> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o28> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o29> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o30> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o15> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o27> +)
    (<in5> ^2 <o10> +)
    (<in6> ^1 <o28> +)
    (<in6> ^2 <o11> +)
    (<in7> ^1 <o29> +)
    (<in7> ^2 <o12> +)
    (<in8> ^1 <o30> +)
    (<in8> ^2 <o13> +)
    (<in9> ^1 <o15> +)
    (<in9> ^2 <o14> +)
    (<above1> ^item-type predicate +)
    (<above1> ^handle above1 +)
    (<above1> ^instance <in10> +)
    (<above1> ^instance <in11> +)
    (<above1> ^instance <in12> +)
    (<above1> ^instance <in13> +)
    (<above1> ^instance <in14> +)
    (<above1> ^instance <in15> +)
    (<above1> ^instance <in16> +)
    (<above1> ^instance <in17> +)
    (<above1> ^instance <in18> +)
    (<above1> ^instance <in19> +)
    (<above1> ^instance <in20> +)
    (<above1> ^instance <in21> +)
    (<above1> ^instance <in22> +)
    (<above1> ^instance <in23> +)
    (<above1> ^instance <in24> +)
    (<in10> ^1 <o7> +)
    (<in10> ^2 <o27> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o7> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o4> +)
    (<in13> ^1 <o8> +)
    (<in13> ^2 <o28> +)
    (<in14> ^1 <o5> +)
    (<in14> ^2 <o8> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o6> +)
    (<in17> ^2 <o9> +)
    (<in18> ^1 <o9> +)
    (<in18> ^2 <o29> +)
    (<in19> ^1 <o21> +)
    (<in19> ^2 <o23> +)
    (<in20> ^1 <o23> +)
    (<in20> ^2 <o25> +)
    (<in21> ^1 <o25> +)
    (<in21> ^2 <o30> +)
    (<in22> ^1 <o22> +)
    (<in22> ^2 <o24> +)
    (<in23> ^1 <o24> +)
    (<in23> ^2 <o26> +)
    (<in24> ^1 <o26> +)
    (<in24> ^2 <o31> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in25> +)
    (<linear> ^instance <in26> +)
    (<linear> ^instance <in27> +)
    (<linear> ^instance <in28> +)
    (<linear> ^instance <in29> +)
    (<linear> ^instance <in30> +)
    (<linear> ^instance <in31> +)
    (<linear> ^instance <in32> +)
    (<linear> ^instance <in33> +)
    (<linear> ^instance <in34> +)
    (<linear> ^instance <in35> +)
    (<linear> ^instance <in36> +)
    (<linear> ^instance <in37> +)
    (<linear> ^instance <in38> +)
    (<linear> ^instance <in39> +)
    (<linear> ^instance <in40> +)
    (<linear> ^instance <in41> +)
    (<in25> ^1 <set25> +)
    (<set25> ^object <o1> +)
    (<set25> ^object <o2> +)
    (<set25> ^object <o3> +)
    (<set25> ^object <o21> +)
    (<in26> ^1 <set26> +)
    (<set26> ^object <o1> +)
    (<set26> ^object <o5> +)
    (<set26> ^object <o9> +)
    (<set26> ^object <o30> +)
    (<in27> ^1 <set27> +)
    (<set27> ^object <o1> +)
    (<set27> ^object <o4> +)
    (<set27> ^object <o7> +)
    (<set27> ^object <o27> +)
    (<in28> ^1 <set28> +)
    (<set28> ^object <o4> +)
    (<set28> ^object <o5> +)
    (<set28> ^object <o6> +)
    (<set28> ^object <o23> +)
    (<in29> ^1 <set29> +)
    (<set29> ^object <o7> +)
    (<set29> ^object <o8> +)
    (<set29> ^object <o9> +)
    (<set29> ^object <o25> +)
    (<in30> ^1 <set30> +)
    (<set30> ^object <o27> +)
    (<set30> ^object <o28> +)
    (<set30> ^object <o29> +)
    (<set30> ^object <o30> +)
    (<in31> ^1 <set31> +)
    (<set31> ^object <o2> +)
    (<set31> ^object <o5> +)
    (<set31> ^object <o8> +)
    (<set31> ^object <o28> +)
    (<in32> ^1 <set32> +)
    (<set32> ^object <o3> +)
    (<set32> ^object <o6> +)
    (<set32> ^object <o9> +)
    (<set32> ^object <o29> +)
    (<in33> ^1 <set33> +)
    (<set33> ^object <o21> +)
    (<set33> ^object <o23> +)
    (<set33> ^object <o25> +)
    (<set33> ^object <o30> +)
    (<in34> ^1 <set34> +)
    (<set34> ^object <o21> +)
    (<set34> ^object <o6> +)
    (<set34> ^object <o8> +)
    (<set34> ^object <o27> +)
    (<in35> ^1 <set35> +)
    (<set35> ^object <o2> +)
    (<set35> ^object <o3> +)
    (<set35> ^object <o21> +)
    (<set35> ^object <o22> +)
    (<in36> ^1 <set36> +)
    (<set36> ^object <o5> +)
    (<set36> ^object <o6> +)
    (<set36> ^object <o23> +)
    (<set36> ^object <o24> +)
    (<in37> ^1 <set37> +)
    (<set37> ^object <o8> +)
    (<set37> ^object <o9> +)
    (<set37> ^object <o25> +)
    (<set37> ^object <o26> +)
    (<in38> ^1 <set38> +)
    (<set38> ^object <o28> +)
    (<set38> ^object <o29> +)
    (<set38> ^object <o30> +)
    (<set38> ^object <o31> +)
    (<in39> ^1 <set39> +)
    (<set39> ^object <o22> +)
    (<set39> ^object <o24> +)
    (<set39> ^object <o26> +)
    (<set39> ^object <o31> +)
    (<in40> ^1 <set40> +)
    (<set40> ^object <o2> +)
    (<set40> ^object <o6> +)
    (<set40> ^object <o25> +)
    (<set40> ^object <o31> +)
    (<in41> ^1 <set41> +)
    (<set41> ^object <o22> +)
    (<set41> ^object <o23> +)
    (<set41> ^object <o9> +)
    (<set41> ^object <o28> +)
}

sp {dialog-event*apply*game-state-change-respond*init-fox
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-fox)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o3> +)
    (<in3> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o1> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o5> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o6> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o3> +)
}

sp {dialog-event*apply*game-state-change-respond*init-8puzzle6alt
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-8puzzle6alt)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color orange1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color purple1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^color gray1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^color brown1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color orange1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color yellow1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color green1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color purple1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color gray1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color brown1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o5> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o3> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o5> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o3> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o6> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o4> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o4> +)
    (<in31> ^2 <o8> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o1> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o2> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o5> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o5> +)
    (<in36> ^2 <o6> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o7> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o8> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o9> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o6> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o6> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o7> +)
    (<in45> ^2 <o4> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o7> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o8> +)
    (<in51> ^2 <o6> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o9> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o8> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o5> +)
    (<in55> ^1 <o9> +)
    (<in55> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<in56> ^1 <o1> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o2> +)
    (<in57> ^2 <o4> +)
    (<in58> ^1 <o2> +)
    (<in58> ^2 <o6> +)
    (<in59> ^1 <o3> +)
    (<in59> ^2 <o5> +)
    (<in60> ^1 <o4> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o4> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o5> +)
    (<in62> ^2 <o1> +)
    (<in63> ^1 <o5> +)
    (<in63> ^2 <o3> +)
    (<in64> ^1 <o5> +)
    (<in64> ^2 <o7> +)
    (<in65> ^1 <o5> +)
    (<in65> ^2 <o9> +)
    (<in66> ^1 <o6> +)
    (<in66> ^2 <o2> +)
    (<in67> ^1 <o6> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o7> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o8> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o8> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o9> +)
    (<in71> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*init-8puzzle6
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-8puzzle6)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color orange1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color purple1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^color gray1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^color brown1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color orange1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color yellow1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color green1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color purple1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color gray1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color brown1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o2> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o6> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o5> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o4> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o4> +)
    (<in31> ^2 <o8> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o1> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o2> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o5> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o5> +)
    (<in36> ^2 <o6> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o7> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o8> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o9> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o6> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o6> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o7> +)
    (<in45> ^2 <o4> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o7> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o8> +)
    (<in51> ^2 <o6> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o9> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o8> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o5> +)
    (<in55> ^1 <o9> +)
    (<in55> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<in56> ^1 <o1> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o2> +)
    (<in57> ^2 <o4> +)
    (<in58> ^1 <o2> +)
    (<in58> ^2 <o6> +)
    (<in59> ^1 <o3> +)
    (<in59> ^2 <o5> +)
    (<in60> ^1 <o4> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o4> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o5> +)
    (<in62> ^2 <o1> +)
    (<in63> ^1 <o5> +)
    (<in63> ^2 <o3> +)
    (<in64> ^1 <o5> +)
    (<in64> ^2 <o7> +)
    (<in65> ^1 <o5> +)
    (<in65> ^2 <o9> +)
    (<in66> ^1 <o6> +)
    (<in66> ^2 <o2> +)
    (<in67> ^1 <o6> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o7> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o8> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o8> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o9> +)
    (<in71> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*init-i8puzzle
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-i8puzzle)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^value 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^value 2 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^value 3 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^value 4 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^value 5 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^value 6 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^value 7 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^value 8 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^value 1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^value 2 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^value 3 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^value 4 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^value 5 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^value 6 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^value 7 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^value 8 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o3> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o5> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o2> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o3> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o5> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o6> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o4> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o4> +)
    (<in31> ^2 <o8> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o1> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o2> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o5> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o5> +)
    (<in36> ^2 <o6> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o7> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o8> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o9> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o6> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o6> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o7> +)
    (<in45> ^2 <o4> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o7> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o8> +)
    (<in51> ^2 <o6> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o9> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o8> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o5> +)
    (<in55> ^1 <o9> +)
    (<in55> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<in56> ^1 <o1> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o2> +)
    (<in57> ^2 <o4> +)
    (<in58> ^1 <o2> +)
    (<in58> ^2 <o6> +)
    (<in59> ^1 <o3> +)
    (<in59> ^2 <o5> +)
    (<in60> ^1 <o4> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o4> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o5> +)
    (<in62> ^2 <o1> +)
    (<in63> ^1 <o5> +)
    (<in63> ^2 <o3> +)
    (<in64> ^1 <o5> +)
    (<in64> ^2 <o7> +)
    (<in65> ^1 <o5> +)
    (<in65> ^2 <o9> +)
    (<in66> ^1 <o6> +)
    (<in66> ^2 <o2> +)
    (<in67> ^1 <o6> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o7> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o8> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o8> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o9> +)
    (<in71> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-3mens
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-3mens)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<preds> ^predicate <linear> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color red1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color red1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o13> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o14> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o15> +)
    (<in2> ^2 <o3> +)
    (<in3> ^1 <o10> +)
    (<in3> ^2 <o11> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o12> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o13> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o14> +)
    (<in7> ^1 <o3> +)
    (<in7> ^2 <o15> +)
    (<in8> ^1 <o11> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o12> +)
    (<in9> ^2 <o11> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o2> +)
    (<in11> ^1 <o1> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o1> +)
    (<in14> ^1 <o2> +)
    (<in14> ^2 <o3> +)
    (<in15> ^1 <o2> +)
    (<in15> ^2 <o4> +)
    (<in16> ^1 <o2> +)
    (<in16> ^2 <o5> +)
    (<in17> ^1 <o2> +)
    (<in17> ^2 <o6> +)
    (<in18> ^1 <o3> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o3> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o3> +)
    (<in20> ^2 <o6> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o1> +)
    (<in22> ^1 <o4> +)
    (<in22> ^2 <o2> +)
    (<in23> ^1 <o4> +)
    (<in23> ^2 <o5> +)
    (<in24> ^1 <o4> +)
    (<in24> ^2 <o7> +)
    (<in25> ^1 <o4> +)
    (<in25> ^2 <o8> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o1> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o2> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o3> +)
    (<in29> ^1 <o5> +)
    (<in29> ^2 <o4> +)
    (<in30> ^1 <o5> +)
    (<in30> ^2 <o6> +)
    (<in31> ^1 <o5> +)
    (<in31> ^2 <o7> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o8> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o9> +)
    (<in34> ^1 <o6> +)
    (<in34> ^2 <o2> +)
    (<in35> ^1 <o6> +)
    (<in35> ^2 <o3> +)
    (<in36> ^1 <o6> +)
    (<in36> ^2 <o5> +)
    (<in37> ^1 <o6> +)
    (<in37> ^2 <o8> +)
    (<in38> ^1 <o6> +)
    (<in38> ^2 <o9> +)
    (<in39> ^1 <o7> +)
    (<in39> ^2 <o4> +)
    (<in40> ^1 <o7> +)
    (<in40> ^2 <o5> +)
    (<in41> ^1 <o7> +)
    (<in41> ^2 <o8> +)
    (<in42> ^1 <o8> +)
    (<in42> ^2 <o7> +)
    (<in43> ^1 <o8> +)
    (<in43> ^2 <o4> +)
    (<in44> ^1 <o8> +)
    (<in44> ^2 <o5> +)
    (<in45> ^1 <o8> +)
    (<in45> ^2 <o6> +)
    (<in46> ^1 <o8> +)
    (<in46> ^2 <o9> +)
    (<in47> ^1 <o9> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o9> +)
    (<in48> ^2 <o5> +)
    (<in49> ^1 <o9> +)
    (<in49> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in50> +)
    (<diagonal-with1> ^instance <in51> +)
    (<diagonal-with1> ^instance <in52> +)
    (<diagonal-with1> ^instance <in53> +)
    (<diagonal-with1> ^instance <in54> +)
    (<diagonal-with1> ^instance <in55> +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<in50> ^1 <o1> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o2> +)
    (<in51> ^2 <o4> +)
    (<in52> ^1 <o2> +)
    (<in52> ^2 <o6> +)
    (<in53> ^1 <o3> +)
    (<in53> ^2 <o5> +)
    (<in54> ^1 <o4> +)
    (<in54> ^2 <o2> +)
    (<in55> ^1 <o4> +)
    (<in55> ^2 <o8> +)
    (<in56> ^1 <o5> +)
    (<in56> ^2 <o1> +)
    (<in57> ^1 <o5> +)
    (<in57> ^2 <o3> +)
    (<in58> ^1 <o5> +)
    (<in58> ^2 <o7> +)
    (<in59> ^1 <o5> +)
    (<in59> ^2 <o9> +)
    (<in60> ^1 <o6> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o6> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o7> +)
    (<in62> ^2 <o5> +)
    (<in63> ^1 <o8> +)
    (<in63> ^2 <o4> +)
    (<in64> ^1 <o8> +)
    (<in64> ^2 <o6> +)
    (<in65> ^1 <o9> +)
    (<in65> ^2 <o5> +)
    (<linear> ^item-type predicate +)
    (<linear> ^handle linear +)
    (<linear> ^instance <in66> +)
    (<linear> ^instance <in67> +)
    (<linear> ^instance <in68> +)
    (<linear> ^instance <in69> +)
    (<linear> ^instance <in70> +)
    (<linear> ^instance <in71> +)
    (<linear> ^instance <in72> +)
    (<linear> ^instance <in73> +)
    (<in66> ^1 <set66> +)
    (<set66> ^object <o1> +)
    (<set66> ^object <o2> +)
    (<set66> ^object <o3> +)
    (<in67> ^1 <set67> +)
    (<set67> ^object <o1> +)
    (<set67> ^object <o5> +)
    (<set67> ^object <o9> +)
    (<in68> ^1 <set68> +)
    (<set68> ^object <o1> +)
    (<set68> ^object <o4> +)
    (<set68> ^object <o7> +)
    (<in69> ^1 <set69> +)
    (<set69> ^object <o4> +)
    (<set69> ^object <o5> +)
    (<set69> ^object <o6> +)
    (<in70> ^1 <set70> +)
    (<set70> ^object <o7> +)
    (<set70> ^object <o8> +)
    (<set70> ^object <o9> +)
    (<in71> ^1 <set71> +)
    (<set71> ^object <o2> +)
    (<set71> ^object <o5> +)
    (<set71> ^object <o8> +)
    (<in72> ^1 <set72> +)
    (<set72> ^object <o3> +)
    (<set72> ^object <o6> +)
    (<set72> ^object <o9> +)
    (<in73> ^1 <set73> +)
    (<set73> ^object <o3> +)
    (<set73> ^object <o5> +)
    (<set73> ^object <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-fox
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-fox)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o2> +)
    (<in3> ^1 <o3> +)
    (<in3> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<in4> ^1 <o1> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o2> +)
    (<in5> ^2 <o5> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o6> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o3> +)
}

sp {dialog-event*apply*game-state-change-respond*final-tower3
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-tower3)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size small1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size medium1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size large1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o5> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o3> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o5> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o6> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o3> +)
    (<in5> ^2 <o6> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in6> +)
    (<larger-than1> ^instance <in7> +)
    (<larger-than1> ^instance <in8> +)
    (<larger-than1> ^instance <in9> +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o4> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o4> +)
    (<in8> ^1 <o3> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o5> +)
    (<in11> ^1 <o3> +)
    (<in11> ^2 <o5> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o6> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o6> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o6> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o6> +)
    (<in16> ^2 <o4> +)
    (<in17> ^1 <o5> +)
    (<in17> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*init-blocksworld
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-blocksworld)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^color red1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^color orange1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o5> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o6> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o5> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o6> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o6> +)
}

sp {dialog-event*apply*game-state-change-respond*fail-tower3
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type fail-tower3)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <larger-than1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color green1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color green1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^color blue1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^size small1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^size medium1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^size large1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o4> +)
    (<in0> ^2 <o6> +)
    (<in1> ^1 <o5> +)
    (<in1> ^2 <o4> +)
    (<in2> ^1 <o6> +)
    (<in2> ^2 <o3> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o4> +)
    (<in4> ^2 <o5> +)
    (<in5> ^1 <o3> +)
    (<in5> ^2 <o6> +)
    (<larger-than1> ^item-type predicate +)
    (<larger-than1> ^handle larger-than1 +)
    (<larger-than1> ^instance <in6> +)
    (<larger-than1> ^instance <in7> +)
    (<larger-than1> ^instance <in8> +)
    (<larger-than1> ^instance <in9> +)
    (<larger-than1> ^instance <in10> +)
    (<larger-than1> ^instance <in11> +)
    (<larger-than1> ^instance <in12> +)
    (<larger-than1> ^instance <in13> +)
    (<larger-than1> ^instance <in14> +)
    (<larger-than1> ^instance <in15> +)
    (<larger-than1> ^instance <in16> +)
    (<larger-than1> ^instance <in17> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o4> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o4> +)
    (<in8> ^1 <o3> +)
    (<in8> ^2 <o4> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o5> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o5> +)
    (<in11> ^1 <o3> +)
    (<in11> ^2 <o5> +)
    (<in12> ^1 <o1> +)
    (<in12> ^2 <o6> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o6> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o6> +)
    (<in15> ^1 <o6> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o6> +)
    (<in16> ^2 <o4> +)
    (<in17> ^1 <o5> +)
    (<in17> ^2 <o4> +)
}

sp {dialog-event*apply*game-state-change-respond*final-blocksworld
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-blocksworld)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^color red1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^color orange1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o6> +)
    (<in0> ^2 <o4> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o5> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o1> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o4> +)
    (<in3> ^2 <o6> +)
    (<in4> ^1 <o5> +)
    (<in4> ^2 <o4> +)
    (<in5> ^1 <o1> +)
    (<in5> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*final-familycross
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type final-familycross)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^shape bank1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^shape bank1 +)
    (<pr1> ^name destination1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category block +)
    (<pr2> ^shape adult1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category block +)
    (<pr3> ^shape adult1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category block +)
    (<pr4> ^shape child1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category block +)
    (<pr5> ^shape child1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^shape boat1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<in0> ^1 <o3> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o4> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o5> +)
    (<in2> ^2 <o2> +)
    (<in3> ^1 <o6> +)
    (<in3> ^2 <o2> +)
    (<in4> ^1 <o7> +)
    (<in4> ^2 <o2> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in5> +)
    (<below1> ^instance <in6> +)
    (<below1> ^instance <in7> +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<in5> ^1 <o2> +)
    (<in5> ^2 <o3> +)
    (<in6> ^1 <o2> +)
    (<in6> ^2 <o4> +)
    (<in7> ^1 <o2> +)
    (<in7> ^2 <o5> +)
    (<in8> ^1 <o2> +)
    (<in8> ^2 <o6> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o7> +)
}

sp {dialog-event*apply*game-state-change-respond*init-sokoban2
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-sokoban2)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o17> +)
    (<objs> ^object <o18> +)
    (<objs> ^object <o19> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^x 1 +)
    (<pr0> ^y 1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^x 2 +)
    (<pr1> ^y 1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<pr2> ^x 3 +)
    (<pr2> ^y 1 +)
    (<pr2> ^color red1 +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^x 1 +)
    (<pr3> ^y 2 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^x 2 +)
    (<pr4> ^y 2 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^x 3 +)
    (<pr5> ^y 2 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^x 1 +)
    (<pr6> ^y 3 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^x 2 +)
    (<pr7> ^y 3 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^x 3 +)
    (<pr8> ^y 3 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category location +)
    (<pr9> ^x 1 +)
    (<pr9> ^y 4 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category location +)
    (<pr10> ^x 2 +)
    (<pr10> ^y 4 +)
    (<pr10> ^color green1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category location +)
    (<pr11> ^x 3 +)
    (<pr11> ^y 4 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-12 +)
    (<o17> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o18> ^item-type object +)
    (<o18> ^handle object-13 +)
    (<o18> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color red1 +)
    (<o19> ^item-type object +)
    (<o19> ^handle object-14 +)
    (<o19> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color green1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<in0> ^1 <o17> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o18> +)
    (<in1> ^2 <o2> +)
    (<in2> ^1 <o19> +)
    (<in2> ^2 <o8> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in3> +)
    (<below1> ^instance <in4> +)
    (<below1> ^instance <in5> +)
    (<in3> ^1 <o1> +)
    (<in3> ^2 <o17> +)
    (<in4> ^1 <o2> +)
    (<in4> ^2 <o18> +)
    (<in5> ^1 <o8> +)
    (<in5> ^2 <o19> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in6> +)
    (<near1> ^instance <in7> +)
    (<near1> ^instance <in8> +)
    (<near1> ^instance <in9> +)
    (<near1> ^instance <in10> +)
    (<near1> ^instance <in11> +)
    (<near1> ^instance <in12> +)
    (<near1> ^instance <in13> +)
    (<near1> ^instance <in14> +)
    (<near1> ^instance <in15> +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<near1> ^instance <in56> +)
    (<near1> ^instance <in57> +)
    (<near1> ^instance <in58> +)
    (<near1> ^instance <in59> +)
    (<near1> ^instance <in60> +)
    (<near1> ^instance <in61> +)
    (<near1> ^instance <in62> +)
    (<near1> ^instance <in63> +)
    (<in6> ^1 <o1> +)
    (<in6> ^2 <o2> +)
    (<in7> ^1 <o1> +)
    (<in7> ^2 <o4> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o5> +)
    (<in9> ^1 <o2> +)
    (<in9> ^2 <o1> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o3> +)
    (<in11> ^1 <o2> +)
    (<in11> ^2 <o4> +)
    (<in12> ^1 <o2> +)
    (<in12> ^2 <o5> +)
    (<in13> ^1 <o2> +)
    (<in13> ^2 <o6> +)
    (<in14> ^1 <o3> +)
    (<in14> ^2 <o2> +)
    (<in15> ^1 <o3> +)
    (<in15> ^2 <o5> +)
    (<in16> ^1 <o3> +)
    (<in16> ^2 <o6> +)
    (<in17> ^1 <o4> +)
    (<in17> ^2 <o1> +)
    (<in18> ^1 <o4> +)
    (<in18> ^2 <o2> +)
    (<in19> ^1 <o4> +)
    (<in19> ^2 <o5> +)
    (<in20> ^1 <o4> +)
    (<in20> ^2 <o7> +)
    (<in21> ^1 <o4> +)
    (<in21> ^2 <o8> +)
    (<in22> ^1 <o5> +)
    (<in22> ^2 <o1> +)
    (<in23> ^1 <o5> +)
    (<in23> ^2 <o2> +)
    (<in24> ^1 <o5> +)
    (<in24> ^2 <o3> +)
    (<in25> ^1 <o5> +)
    (<in25> ^2 <o4> +)
    (<in26> ^1 <o5> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o5> +)
    (<in27> ^2 <o7> +)
    (<in28> ^1 <o5> +)
    (<in28> ^2 <o8> +)
    (<in29> ^1 <o5> +)
    (<in29> ^2 <o9> +)
    (<in30> ^1 <o6> +)
    (<in30> ^2 <o2> +)
    (<in31> ^1 <o6> +)
    (<in31> ^2 <o3> +)
    (<in32> ^1 <o6> +)
    (<in32> ^2 <o5> +)
    (<in33> ^1 <o6> +)
    (<in33> ^2 <o8> +)
    (<in34> ^1 <o6> +)
    (<in34> ^2 <o9> +)
    (<in35> ^1 <o7> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o7> +)
    (<in36> ^2 <o5> +)
    (<in37> ^1 <o7> +)
    (<in37> ^2 <o8> +)
    (<in38> ^1 <o8> +)
    (<in38> ^2 <o7> +)
    (<in39> ^1 <o8> +)
    (<in39> ^2 <o4> +)
    (<in40> ^1 <o8> +)
    (<in40> ^2 <o5> +)
    (<in41> ^1 <o8> +)
    (<in41> ^2 <o6> +)
    (<in42> ^1 <o8> +)
    (<in42> ^2 <o9> +)
    (<in43> ^1 <o9> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o9> +)
    (<in44> ^2 <o5> +)
    (<in45> ^1 <o9> +)
    (<in45> ^2 <o6> +)
    (<in46> ^1 <o9> +)
    (<in46> ^2 <o11> +)
    (<in47> ^1 <o9> +)
    (<in47> ^2 <o12> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o19> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o11> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o12> +)
    (<in51> ^1 <o7> +)
    (<in51> ^2 <o10> +)
    (<in52> ^1 <o7> +)
    (<in52> ^2 <o11> +)
    (<in53> ^1 <o10> +)
    (<in53> ^2 <o7> +)
    (<in54> ^1 <o10> +)
    (<in54> ^2 <o8> +)
    (<in55> ^1 <o10> +)
    (<in55> ^2 <o11> +)
    (<in56> ^1 <o11> +)
    (<in56> ^2 <o10> +)
    (<in57> ^1 <o11> +)
    (<in57> ^2 <o7> +)
    (<in58> ^1 <o11> +)
    (<in58> ^2 <o8> +)
    (<in59> ^1 <o11> +)
    (<in59> ^2 <o9> +)
    (<in60> ^1 <o11> +)
    (<in60> ^2 <o12> +)
    (<in61> ^1 <o12> +)
    (<in61> ^2 <o11> +)
    (<in62> ^1 <o12> +)
    (<in62> ^2 <o8> +)
    (<in63> ^1 <o12> +)
    (<in63> ^2 <o9> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<diagonal-with1> ^instance <in72> +)
    (<diagonal-with1> ^instance <in73> +)
    (<diagonal-with1> ^instance <in74> +)
    (<diagonal-with1> ^instance <in75> +)
    (<diagonal-with1> ^instance <in76> +)
    (<diagonal-with1> ^instance <in77> +)
    (<diagonal-with1> ^instance <in78> +)
    (<diagonal-with1> ^instance <in79> +)
    (<diagonal-with1> ^instance <in80> +)
    (<diagonal-with1> ^instance <in81> +)
    (<diagonal-with1> ^instance <in82> +)
    (<diagonal-with1> ^instance <in83> +)
    (<diagonal-with1> ^instance <in84> +)
    (<diagonal-with1> ^instance <in85> +)
    (<diagonal-with1> ^instance <in86> +)
    (<diagonal-with1> ^instance <in87> +)
    (<in64> ^1 <o1> +)
    (<in64> ^2 <o5> +)
    (<in65> ^1 <o2> +)
    (<in65> ^2 <o4> +)
    (<in66> ^1 <o2> +)
    (<in66> ^2 <o6> +)
    (<in67> ^1 <o3> +)
    (<in67> ^2 <o5> +)
    (<in68> ^1 <o4> +)
    (<in68> ^2 <o2> +)
    (<in69> ^1 <o4> +)
    (<in69> ^2 <o8> +)
    (<in70> ^1 <o5> +)
    (<in70> ^2 <o1> +)
    (<in71> ^1 <o5> +)
    (<in71> ^2 <o3> +)
    (<in72> ^1 <o5> +)
    (<in72> ^2 <o7> +)
    (<in73> ^1 <o5> +)
    (<in73> ^2 <o9> +)
    (<in74> ^1 <o6> +)
    (<in74> ^2 <o2> +)
    (<in75> ^1 <o6> +)
    (<in75> ^2 <o8> +)
    (<in76> ^1 <o7> +)
    (<in76> ^2 <o5> +)
    (<in77> ^1 <o8> +)
    (<in77> ^2 <o4> +)
    (<in78> ^1 <o8> +)
    (<in78> ^2 <o6> +)
    (<in79> ^1 <o9> +)
    (<in79> ^2 <o5> +)
    (<in80> ^1 <o9> +)
    (<in80> ^2 <o11> +)
    (<in81> ^1 <o11> +)
    (<in81> ^2 <o9> +)
    (<in82> ^1 <o12> +)
    (<in82> ^2 <o8> +)
    (<in83> ^1 <o8> +)
    (<in83> ^2 <o12> +)
    (<in84> ^1 <o10> +)
    (<in84> ^2 <o8> +)
    (<in85> ^1 <o8> +)
    (<in85> ^2 <o10> +)
    (<in86> ^1 <o11> +)
    (<in86> ^2 <o7> +)
    (<in87> ^1 <o7> +)
    (<in87> ^2 <o11> +)
}

sp {dialog-event*apply*game-state-change-respond*init-8puzzle4
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-8puzzle4)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<objs> ^object <o15> +)
    (<objs> ^object <o16> +)
    (<objs> ^object <o17> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<preds> ^predicate <diagonal-with1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<pr0> ^color red1 +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<pr1> ^color orange1 +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<pr3> ^color yellow1 +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<pr4> ^color green1 +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<pr5> ^color blue1 +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category location +)
    (<pr6> ^color purple1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category location +)
    (<pr7> ^color gray1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category location +)
    (<pr8> ^color brown1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color orange1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color yellow1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color green1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<o15> ^item-type object +)
    (<o15> ^handle object-14 +)
    (<o15> ^predicates <pr14> +)
    (<pr14> ^visible true +)
    (<pr14> ^category block +)
    (<pr14> ^color purple1 +)
    (<o16> ^item-type object +)
    (<o16> ^handle object-15 +)
    (<o16> ^predicates <pr15> +)
    (<pr15> ^visible true +)
    (<pr15> ^category block +)
    (<pr15> ^color gray1 +)
    (<o17> ^item-type object +)
    (<o17> ^handle object-16 +)
    (<o17> ^predicates <pr16> +)
    (<pr16> ^visible true +)
    (<pr16> ^category block +)
    (<pr16> ^color brown1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o10> +)
    (<in0> ^2 <o2> +)
    (<in1> ^1 <o11> +)
    (<in1> ^2 <o3> +)
    (<in2> ^1 <o12> +)
    (<in2> ^2 <o1> +)
    (<in3> ^1 <o13> +)
    (<in3> ^2 <o4> +)
    (<in4> ^1 <o14> +)
    (<in4> ^2 <o6> +)
    (<in5> ^1 <o15> +)
    (<in5> ^2 <o7> +)
    (<in6> ^1 <o16> +)
    (<in6> ^2 <o8> +)
    (<in7> ^1 <o17> +)
    (<in7> ^2 <o9> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o2> +)
    (<in8> ^2 <o10> +)
    (<in9> ^1 <o3> +)
    (<in9> ^2 <o11> +)
    (<in10> ^1 <o1> +)
    (<in10> ^2 <o12> +)
    (<in11> ^1 <o4> +)
    (<in11> ^2 <o13> +)
    (<in12> ^1 <o6> +)
    (<in12> ^2 <o14> +)
    (<in13> ^1 <o7> +)
    (<in13> ^2 <o15> +)
    (<in14> ^1 <o8> +)
    (<in14> ^2 <o16> +)
    (<in15> ^1 <o9> +)
    (<in15> ^2 <o17> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<near1> ^instance <in38> +)
    (<near1> ^instance <in39> +)
    (<near1> ^instance <in40> +)
    (<near1> ^instance <in41> +)
    (<near1> ^instance <in42> +)
    (<near1> ^instance <in43> +)
    (<near1> ^instance <in44> +)
    (<near1> ^instance <in45> +)
    (<near1> ^instance <in46> +)
    (<near1> ^instance <in47> +)
    (<near1> ^instance <in48> +)
    (<near1> ^instance <in49> +)
    (<near1> ^instance <in50> +)
    (<near1> ^instance <in51> +)
    (<near1> ^instance <in52> +)
    (<near1> ^instance <in53> +)
    (<near1> ^instance <in54> +)
    (<near1> ^instance <in55> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o4> +)
    (<in30> ^2 <o7> +)
    (<in31> ^1 <o4> +)
    (<in31> ^2 <o8> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o1> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o2> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o3> +)
    (<in35> ^1 <o5> +)
    (<in35> ^2 <o4> +)
    (<in36> ^1 <o5> +)
    (<in36> ^2 <o6> +)
    (<in37> ^1 <o5> +)
    (<in37> ^2 <o7> +)
    (<in38> ^1 <o5> +)
    (<in38> ^2 <o8> +)
    (<in39> ^1 <o5> +)
    (<in39> ^2 <o9> +)
    (<in40> ^1 <o6> +)
    (<in40> ^2 <o2> +)
    (<in41> ^1 <o6> +)
    (<in41> ^2 <o3> +)
    (<in42> ^1 <o6> +)
    (<in42> ^2 <o5> +)
    (<in43> ^1 <o6> +)
    (<in43> ^2 <o8> +)
    (<in44> ^1 <o6> +)
    (<in44> ^2 <o9> +)
    (<in45> ^1 <o7> +)
    (<in45> ^2 <o4> +)
    (<in46> ^1 <o7> +)
    (<in46> ^2 <o5> +)
    (<in47> ^1 <o7> +)
    (<in47> ^2 <o8> +)
    (<in48> ^1 <o8> +)
    (<in48> ^2 <o7> +)
    (<in49> ^1 <o8> +)
    (<in49> ^2 <o4> +)
    (<in50> ^1 <o8> +)
    (<in50> ^2 <o5> +)
    (<in51> ^1 <o8> +)
    (<in51> ^2 <o6> +)
    (<in52> ^1 <o8> +)
    (<in52> ^2 <o9> +)
    (<in53> ^1 <o9> +)
    (<in53> ^2 <o8> +)
    (<in54> ^1 <o9> +)
    (<in54> ^2 <o5> +)
    (<in55> ^1 <o9> +)
    (<in55> ^2 <o6> +)
    (<diagonal-with1> ^item-type predicate +)
    (<diagonal-with1> ^handle diagonal-with1 +)
    (<diagonal-with1> ^instance <in56> +)
    (<diagonal-with1> ^instance <in57> +)
    (<diagonal-with1> ^instance <in58> +)
    (<diagonal-with1> ^instance <in59> +)
    (<diagonal-with1> ^instance <in60> +)
    (<diagonal-with1> ^instance <in61> +)
    (<diagonal-with1> ^instance <in62> +)
    (<diagonal-with1> ^instance <in63> +)
    (<diagonal-with1> ^instance <in64> +)
    (<diagonal-with1> ^instance <in65> +)
    (<diagonal-with1> ^instance <in66> +)
    (<diagonal-with1> ^instance <in67> +)
    (<diagonal-with1> ^instance <in68> +)
    (<diagonal-with1> ^instance <in69> +)
    (<diagonal-with1> ^instance <in70> +)
    (<diagonal-with1> ^instance <in71> +)
    (<in56> ^1 <o1> +)
    (<in56> ^2 <o5> +)
    (<in57> ^1 <o2> +)
    (<in57> ^2 <o4> +)
    (<in58> ^1 <o2> +)
    (<in58> ^2 <o6> +)
    (<in59> ^1 <o3> +)
    (<in59> ^2 <o5> +)
    (<in60> ^1 <o4> +)
    (<in60> ^2 <o2> +)
    (<in61> ^1 <o4> +)
    (<in61> ^2 <o8> +)
    (<in62> ^1 <o5> +)
    (<in62> ^2 <o1> +)
    (<in63> ^1 <o5> +)
    (<in63> ^2 <o3> +)
    (<in64> ^1 <o5> +)
    (<in64> ^2 <o7> +)
    (<in65> ^1 <o5> +)
    (<in65> ^2 <o9> +)
    (<in66> ^1 <o6> +)
    (<in66> ^2 <o2> +)
    (<in67> ^1 <o6> +)
    (<in67> ^2 <o8> +)
    (<in68> ^1 <o7> +)
    (<in68> ^2 <o5> +)
    (<in69> ^1 <o8> +)
    (<in69> ^2 <o4> +)
    (<in70> ^1 <o8> +)
    (<in70> ^2 <o6> +)
    (<in71> ^1 <o9> +)
    (<in71> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond*init-risk
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<o> ^type init-risk)
    (<s> ^top-state <ts>)
    (<ts> ^world <wo2>)
    -->
    (<ts> ^world <wo2> -)
    (<ts> ^world <wo> +)
    (<wo> ^objects <objs> +)
    (<wo> ^predicates <preds> +)
    (<wo> ^robot <ro> +)
    (<ro> ^handle rosie +)
    (<ro> ^item-type object +)
    (<ro> ^arm <a*1> +)
    (<a*1> ^action wait +)
    (<ro> ^predicate <p*1> +)
    (<p*1> ^handle rosie +)
    (<objs> ^object <self> +)
    (<objs> ^object <o1> +)
    (<objs> ^object <o2> +)
    (<objs> ^object <o3> +)
    (<objs> ^object <o4> +)
    (<objs> ^object <o5> +)
    (<objs> ^object <o6> +)
    (<objs> ^object <o7> +)
    (<objs> ^object <o8> +)
    (<objs> ^object <o9> +)
    (<objs> ^object <o10> +)
    (<objs> ^object <o11> +)
    (<objs> ^object <o12> +)
    (<objs> ^object <o13> +)
    (<objs> ^object <o14> +)
    (<self> ^type object +)
    (<self> ^handle self +)
    (<self> ^predicates <p*2> +)
    (<p*2> ^type object +)
    (<preds> ^predicate <on1> +)
    (<preds> ^predicate <below1> +)
    (<preds> ^predicate <near1> +)
    (<o1> ^item-type object +)
    (<o1> ^handle object-0 +)
    (<o1> ^predicates <pr0> +)
    (<pr0> ^visible true +)
    (<pr0> ^category location +)
    (<o2> ^item-type object +)
    (<o2> ^handle object-1 +)
    (<o2> ^predicates <pr1> +)
    (<pr1> ^visible true +)
    (<pr1> ^category location +)
    (<o3> ^item-type object +)
    (<o3> ^handle object-2 +)
    (<o3> ^predicates <pr2> +)
    (<pr2> ^visible true +)
    (<pr2> ^category location +)
    (<o4> ^item-type object +)
    (<o4> ^handle object-3 +)
    (<o4> ^predicates <pr3> +)
    (<pr3> ^visible true +)
    (<pr3> ^category location +)
    (<o5> ^item-type object +)
    (<o5> ^handle object-4 +)
    (<o5> ^predicates <pr4> +)
    (<pr4> ^visible true +)
    (<pr4> ^category location +)
    (<o6> ^item-type object +)
    (<o6> ^handle object-5 +)
    (<o6> ^predicates <pr5> +)
    (<pr5> ^visible true +)
    (<pr5> ^category location +)
    (<o7> ^item-type object +)
    (<o7> ^handle object-6 +)
    (<o7> ^predicates <pr6> +)
    (<pr6> ^visible true +)
    (<pr6> ^category block +)
    (<pr6> ^color red1 +)
    (<o8> ^item-type object +)
    (<o8> ^handle object-7 +)
    (<o8> ^predicates <pr7> +)
    (<pr7> ^visible true +)
    (<pr7> ^category block +)
    (<pr7> ^color red1 +)
    (<o9> ^item-type object +)
    (<o9> ^handle object-8 +)
    (<o9> ^predicates <pr8> +)
    (<pr8> ^visible true +)
    (<pr8> ^category block +)
    (<pr8> ^color red1 +)
    (<o10> ^item-type object +)
    (<o10> ^handle object-9 +)
    (<o10> ^predicates <pr9> +)
    (<pr9> ^visible true +)
    (<pr9> ^category block +)
    (<pr9> ^color red1 +)
    (<o11> ^item-type object +)
    (<o11> ^handle object-10 +)
    (<o11> ^predicates <pr10> +)
    (<pr10> ^visible true +)
    (<pr10> ^category block +)
    (<pr10> ^color blue1 +)
    (<o12> ^item-type object +)
    (<o12> ^handle object-11 +)
    (<o12> ^predicates <pr11> +)
    (<pr11> ^visible true +)
    (<pr11> ^category block +)
    (<pr11> ^color blue1 +)
    (<o13> ^item-type object +)
    (<o13> ^handle object-12 +)
    (<o13> ^predicates <pr12> +)
    (<pr12> ^visible true +)
    (<pr12> ^category block +)
    (<pr12> ^color blue1 +)
    (<o14> ^item-type object +)
    (<o14> ^handle object-13 +)
    (<o14> ^predicates <pr13> +)
    (<pr13> ^visible true +)
    (<pr13> ^category block +)
    (<pr13> ^color blue1 +)
    (<on1> ^item-type predicate +)
    (<on1> ^handle on1 +)
    (<on1> ^instance <in0> +)
    (<on1> ^instance <in1> +)
    (<on1> ^instance <in2> +)
    (<on1> ^instance <in3> +)
    (<on1> ^instance <in4> +)
    (<on1> ^instance <in5> +)
    (<on1> ^instance <in6> +)
    (<on1> ^instance <in7> +)
    (<in0> ^1 <o7> +)
    (<in0> ^2 <o1> +)
    (<in1> ^1 <o8> +)
    (<in1> ^2 <o1> +)
    (<in2> ^1 <o9> +)
    (<in2> ^2 <o2> +)
    (<in3> ^1 <o10> +)
    (<in3> ^2 <o6> +)
    (<in4> ^1 <o11> +)
    (<in4> ^2 <o3> +)
    (<in5> ^1 <o12> +)
    (<in5> ^2 <o3> +)
    (<in6> ^1 <o13> +)
    (<in6> ^2 <o4> +)
    (<in7> ^1 <o14> +)
    (<in7> ^2 <o5> +)
    (<below1> ^item-type predicate +)
    (<below1> ^handle below1 +)
    (<below1> ^instance <in8> +)
    (<below1> ^instance <in9> +)
    (<below1> ^instance <in10> +)
    (<below1> ^instance <in11> +)
    (<below1> ^instance <in12> +)
    (<below1> ^instance <in13> +)
    (<below1> ^instance <in14> +)
    (<below1> ^instance <in15> +)
    (<in8> ^1 <o1> +)
    (<in8> ^2 <o7> +)
    (<in9> ^1 <o1> +)
    (<in9> ^2 <o8> +)
    (<in10> ^1 <o2> +)
    (<in10> ^2 <o9> +)
    (<in11> ^1 <o6> +)
    (<in11> ^2 <o10> +)
    (<in12> ^1 <o3> +)
    (<in12> ^2 <o11> +)
    (<in13> ^1 <o3> +)
    (<in13> ^2 <o12> +)
    (<in14> ^1 <o4> +)
    (<in14> ^2 <o13> +)
    (<in15> ^1 <o5> +)
    (<in15> ^2 <o14> +)
    (<near1> ^item-type predicate +)
    (<near1> ^handle near1 +)
    (<near1> ^instance <in16> +)
    (<near1> ^instance <in17> +)
    (<near1> ^instance <in18> +)
    (<near1> ^instance <in19> +)
    (<near1> ^instance <in20> +)
    (<near1> ^instance <in21> +)
    (<near1> ^instance <in22> +)
    (<near1> ^instance <in23> +)
    (<near1> ^instance <in24> +)
    (<near1> ^instance <in25> +)
    (<near1> ^instance <in26> +)
    (<near1> ^instance <in27> +)
    (<near1> ^instance <in28> +)
    (<near1> ^instance <in29> +)
    (<near1> ^instance <in30> +)
    (<near1> ^instance <in31> +)
    (<near1> ^instance <in32> +)
    (<near1> ^instance <in33> +)
    (<near1> ^instance <in34> +)
    (<near1> ^instance <in35> +)
    (<near1> ^instance <in36> +)
    (<near1> ^instance <in37> +)
    (<in16> ^1 <o1> +)
    (<in16> ^2 <o2> +)
    (<in17> ^1 <o1> +)
    (<in17> ^2 <o4> +)
    (<in18> ^1 <o1> +)
    (<in18> ^2 <o5> +)
    (<in19> ^1 <o2> +)
    (<in19> ^2 <o1> +)
    (<in20> ^1 <o2> +)
    (<in20> ^2 <o3> +)
    (<in21> ^1 <o2> +)
    (<in21> ^2 <o4> +)
    (<in22> ^1 <o2> +)
    (<in22> ^2 <o5> +)
    (<in23> ^1 <o2> +)
    (<in23> ^2 <o6> +)
    (<in24> ^1 <o3> +)
    (<in24> ^2 <o2> +)
    (<in25> ^1 <o3> +)
    (<in25> ^2 <o5> +)
    (<in26> ^1 <o3> +)
    (<in26> ^2 <o6> +)
    (<in27> ^1 <o4> +)
    (<in27> ^2 <o1> +)
    (<in28> ^1 <o4> +)
    (<in28> ^2 <o2> +)
    (<in29> ^1 <o4> +)
    (<in29> ^2 <o5> +)
    (<in30> ^1 <o5> +)
    (<in30> ^2 <o1> +)
    (<in31> ^1 <o5> +)
    (<in31> ^2 <o2> +)
    (<in32> ^1 <o5> +)
    (<in32> ^2 <o3> +)
    (<in33> ^1 <o5> +)
    (<in33> ^2 <o4> +)
    (<in34> ^1 <o5> +)
    (<in34> ^2 <o6> +)
    (<in35> ^1 <o6> +)
    (<in35> ^2 <o2> +)
    (<in36> ^1 <o6> +)
    (<in36> ^2 <o3> +)
    (<in37> ^1 <o6> +)
    (<in37> ^2 <o5> +)
}

sp {dialog-event*apply*game-state-change-respond
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name game-state-change-respond)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<o> ^type <type>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type game-state-change +)
    (<de> ^originator agent +)
    (<changes> ^outgoing-message <msg1> +)
    (<msg1> ^type simple-message +)
    (<msg1> ^message-type ok +)
}

sp {dialog-event*propose*game-state-change-respond
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type game-state-change)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <type>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name game-state-change-respond +)
    (<o> ^type <type> +)
}

sp {interpret-message*apply*interpret-game-state-change
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-game-state-change)
    (<s> ^instructor-message <msg>)
    (<o> ^type <type>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type game-state-change +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <type> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^dialog-event <de> +)
    (<de> ^type game-state-change +)
    (<de> ^originator agent +)
}

sp {dialog-event*apply*whats-question-respond*time
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name whats-question-respond)
    (<o> ^type time)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type interjection +)
    (<de> ^originator agent +)
    (<changes> ^outgoing-message <msg1> +)
    (<msg1> ^type simple-message +)
    (<msg1> ^message-type current-time +)
}

sp {dialog-event*propose*whats-question-respond
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type whats-question)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <type>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name whats-question-respond +)
    (<o> ^type <type> +)
}

sp {interpret-message*apply*interpret-whats
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-whats)
    (<s> ^instructor-message <msg>)
    (<msg> ^arg1 <a*1>)
    (<a*1> ^handle <type>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type whats-question +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <type> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^dialog-event <de> +)
    (<de> ^type interjection +)
    (<de> ^originator agent +)
}

sp {interpret-message*propose*interpret-whats2
    (state <s> ^name interpret-message)
    (<s> -^action-operator <op>)
    (<s> ^instructor-message <msg>)
    (<msg> ^message-type command)
    (<msg> ^action <a*1>)
    (<a*1> ^word-structure <w*1>)
    (<w*1> ^spelling whats)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
    (<o> ^name interpret-whats +)
    (<o> ^command-message <msg> +)
}

sp {interpret-message*propose*interpret-whats
    (state <s> ^name interpret-message)
    (<s> -^action-operator <op>)
    (<s> ^instructor-message <msg>)
    (<msg> ^message-type command)
    (<msg> ^action <a*1>)
    (<a*1> ^word-structure <w*1>)
    (<w*1> ^spelling |what's|)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
    (<o> ^name interpret-whats +)
    (<o> ^command-message <msg> +)
}

sp {dialog-event*apply*interjection-respond
    (state <s> ^name dialog-event)
    (<s> ^operator <o>)
    (<o> ^name interjection-respond)
    (<s> ^top-state <t*2>)
    (<t*2> ^interaction <i*2>)
    (<i*2> ^changes <changes>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<o> ^type <type>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type interjection +)
    (<de> ^originator agent +)
    (<changes> ^outgoing-message <msg1> +)
    (<msg1> ^type generic +)
    (<msg1> ^fields <f*1> +)
    (<f*1> ^type <type> +)
}

sp {dialog-event*propose*interjection-respond
    (state <s> ^name dialog-event)
    (<s> ^purpose <p>)
    (<p> ^type generic-interjection)
    (<p> ^parameters <p*1>)
    (<p*1> ^message <type>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interjection-respond +)
    (<o> ^type <type> +)
}

sp {interpret-message*apply*interpret-interjection
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-interjection)
    (<s> ^instructor-message <msg>)
    (<o> ^type <type>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type generic-interjection +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <type> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^dialog-event <de> +)
    (<de> ^type interjection +)
    (<de> ^originator agent +)
}

sp {interpret-message*propose*interpret-interjection
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type { << hello bye >> <type> })
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-interjection +)
    (<o> ^type <type> +)
}

sp {interpret-message*apply*interpret-ignore-list*create*segment*modify-ignore-list
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-ignore-list)
    (<o> ^message <msg>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type modify-ignore-list +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-attend-list*create*segment*modify-attend-list
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-attend-list)
    (<o> ^message <msg>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type modify-attend-list +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-done*create*segment*finished-goal-demo
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-done)
    (<s> ^instructor-message <msg>)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <dc>)
    (<dc> ^attend <a*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^goal-state <gs>)
    -->
    (<dc> ^modified true +)
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-goal-final-state +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*propose*interpret-done
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type finished)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <d*2>)
    (<d*2> ^attend <a*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learn-link <l*1>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name interpret-done +)
}

sp {interpret-message*apply*interpret-restart*clean*top-state
    (state <s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-restart)
    (<s> ^top-state <top>)
    (<top> ^current-action <a>)
    -->
    (<top> ^current-action <a> -)
}

sp {interpret-message*apply*interpret-restart*mark*clear-interaction-stack
    (state <s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-restart)
    -->
    (<s> ^clear-interaction-stack true +)
}

sp {interpret-message*apply*interpret-restart*mark
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-restart)
    (<o> ^message <msg>)
    -->
    (<msg> ^interpreted true +)
}

sp {interpret-message*propose*interpret-restart
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type restart)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-restart +)
    (<o> ^message <msg> +)
}

sp {interpret-message*apply*interpret-yes-no-message*no*concept-transfer
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type no)
    (<o> ^name interpret-yes-no-message)
    (<o> ^message <msg>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^transfering <tf>)
    (<tf> ^lti <pred>)
    (<dc> ^learning-predicate <lp>)
    (<tf> ^name <name>)
    (<lp> ^name <name>)
    (<tf> ^to <game>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^changes <changes>)
    -->
    (<msg> ^interpreted true +)
    (<dc> ^transfering <tf> -)
    (<changes> ^outgoing-message <msg2> +)
    (<msg2> ^type unknown-word +)
    (<msg2> ^fields <f*1> +)
    (<f*1> ^word <name> +)
}

sp {interpret-message*apply*interpret-yes-no-message*create*segment*finished-game-learning
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-yes-no-message)
    (<o> ^message-type <yesno>)
    (<o> ^message <msg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^finished-game-teaching true)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type finished-game-learning +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <yesno> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-yes-no-message*yes*concept-transfer2
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type yes)
    (<o> ^name interpret-yes-no-message)
    (<o> ^message <msg>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^transfering <tf>)
    (<tf> ^lti <pred>)
    (<pred> ^from <game>)
    (<tf> ^to <game>)
    (<dc> ^learning-predicate <lp>)
    (<tf> ^name <name>)
    (<lp> ^name <name>)
    -->
    (<msg> ^interpreted true +)
    (<dc> ^learning-predicate <lp> -)
    (<dc> ^transfering <tf> -)
}

sp {interpret-message*apply*interpret-yes-no-message*yes*concept-transfer
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type yes)
    (<o> ^name interpret-yes-no-message)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^transfering <tf>)
    (<tf> ^lti <pred>)
    (<dc> ^learning-predicate <lp>)
    (<tf> ^name <name>)
    (<lp> ^name <name>)
    (<tf> ^to <game>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <sc>)
    -->
    (<pred> ^from <game> +)
    (<sc> ^store <pred> +)
}

sp {interpret-message*apply*interpret-yes-no-message*yes**create*segment*learn-failure*predescribed
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type yes)
    (<o> ^name interpret-yes-no-message)
    (<o> ^message <msg>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^learning true)
    (<dc> ^parsed-failure <msg2>)
    (<dc> ^needs-failure-setup <t>)
    -->
    (<msg> ^interpreted true +)
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-failure-predicate +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg2> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-yes-no-message*yes**create*segment*learn-goal*predescribed
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type yes)
    (<o> ^name interpret-yes-no-message)
    (<o> ^message <msg>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^learning true)
    (<dc> ^parsed-goal <msg2>)
    (<dc> ^needs-goal-setup <t>)
    -->
    (<msg> ^interpreted true +)
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-goal-predicate +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg2> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-yes-no-message*yes**create*segment*learn-failure
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type yes)
    (<o> ^name interpret-yes-no-message)
    (<o> ^message <msg>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> -^parsed-failure <p*1>)
    (<dc> ^learning true)
    (<dc> ^needs-failure-setup <t>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^changes <changes>)
    -->
    (<msg> ^interpreted true +)
    (<dc> ^needs-failure-setup <t> -)
    (<changes> ^outgoing-message <msg2> +)
    (<msg2> ^type simple-message +)
    (<msg2> ^message-type describe-failure +)
}

sp {interpret-message*apply*interpret-yes-no-message*yes**create*segment*learn-goal
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type yes)
    (<o> ^name interpret-yes-no-message)
    (<o> ^message <msg>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> -^parsed-goal <p*1>)
    (<dc> ^learning true)
    (<dc> ^needs-goal-setup <t>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^changes <changes>)
    -->
    (<msg> ^interpreted true +)
    (<dc> ^needs-goal-setup <t> -)
    (<changes> ^outgoing-message <msg2> +)
    (<msg2> ^type simple-message +)
    (<msg2> ^message-type describe-goal +)
}

sp {interpret-message*apply*interpret-yes-no-message*yes**create*segment*learn-goal-initiate-state
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type yes)
    (<o> ^name interpret-yes-no-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^needs-setup true)
    (<dc> ^learning true)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-goal-initial-state +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-yes-no-message*reset-state
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type yes)
    (<o> ^name interpret-yes-no-message)
    (<o> ^message <msg>)
    (<s> ^top-state <ts>)
    (<ts> ^dialog-context <dc>)
    (<dc> ^learning true)
    (<dc> ^needs-reset <t>)
    (<ts> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<msg> ^interpreted true +)
    (<dc> ^needs-reset <t> -)
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type single-word-response +)
    (<de> ^originator instructor +)
}

sp {interpret-message*apply*interpret-yes-no-message*yes*mark*received-no*action
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type no)
    (<o> ^name interpret-yes-no-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^current-action <a>)
    -->
    (<a> ^received-no true +)
}

sp {interpret-message*apply*interpret-yes-no-message*yes*mark*received-yes*action
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^message-type yes)
    (<o> ^name interpret-yes-no-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^current-action <a>)
    -->
    (<a> ^received-yes true +)
}

sp {interpret-message*apply*interpret-yes-no-message*mark
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-yes-no-message)
    (<o> ^message <msg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^current-action <c*1>)
    -->
    (<msg> ^interpreted true +)
}

sp {interpret-message*propose*interpret-yes-no-message
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type { << yes no >> <type> })
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-yes-no-message +)
    (<o> ^message <msg> +)
    (<o> ^message-type <type> +)
}

sp {interpret-message*apply*interpret-what-is-question*create*message
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-what-is-question)
    (<o> ^message <in-msg>)
    (<o> ^object <obj>)
    -->
    (<in-msg> ^interpreted true +)
    (<s> ^outgoing-message <msg> +)
    (<msg> ^type object-description +)
    (<msg> ^object <obj> +)
}

sp {interpret-message*elaborate*interpret-what-is-question*object
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-what-is-question)
    (<o> ^message <m*1>)
    (<m*1> ^predicate <obj>)
    -->
    (<o> ^object <obj> +)
}

sp {interpret-message*propose*interpret-what-is-question
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type what-is-question)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-what-is-question +)
    (<o> ^message <msg> +)
}

sp {interpret-message*apply*interpret-ignore*create*segment
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-ignore)
    (<o> ^message <msg>)
    -->
    (<s> ^mark-interpreted <msg> +)
    (<s> ^outgoing-message <out-msg> +)
    (<out-msg> ^type simple-message +)
    (<out-msg> ^message-type ok +)
}

sp {interpret-message*propose*interpret-ignore
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type ignore)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-ignore +)
    (<o> ^message <msg> +)
}

sp {generate-action-operator*apply*add-argument-to-world*predicate
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^arg-type predicate)
    (<o> ^name add-argument-to-world)
    (<o> ^predicate-handle <pred-handle>)
    (<o> ^2 <obj2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^predicates <p*1>)
    (<p*1> ^predicate <ts-pred>)
    (<ts-pred> ^handle <pred-handle>)
    (<o> ^1 <obj1>)
    -->
    (<ts-pred> ^instance <i> +)
    (<i> ^1 <obj1> +)
    (<i> ^2 <obj2> +)
}

sp {generate-action-operator*apply*add-argument-to-world*object
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^arg-type object)
    (<o> ^name add-argument-to-world)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <objs>)
    (<o> ^id <obj>)
    -->
    (<objs> ^object <obj> +)
}

sp {generate-action-operator*propose*add-argument-to-world*predicate*to
    (state <s> ^name generate-action-operator)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <p*1>)
    (<s> ^action-operator <a*3>)
    (<s> ^action-operator <a*2>)
    (<s> ^top-state <t*2>)
    (<s> ^top-state <t*1>)
    (<t*2> ^world <w*2>)
    (<w*2> ^predicates <p*2>)
    (<p*2> ^predicate <ts-pred>)
    (<ts-pred> ^handle in1)
    (<t*1> ^world <w*1>)
    (<w*1> ^robot <r*1>)
    (<r*1> ^current-location <loc>)
    (<a*3> ^<arg1-name> <arg1>)
    (<arg1> ^arg-type object)
    (<arg1> ^id <obj1>)
   -{ (<ts-pred> ^instance <i>)
      (<i> ^2 <loc>)
      (<i> ^1 <obj1>)}
    (<a*2> ^<arg2-name> <arg2>)
    (<arg2> ^handle to1)
    (<p*1> ^<arg2-name> <parg2>)
    (<parg2> ^arg-status real)
    (<parg2> ^arg-type predicate)
    (<arg2> ^2 <obj2>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name add-argument-to-world +)
    (<o> ^arg-type predicate +)
    (<o> ^predicate-handle in1 +)
    (<o> ^1 <obj1> +)
    (<o> ^2 <loc> +)
}

sp {generate-action-operator*propose*add-argument-to-world*predicate*from
    (state <s> ^name generate-action-operator)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <p*1>)
    (<s> ^action-operator <a*3>)
    (<s> ^action-operator <a*2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^predicates <p*2>)
    (<p*2> ^predicate <ts-pred>)
    (<ts-pred> ^handle in1)
    (<a*3> ^<arg1-name> <arg1>)
    (<arg1> ^arg-type object)
    (<arg1> ^id <obj1>)
    (<a*2> ^<arg2-name> <arg2>)
    (<arg2> ^handle in1)
    (<arg2> ^2 <obj2>)
   -{ (<ts-pred> ^instance <i>)
      (<i> ^2 <obj2>)
      (<i> ^1 <obj1>)}
    (<p*1> ^<arg2-name> <parg2>)
    (<parg2> ^arg-status real)
    (<parg2> ^arg-type predicate)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name add-argument-to-world +)
    (<o> ^arg-type predicate +)
    (<o> ^predicate-handle in1 +)
    (<o> ^1 <obj1> +)
    (<o> ^2 <obj2> +)
}

sp {generate-action-operator*propose*add-argument-to-world*object*depth2
    (state <s> ^name generate-action-operator)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <p*1>)
    (<s> ^action-operator <a*2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <ts-objs>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-status real)
    (<parg> ^arg-type predicate)
    (<a*2> ^<arg-name> <arg>)
    (<arg> ^{ << 1 2 3 4 5 >> <a*3> } <obj>)
    (<ts-objs> -^object <obj>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name add-argument-to-world +)
    (<o> ^arg-type object +)
    (<o> ^id <obj> +)
}

sp {generate-action-operator*propose*add-argument-to-world*object*depth1
    (state <s> ^name generate-action-operator)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <p*1>)
    (<s> ^action-operator <a*2>)
    (<s> ^top-state <t*1>)
    (<t*1> ^world <w*1>)
    (<w*1> ^objects <ts-objs>)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-status real)
    (<parg> ^arg-type object)
    (<a*2> ^<arg-name> <arg>)
    (<arg> ^id <obj>)
    (<ts-objs> -^object <obj>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name add-argument-to-world +)
    (<o> ^arg-type object +)
    (<o> ^id <obj> +)
}

sp {generate-action-operator*apply*mark-argument-imagined*mark*dialog-ignore
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^name mark-argument-imagined)
    (<o> ^argument <arg>)
    (<arg> ^arg-type { << object location >> <a*1> })
    (<arg> ^id <obj>)
    -->
    (<obj> ^dialog-ignore true +)
}

sp {generate-action-operator*apply*mark-argument-imagined
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^name mark-argument-imagined)
    (<o> ^argument <arg>)
    -->
    (<arg> ^imagined true +)
}

sp {generate-action-operator*propose*mark-argument-imagined
    (state <s> ^name generate-action-operator)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <p*1>)
    (<s> ^action-operator <a*2>)
    (<a*2> ^<arg-name> <arg>)
    (<arg> -^imagined true)
    (<p*1> ^<arg-name> <parg>)
    (<parg> ^arg-status imagined)
    (<parg> ^arg-type <any>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name mark-argument-imagined +)
    (<o> ^argument <arg> +)
}

sp {generate-action-operator*apply*mark-argument-optional
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^name mark-argument-optional)
    (<o> ^argument <arg>)
    -->
    (<arg> ^optional true +)
    (<s> ^to-store <arg> +)
}

sp {generate-action-operator*propose*mark-argument-optional*predicate
    (state <s> ^name generate-action-operator)
   -{ (<s> ^action-operator <a*2>)
      (<a*2> ^{ << arg2 relation >> <a*3> } <op-arg>)
      (<op-arg> ^2 <obj2>)
      (<op-arg> ^handle <rel-handle>)}
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <proc>)
    (<proc> ^<arg-name> <arg>)
    (<arg> -^optional true)
    (<arg> ^arg-type predicate)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name mark-argument-optional +)
    (<o> ^argument <arg> +)
}

sp {generate-action-operator*propose*mark-argument-optional*simple
    (state <s> ^name generate-action-operator)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <proc>)
    (<proc> ^<arg-name> <arg>)
    (<arg> -^optional true)
   -{ (<s> ^command-message <c*1>)
      (<c*1> ^<arg-name> <a*2>)}
    (<arg> ^arg-type { << object concept >> <a*3> })
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name mark-argument-optional +)
    (<o> ^argument <arg> +)
}

sp {generate-action-operator*propose*mark-argument-optional*new*procedural*arg
    (state <s> ^name generate-action-operator)
    (<s> -^new-action true)
    (<s> ^created-procedural-arg <parg>)
    (<parg> -^optional true)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name mark-argument-optional +)
    (<o> ^argument <parg> +)
}

sp {generate-action-operator*apply*complete-generate-action-operator
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-generate-action-operator)
    (<s> ^action-operator <op>)
    (<s> ^superstate <ss>)
    -->
    (<ss> ^action-operator <op> +)
}

sp {generate-action-operator*propose*complete-generate-action-operator
    (state <s> ^name generate-action-operator)
    (<s> ^action-operator <op>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-generate-action-operator +)
}

sp {generate-action-operator*prefer*all*over*store
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o2> +)
    (<o2> ^name store-concepts)
    (<s> ^operator <o1> +)
    (<o1>
          ^name { << create-action-operator copy-command-arg mark-argument-optional add-argument-to-world >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {generate-action-operator*apply*store-concepts*remove*retrieve
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o*1>)
    (<o*1> ^name store-concepts)
    (<s> ^smem <s*1>)
    (<s*1> ^commant <cmd>)
    (<cmd> ^retrieve <ret>)
    -->
    (<cmd> ^retrieve <ret> -)
}

sp {generate-action-operator*apply*store-concepts*store
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o*1>)
    (<o*1> ^name store-concepts)
    (<s> ^to-store <lti>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <lti> +)
    (<s> ^stored-concepts true +)
}

sp {generate-action-operator*propose*store-concepts
    (state <s> ^concepts-to-store true)
    (<s> -^stored-concepts <s*1>)
    (<s> ^name generate-action-operator)
    -->
    (<s> ^operator <o> +)
    (<o> ^name store-concepts +)
}

sp {generate-action-operator*elaborate*concepts-to-store
    (state <s> ^name generate-action-operator)
    (<s> ^to-store <lti>)
    -->
    (<s> ^concepts-to-store true +)
}

sp {generate-action-operator*apply*copy-command-arg*arg-type*until-clause*state*predicate
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^name copy-command-arg)
    (<o> ^arg-value <val>)
    (<val> ^until-clause <until>)
    (<o> ^command-arg-name { << arg1 arg2 >> <cmd-arg-name> })
    (<until> ^arg1 <obj>)
    (<until> ^predicate <p*1>)
    (<p*1> ^handle <pred>)
    (<s> ^action-operator <cmd>)
    -->
    (<cmd> ^until-clause <new-clause> +)
    (<new-clause> ^arg-type until-clause +)
    (<new-clause> ^predicate <until-pred> +)
    (<until-pred> ^type state +)
    (<until-pred> ^handle <pred> +)
    (<until-pred> ^1 <obj> +)
    (<s> ^copied-arg <c*1> +)
    (<c*1> ^<cmd-arg-name> <val> +)
}

sp {generate-action-operator*apply*copy-command-arg*until-clause
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^name copy-command-arg)
    (<o> ^final-count <count>)
    (<o> ^arg-value <val>)
    (<val> ^until-clause <clause>)
    (<o> ^command-arg-name { << arg1 arg2 >> <cmd-arg-name> })
    (<clause> ^arg1 <a*1>)
    (<a*1> ^predicates <p*1>)
    (<p*1> ^spatial-shape <shape>)
    (<s> ^action-operator <cmd>)
    -->
    (<cmd> ^until-clause <new-clause> +)
    (<new-clause> ^name count +)
    (<new-clause> ^parameters <params> +)
    (<params> ^count <count> +)
    (<params> ^class <shape> +)
    (<s> ^copied-arg <c*1> +)
    (<c*1> ^<cmd-arg-name> <val> +)
}

sp {generate-action-operator*elaborate*final-count*not*at-classification
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> -^at-classification true)
    (<o> ^arg-type until-clause)
    (<o> ^name copy-command-arg)
    (<o> ^count <c>)
    -->
    (<o> ^final-count <c> +)
}

sp {generate-action-operator*elaborate*final-count*at-classification
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> ^at-classification true)
    (<o> ^arg-type until-clause)
    (<o> ^name copy-command-arg)
    (<o> ^count <c>)
    -->
    (<o> ^final-count (+ <c> 1) +)
}

sp {generate-action-operator*elaborate*copy-command-arg*until-clause*count*default*1
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> ^arg-type until-clause)
    (<o> ^name copy-command-arg)
    (<o> ^arg-value <a*1>)
    (<a*1> ^until-clause <u*1>)
    (<u*1> ^arg1 <a*2>)
    (<a*2> ^predicates <preds>)
    (<preds> -^number <num>)
    -->
    (<o> ^count 1 +)
}

sp {generate-action-operator*elaborate*copy-command-arg*until-clause*count*from*quantity
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> ^arg-type until-clause)
    (<o> ^name copy-command-arg)
    (<o> ^arg-value <a*1>)
    (<a*1> ^until-clause <u*1>)
    (<u*1> ^arg1 <a*2>)
    (<a*2> ^predicates <p*1>)
    (<p*1> ^number <num>)
    -->
    (<o> ^count <num> +)
}

sp {generate-action-operator*elaborate*copy-command-arg*until-clause*at*classification
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> ^arg-type until-clause)
    (<o> ^name copy-command-arg)
    (<o> ^arg-value <a*1>)
    (<a*1> ^until-clause <u*1>)
    (<u*1> ^arg1 <a*2>)
    (<a*2> ^predicates <p*1>)
    (<p*1> ^spatial-shape <class>)
    (<s> ^top-state <t*1>)
    (<t*1> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^self <s*1>)
    (<s*1> ^current-waypoint <c*1>)
    (<c*1> ^classification <class>)
    -->
    (<o> ^at-classification true +)
}

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*until-clause
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> ^name copy-command-arg)
    (<o> ^arg-value <a*1>)
    (<a*1> ^until-clause <until>)
    (<o> ^command-arg-name { << arg2 relation predicate >> <arg-name> })
    -->
    (<o> ^arg-type until-clause +)
    (<o> ^arg-name arg2 +)
}

sp {generate-action-operator*apply*copy-command-arg*predicate*store*procedural
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^name copy-command-arg)
    (<o> ^arg-name <arg-name>)
    (<o> ^arg-type { << predicate >> <arg-type> })
    (<o> ^arg-value <arg>)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <proc>)
    (<proc> -^<arg-name> <a*2>)
    -->
    (<proc> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type <arg-type> +)
    (<new-arg> ^arg-status real +)
    (<new-arg> ^id <pred-slot> +)
    (<new-arg> ^2 <obj-slot> +)
    (<s> ^to-store <proc> +)
    (<s> ^to-store <new-arg> +)
    (<s> ^created-procedural-arg <new-arg> +)
}

sp {generate-action-operator*apply*copy-command-arg*predicate
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^arg-type predicate)
    (<o> ^name copy-command-arg)
    (<o> ^arg-name <arg-name>)
    (<o> ^arg-value <val>)
    (<o> ^command-arg-name <cmd-arg-name>)
    (<val> ^2 <obj>)
    (<val> ^handle <pred-handle>)
    (<s> ^action-operator <op>)
    -->
    (<op> ^<arg-name> <arg> +)
    (<arg> ^arg-type predicate +)
    (<arg> ^handle <pred-handle> +)
    (<arg> ^2 <obj> +)
    (<s> ^copied-arg <c*1> +)
    (<c*1> ^<cmd-arg-name> <val> +)
}

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*predicate
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> ^name copy-command-arg)
    (<o> ^arg-value <val>)
    (<val> -^until-clause <u*1>)
    (<val> ^item-type predicate)
    (<o> ^command-arg-name { << arg2 relation predicate >> <arg-name> })
    -->
    (<o> ^arg-type predicate +)
    (<o> ^arg-name arg2 +)
}

sp {generate-action-operator*apply*copy-command-arg*concept*store*procedural
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^arg-type concept)
    (<o> ^name copy-command-arg)
    (<o> ^arg-name <arg-name>)
    (<o> ^arg-value <arg>)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <proc>)
    (<proc> -^<arg-name> <a*2>)
    -->
    (<proc> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type concept +)
    (<new-arg> ^id <concept-slot> +)
    (<s> ^to-store <proc> +)
    (<s> ^to-store <new-arg> +)
    (<s> ^created-procedural-arg <new-arg> +)
}

sp {generate-action-operator*apply*copy-command-arg*copy*concept*arg
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^arg-type concept)
    (<o> ^name copy-command-arg)
    (<o> ^arg-name <arg-name>)
    (<o> ^arg-value <val>)
    (<o> ^command-arg-name <cmd-arg-name>)
    (<val> ^handle <concept-handle>)
    (<s> ^action-operator <op>)
    -->
    (<op> ^<arg-name> <arg> +)
    (<arg> ^arg-type concept +)
    (<arg> ^handle <concept-handle> +)
    (<s> ^copied-arg <c*1> +)
    (<c*1> ^<cmd-arg-name> <val> +)
}

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*concept*predicate
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> ^command-arg-name arg1)
    (<o> ^name copy-command-arg)
    (<o> ^arg-value <val>)
    (<val> ^item-type predicate)
    -->
    (<o> ^arg-type concept +)
    (<o> ^arg-name arg1 +)
}

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*concept
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> ^name copy-command-arg)
    (<o> ^arg-value <val>)
    (<val> ^item-type concept)
    (<o> ^command-arg-name <arg-name>)
    -->
    (<o> ^arg-type concept +)
    (<o> ^arg-name <arg-name> +)
}

sp {generate-action-operator*apply*copy-command-arg*location*store*procedural
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^arg-type location)
    (<o> ^name copy-command-arg)
    (<o> ^arg-name <arg-name>)
    (<o> ^arg-value <arg>)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <proc>)
    (<proc> -^<arg-name> <a*2>)
    -->
    (<proc> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type location +)
    (<new-arg> ^arg-status real +)
    (<new-arg> ^id <loc-slot> +)
    (<s> ^to-store <proc> +)
    (<s> ^to-store <new-arg> +)
    (<s> ^created-procedural-arg <new-arg> +)
}

sp {generate-action-operator*apply*copy-command-arg*copy*location*arg
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^arg-type location)
    (<o> ^name copy-command-arg)
    (<o> ^arg-name <arg-name>)
    (<o> ^arg-value <location>)
    (<o> ^command-arg-name <cmd-arg-name>)
    (<s> ^action-operator <op>)
    -->
    (<op> ^<arg-name> <arg> +)
    (<arg> ^arg-type location +)
    (<arg> ^id <location> +)
    (<s> ^copied-arg <c*1> +)
    (<c*1> ^<cmd-arg-name> <location> +)
}

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*location
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> ^name copy-command-arg)
    (<o> ^arg-value <obj>)
    (<obj> ^item-type location)
    (<o> ^command-arg-name <arg-name>)
    (<s> ^top-state <top>)
    -->
    (<o> ^arg-type location +)
    (<o> ^arg-name <arg-name> +)
}

sp {generate-action-operator*apply*copy-command-arg*object*store*procedural
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^arg-type object)
    (<o> ^name copy-command-arg)
    (<o> ^arg-name <arg-name>)
    (<o> ^arg-value <arg>)
    (<s> ^action-id <a*1>)
    (<a*1> ^procedural <proc>)
    (<proc> -^<arg-name> <a*2>)
    -->
    (<proc> ^<arg-name> <new-arg> +)
    (<new-arg> ^arg-type object +)
    (<new-arg> ^arg-status real +)
    (<new-arg> ^id <obj-slot> +)
    (<s> ^to-store <proc> +)
    (<s> ^to-store <new-arg> +)
    (<s> ^created-procedural-arg <new-arg> +)
}

sp {generate-action-operator*apply*copy-command-arg*copy*object*arg
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^arg-type object)
    (<o> ^name copy-command-arg)
    (<o> ^arg-name <arg-name>)
    (<o> ^arg-value <object>)
    (<o> ^command-arg-name <cmd-arg-name>)
    (<s> ^action-operator <op>)
    -->
    (<op> ^<arg-name> <arg> +)
    (<arg> ^arg-type object +)
    (<arg> ^id <object> +)
    (<s> ^copied-arg <c*1> +)
    (<c*1> ^<cmd-arg-name> <object> +)
}

sp {generate-action-operator*elaborate*copy-command-arg*arg-type*object
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o> +)
    (<o> ^name copy-command-arg)
    (<o> ^arg-value <obj>)
    (<obj> ^item-type object)
    (<o> ^command-arg-name <arg-name>)
    (<s> ^top-state <top>)
    -->
    (<o> ^arg-type object +)
    (<o> ^arg-name <arg-name> +)
}

sp {generate-action-operator*propose*copy-command-arg
    (state <s> ^name generate-action-operator)
    (<s> ^command-message <msg>)
    (<s> ^action-operator <op>)
    (<msg>
          ^{ << arg1 arg2 arg3 arg4 arg5 arg6 relation predicate >> <arg-name> } <arg>)
   -{ (<s> ^copied-arg <c*1>)
      (<c*1> ^<arg-name> <arg>)}
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name copy-command-arg +)
    (<o> ^command-arg-name <arg-name> +)
    (<o> ^arg-value <arg> +)
}

sp {generate-action-operator*apply*create-action-operator*create*procedural*lti
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^name create-action-operator)
    (<o> ^action-id <id>)
    (<id> -^procedural <p*1>)
    (<id> ^handle <handle>)
    -->
    (<id> ^item-type action +)
    (<id> ^action-type composite +)
    (<id> ^procedural <proc> +)
    (<proc> ^op_name (make-constant-symbol (concat |op_| <handle>)) +)
    (<s> ^to-store <id> +)
    (<s> ^to-store <proc> +)
    (<s> ^new-action true +)
}

sp {generate-action-operator*apply*create-action-operator*copy*action-type
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^name create-action-operator)
    (<o> ^action-id <a*1>)
    (<a*1> ^action-type <type>)
    (<s> ^action-operator <op>)
    -->
    (<op> ^action-type <type> +)
}

sp {generate-action-operator*apply*create-action-operator*copy*operator*name
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^name create-action-operator)
    (<o> ^action-id <a*1>)
    (<a*1> ^procedural <p*1>)
    (<p*1> ^op_name <name>)
    (<s> ^action-operator <op>)
    -->
    (<op> ^name <name> +)
}

sp {generate-action-operator*apply*create-action-operator
    (state <s> ^name generate-action-operator)
    (<s> ^operator <o>)
    (<o> ^name create-action-operator)
    (<o> ^action-id <id>)
    (<id> ^handle <action-handle>)
    -->
    (<s> ^action-operator <op> +)
    (<op> ^action-handle <action-handle> +)
    (<op> ^first true +)
}

sp {generate-action-operator*propose*create-action-operator
    (state <s> ^name generate-action-operator)
   -{ (<s> ^action-operator <a*1>)
      (<a*1> ^name <n*1>)}
    (<s> ^action-id <id>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name create-action-operator +)
    (<o> ^action-id <id> +)
}

sp {generate-action-operator*elaborate*action-id*from*query*result
    (state <s> ^name generate-action-operator)
    (<s> ^action-handle <handle>)
    (<s> ^smem-query <s*1>)
    (<s*1> ^result <res>)
    (<res> ^handle <handle>)
    -->
    (<s> ^action-id <res> +)
}

sp {generate-action-operator*elaborate*smem-query*command-message*action
    (state <s> ^name generate-action-operator)
    (<s> ^action-handle <handle>)
    -->
    (<s> ^smem-query <q> +)
    (<q> ^cue <cue> +)
    (<q> ^depth 8 +)
    (<cue> ^handle <handle> +)
}

sp {generate-action-operator*elaborate*action-handle
    (state <s> ^name generate-action-operator)
    (<s> ^command-message <c*1>)
    (<c*1> ^action <a*1>)
    (<a*1> ^handle <handle>)
    -->
    (<s> ^action-handle <handle> +)
}

sp {generate-action-operator*elaborate*message*from*superoperator
    (state <s> ^name generate-action-operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^command-message <msg>)
    -->
    (<s> ^command-message <msg> +)
}

sp {interpret-message*apply*interpret-command*pop-segment*existing-action
    (state <s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-command)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose <p*1>)
    (<p*1> ^type action)
    -->
    (<s> ^terminate-segment true +)
}

sp {interpret-message*apply*interpret-command
    (state <s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name interpret-command)
    (<s> ^instructor-message <msg>)
    (<s> ^action-operator <op>)
    (<op> ^action-handle <action-handle>)
    -->
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type action +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^action-operator <op> +)
    (<p> ^satisfaction <s*1> +)
    (<s*1> ^action-event <a*1> +)
    (<a*1> ^type <action-handle> +)
    (<msg> ^interpreted true +)
}

sp {interpret-message*propose*interpret-command
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type command)
    (<s> ^action-operator <op>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-command +)
}

sp {generate-action-operator*elaborate*allow-substate
    (state <s> ^name generate-action-operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^name interpret-message)
    -->
    (<s> ^allow-substate true +)
}

sp {interpret-message*propose*interpret-ignore-list
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type command)
    (<msg> ^action <a*1>)
    (<a*1> ^handle ignore)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name interpret-ignore-list +)
    (<o> ^message <msg> +)
}

sp {interpret-message*propose*interpret-attend-list
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type command)
    (<msg> ^action <a*1>)
    (<a*1> ^handle attend)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name interpret-attend-list +)
    (<o> ^message <msg> +)
}

sp {interpret-message*propose*interpret-conditional-predicate*command
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
   -{ (<msg> ^action <a*2>)
      (<a*2> ^handle ignore)}
   -{ (<msg> ^interaction-status <i*1>)
      (<i*1> ^failure <f*1>)}
   -{ (<msg> ^action <a*1>)
      (<a*1> ^handle attend)}
    (<msg> ^message-type command)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^type game-learning)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name interpret-conditional-predicate +)
    (<o> ^message <msg> +)
}

sp {interpret-message*propose*generate-action-operator
    (state <s> ^name interpret-message)
    (<s> -^action-operator <op>)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)}
    (<s> ^instructor-message <msg>)
   -{ (<msg> ^action <a*2>)
      (<a*2> ^word-structure <w*2>)
      (<w*2> ^spelling whats)}
   -{ (<msg> ^action <a*1>)
      (<a*1> ^word-structure <w*1>)
      (<w*1> ^spelling |what's|)}
    (<msg> ^message-type command)
    -->
    (<s> ^operator <o> +)
    (<o> ^name generate-action-operator +)
    (<o> ^command-message <msg> +)
}

sp {interpret-message*op-no-change*apply*report-failure
    (state <s> ^superstate <s*1>)
    (<s*1> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name report-failure)
    (<s> ^superstate <ss>)
    (<ss> ^operator <o>)
    -->
    (<ss> ^operator <o> -)
}

sp {interpret-message*op-no-change*propose*report-failure
    (state <s> ^impasse no-change)
    (<s> -^allow-substate true)
    (<s> ^attribute operator)
    (<s> ^superstate <s*1>)
    (<s*1> ^name interpret-message)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<o> ^name report-failure +)
}

sp {interpret-message*apply*interpret-adjective-definition*create*segment*learn-predicate-info
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-adjective-definition)
    (<o> ^property-id <prop-id>)
    (<o> ^predicate-id <pred-id>)
    (<o> ^message <msg>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-predicate-info +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type predicate +)
    (<params> ^predicate-id <pred-id> +)
    (<params> ^property-id <prop-id> +)
}

sp {interpret-message*elaborate*interpret-adjective-definition*property
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-adjective-definition)
    (<o> ^message <m*1>)
    (<m*1> ^predicate <p*1>)
    (<p*1> ^id <prop>)
    -->
    (<o> ^property-id <prop> +)
}

sp {interpret-message*elaborate*interpret-adjective-definition*predicate-id*2
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-adjective-definition)
    (<o> ^message <m*1>)
    (<m*1> ^arg1 <a*1>)
    (<a*1> ^id <pred>)
    -->
    (<o> ^predicate-id <pred> +)
}

sp {interpret-message*elaborate*interpret-adjective-definition*predicate-id
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-adjective-definition)
    (<o> ^message <m*1>)
    (<m*1> ^arg1 <pred>)
    (<pred> -^id <i*1>)
    -->
    (<o> ^predicate-id <pred> +)
}

sp {interpret-message*propose*interpret-adjective-definition
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type adjective-definition)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-adjective-definition +)
    (<o> ^message <msg> +)
}

sp {interpret-message*apply*interpret-where-is-question*create*segment*location-question
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-where-is-question)
    (<o> ^message <msg>)
    (<o> ^object <obj>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type location-question +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^dialog-event <d*1> +)
    (<d*1> ^type explanation +)
    (<params> ^object <obj> +)
}

sp {interpret-message*elaborate*interpret-where-is-question*object
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-where-is-question)
    (<o> ^message <m*1>)
    (<m*1> ^arg1 <obj>)
    -->
    (<o> ^object <obj> +)
}

sp {interpret-message*propose*interpret-where-is-question
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type where-is-question)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-where-is-question +)
    (<o> ^message <msg> +)
}

sp {interpret-message*apply*interpret-conditional-predicate*remove*unknown-word*failure
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^predicate <p*1>)
    (<p*1> ^spelling <word>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<status> ^failure <f>)
    (<f> ^word <word>)
    (<f> ^type unknown-word)
    -->
    (<status> ^failure <f> -)
}

sp {interpret-message*apply*interpret-conditional-predicate*learn-goal-definition*terminate*segment
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<s> ^current-purpose <c*1>)
    (<c*1> ^satisfaction <s*1>)
    (<s*1> ^dialog-event <de>)
    (<de> ^originator instructor)
    (<de> ^type goal-description)
    -->
    (<s> ^terminate-segment true +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*context-links*2args*attribute-of
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
    (<msg> ^then-subclause <tc>)
    (<tc> -^arg2 <a*1>)
    (<tc> ^predicate <pred>)
    (<pred> ^item-type predicate)
    (<pred> ^handle of1)
    (<pred> ^2 <pred2>)
    (<pred2> ^2 <obj2>)
    (<tc> ^arg1 <obj>)
    (<pred2> ^handle <name>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
   -{ (<dc> ^learn-link <l*1>)
      (<l*1> ^handle <name>)}
    (<dc> ^learning-predicate <lp>)
    (<lp> ^name <name>)
    -->
    (<dc> ^learn-link <ll> +)
    (<dc> ^output-object-1 <obj> +)
    (<dc> ^input-object-2 <obj2> +)
    (<ll> ^handle <name> +)
    (<ll> ^item-type predicate +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*context-links*2args
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
    (<msg> ^then-subclause <tc>)
    (<tc> -^arg2 <a*1>)
    (<tc> ^predicate <pred>)
    (<pred> -^handle of1)
    (<pred> ^2 <obj2>)
    (<tc> ^arg1 <obj>)
    (<pred> ^handle <name>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
   -{ (<dc> ^learn-link <l*1>)
      (<l*1> ^handle <name>)}
    (<dc> ^learning-predicate <lp>)
    (<lp> ^name <name>)
    -->
    (<dc> ^learn-link <ll> +)
    (<dc> ^input-object-1 <obj> +)
    (<dc> ^input-object-2 <obj2> +)
    (<ll> ^handle <name> +)
    (<ll> ^item-type predicate +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*context-links*spelling
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
    (<msg> ^then-subclause <tc>)
    (<tc> -^arg2 <a*1>)
    (<tc> ^predicate <pred>)
    (<pred> -^2 <v*1>)
    (<tc> ^arg1 <obj>)
    (<pred> ^handle <name>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learning-predicate <lp>)
    (<lp> ^spelling <name>)
    (<lp> ^name <name2>)
    (<pred> ^property <p>)
    -->
    (<dc> ^learn-link <ll> +)
    (<dc> ^input-object-1 <obj> +)
    (<ll> ^handle <name2> +)
    (<ll> ^item-type predicate +)
    (<ll> ^property <p> +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*context-links
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
    (<msg> ^then-subclause <tc>)
    (<tc> -^arg2 <a*1>)
    (<tc> ^predicate <pred>)
    (<pred> -^2 <v*1>)
    (<tc> ^arg1 <obj>)
    (<pred> ^handle <name>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learning-predicate <lp>)
    (<lp> ^name <name>)
    (<pred> ^property <p>)
    -->
    (<dc> ^learn-link <ll> +)
    (<dc> ^input-object-1 <obj> +)
    (<ll> ^handle <name> +)
    (<ll> ^item-type predicate +)
    (<ll> ^property <p> +)
}

sp {interpret-message*apply*interpret-conditional-predicate*copy-old-link
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^learn-link <ll>)
    (<ll> ^type { << action goal failure >> <t*2> })
    -->
    (<dc> ^store-learn-link <ll> +)
    (<dc> ^learn-link <ll> -)
}

sp {interpret-message*apply*interpret-conditional-predicate*default-name*goal-demo
    (state <s> ^name interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^store-learn-link <s*1>)
    (<dc> -^learn-link <l*1>)
    (<dc> ^type game-learning)
    (<dc> ^structure <s*2>)
    (<s*2> ^goals <a>)
    (<s> ^operator <o>)
    (<o> ^message <msg>)
    (<msg> ^arg1 <arg1>)
    (<arg1> ^handle state1)
    (<arg1> ^predicates <p*1>)
    (<p*1> ^property current)
    -->
    (<dc> ^learn-link <ll> +)
    (<a> ^goal <ll> +)
    (<ll> ^handle (make-constant-symbol goal-default) +)
    (<ll> ^item-type predicate +)
    (<ll> ^predicate-structure <p> +)
    (<ll> ^type goal +)
    (<ll> ^word-structure <n> +)
    (<n> ^referent <ll> +)
    (<n> ^spelling default +)
}

sp {interpret-message*apply*interpret-conditional-predicate*default-name*failure
    (state <s> ^name interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^store-learn-link <s*1>)
    (<dc> -^learn-link <l*1>)
    (<dc> ^type game-learning)
    (<dc> ^structure <s*2>)
    (<s*2> ^failures <a>)
    (<s> ^operator <o>)
    (<o> ^message <msg>)
    (<msg> ^then-subclause <t*2>)
    (<t*2> ^action <a*1>)
    (<a*1> ^handle lose)
    -->
    (<dc> ^learn-link <ll> +)
    (<dc> ^needs-failure-setup true +)
    (<a> ^failure <ll> +)
    (<ll> ^handle (make-constant-symbol failure-default) +)
    (<ll> ^item-type predicate +)
    (<ll> ^predicate-structure <p> +)
    (<ll> ^type failure +)
    (<ll> ^word-structure <n> +)
    (<n> ^referent <ll> +)
    (<n> ^spelling default +)
}

sp {interpret-message*apply*interpret-conditional-predicate*default-name*goal
    (state <s> ^name interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^store-learn-link <s*1>)
    (<dc> -^learn-link <l*1>)
    (<dc> ^type game-learning)
    (<dc> ^structure <s*2>)
    (<s*2> ^goals <a>)
    (<s> ^operator <o>)
    (<o> ^message <msg>)
    (<msg> ^arg1 <a*1>)
    (<a*1> ^handle goal)
    -->
    (<dc> ^learn-link <ll> +)
    (<dc> ^needs-goal-setup true +)
    (<a> ^goal <ll> +)
    (<ll> ^handle (make-constant-symbol goal-default) +)
    (<ll> ^item-type predicate +)
    (<ll> ^predicate-structure <p> +)
    (<ll> ^type goal +)
    (<ll> ^word-structure <n> +)
    (<n> ^referent <ll> +)
    (<n> ^spelling default +)
}

sp {interpret-message*apply*interpret-conditional-predicate*default-name*then-clause*two*action
    (state <s> ^name interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^store-learn-link <s*1>)
    (<dc> -^learn-link <l*1>)
    (<dc> ^type game-learning)
    (<dc> ^structure <s*2>)
    (<s*2> ^actions <a>)
    (<s> ^operator <o>)
    (<o> ^message <msg>)
   -{ (<msg> ^then-subclause <t*2>)
      (<t*2> ^action <a*2>)
      (<a*2> ^handle { << avoid consider prefer >> <h*2> })}
   -{ (<msg> ^action <a*1>)
      (<a*1> ^handle { << avoid consider prefer >> <h*1> })}
    (<msg> ^then-subclause <ts1>)
    (<ts1> ^subclause <s*4>)
    (<ts1> ^subclause <s*3>)
    (<s*3> ^action <act>)
    (<act> -^handle { << has is1 lose >> <h*3> })
    (<s*4> ^action { > <act> <a*3> })
    (<s*4> ^action <act2>)
    -->
    (<dc> ^learn-link <ll> +)
    (<a> ^action <ll> +)
    (<ll> ^handle (make-constant-symbol action-default) +)
    (<ll> ^item-type predicate +)
    (<ll> ^predicate-structure <p> +)
    (<ll> ^type action +)
    (<ll> ^word-structure <n> +)
    (<n> ^referent <ll> +)
    (<n> ^spelling default +)
}

sp {interpret-message*apply*interpret-conditional-predicate*default-name*then-cluase
    (state <s> ^name interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^store-learn-link <s*1>)
    (<dc> -^learn-link <l*1>)
    (<dc> ^type game-learning)
    (<dc> ^structure <s*2>)
    (<s*2> ^actions <a>)
    (<s> ^operator <o>)
    (<o> ^message <msg>)
   -{ (<msg> ^then-subclause <t*3>)
      (<t*3> ^action <a*2>)
      (<a*2> ^handle { << avoid consider prefer >> <h*2> })}
   -{ (<msg> ^action <a*1>)
      (<a*1> ^handle { << avoid consider prefer >> <h*1> })}
    (<msg> ^then-subclause <t*2>)
    (<t*2> ^action <act>)
    (<act> -^handle { << has is1 lose >> <h*3> })
    -->
    (<dc> ^learn-link <ll> +)
    (<a> ^action <ll> +)
    (<ll> ^handle (make-constant-symbol action-default) +)
    (<ll> ^item-type predicate +)
    (<ll> ^predicate-structure <p> +)
    (<ll> ^type action +)
    (<ll> ^word-structure <n> +)
    (<n> ^referent <ll> +)
    (<n> ^spelling default +)
}

sp {interpret-message*apply*interpret-conditional-predicate*default-name*heuristic*then
    (state <s> ^name interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^store-learn-link <s*1>)
    (<dc> -^learn-link <l*1>)
    (<dc> ^type game-learning)
    (<s> ^operator <o>)
    (<o> ^message <msg>)
    (<msg> ^then-subclause <t*2>)
    (<t*2> ^action <a*1>)
    (<a*1> ^handle { << avoid consider prefer >> <h*1> })
    -->
    (<dc> ^learn-link <ll> +)
    (<ll> ^handle (make-constant-symbol heuristic-default) +)
    (<ll> ^item-type predicate +)
    (<ll> ^ntype heuristic +)
}

sp {interpret-message*apply*interpret-conditional-predicate*default-name*heuristic
    (state <s> ^name interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^store-learn-link <s*1>)
    (<dc> -^learn-link <l*1>)
    (<dc> ^type game-learning)
    (<s> ^operator <o>)
    (<o> ^message <msg>)
    (<msg> ^action <a*1>)
    (<a*1> ^handle { << avoid consider prefer >> <h*1> })
    -->
    (<dc> ^learn-link <ll> +)
    (<ll> ^handle (make-constant-symbol heuristic-default) +)
    (<ll> ^item-type predicate +)
    (<ll> ^ntype heuristic +)
}

sp {interpret-message*apply*interpret-conditional-predicate*default-name
    (state <s> ^name interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^store-learn-link <s*1>)
    (<dc> -^learn-link <l*1>)
    (<dc> ^type game-learning)
    (<dc> ^structure <s*2>)
    (<s*2> ^actions <a>)
    (<s> ^operator <o>)
    (<o> ^message <msg>)
   -{ (<msg> ^then-subclause <t*2>)
      (<t*2> ^action <a*3>)
      (<a*3> ^handle { << avoid consider prefer >> <h*2> })}
   -{ (<msg> ^action <a*2>)
      (<a*2> ^handle { << avoid has consider prefer >> <h*1> })}
    (<msg> ^action <a*1>)
    -->
    (<dc> ^learn-link <ll> +)
    (<a> ^action <ll> +)
    (<ll> ^handle (make-constant-symbol action-default) +)
    (<ll> ^item-type predicate +)
    (<ll> ^predicate-structure <p> +)
    (<ll> ^type action +)
    (<ll> ^word-structure <n> +)
    (<n> ^referent <ll> +)
    (<n> ^spelling default +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-action-predicate-definition*setup-failure
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-action-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
    (<msg> ^then-subclause <t*3>)
    (<t*3> ^action <a*1>)
    (<a*1> ^handle lose)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^needs-failure-setup <n*1>)
    (<dc> ^learn-link <l*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <changes>)
    -->
    (<dc> ^parsed-failure <msg> +)
    (<msg> ^interpreted true +)
    (<changes> ^outgoing-message <msg2> +)
    (<msg2> ^type simple-message +)
    (<msg2> ^message-type setup-failure +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-failure-predicate
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-action-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
    (<msg> ^then-subclause <t*2>)
    (<t*2> ^action <a*1>)
    (<a*1> ^handle lose)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^needs-failure-setup <n*1>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <l*1>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-failure-predicate +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*2> +)
    (<l*2> ^type game +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-heuristic-predicate-definition
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-action-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
   -{ (<msg> ^then-subclause <t*1>)
      (<t*1> ^action <a*1>)
      (<a*1> ^handle lose)}
    (<msg> ^action <a*2>)
    (<a*2> ^handle { << avoid consider prefer >> <h*1> })
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-heuristic-predicate +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-heuristic-predicate-definition*then
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-action-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
   -{ (<msg> ^then-subclause <t*1>)
      (<t*1> ^action <a*1>)
      (<a*1> ^handle lose)}
    (<msg> ^then-subclause <t*2>)
    (<t*2> ^action <a*2>)
    (<a*2> ^handle { << avoid consider prefer >> <h*1> })
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-heuristic-predicate +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-start-depth
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-action-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
   -{ (<msg> ^then-subclause <t*2>)
      (<t*2> ^action <a*4>)
      (<a*4> ^handle { << avoid consider prefer >> <h*1> })}
   -{ (<msg> ^then-subclause <t*1>)
      (<t*1> ^action <a*2>)
      (<a*2> ^handle lose)}
    (<msg> ^agent <a*1>)
    (<a*1> ^handle solution1)
    (<msg> ^action <a*3>)
    (<a*3> ^handle has)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-start-depth +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-action-predicate-definition
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-action-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
   -{ (<msg> ^then-subclause <t*2>)
      (<t*2> ^action <a*3>)
      (<a*3> ^handle { << avoid consider prefer >> <h*2> })}
   -{ (<msg> ^action <a*2>)
      (<a*2> ^handle { << avoid has consider prefer >> <h*1> })}
   -{ (<msg> ^then-subclause <t*1>)
      (<t*1> ^action <a*1>)
      (<a*1> ^handle lose)}
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-action-predicate +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-conditional-predicate*create*segment*learn-property-predicate
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-predicate-definition)
    (<o> ^name interpret-conditional-predicate)
    (<o> ^message <msg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    -->
    (<status> ^performed <p*1> +)
    (<p*1> ^dialog-event <de> +)
    (<de> ^type process-unknown-word +)
    (<de> ^originator instructor +)
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-property-predicate +)
    (<p> ^parameters <p*2> +)
    (<p*2> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*elaborate*interpret-conditional-predicate*purpose*learn-predicate-definition
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-conditional-predicate)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^learning-predicate <l*1>)
    -->
    (<o> ^purpose learn-predicate-definition +)
}

sp {interpret-message*elaborate*interpret-conditional-predicate*purpose*learn-action-predicate-definition
    (state <s> ^name interpret-message)
   -{ (<s> ^top-state <t*2>)
      (<t*2> ^dialog-context <d*2>)
      (<d*2> ^learning-predicate <l*1>)}
    (<s> ^operator <o> +)
    (<o> ^name interpret-conditional-predicate)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^type game-learning)
    -->
    (<o> ^purpose learn-action-predicate-definition +)
}

sp {interpret-message*propose*interpret-conditional-predicate
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
    (<msg> ^message-type conditional)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^type game-learning)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-conditional-predicate +)
    (<o> ^message <msg> +)
}

sp {interpret-message*apply*interpret-done-teaching*create*segment*finished-game-teaching
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-done-teaching)
    (<o> ^message <msg>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type finished-game-teaching +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*propose*interpret-done-teaching
    (state <s> ^name interpret-message)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^learn-link <l*1>)}
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
   -{ (<msg> ^interaction-status <i*1>)
      (<i*1> ^failure <f*1>)}
    (<msg> ^message-type finished)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-done-teaching +)
    (<o> ^message <msg> +)
}

sp {interpret-message*apply*interpret-object-description*remove*unknown-word*failure
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-object-description)
    (<o> ^predicate <p*1>)
    (<p*1> ^spelling <word>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<status> ^failure <f>)
    (<f> ^word <word>)
    (<f> ^type unknown-word)
    -->
    (<status> ^failure <f> -)
}

sp {interpret-message*apply*interpret-object-description*learn-goal-definition*terminate*segment
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-goal-definition)
    (<o> ^name interpret-object-description)
    (<s> ^current-purpose <c*1>)
    (<c*1> ^satisfaction <s*1>)
    (<s*1> ^dialog-event <de>)
    (<de> ^originator instructor)
    (<de> ^type goal-description)
    -->
    (<s> ^terminate-segment true +)
}

sp {interpret-message*apply*interpret-object-description*learn-goal-definition*elaborate*goal-predicate*relation
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-goal-definition)
    (<o> ^name interpret-object-description)
    (<o> ^subclause <sub>)
    (<sub> ^arg1 <obj1>)
    (<s> ^new-segment-info <n*1>)
    (<n*1> ^purpose <p*1>)
    (<p*1> ^parameters <params>)
    (<sub> ^{ << arg2 predicate >> <a*1> } <rel>)
    (<rel> ^2 <obj2>)
    (<rel> ^handle <pred-handle>)
    -->
    (<params> ^goal-predicate <pred> +)
    (<pred> ^type relation +)
    (<pred> ^handle <pred-handle> +)
    (<pred> ^1 <obj1> +)
    (<pred> ^2 <obj2> +)
}

sp {interpret-message*apply*interpret-object-description*learn-goal-definition*elaborate*goal-predicate*state
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-goal-definition)
    (<o> ^name interpret-object-description)
    (<o> ^subclause <sub>)
   -{ (<sub> ^predicate <p*3>)
      (<p*3> ^2 <any>)}
    (<sub> ^arg1 <obj>)
    (<sub> ^predicate <p*2>)
    (<s> ^new-segment-info <n*1>)
    (<p*2> ^handle <pred-handle>)
    (<n*1> ^purpose <p*1>)
    (<p*1> ^parameters <params>)
    -->
    (<params> ^goal-predicate <pred> +)
    (<pred> ^type state +)
    (<pred> ^handle <pred-handle> +)
    (<pred> ^1 <obj> +)
}

sp {interpret-message*apply*interpret-object-description*learn-goal-definition*elaborate*action*segment
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-goal-definition)
    (<o> ^name interpret-object-description)
    (<s> ^current-purpose <c*1>)
    (<s> ^new-segment-info <n*1>)
    (<c*1> ^parameters <p*1>)
    (<n*1> ^purpose <p*2>)
    (<p*2> ^parameters <params>)
    (<p*1> ^action <action>)
    -->
    (<params> ^action <action> +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-goal-definition
    (state <s> ^name interpret-message)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^type game-learning)}
    (<s> ^operator <o>)
    (<o> ^purpose learn-goal-definition)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-goal-definition +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type goal +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-property-predicate
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<msg> ^arg1 <a*1>)
    (<a*1> ^predicates <p*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learning-predicate <lp>)
    (<lp> ^name <name>)
    (<p*1> ^property <name>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-property-predicate +)
    (<p> ^parameters <p*2> +)
    (<p*2> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-goal-predicate*setup
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-goal-definition)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<s> ^top-state <t*2>)
    (<t*2> ^dialog-context <dc>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <l*1>)
    (<dc> ^needs-goal-setup <n*1>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <changes>)
    -->
    (<dc> ^parsed-goal <msg> +)
    (<msg> ^interpreted true +)
    (<changes> ^outgoing-message <msg2> +)
    (<msg2> ^type simple-message +)
    (<msg2> ^message-type setup-goal +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-goal-predicate
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose learn-goal-definition)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <dc>)
    (<dc> -^needs-goal-setup <n*1>)
    (<dc> ^type game-learning)
    (<dc> ^learn-link <l*1>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-goal-predicate +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*2> +)
    (<l*2> ^type game +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-goal-final-state
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<msg> ^predicate <p*1>)
    (<p*1> ^handle final)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^type game-learning)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-goal-final-state +)
    (<p> ^parameters <p*2> +)
    (<p*2> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-goal-initiate-state
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<msg> ^predicate <p*1>)
    (<p*1> ^handle initial)
    (<s> ^top-state <t*1>)
    (<t*1> ^dialog-context <d*1>)
    (<d*1> ^type game-learning)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-goal-initial-state +)
    (<p> ^parameters <p*2> +)
    (<p*2> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-failure-name
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<msg> ^arg1 <a*1>)
    (<a*1> ^2 <q>)
    (<q> ^handle name1)
    (<q> ^2 <v*1>)
    (<v*1> ^{ << failure handle >> <a*2> } failure)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-failure-name +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game-name +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-goal-name
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<msg> ^arg1 <a*1>)
    (<a*1> ^2 <q>)
    (<q> ^handle name1)
    (<q> ^2 <v*1>)
    (<v*1> ^{ << goal handle >> <a*2> } goal)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-goal-name +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game-name +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-action-name
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<msg> ^arg1 <a*1>)
    (<a*1> ^2 <q>)
    (<q> ^handle name1)
    (<q> ^2 <v*1>)
    (<v*1> ^{ << action handle >> <a*2> } action)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-action-name +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game-name +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-puzzle-name
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<msg> ^arg1 <a*1>)
    (<a*1> ^2 <q>)
    (<q> ^handle name1)
    (<q> ^2 <v*1>)
    (<v*1> ^{ << game handle >> <a*2> } puzzle1)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-puzzle-name +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-game-name
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<msg> ^arg1 <a*1>)
    (<a*1> ^2 <q>)
    (<q> ^handle name1)
    (<q> ^2 <v*1>)
    (<v*1> ^handle game1)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-game-name +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*learn-teacher-name
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<msg> ^arg1 <q>)
    (<q> ^handle name1)
    (<msg> ^predicate <p>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type learn-teacher-name +)
    (<p> ^parameters <p*1> +)
    (<p*1> ^message <msg> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type game +)
}

sp {interpret-message*apply*interpret-object-description*teach-location*terminate-segment
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose teach-location)
    (<o> ^name interpret-object-description)
    (<s> ^current-purpose <c*1>)
    (<c*1> ^satisfaction <s*1>)
    (<s*1> ^dialog-event <de>)
    (<de> ^originator instructor)
    (<de> ^type location-description)
    -->
    (<s> ^terminate-segment true +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*teach-location
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose teach-location)
    (<o> ^name interpret-object-description)
    (<o> ^robot <robot>)
    (<o> ^message <msg>)
    (<o> ^relation <r*1>)
    (<r*1> ^2 <loc>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type teach-location +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <sat> +)
    (<sat> ^learning-event <l*1> +)
    (<l*1> ^type location +)
    (<params> ^location-id <loc> +)
}

sp {interpret-message*apply*interpret-object-description*task-completed*terminate-segment
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose task-completed)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^context <c*1>)
    (<c*1> ^parameters <p*1>)
    (<p*1> ^action-operator <a>)
    -->
    (<s> ^terminate-segment true +)
    (<s> ^mark-interpreted <msg> +)
    (<s> ^new-segment-info <info> +)
    (<info> ^purpose <p> +)
    (<info> ^originator agent +)
    (<p> ^type retrospective-learning +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <s*3> +)
    (<s*3> ^learning-event <l*1> +)
    (<l*1> ^type retrospective +)
    (<params> ^action-context <a> +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*teach-relation
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose teach-relation)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<o> ^relation <rel>)
    (<o> ^object <obj>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type teach-relation +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <s*1> +)
    (<s*1> ^learning-event <l*1> +)
    (<l*1> ^type relation +)
    (<params> ^object <obj> +)
    (<params> ^relation <rel> +)
}

sp {interpret-message*apply*interpret-object-description*copy*predicates
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose train-on-object)
    (<o> ^name interpret-object-description)
    (<o> ^predicate <pred>)
    (<s> ^new-segment-info <n*1>)
    (<n*1> ^purpose <p*1>)
    (<p*1> ^parameters <params>)
    -->
    (<params> ^predicate <pred> +)
}

sp {interpret-message*apply*interpret-object-description*create*segment*train-on-object
    (state <s> ^name interpret-message)
    (<s> ^operator <o>)
    (<o> ^purpose train-on-object)
    (<o> ^name interpret-object-description)
    (<o> ^message <msg>)
    (<o> ^object <obj>)
    -->
    (<s> ^new-segment-info <info> +)
    (<s> ^mark-interpreted <msg> +)
    (<info> ^purpose <p> +)
    (<info> ^originator instructor +)
    (<p> ^type train-on-object +)
    (<p> ^parameters <params> +)
    (<p> ^satisfaction <s*1> +)
    (<s*1> ^learning-event <l*1> +)
    (<l*1> ^type object +)
    (<params> ^object <obj> +)
}

sp {interpret-message*elaborate*interpret-object-description*purpose*teach-relation
    (state <s> ^name interpret-message)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^type game-learning)}
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^relation <rel>)
    (<o> ^object <obj>)
    -->
    (<o> ^purpose teach-relation +)
}

sp {interpret-message*elaborate*interpret-object-description*purpose*teach-location
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^robot <rob>)
    (<o> ^relation <rel>)
    -->
    (<o> ^purpose teach-location +)
}

sp {interpret-message*elaborate*interpret-object-description*purpose*task-completed
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^predicate <p*1>)
    (<p*1> ^handle task-completed)
    (<o> ^robot <rob>)
    -->
    (<o> ^purpose task-completed +)
}

sp {interpret-message*elaborate*interpret-object-description*purpose*learn-goal-definition
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^subclause <sub>)
    (<o> ^goal <goal>)
    -->
    (<o> ^purpose learn-goal-definition +)
}

sp {interpret-message*elaborate*interpret-object-description*purpose*train-on-object
    (state <s> ^name interpret-message)
   -{ (<s> ^top-state <t*1>)
      (<t*1> ^dialog-context <d*1>)
      (<d*1> ^type game-learning)}
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^predicate <pred>)
    (<o> ^object <obj>)
    -->
    (<o> ^purpose train-on-object +)
}

sp {interpret-message*elaborate*interpret-object-description*subclause*level*2
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^subclause <s*1>)
    (<s*1> ^subclause <sub>)
    -->
    (<o> ^subclause <sub> +)
}

sp {interpret-message*elaborate*interpret-object-description*subclause
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^message <m*1>)
    (<m*1> ^subclause <sub>)
    -->
    (<o> ^subclause <sub> +)
}

sp {interpret-message*elaborate*interpret-object-description*arg2
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^message <m*1>)
    (<m*1> ^arg2 <rel>)
    -->
    (<o> ^relation <rel> +)
}

sp {interpret-message*elaborate*interpret-object-description*relation
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^message <m*1>)
    (<m*1> ^{ << relation predicate >> <a*1> } <rel>)
   -{ (<rel> ^property <p*1>)
      (<p*1> ^handle { << color shape size >> <h*1> })}
    -->
    (<o> ^relation <rel> +)
}

sp {interpret-message*elaborate*interpret-object-description*predicate
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^message <m*1>)
    (<m*1> ^predicate <pred>)
    -->
    (<o> ^predicate <pred> +)
}

sp {interpret-message*elaborate*interpret-object-description*object
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^message <m*1>)
    (<m*1> ^arg1 <obj>)
    (<o> -^robot <obj>)
    (<o> -^goal <obj>)
    (<obj> ^item-type object)
    -->
    (<o> ^object <obj> +)
}

sp {interpret-message*elaborate*interpret-object-description*robot
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^message <m*1>)
    (<m*1> ^arg1 <obj>)
    (<obj> ^handle rosie)
    -->
    (<o> ^robot <obj> +)
}

sp {interpret-message*elaborate*interpret-object-description*goal
    (state <s> ^name interpret-message)
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description)
    (<o> ^message <m*1>)
    (<m*1> ^arg1 <obj>)
    (<obj> ^handle goal)
    -->
    (<o> ^goal <obj> +)
}

sp {interpret-message*propose*interpret-object-description
    (state <s> ^name interpret-message)
    (<s> ^instructor-message <msg>)
    (<msg> -^interpreted true)
   -{ (<msg> ^interaction-status <i*1>)
      (<i*1> ^failure <f*1>)}
    (<msg> ^message-type object-description)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-object-description +)
    (<o> ^message <msg> +)
}

sp {interpret-message*apply*complete-interpret-message*copy*outgoing-message
    (state <s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-message)
    (<s> ^outgoing-message <msg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^outgoing-message <msg> +)
}

sp {interpret-message*apply*complete-interpret-message*clear-interaction-stack
    (state <s> ^clear-interaction-stack true)
    (<s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^clear-interaction-stack true +)
}

sp {interpret-message*apply*complete-interpret-message*terminate-segment
    (state <s> ^terminate-segment true)
    (<s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^terminate-segment true +)
}

sp {interpret-message*apply*complete-interpret-message*expected*message*terminate
    (state <s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-message)
    (<s> ^current-purpose <c*1>)
    (<s> ^instructor-message <i*1>)
    (<i*1> ^message-type <type>)
    (<c*1> ^satisfaction <s*1>)
    (<s*1> ^dialog-event <de>)
    (<de> ^originator instructor)
    (<de> ^type <type>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*2>)
    (<i*2> ^changes <c>)
    -->
    (<c> ^terminate-segment true +)
}

sp {interpret-message*apply*complete-interpret-message*copy*modify-segment-info
    (state <s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-message)
    (<s> ^modify-segment-info <info>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^modify-segment-info <info> +)
}

sp {interpret-message*apply*complete-interpret-message*copy*new-segment-info
    (state <s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-message)
    (<s> ^new-segment-info <info>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    -->
    (<c> ^new-segment-info <info> +)
}

sp {interpret-message*apply*complete-interpret-message*delete*nl-il
    (state <s> ^name interpret-message)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interpret-message)
    (<s> ^instructor-message <msg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<status> ^new-message <msg>)
    -->
    (<status> ^new-message <msg> -)
}

sp {interpret-message*propose*complete-interpret-message
    (state <s> ^name interpret-message)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-interpret-message +)
}

sp {interpret-message*elaborate*current-purpose
    (state <s> ^name interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose <p>)
    -->
    (<s> ^current-purpose <p> +)
}

sp {interpret-message*elaborate*message-context
    (state <s> ^name interpret-message)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^context <context>)
    -->
    (<s> ^message-context <context> +)
}

sp {interpret-message*apply*any-op*mark*message*interpreted
    (state <s> ^name interpret-message)
    (<s> ^mark-interpreted <msg>)
    (<s> ^operator <o>)
    -->
    (<msg> ^interpreted true +)
}

sp {interpret-message*elaborate*instructor-message*yes-message
    (state <s> ^name interpret-message)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^message <msg>)
    (<msg> ^message-type yes)
    -->
    (<s> ^instructor-message <msg> +)
}

sp {interpret-message*elaborate*instructor-message
    (state <s> ^name interpret-message)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^message <msg>)
    (<msg> -^message-type yes)
    -->
    (<s> ^instructor-message <msg> +)
}

sp {interaction*apply*pop-segment*remove*remembered*info
    (state <s> ^name interaction)
    (<s> ^operator <o>)
    (<o> ^name pop-segment)
    (<o> ^segment <s*1>)
    (<s*1> ^info <i*1>)
    (<i*1> ^remembered <rem>)
    (<rem> ^predicate <pred>)
    (<rem> ^property <prop>)
    (<rem> ^object <o*1>)
    (<o*1> ^predicates <preds>)
    (<preds> ^<prop> <pred>)
    -->
    (<preds> ^<prop> <pred> -)
}

sp {interaction*apply*pop-segment*remove*clear-interaction-stack
    (state <s> ^name interaction)
    (<s> ^operator <o>)
    (<o> ^name pop-segment)
    (<o> ^segment <s*1>)
    (<s*1> ^next <n*1>)
    (<n*1> ^purpose none)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<c> ^clear-interaction-stack true)
    -->
    (<c> ^clear-interaction-stack true -)
}

sp {interaction*apply*pop-segment*remove*terminate-segment
    (state <s> ^change-type terminate-segment)
    (<s> ^name interaction)
    (<s> ^operator <o*1>)
    (<o*1> ^name pop-segment)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<c> ^terminate-segment <any>)
    -->
    (<c> ^terminate-segment <any> -)
}

sp {interaction*apply*pop-segment
    (state <s> ^name interaction)
    (<s> ^operator <o>)
    (<o> ^name pop-segment)
    (<o> ^segment <top-seg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <stack>)
    (<stack> ^segment <top-seg>)
    (<top-seg> ^next <next-seg>)
    -->
    (<stack> ^segment <top-seg> -)
    (<stack> ^segment <next-seg> +)
    (<next-seg> ^prev <top-seg> -)
}

sp {push-segment*apply*create-segment*copy*context
    (state <s> ^name push-segment)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-segment)
    (<s> ^segment <seg>)
    (<seg> ^next <n*1>)
    (<n*1> ^purpose <p>)
    -->
    (<seg> ^context <p> +)
}

sp {push-segment*apply*create-segment*originator
    (state <s> ^name push-segment)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-segment)
    (<s> ^new-segment-info <n*1>)
    (<n*1> ^originator <orig>)
    (<s> ^segment <seg>)
    -->
    (<seg> ^originator <orig> +)
}

sp {push-segment*apply*create-segment*purpose*parameters
    (state <s> ^name push-segment)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-segment)
    (<s> ^new-segment-info <n*1>)
    (<n*1> ^purpose <p>)
    (<p> -^parameters <p*1>)
    -->
    (<p> ^parameters <params> +)
}

sp {push-segment*apply*create-segment*purpose
    (state <s> ^name push-segment)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-segment)
    (<s> ^new-segment-info <n*1>)
    (<n*1> ^purpose <p>)
    (<s> ^segment <seg>)
    -->
    (<seg> ^purpose <p> +)
}

sp {push-segment*apply*create-segment*create*root
    (state <s> ^name push-segment)
    (<s> ^operator <o*1>)
    (<o*1> ^name create-segment)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <prev-seg>)
    (<prev-seg> ^counter <count>)
    (<prev-seg> ^id <id>)
    -->
    (<s> ^segment <seg> +)
    (<seg> ^id (+ (* <id> 100) <count>) +)
    (<seg> ^counter 1 +)
    (<seg> ^next <prev-seg> +)
    (<seg> ^info <info> +)
}

sp {push-segment*propose*create-segment
    (state <s> ^name push-segment)
   -{ (<s> ^segment <s*1>)
      (<s*1> ^purpose <p*2>)}
    (<s> ^new-segment-info <n*1>)
    (<n*1> ^purpose <p*1>)
    (<p*1> ^type <t*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name create-segment +)
}

sp {push-segment*increment*counter
    (state <s> ^name push-segment)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-push-segment)
    (<s> ^segment <seg>)
    (<seg> ^purpose <p*1>)
    (<p*1> ^type action-command)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <prev>)
    (<prev> ^counter <count>)
    -->
    (<prev> ^counter <count> -)
    (<prev> ^counter (+ <count> 1) +)
}

sp {push-segment*apply*complete-push-segment*remove*new-segment-info
    (state <s> ^name push-segment)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-push-segment)
    (<s> ^new-segment-info <info>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <c>)
    (<c> ^new-segment-info <info>)
    -->
    (<c> ^new-segment-info <info> -)
}

sp {push-segment*apply*complete-push-segment*push-segment
    (state <s> ^name push-segment)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-push-segment)
    (<s> ^segment <seg>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <stack>)
    (<stack> ^segment <prev-seg>)
    (<s> ^epmem <e*1>)
    (<e*1> ^present-id <epmem-id>)
    -->
    (<stack> ^segment <prev-seg> -)
    (<stack> ^segment <seg> +)
    (<seg> ^epmem-id <epmem-id> +)
    (<prev-seg> ^prev <seg> +)
}

sp {push-segment*propose*complete-push-segment
    (state <s> ^name push-segment)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-push-segment +)
}

sp {push-segment*elaborate*new-segment-info
    (state <s> ^name push-segment)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^new-segment-info <info>)
    (<info> ^purpose <p>)
    -->
    (<s> ^new-segment-info <info> +)
}

sp {interaction*apply*complete-interaction*clear*changes
    (state <s> ^name interaction)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interaction)
    (<s> ^change-type <type>)
    (<s> ^change-info <info>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^changes <changes>)
    (<changes> ^<type> <info>)
    -->
    (<changes> ^<type> <info> -)
}

sp {interaction*apply*complete-interaction*clear*status
    (state <s> ^name interaction)
    (<s> ^operator <o*1>)
    (<o*1> ^name complete-interaction)
    (<s> ^status-type <type>)
    (<s> ^status-info <info>)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^status <status>)
    (<status> ^<type> <info>)
    -->
    (<status> ^<type> <info> -)
}

sp {interaction*propose*complete-interaction
    (state <s> ^name interaction)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> <)
    (<o> ^name complete-interaction +)
}

sp {interaction*elaborate*current-segment
    (state <s> ^name interaction)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <seg>)
    -->
    (<s> ^current-segment <seg> +)
}

sp {interaction*elaborate*change*info
    (state <s> ^name interaction)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^change-type <type>)
    (<o> ^change-info <change>)
    -->
    (<s> ^change-info <change> +)
    (<s> ^change-type <type> +)
}

sp {interaction*elaborate*status*info
    (state <s> ^name interaction)
    (<s> ^superstate <s*1>)
    (<s*1> ^operator <o>)
    (<o> ^status-type <type>)
    (<o> ^status-info <info>)
    -->
    (<s> ^status-info <info> +)
    (<s> ^status-type <type> +)
}

sp {interaction*propose*performed-event
    (state <s> ^status-type performed)
    (<s> ^name interaction)
    (<s> ^status-info <event>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name performed-event +)
    (<o> ^event <event> +)
}

sp {interaction*propose*modify-segment
    (state <s> ^change-type modify-segment-info)
    (<s> ^name interaction)
    (<s> ^change-info <info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name modify-segment +)
    (<o> ^modify-segment-info <info> +)
}

sp {interaction*propose*pop-segment*clear-stack
    (state <s> ^change-type clear-interaction-stack)
    (<s> ^name interaction)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <seg>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name pop-segment +)
    (<o> ^segment <seg> +)
}

sp {interaction*propose*pop-segment
    (state <s> ^change-type terminate-segment)
    (<s> ^name interaction)
    (<s> ^top-state <t*1>)
    (<t*1> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <seg>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name pop-segment +)
    (<o> ^segment <seg> +)
}

sp {interaction*propose*push-segment
    (state <s> ^change-type new-segment-info)
    (<s> ^name interaction)
    (<s> ^change-info <info>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name push-segment +)
    (<o> ^new-segment-info <info> +)
}

sp {interaction*propose*send-message
    (state <s> ^change-type outgoing-message)
    (<s> ^name interaction)
    (<s> ^change-info <msg>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name send-message +)
    (<o> ^message <msg> +)
}

sp {interaction*propose*interpret-failure
    (state <s> ^status-type failure)
    (<s> ^name interaction)
    (<s> ^status-info <failure>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name interpret-failure +)
    (<o> ^failure <failure> +)
}

sp {interaction*propose*interpret-message
    (state <s> ^status-type new-message)
    (<s> ^name interaction)
    (<s> ^status-info <msg>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name interpret-message +)
    (<o> ^message <msg> +)
}

sp {interaction*better-preferences*new-segment-info
    (state <s> ^top-state <s>)
    (<s> ^operator <o2> +)
    (<o2> ^name interaction)
    (<s> ^operator <o1> +)
    (<o1> ^change-type new-segment-info)
    (<o1> ^name interaction)
    (<o2> ^<type> { << modify-segment-info >> <t*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {interaction*better-preferences*clear-interaction-stack
    (state <s> ^top-state <s>)
    (<s> ^operator <o2> +)
    (<o2> ^name interaction)
    (<s> ^operator <o1> +)
    (<o1> ^change-type terminate-segment)
    (<o1> ^name interaction)
    (<o2>
          ^<type> { << new-segment-info modify-segment-info performed >> <t*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {interaction*better-preferences*performed*process-sentence
    (state <s> ^top-state <s>)
    (<s> ^operator <o2> +)
   -{ (<o2> ^status-info <s*2>)
      (<s*2> ^dialog-event <d*2>)
      (<d*2> ^type process-sentence)}
    (<o2> ^status-type performed)
    (<o2> ^name interaction)
    (<s> ^operator <o1> +)
    (<o1> ^status-type performed)
    (<o1> ^name interaction)
    (<o1> ^status-info <s*1>)
    (<s*1> ^dialog-event <d*1>)
    (<d*1> ^type process-sentence)
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {interaction*better-preferences*performed
    (state <s> ^top-state <s>)
    (<s> ^operator <o2> +)
    (<o2> ^name interaction)
    (<s> ^operator <o1> +)
    (<o1> ^status-type performed)
    (<o1> ^name interaction)
    (<o2>
          ^<type> { << clear-interaction-stack modify-segment-info new-segment-info >> <t*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {interaction*better-preferences*outgoing-message
    (state <s> ^top-state <s>)
    (<s> ^operator <o2> +)
    (<o2> ^name interaction)
    (<s> ^operator <o1> +)
    (<o1> ^change-type outgoing-message)
    (<o1> ^name interaction)
    (<o2>
          ^<type> { << performed clear-interaction-stack terminate-segment modify-segment-info new-segment-info >> <t*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {interaction*better-preferences*new-message
    (state <s> ^top-state <s>)
    (<s> ^operator <o2> +)
    (<o2> ^name interaction)
    (<s> ^operator <o1> +)
    (<o1> ^status-type new-message)
    (<o1> ^name interaction)
    (<o2>
          ^<type> { << outgoing-message performed clear-interaction-stack terminate-segment modify-segment-info new-segment-info >> <t*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {interaction*better-preferences*failure
    (state <s> ^top-state <s>)
    (<s> ^operator <o2> +)
    (<o2> ^name interaction)
    (<s> ^operator <o1> +)
    (<o1> ^status-type failure)
    (<o1> ^name interaction)
    (<o2>
          ^<type> { << new-message outgoing-message performed clear-interaction-stack terminate-segment modify-segment-info new-segment-info >> <t*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {anystate*prefer*others*over*wait
    (state <s> ^operator <o2> +)
    (<o2> ^name wait)
    (<s> ^operator <o1> +)
    (<o1> ^name { <> wait <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {state-no-change*propose*wait
    (state <s> ^choices none)
   -{ (<s> ^operator <o*1>)
      (<o*1> ^name wait)}
    (<s> ^attribute state)
    -->
    (<s> ^operator <o> +)
    (<o> ^name wait +)
}

sp {non-atomic*propose*wait
    (state <s> ^allow-wait true)
   -{ (<s> ^operator <o*1>)
      (<o*1> ^name wait)}
    (<s> ^choices none)
    -->
    (<s> ^operator <q> +)
    (<q> ^name wait +)
}

sp {top-state*apply*init-agent*create*interaction-stack
    (state <s> ^top-state <s>)
    (<s> ^operator <o*1>)
    (<o*1> ^name init-agent)
    -->
    (<s> ^interaction <int> +)
    (<int> ^stack <stack> +)
    (<int> ^status <status> +)
    (<int> ^changes <changes> +)
    (<stack> ^segment <seg> +)
    (<stack> ^segments <s*1> +)
    (<s*1> ^segment <seg> +)
    (<seg> ^id 10 +)
    (<seg> ^purpose none +)
    (<seg> ^counter 1 +)
}

sp {top-state*apply*init-agent*create*name
    (state <s> ^top-state <s>)
    (<s> ^operator <o*1>)
    (<o*1> ^name init-agent)
    -->
    (<s> ^name rosie +)
}

sp {anystate*apply*smem-retrieve-lti*clear*smem*command
    (state <s> ^operator <o>)
    (<o> ^name smem-retrieve-lti)
    (<o> ^retrieve-info <r*2>)
    (<r*2> ^identifier <lti>)
    (<s> ^smem <s*2>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<s*2> ^command <cmd>)
    (<r*1> ^{ << success failure >> <a*1> } <lti>)
    (<cmd> ^<att> <val>)
    -->
    (<cmd> ^<att> <val> -)
}

sp {anystate*apply*smem-retrieve-lti*mark*retrieved
    (state <s> ^operator <o>)
    (<o> ^name smem-retrieve-lti)
    (<o> ^retrieve-info <ret>)
    (<ret> ^identifier <lti>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^{ << success failure >> <a*1> } <lti>)
    -->
    (<ret> ^retrieved true +)
}

sp {anystate*apply*smem-retrieve-lti*copy*retrieve*params
    (state <s> ^operator <o>)
    (<o> ^name smem-retrieve-lti)
    (<o> ^retrieve-info <info>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<info> ^{ <> identifier <> retrieved <att> } <val>)
    -->
    (<cmd> ^<att> <val> +)
}

sp {anystate*apply*smem-retrieve-lti*create*retrieve*command
    (state <s> ^operator <o>)
    (<o> ^name smem-retrieve-lti)
    (<o> ^retrieve-info <r*1>)
    (<r*1> ^identifier <lti>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^retrieve <lti> +)
}

sp {anystate*propose*smem-retrieve-lti
    (state <s> ^smem-retrieve <ret>)
    (<ret> -^retrieved true)
    (<ret> ^identifier <lti>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<s> ^operator <o> =)
    (<o> ^name smem-retrieve-lti +)
    (<o> ^retrieve-info <ret> +)
}

sp {new*anystate*apply*smem-store*copy-result*copy
    (state <s> ^operator <o>)
    (<o> ^name smem-store)
    (<s> ^store-concept <lti>)
    (<s> ^smem <s*1>)
    (<s*1> ^result <r*1>)
    (<r*1> ^{ << success failure >> <a*1> } <lti>)
    -->
    (<s> ^stored <lti> +)
}

sp {new*anystate*apply*smem-store*create-cue*clear
    (state <s> ^operator <op>)
    (<op> ^name smem-store)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^{ << retrieve query >> <command> } <olti>)
    -->
    (<cmd> ^<command> <olti> -)
}

sp {new*anystate*apply*smem-store*create-cue
    (state <s> ^operator <op>)
    (<op> ^name smem-store)
    (<s> ^store-concept <lti>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^store <lti> +)
}

sp {new*anystate*propose*smem-store*create-cue
    (state <s> ^store-concept <lti>)
    (<s> -^stored <lti>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<s> ^operator <o> >)
    (<o> ^name smem-store +)
}

sp {anystate*apply*smem-query*clear*smem*command
    (state <s> ^operator <o>)
    (<o> ^name smem-query)
    (<o> ^query-info <q*1>)
    (<s> ^smem <s*2>)
    (<s> ^smem <s*1>)
    (<q*1> ^cue <cue>)
    (<s*1> ^result <r*1>)
    (<s*2> ^command <cmd>)
    (<r*1> ^{ << success failure >> <a*1> } <cue>)
    (<cmd> ^<att> <val>)
    -->
    (<cmd> ^<att> <val> -)
}

sp {anystate*apply*smem-query*create*result*failure
    (state <s> ^operator <o>)
    (<o> ^name smem-query)
    (<o> ^query-info <info>)
    (<s> ^smem <s*1>)
    (<info> ^cue <cue>)
    (<s*1> ^result <r*1>)
    (<r*1> ^failure <cue>)
    -->
    (<info> ^result failure +)
}

sp {anystate*apply*smem-query*create*result*success
    (state <s> ^operator <o>)
    (<o> ^name smem-query)
    (<o> ^query-info <info>)
    (<s> ^smem <s*2>)
    (<s> ^smem <s*1>)
    (<info> ^cue <cue>)
    (<s*2> ^result <r*1>)
    (<r*1> ^success <cue>)
    (<s*1> ^result <res>)
    (<res> ^success <cue>)
    (<res> ^retrieved <top-lti>)
   -{ (<res> ^retrieved <r*2>)
      (<r*2> ^<att> <top-lti>)}
    -->
    (<info> ^result <top-lti> +)
}

sp {anystate*apply*smem-query*copy*params
    (state <s> ^operator <o>)
    (<o> ^name smem-query)
    (<o> ^query-info <info>)
    (<s> ^smem <s*1>)
    (<s*1> ^command <cmd>)
    (<info> ^{ <> cue <> result <att> } <val>)
    -->
    (<cmd> ^<att> <val> +)
}

sp {anystate*apply*smem-query*create*query*command
    (state <s> ^operator <o>)
    (<o> ^name smem-query)
    (<o> ^query-info <q*1>)
    (<s> ^smem <s*1>)
    (<q*1> ^cue <cue>)
    (<s*1> ^command <cmd>)
    -->
    (<cmd> ^query <cue> +)
}

sp {anystate*propose*smem-query
    (state <s> ^smem-query <query>)
    (<query> -^result <r*1>)
    (<query> ^cue <cue>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> >)
    (<s> ^operator <o> =)
    (<o> ^name smem-query +)
    (<o> ^query-info <query> +)
}

sp {top-state*perception-monitor*predicate-monitor*elaborate*default*predicates
    (state <s> ^superstate nil)
    (<s> ^perception-monitor <p*1>)
    (<p*1> ^predicate-monitor <mon>)
    -->
    
}

sp {top-state*elaborate*agent-info
    (state <s> ^superstate nil)
    -->
    (<s> ^agent-info <info> +)
}

sp {top-state*elaborate*problem-space
    (state <s> ^superstate nil)
    -->
    (<s> ^problem-space <ps> +)
    (<ps> ^perception <perc> +)
    (<perc> ^attend-to-all-perception yes +)
}

sp {rosie*elaborate*edge*to*further*edge
    :o-support
    (state <s> ^name rosie)
    (<s> ^maps <m*1>)
    (<m*1> ^map <m*2>)
    (<m*2> ^waypoint <wp>)
    (<wp> ^handle <h*1>)
    (<wp> ^edge <edge>)
    (<edge> ^end <e*2>)
    (<e*2> ^edge <e*3>)
    (<e*3> ^to { <> <h*1> <wp-handle> })
   -{ (<wp> ^edge <e*1>)
      (<e*1> ^to <wp-handle>)}
    -->
    (<edge> ^to <wp-handle> +)
}

sp {rosie*elaborate*edge*to*end
    :o-support
    (state <s> ^name rosie)
    (<s> ^maps <m*1>)
    (<m*1> ^map <m*2>)
    (<m*2> ^waypoint <wp>)
    (<wp> ^edge <edge>)
    (<edge> ^end <e*1>)
    (<e*1> ^handle <wp-handle>)
    -->
    (<edge> ^to <wp-handle> +)
}

sp {rosie*elaborate*next*waypoint
    (state <s> ^name rosie)
    (<s> ^maps <m*1>)
    (<m*1> ^map <m*2>)
    (<m*2> ^waypoint <wp>)
    (<wp> ^edge <e*1>)
    (<e*1> ^end <next-wp>)
    -->
    (<wp> ^next <next-wp> +)
}

sp {svs*apply*any-op*property-command*object-source*belief
    (state <s> ^top-state <t*1>)
    (<t*1> ^perception-monitor <p*1>)
    (<p*1> ^object-monitor <o*1>)
    (<o*1> ^object-info <o*2>)
    (<o*2> ^belief-obj <bel-obj>)
    (<bel-obj> -^object-source belief)
    (<bel-obj> ^id <bel-id>)
    (<s> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<s> ^operator <o>)
    -->
    (<cmd> ^set_tag <prop> +)
    (<prop> ^id <bel-id> +)
    (<prop> ^tag_name object-source +)
    (<prop> ^tag_value belief +)
}

sp {svs*elaborate*svs*objects*type*node
    (state <s> ^svs <s*1>)
    (<s*1> ^spatial-scene <sc>)
    (<sc> ^child <C>)
    (<C> ^object-source belief)
    -->
    (<C> ^type node +)
}

sp {all*elaborate*io
    (state <s> ^superstate <s*1>)
    (<s> -^name action-policy)
    (<s> -^name setup-search)
    (<s> -^name learn-param)
   -{ (<s> ^problem-space <p*1>)
      (<p*1> ^state <s*2>)
      (<s*2> ^dont-copy io)}
    (<s> -^name selection)
    (<s*1> ^io <io>)
    -->
    (<s> ^io <io> +)
}

sp {top-state*elaborate*top-state
    (state <s> ^superstate nil)
    -->
    (<s> ^top-state <s> +)
}

sp {all*elaborate*name
    (state <s> ^superstate <s*1>)
    (<s*1> ^operator <o*1>)
    (<o*1> ^name <name>)
    -->
    (<s> ^name <name> +)
}

sp {interaction-stack*elaborate*ask-property-name*info*word
    (state <s> ^top-state <s>)
    (<s> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segments <s*2>)
    (<s*2> ^segment <seg>)
    (<seg> ^purpose <purp>)
    (<purp> ^type ask-property-name)
    (<purp> ^word <word>)
    (<seg> ^info <info>)
    -->
    (<info> ^word <word> +)
}

sp {interaction-stack*elaborate*teaching-request*info*object
    (state <s> ^top-state <s>)
    (<s> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segments <s*2>)
    (<s*2> ^segment <seg>)
    (<seg> ^info <info>)
    (<seg> ^purpose <purp>)
    (<purp> ^target-object <out>)
    (<purp> ^type { << teaching-request which-question >> <t*1> })
    -->
    (<info> ^object <out> +)
}

sp {interaction-stack*elaborate*segments*all*segments
    (state <s> ^top-state <s>)
    (<s> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segments <segs>)
    (<segs> ^segment <s*2>)
    (<s*2> ^prev <seg>)
    -->
    (<segs> ^segment <seg> +)
}

sp {apply*interaction*update-dialog-object-list-saved
    (state <s> ^operator <o*1>)
    (<o*1> ^name interaction)
    (<s> ^dialog-object-list <dol>)
    (<s> ^dialog-object-list-saved { <> <dol> <dols> })
    -->
    (<s> ^dialog-object-list-saved <dols> -)
    (<s> ^dialog-object-list-saved <dol> +)
}

sp {top-state*better-preferences*attend-to-scene-change
    (state <s> ^operator <o1> +)
    (<o1> ^name attend-to-scene-change)
    (<s> ^operator <o2> +)
    (<o2> ^name { << wait >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {top-state*better-preferences*execute-action
    (state <s> ^operator <o1> +)
    (<o1> ^problem-space execute-primitive-action)
    (<s> ^operator <o2> +)
    (<o2> ^name { << attend-to-scene-change wait >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {top-state*worse-preferences*execute-action
    (state <s> ^operator <o2> +)
    (<o2> ^problem-space execute-primitive-action)
    (<s> ^operator <o1> +)
    (<o1> ^name { << lookup-preposition interaction comprehension >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {top-state*better-preferences*satisfy-purpose
    (state <s> ^operator <o2> +)
    (<o2> ^name { << attend-to-scene-change wait >> <n*2> })
    (<s> ^operator <o1> +)
    (<o1> ^name { << satisfy-purpose execute-action action-learning >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {top-state*better-preferences*comprehension
    (state <s> ^operator <o1> +)
    (<o1> ^name comprehension)
    (<s> ^operator <o2> +)
    (<o2>
          ^name { << satisfy-purpose action-learning execute-action attend-to-scene-change wait >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {top-state*better-preferences*interaction
    (state <s> ^operator <o1> +)
    (<o1> ^name interaction)
    (<s> ^operator <o2> +)
    (<o2>
          ^name { << comprehension satisfy-purpose action-learning execute-action attend-to-scene-change wait >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {top-state*better-preferences*lookup-preposition
    (state <s> ^operator <o1> +)
    (<o1> ^name lookup-preposition)
    (<s> ^operator <o2> +)
    (<o2>
          ^name { << interaction comprehension satisfy-purpose action-learning execute-action attend-to-scene-change wait >> <n*1> })
    -->
    (<s> ^operator <o1> > <o2>)
}

sp {top-state*propose*execute-action
    (state <s> ^superstate nil)
    (<s> -^current-action <act>)
    (<s> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose <p>)
    (<p> ^parameters <p*1>)
    (<p*1> ^action-operator <op>)
    (<p> ^satisfaction <s*3>)
    (<s*3> ^action-event <a*1>)
    -->
    (<s> ^operator <o> +)
    (<o> ^name execute-action +)
    (<o> ^action-operator <op> +)
}

sp {top-state*propose*satisfy-purpose
    (<s> -^parser-testing true)
    (state <s> ^top-state <s>)
    (<s> ^interaction <i*1>)
    (<i*1> ^stack <s*1>)
    (<s*1> ^segment <s*2>)
    (<s*2> ^purpose { <> none <p> })
    (<p> -^category goal)
    (<p> -^type goal-description)
    (<p> -^type action)
    (<p> -^type action-command)
    -->
    (<s> ^operator <o> +)
    (<o> ^name satisfy-purpose +)
    (<o> ^purpose <p> +)
}

sp {top-state*propose*interaction*interaction-change
    (<s> -^parser-testing true)
    (state <s> ^top-state <s>)
    (<s> ^interaction <i*1>)
    (<i*1> ^changes <c*1>)
    (<c*1> ^<type> <change>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name interaction +)
    (<o> ^type interaction-change +)
    (<o> ^change-info <change> +)
    (<o> ^change-type <type> +)
}

sp {top-state*propose*interaction*status-change
    (<s> -^parser-testing true)
    (state <s> ^top-state <s>)
    (<s> ^interaction <i*1>)
    (<i*1> ^status <s*1>)
    (<s*1> ^<any> <status>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> =)
    (<o> ^name interaction +)
    (<o> ^type status-change +)
    (<o> ^status-info <status> +)
    (<o> ^status-type <any> +)
}

sp {top-state*propose*init-agent
    (<s> -^name rosie)
    (state <s> ^top-state <s>)
    -->
    (<s> ^operator <o> +)
    (<s> ^operator <o> !)
    (<o> ^name init-agent +)
}

sp {top-state*apply*any-op*report*svs*command*errors
    (state <s> ^top-state <s>)
    (<s> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<s> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^{ <> extract <> extract_once <type> } <val>)
    (<val> ^status { <> success <status> })
    -->
    
}

sp {top-state*apply*any-op*report*svs*filter*errors
    (state <s> ^top-state <s>)
    (<s> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<s> ^svs <s*1>)
    (<s*1> ^command <cmd>)
    (<cmd> ^{ << extract extract_once >> <a*2> } <val>)
    (<val> ^status { <> success <status> })
    (<val> ^type <type>)
    -->
    
}

sp {anystate*print*self*info
    (state <s> ^agent-params <a*2>)
    (<a*2> ^debug-arm true)
    (<s> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<s> ^top-state <top>)
    (<s> ^io <i*1>)
    (<i*1> ^input-link <i*2>)
    (<i*2> ^self <self>)
    (<self> ^grabbed-object <id>)
    (<self> ^prev-action <pa>)
    (<self> ^action <a>)
    -->
    
}

sp {anystate*operator-tie*print*operators
    (state <s> ^type state)
    (<s> ^impasse tie)
    (<s> ^top-state <top>)
    (<top> ^agent-params <a*2>)
    (<a*2> ^debug-op-ties true)
    (<top> ^agent-params <a*1>)
    (<a*1> ^debug-mode on)
    (<s> ^item <i*1>)
    (<i*1> ^name <name>)
    -->
    
}

sp {top-state*elaborate*agent-params*debug
    (state <s> ^top-state <s>)
    (<s> ^agent-params <params>)
    -->
    (<params> ^debug-mode off +)
    (<params> ^debug-perception true +)
    (<params> ^debug-op-ties false +)
    (<params> ^debug-arm true +)
    (<params> ^enable-interrupts false +)
}

sp {top-state*elaborate*agent-params*perception
    (state <s> ^top-state <s>)
    (<s> ^agent-params <params>)
    -->
    (<params> ^stability-check-duration 0 +)
    (<params> ^pos-diff-threshold 0.020000 +)
    (<params> ^vol-low-diff-threshold 0.800000 +)
    (<params> ^vol-high-diff-threshold 1.200000 +)
    (<params> ^max-stability-checks 5 +)
    (<params> ^occlusion-threshold 0.150000 +)
    (<params> ^occlusion-check-period 3 +)
    (<params> ^clear-view-distance 0.010000 +)
    (<params> ^stale-match-distance 0.100000 +)
    (<params> ^maximum-stale-distance 0.100000 +)
    (<params> ^contained-threshold 0.330000 +)
    (<params> ^contained-by-threshold 0.500000 +)
    (<params> ^update-object-period 3 +)
    (<params> ^recheck-growth-delay 5 +)
    (<params> ^aggressive-match-distance 0.050000 +)
    (<params> ^vol-low-candidate-match 0.600000 +)
    (<params> ^vol-high-candidate-match 1.400000 +)
}

sp {top-state*elaborate*agent-params*task
    (state <s> ^superstate nil)
    (<s> ^agent-params <params>)
    -->
    (<params> ^use-default-values true +)
    (<params> ^use-object-variablization true +)
    (<params> ^use-intra-task-transfer true +)
    (<params> ^action-search-depth 4 +)
    (<params> ^arm-simulation-level pretend +)
}

sp {top-state*elaborate*agent-params*domain
    (state <s> ^superstate nil)
    (<s> ^agent-params <params>)
    -->
    (<params> ^domain arm +)
}

sp {top-state*elaborate*agent-params
    (state <s> ^top-state <s>)
    -->
    (<s> ^agent-params <params> +)
}



# Semantic Memory


smem --add {
(@1 ^arg1 @2 ^op_name initiate-put-down1)
(@4 ^arg1 @5 ^op_name initiate-pick-up1)
(@5 ^id @6 ^arg-type object ^arg-status real)
(@7 ^arg1 @8 ^op_name initiate-open1)
(@8 ^id @9 ^arg-type object ^arg-status real)
(@2 ^id @3 ^arg-type object ^arg-status real)
(@10 ^arg1 @11 ^op_name initiate-close1)
(@11 ^id @12 ^arg-type object ^arg-status real)
(@13 ^op_name initiate-wait1)
(@15 ^arg1 @16 ^arg2 @17 ^op_name op_move1)
(@28 ^arg1 @29 ^arg2 @30 ^op_name initiate-fetch1)
(@14 ^predicate @21)
(@21 ^type relation ^id @20 ^1 @18 ^2 @19)
(@22 ^arg1 @23 ^op_name initiate-turn-on1)
(@16 ^id @18 ^arg-type object)
(@17 ^id @20 ^2 @19 ^arg-type predicate)
(@26 ^id @27 ^arg-type object ^arg-status real)
(@25 ^arg1 @26 ^op_name initiate-turn-off1)
(@23 ^id @24 ^arg-type object ^arg-status real)
(@38 ^id @39 ^arg-type object)
(@40 ^arg1 @41 ^op_name initiate-throw1)
(@41 ^id @42 ^arg-type object)
(@29 ^id @31 ^arg-type object ^arg-status real)
(@34 ^arg1 @35 ^op_name initiate-ask1)
(@30 ^id @33 ^2 @32 ^arg-type predicate ^arg-status real)
(@35 ^id @36 ^arg-type object)
(@37 ^arg1 @38 ^op_name initiate-tell1)
(@43 ^arg1 @44 ^op_name initiate-turn1)
(@44 ^id @45 ^arg-type concept)
(@46 ^arg2 @47 ^op_name initiate-go-to-location1)
(@47 ^id @48 ^2 @49 ^arg-type predicate ^arg-status imagined)
(@50 ^arg1 @51 ^op_name initiate-follow-wall1)
(@66 ^id @69 ^arg-type object ^arg-status imagined)
(@65 ^arg1 @67 ^arg2 @66 ^op_name initiate-remember1)
(@53 ^op_name initiate-stop1)
(@54 ^arg1 @55 ^op_name initiate-orient1)
(@51 ^id @52 ^arg-type concept)
(@57 ^arg2 @58 ^op_name go-to-waypoint)
(@55 ^id @56 ^arg-type concept)
(@58 ^id @59 ^arg-type concept)
(@60 ^arg2 @61 ^op_name go-to-next-waypoint)
(@61 ^id @62 ^arg-type concept)
(@64 ^op_name initiate-sense1)
(@63 ^op_name initiate-explore1)
(@70 ^op_name initiate-check1)
(@72 ^op_name initiate-heard1)
(@73 ^op_name initiate-say1)
(@71 ^op_name initiate-recall1)
(@67 ^id @68 ^arg-type object ^arg-status real)
(@74 ^op_name initiate-attend1)
(@76 ^op_name initiate-has1)
(@77 ^op_name initiate-play1)
(@78 ^op_name initiate-win1)
(@79 ^op_name initiate-lose1)
(@80 ^op_name initiate-prefer1)
(@75 ^op_name initiate-ignore1)
(@81 ^op_name initiate-avoid1)
(@82 ^op_name op_scan1)
(@83 ^arg1 @84 ^arg2 @85 ^op_name op_give1)
(@89 ^op_name initiate-attack)
(@90 ^op_name initiate-load)
(@91 ^op_name initiate-consider1)
(@84 ^id @86 ^arg-type object ^arg-status visible)
(@88 ^op_name initiate-think1)
(@85 ^id @87 ^arg-type object ^arg-status visible)
(@92 ^type aligned ^count 0 ^sum 0.000000 ^axis x ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@93 ^type aligned ^count 0 ^sum 0.000000 ^axis y ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@101014 ^handle clean)
(@101015 ^handle turn-on1 ^item-type action ^procedural @22 ^action-type primitive)
(@101016 ^handle turn-off1 ^item-type action ^procedural @25 ^action-type primitive)
(@94 ^type greater ^count 3 ^sum 0.000000 ^axis z ^bottom 0.000001 ^top 0.040000 ^avg 0.005000 ^squaredsum 0.000000)
(@95 ^type aligned ^count 0 ^sum 0.000000 ^axis y ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@96 ^type aligned ^count 0 ^sum 0.000000 ^axis z ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@97 ^type aligned ^count 0 ^sum 0.000000 ^axis x ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@98 ^type greater ^count 1 ^sum 0.000000 ^axis x ^bottom 0.090000 ^top 0.170000 ^avg 0.100000 ^squaredsum 0.000000)
(@99 ^type aligned ^count 0 ^sum 0.000000 ^axis z ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@100 ^type aligned ^count 0 ^sum 0.000000 ^axis y ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@101 ^type aligned ^count 0 ^sum 0.000000 ^axis y ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@102 ^type less ^count 1 ^sum 0.000000 ^axis x ^bottom 0.090000 ^top 0.170000 ^avg 0.100000 ^squaredsum 0.000000)
(@103 ^type aligned ^count 0 ^sum 0.000000 ^axis z ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@104 ^type aligned ^count 0 ^sum 0.000000 ^axis y ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@105 ^type less ^count 3 ^sum 0.000000 ^axis z ^bottom 0.000001 ^top 0.040000 ^avg 0.005000 ^squaredsum 0.000000)
(@106 ^type aligned ^count 0 ^sum 0.000000 ^axis x ^bottom 0.000000 ^top 0.000000 ^avg 0.000000 ^squaredsum 0.000000)
(@107 ^type aligned ^count 1 ^sum 0.000000 ^axis z ^bottom 0.000100 ^top 0.000000 ^avg 0.100000 ^squaredsum 0.000000)
(@108 ^type aligned greater less ^count 1 ^sum 0.000000 ^axis x ^bottom 0.000100 ^top 0.100000 ^avg 0.100000 ^squaredsum 0.000000)
(@109 ^type aligned greater less ^count 1 ^sum 0.000000 ^axis y ^bottom 0.000100 ^top 0.100000 ^avg 0.100000 ^squaredsum 0.000000)
(@110 ^type greater less ^count 1 ^sum 0.000000 ^axis y ^bottom 0.000100 ^top 0.100000 ^avg 0.100000 ^squaredsum 0.000000)
(@111 ^type aligned ^count 1 ^sum 0.000000 ^axis z ^bottom 0.000100 ^top 0.000000 ^avg 0.100000 ^squaredsum 0.000000)
(@112 ^type greater less ^count 1 ^sum 0.000000 ^axis x ^bottom 0.000100 ^top 0.100000 ^avg 0.100000 ^squaredsum 0.000000)
(@113 ^name kitchen1 ^handle loc-kitchen1 ^item-type location ^spatial-shape room1 ^object-instance true)
(@114 ^name soar1 ^handle loc-soar1 ^item-type location ^spatial-shape room1 ^object-instance true)
(@115 ^name april1 ^handle loc-april1 ^item-type location ^spatial-shape room1 ^object-instance true)
(@116 ^name main1 ^handle loc-main1 ^item-type location ^spatial-shape room1 ^object-instance true)
(@117 ^name copy1 ^handle loc-copy1 ^item-type location ^spatial-shape room1 ^object-instance true)
(@118 ^name copy1 ^handle loc-copy1 ^item-type location ^spatial-shape room1 ^object-instance true)
(@119 ^handle loc-alice-office1 ^item-type location ^spatial-shape room1 ^possessive alices1 ^object-instance true ^owner person-alice1)
(@120 ^handle loc-bob-office1 ^item-type location ^spatial-shape room1 ^possessive bobs1 ^object-instance true ^owner person-bob1)
(@121 ^handle loc-charlie-office1 ^item-type location ^spatial-shape room1 ^possessive charlies1 ^object-instance true ^owner person-charlie1)
(@122 ^handle obj-box1 ^item-type object ^color red1 ^shape box1 ^object-instance true)
(@123 ^handle obj-box2 ^item-type object ^color blue1 ^shape box1 ^object-instance true)
(@124 ^handle obj-book1 ^item-type object ^color black1 ^shape book1 ^object-instance true)
(@125 ^handle obj-stapler1 ^item-type object ^color white1 ^shape stapler1 ^object-instance true)
(@126 ^handle obj-soda1 ^item-type object ^color blue1 ^shape soda1 ^object-instance true)
(@127 ^name alice1 ^handle person-alice1 ^item-type person ^object-instance true)
(@128 ^name bob1 ^handle person-bob1 ^item-type person ^object-instance true)
(@129 ^name charlie1 ^handle person-charlie1 ^item-type person ^object-instance true)
(@901 ^spelling turn ^referent @101015 ^number singular ^structure-type V ^converts-to VP ^assigners @999587 @999588 @999589 ^semantic-structure action ^tense present)
(@903 ^relation @501031 ^spelling to ^super-type @609000 ^directional maybe)
(@902 ^spelling the ^number singular ^specifier definite ^super-type @991001)
(@905 ^relation @501000 ^spelling on ^structure-type P ^converts-to PP ^assigners @999419 ^relation-type binary)
(@9010 ^spelling is ^number singular ^structure-type IS-V ^tense present)
(@20999 ^number singular ^structure-type G ^converts-to GP ^assigners @1000130 @1000131 @1000132 ^semantic-structure action ^tense present)
(@60985 ^number singular ^structure-type V ^converts-to VP ^assigners @999668 @999669 @999670 @999671 @999672 @999673 @999674 ^semantic-structure action ^tense present)
(@60995 ^number singular ^structure-type V ^converts-to VP ^assigners @999618 @999619 @999620 @999621 @999622 @999623 ^semantic-structure action ^tense present)
(@60986 ^number singular ^structure-type V ^converts-to VP ^assigners @999664 @999665 @999666 @999667 ^semantic-structure action ^tense present)
(@60987 ^number singular ^structure-type V ^converts-to VP ^assigners @999656 @999657 @999658 @999659 @999660 @999661 @999662 @999663 ^semantic-structure action ^tense present)
(@60988 ^number singular ^structure-type V ^converts-to VP ^assigners @999651 @999652 @999653 @999654 @999655 ^semantic-structure action ^tense present)
(@60989 ^number singular ^structure-type V ^converts-to VP ^assigners @999646 @999647 @999648 @999649 @999650 ^semantic-structure action ^tense present)
(@60990 ^number singular ^structure-type V ^converts-to VP ^assigners @999643 @999644 @999645 ^semantic-structure action ^tense present)
(@60991 ^number singular ^structure-type V ^converts-to VP ^assigners @999639 @999640 @999641 @999642 ^semantic-structure action ^tense present)
(@60992 ^number singular ^structure-type V ^converts-to VP ^assigners @999633 @999634 @999635 @999636 @999637 ^semantic-structure action ^tense present)
(@60993 ^number singular ^structure-type V ^converts-to VP ^assigners @999627 @999628 @999629 @999630 @999631 @999632 ^semantic-structure action ^tense present)
(@60994 ^number singular ^structure-type V ^converts-to VP ^assigners @999624 @999625 @999626 ^semantic-structure action ^tense present)
(@60997 ^number singular ^structure-type V ^converts-to VP ^assigners @999605 @999606 @999607 @999608 @999609 @999610 @999611 ^semantic-structure action ^tense present)
(@60996 ^number singular ^structure-type V ^converts-to VP ^assigners @999612 @999613 @999614 @999615 @999616 @999617 ^semantic-structure action ^tense present)
(@101000 ^handle put-down1 ^item-type action ^procedural @1 ^action-type primitive)
(@60998 ^number singular ^structure-type V ^converts-to VP ^assigners @999600 @999601 @999602 @999603 @999604 ^semantic-structure action ^tense present)
(@60999 ^number singular ^structure-type V ^converts-to VP ^assigners @999592 @999593 @999594 @999595 @999596 @999597 @999598 @999599 ^semantic-structure action ^tense present)
(@101001 ^handle pick-up1 ^item-type action ^procedural @4 ^action-type primitive)
(@101002 ^handle point1)
(@101003 ^handle open1 ^item-type action ^procedural @7 ^action-type primitive)
(@101004 ^handle close1 ^item-type action ^procedural @10 ^action-type primitive)
(@101011 ^handle stack)
(@101007 ^handle wait1 ^item-type action ^procedural @13 ^action-type primitive)
(@101008 ^goal @14 ^handle move1 ^item-type action ^procedural @15 ^action-type composite)
(@101009 ^handle store1)
(@101010 ^handle discard)
(@101012 ^handle cook1)
(@101013 ^handle set1)
(@101019 ^handle fetch1 ^item-type action ^procedural @28 ^action-type composite)
(@101131 ^handle perform1)
(@101143 ^type action ^handle think ^procedural @88)
(@101130 ^handle bring1)
(@101018 ^handle deliver1)
(@101020 ^handle find1)
(@101030 ^handle ask1 ^item-type action ^procedural @34 ^action-type composite)
(@101031 ^handle tell1 ^item-type action ^procedural @37 ^action-type composite)
(@101129 ^handle serve1)
(@101032 ^handle throw1 ^item-type action ^procedural @40 ^action-type composite)
(@101100 ^handle turn1 ^item-type action ^procedural @43 ^action-type primitive)
(@101103 ^handle go-to-location1 ^item-type action ^procedural @46 ^action-type primitive)
(@101104 ^handle follow-wall1 ^item-type action ^procedural @50 ^action-type primitive)
(@101106 ^handle stop1 ^item-type action ^procedural @53 ^action-type primitive)
(@101107 ^handle orient1 ^item-type action ^procedural @54 ^action-type primitive)
(@101108 ^handle go-to-waypoint1 ^item-type action ^procedural @57 ^action-type composite)
(@101109 ^handle go-to-next-waypoint1 ^item-type action ^procedural @60 ^action-type composite)
(@101110 ^handle explore1 ^item-type action ^procedural @63)
(@101111 ^handle sense1 ^item-type action ^procedural @64)
(@101112 ^handle remember1 ^item-type action ^procedural @65 ^action-type primitive)
(@101113 ^handle check ^item-type action ^procedural @70)
(@101114 ^handle recall ^item-type action ^procedural @71)
(@101115 ^type action ^handle heard ^procedural @72)
(@101116 ^type action ^handle say ^procedural @73)
(@101117 ^type action ^handle attend ^procedural @74)
(@101118 ^type action ^handle ignore ^procedural @75)
(@101119 ^type action ^handle has ^procedural @76)
(@101120 ^type action ^handle play ^procedural @77)
(@101121 ^type action ^handle win ^procedural @78)
(@101122 ^type action ^handle lose ^procedural @79)
(@101123 ^type action ^handle prefer ^procedural @80)
(@101124 ^type action ^handle avoid ^procedural @81)
(@101125 ^type action ^handle scan1 ^procedural @82 ^action-type primitive)
(@101126 ^handle give1 ^item-type action ^procedural @83 ^action-type primitive)
(@101127 ^handle take1)
(@101128 ^handle guide1)
(@101145 ^type action ^handle load ^procedural @90)
(@101144 ^type action ^handle attack ^procedural @89)
(@101148 ^handle is1)
(@108009 ^handle organize)
(@202000 ^type visual ^handle property1 ^item-type property)
(@101149 ^handle covers1 ^tense past)
(@101146 ^type action ^handle consider ^procedural @91)
(@101147 ^handle matches1)
(@407005 ^multiple true ^property @407000 ^handle location)
(@501011 ^type relation ^relation @107 @108 @109 ^handle near1)
(@501012 ^type relation ^relation @110 @111 @112 ^handle diagonal-with1)
(@501017 ^handle holding1)
(@401000 ^type visual ^handle color ^item-type property)
(@401001 ^property @401000 ^handle red1 ^item-type predicate)
(@401002 ^property @401000 ^handle orange1 ^item-type predicate)
(@401003 ^property @401000 ^handle yellow1 ^item-type predicate)
(@401004 ^property @401000 ^handle green1 ^item-type predicate)
(@401005 ^property @401000 ^handle blue1 ^item-type predicate)
(@401006 ^property @401000 ^handle purple1 ^item-type predicate)
(@401007 ^property @401000 ^handle white1 ^item-type predicate)
(@401008 ^property @401000 ^handle black1 ^item-type predicate)
(@401009 ^property @401000 ^handle brown1 ^item-type predicate)
(@401010 ^property @401000 ^handle gray1 ^item-type predicate)
(@402000 ^type visual ^handle shape ^item-type property)
(@402001 ^property @402000 ^handle triangle1 ^item-type predicate)
(@402002 ^property @402000 ^handle arch1 ^item-type predicate)
(@402003 ^property @402000 ^handle square1 ^item-type predicate)
(@402004 ^property @402000 ^handle l-block1 ^item-type predicate)
(@402005 ^property @402000 ^handle t-block1 ^item-type predicate)
(@402006 ^property @402000 ^handle sphere1 ^item-type predicate)
(@402007 ^property @402000 ^handle chicken1 ^item-type predicate)
(@402008 ^property @402000 ^handle rectangle1 ^item-type predicate)
(@402010 ^property @402000 ^handle soda1 ^item-type predicate)
(@402011 ^property @402000 ^handle box1 ^item-type predicate)
(@402012 ^property @402000 ^handle steak1 ^item-type predicate)
(@402013 ^property @402000 ^handle lights1 ^item-type predicate)
(@402014 ^property @402000 ^handle package1 ^item-type predicate)
(@402015 ^property @402000 ^handle papers1 ^item-type predicate)
(@402016 ^property @402000 ^handle kinect1 ^item-type predicate)
(@402017 ^property @404000 ^handle trash1 ^item-type predicate)
(@402018 ^property @402000 ^handle line1 ^item-type predicate)
(@402019 ^multiple true ^property @402000 ^handle triangle1 ^item-type predicate)
(@402020 ^property @402000 ^handle stapler1 ^item-type predicate)
(@402021 ^property @402000 ^handle book1 ^item-type predicate)
(@403000 ^type visual ^handle size ^item-type property)
(@403001 ^property @403000 ^handle small1 ^item-type predicate)
(@403002 ^property @403000 ^handle medium1 ^item-type predicate)
(@403003 ^property @403000 ^handle large1 ^item-type predicate)
(@403004 ^property @403000 ^handle tiny1 ^item-type predicate)
(@403005 ^property @403000 ^handle giant1 ^item-type predicate)
(@404000 ^type visual ^handle name ^item-type property)
(@404001 ^property @404000 ^handle pantry ^item-type predicate)
(@404002 ^property @404000 ^handle garbage ^item-type predicate)
(@404003 ^property @404000 ^handle table ^item-type predicate)
(@404005 ^property @404000 ^handle dishwasher ^item-type predicate)
(@404006 ^property @404000 ^handle scale ^item-type predicate)
(@404007 ^property @404000 ^handle thermometer ^item-type predicate)
(@404008 ^property @404000 ^handle grid-red)
(@404009 ^property @404000 ^handle grid-orange)
(@404010 ^property @404000 ^handle grid-yellow)
(@404011 ^property @404000 ^handle grid-green)
(@404012 ^property @404000 ^handle grid-blue)
(@404013 ^property @404000 ^handle goal ^item-type predicate)
(@404014 ^property @404000 ^handle home ^item-type predicate)
(@404015 ^property @404000 ^handle bin-1)
(@404016 ^property @404000 ^handle bin-2)
(@404017 ^property @404000 ^handle bin-3)
(@404018 ^property @404000 ^handle bin-4)
(@404019 ^property @404000 ^handle bin-5)
(@404020 ^property @404000 ^handle bin-6)
(@404023 ^property @404000 ^handle stove)
(@404024 ^property @404000 ^handle answer ^item-type predicate)
(@404040 ^property @404000 ^handle alice1 ^item-type predicate)
(@404041 ^property @404000 ^handle bob1 ^item-type predicate)
(@404042 ^property @404000 ^handle charlie1 ^item-type predicate)
(@404043 ^property @404000 ^handle fridge1 ^item-type predicate)
(@404044 ^property @404000 ^handle faucet1 ^item-type predicate)
(@404045 ^property @404000 ^handle water1 ^item-type predicate)
(@404046 ^property @404000 ^handle cup1 ^item-type predicate)
(@405000 ^type measurable ^handle weight ^item-type property)
(@405001 ^property @405000 ^handle heavy1 ^item-type predicate)
(@405002 ^property @405000 ^handle light1 ^item-type predicate)
(@405003 ^property @405000 ^handle heaviest1 ^item-type predicate)
(@405004 ^property @405000 ^handle lightest1 ^item-type predicate)
(@406000 ^type measurable ^handle temperature ^item-type property)
(@406001 ^property @406000 ^handle hot1)
(@406002 ^property @406000 ^handle warm1)
(@406003 ^property @406000 ^handle cool1)
(@406004 ^property @406000 ^handle cold1)
(@406005 ^property @406000 ^handle hottest1)
(@406006 ^property @406000 ^handle coldest1)
(@407000 ^type visual ^handle category ^item-type property)
(@407001 ^property @407000 ^handle block)
(@407002 ^property @407000 ^handle location)
(@407003 ^property @407000 ^handle object ^subcategory @407001 @407002 @407006 @407008)
(@407004 ^multiple true ^property @407000 ^handle block)
(@407006 ^property @407000 ^handle piece)
(@501007 ^type relation ^handle linear-with1)
(@407007 ^multiple true ^property @407000 ^handle piece)
(@407008 ^property @407000 ^handle card)
(@407009 ^multiple true ^property @407000 ^handle card)
(@407010 ^property @407000 ^handle tile)
(@407011 ^multiple true ^property @407000 ^handle tile)
(@408000 ^handle cardinal-direction1 ^item-type property)
(@408001 ^property @408000 ^handle north1 ^item-type concept ^yaw 1.507000)
(@408002 ^property @408000 ^handle east1 ^item-type concept ^yaw 0.000000)
(@408003 ^property @408000 ^handle south1 ^item-type concept ^yaw -1.507000)
(@408004 ^property @408000 ^handle west1 ^item-type concept ^yaw 3.140000)
(@409000 ^handle relative-direction1 ^item-type property)
(@409001 ^property @409000 ^handle right1 ^item-type predicate ^side -1 ^yaw 1.100000)
(@409002 ^property @409000 ^handle left1 ^item-type predicate ^side 1 ^yaw 1.100000)
(@409003 ^property @409000 ^handle around1 ^item-type predicate ^side -1 ^yaw 2.700000)
(@501000 ^type relation ^relation @92 @93 @94 ^handle on1)
(@501001 ^type relation ^relation @95 @96 @97 ^handle in1)
(@501002 ^type relation ^relation @98 @99 @100 ^handle right-of1)
(@501003 ^type relation ^relation @101 @102 @103 ^handle left-of1)
(@501004 ^handle above1)
(@501005 ^type relation ^relation @104 @105 @106 ^handle below1)
(@501006 ^type relation ^handle smaller-than1)
(@501008 ^type relation ^handle next-to1)
(@501010 ^handle under1)
(@501009 ^handle aligned-with1)
(@501019 ^handle equal)
(@501021 ^handle named)
(@501023 ^handle as)
(@501022 ^handle between)
(@501013 ^handle diagonal-from1)
(@501014 ^handle behind1)
(@501015 ^type relation ^handle larger-than1)
(@501016 ^handle infront1)
(@501024 ^handle greater-than1)
(@501025 ^handle more-than1)
(@501028 ^handle worse)
(@501027 ^handle owned-by-you1)
(@501026 ^handle less-than1)
(@501029 ^handle better)
(@501033 ^handle by1)
(@501034 ^type temporal-relation ^handle during1)
(@501032 ^handle from1)
(@501031 ^handle to1)
(@501030 ^handle over)
(@501035 ^handle under1)
(@609000 ^structure-type P ^converts-to PP ^assigners @999386 ^relation-type binary)
(@609001 ^structure-type P ^converts-to PP ^assigners @999387 @999388 @999389 ^relation-type ternary)
(@999026 ^spelling enemy ^referent @999027 ^structure-type ADJ)
(@999105 ^spelling backward ^referent @999106 ^structure-type ADV)
(@999108 ^spelling around ^referent @999107 ^structure-type ADV)
(@609002 ^structure-type P ^converts-to PP ^assigners @999390 @999391 ^relation-type binary)
(@991001 ^structure-type D ^converts-to DP ^assigners @999187 @999188 @999189 @999190 ^super-converts-to CP)
(@999001 ^property @999002 ^handle latter)
(@991050 ^structure-type POS ^converts-to DP ^assigners @1000183 @1000184 @1000185 @1000186 ^super-converts-to CP)
(@999000 ^spelling latter ^referent @999001 ^structure-type ADJ ^attachment immediate)
(@999002 ^type grammatical ^handle grammatical-property)
(@999004 ^spelling former ^referent @999003 ^structure-type ADJ ^attachment immediate)
(@999003 ^property @999002 ^handle former)
(@999005 ^spelling red ^referent @401001 ^structure-type ADJ ^attachment immediate)
(@999006 ^spelling orange ^referent @401002 ^structure-type ADJ ^attachment immediate)
(@999007 ^spelling yellow ^referent @401003 ^structure-type ADJ ^attachment immediate)
(@999008 ^spelling green ^referent @401004 ^structure-type ADJ ^attachment immediate)
(@999009 ^spelling blue ^referent @401005 ^structure-type ADJ ^attachment immediate)
(@999010 ^spelling purple ^referent @401006 ^structure-type ADJ ^attachment immediate)
(@999011 ^spelling white ^referent @401007 ^structure-type ADJ ^attachment immediate)
(@999012 ^spelling black ^referent @401008 ^structure-type ADJ)
(@999013 ^spelling brown ^referent @401009 ^structure-type ADJ)
(@999014 ^spelling gray ^referent @401010 ^structure-type ADJ)
(@999015 ^spelling small ^referent @403001 ^structure-type ADJ ^attachment immediate)
(@999016 ^spelling tiny ^referent @403004 ^structure-type ADJ ^attachment immediate)
(@999017 ^spelling little ^referent @403001 ^structure-type ADJ ^attachment immediate)
(@999018 ^spelling medium ^referent @403002 ^structure-type ADJ ^attachment immediate)
(@999019 ^spelling large ^referent @403003 ^structure-type ADJ ^attachment immediate)
(@999020 ^spelling giant ^referent @403005 ^structure-type ADJ ^attachment immediate)
(@999021 ^spelling big ^referent @403003 ^structure-type ADJ ^attachment immediate)
(@999022 ^type visual ^handle property)
(@999023 ^spelling full ^referent @999024 ^structure-type ADJ)
(@999024 ^property @999025 ^handle full)
(@999025 ^type visual ^handle property)
(@999027 ^property @999022 ^handle enemy)
(@999028 ^spelling destination ^referent @999029 ^structure-type ADJ ^attachment immediate)
(@999029 ^property @404000 ^handle destination1 ^item-type predicate)
(@999030 ^spelling linear ^referent @999031 ^structure-type ADJ ^attachment immediate)
(@999031 ^property @999022 ^handle linear)
(@999032 ^spelling moved ^referent @999033 ^structure-type ADJ)
(@999033 ^property @999022 ^handle moved)
(@999034 ^spelling visible ^referent @999035 ^structure-type ADJ ^attachment immediate)
(@999035 ^property @999022 ^handle visible)
(@999036 ^spelling usual ^referent @999037 ^structure-type ADJ ^attachment immediate)
(@999037 ^property @999022 ^handle usual)
(@999038 ^spelling other ^referent @999039 ^structure-type ADJ ^attachment immediate)
(@999039 ^property @999022 ^handle other)
(@999040 ^spelling initial ^referent @999041 ^structure-type ADJ ^attachment immediate)
(@999041 ^property @999022 ^handle initial)
(@999042 ^spelling final ^referent @999043 ^structure-type ADJ ^attachment immediate)
(@999043 ^property @999022 ^handle final)
(@999044 ^spelling last last-moved ^referent @999045 @4014302 ^structure-type ADJ ^attachment immediate)
(@999045 ^property @999022 ^handle last)
(@999046 ^property @999002 ^handle original)
(@999047 ^spelling original ^referent @999046 ^structure-type ADJ ^attachment immediate)
(@999048 ^spelling empty ^referent @999049 ^structure-type ADJ ^attachment immediate)
(@999049 ^property @999022 ^handle empty)
(@999050 ^spelling same ^referent @999051 ^structure-type ADJ ^attachment immediate)
(@999051 ^property @999022 ^handle same)
(@999052 ^spelling no ^referent @999053 ^structure-type ADJ ^attachment immediate)
(@999053 ^property @999022 ^handle same)
(@999054 ^spelling closed ^referent @4014202 ^structure-type ADJ)
(@999055 ^spelling closed ^referent @999056 ^structure-type ADJ ^attachment immediate)
(@999056 ^property @999022 ^handle closed)
(@999057 ^property @999022 ^handle storage1)
(@999058 ^spelling storage ^referent @999057 ^structure-type ADJ ^attachment immediate)
(@999059 ^property @999061 ^handle starting ^item-type predicate)
(@999060 ^spelling starting ^referent @999059 ^structure-type ADJ ^attachment immediate)
(@999061 ^type visual ^handle property ^item-type property)
(@999062 ^spelling cooked ^referent @4014101 ^structure-type ADJ ^attachment immediate)
(@999063 ^spelling raw ^referent @4014102 ^structure-type ADJ)
(@999064 ^spelling open ^referent @4014201 ^structure-type ADJ)
(@999065 ^spelling wild ^referent @999066 ^structure-type ADJ ^attachment immediate)
(@999066 ^property @404000 ^handle wild)
(@999067 ^spelling top ^referent @999068 ^structure-type ADJ ^attachment immediate)
(@999068 ^property @404000 ^handle top)
(@999069 ^spelling conference ^referent @4013012 ^structure-type ADJ ^attachment immediate)
(@999070 ^spelling soar ^referent @4013007 ^structure-type ADJ ^attachment immediate)
(@999071 ^spelling robotics ^referent @4013014 ^structure-type ADJ ^attachment immediate)
(@999072 ^spelling april ^referent @4013008 ^structure-type ADJ ^attachment immediate)
(@999073 ^spelling main ^referent @4013009 ^structure-type ADJ ^attachment immediate)
(@999074 ^spelling copy ^referent @4013010 ^structure-type ADJ ^attachment immediate)
(@999075 ^spelling turned ^structure-type V ^can-be-part-of turned-on ^tense past)
(@999076 ^spelling turned-off ^referent @4014002 ^structure-type ADJ ^prior-word turned ^current-word off ^attachment immediate ^consumes-prior-word true)
(@999078 ^spelling turned-on ^referent @4014001 ^structure-type ADJ ^prior-word turned ^current-word on ^attachment immediate ^consumes-prior-word true)
(@999077 ^spelling off ^referent @4014002 ^structure-type ADJ ^attachment immediate)
(@999081 ^spelling next ^referent @999082 ^structure-type ADJ ^prior-word D ^attachment immediate)
(@999079 ^referent @4014001 ^structure-type ADJ ^alternative-structure P ^attachment immediate)
(@999080 ^spelling lit ^referent @4014001 ^structure-type ADJ ^attachment immediate)
(@999082 ^handle next1)
(@999083 ^spelling hot ^referent @406001 ^structure-type ADJ ^attachment immediate)
(@999084 ^spelling warm ^referent @406002 ^structure-type ADJ ^attachment immediate)
(@999085 ^spelling cool ^referent @406003 ^structure-type ADJ ^attachment immediate)
(@999086 ^spelling cold ^referent @406004 ^structure-type ADJ ^attachment immediate)
(@999087 ^spelling hottest ^referent @406005 ^structure-type ADJ ^attachment immediate)
(@999088 ^spelling coldest ^referent @406006 ^structure-type ADJ ^attachment immediate)
(@999089 ^spelling heavy ^referent @405001 ^structure-type ADJ ^attachment immediate)
(@999090 ^spelling light ^referent @405002 ^structure-type ADJ ^attachment immediate)
(@999091 ^spelling heaviest ^referent @405003 ^structure-type ADJ ^attachment immediate)
(@999092 ^spelling lightest ^referent @405004 ^structure-type ADJ ^attachment immediate)
(@999093 ^spelling done ^referent @4015001 ^structure-type ADJ)
(@999094 ^spelling finished ^referent @4015001 ^structure-type ADJ)
(@999095 ^spelling won ^referent @4015002 ^structure-type ADJ)
(@999096 ^spelling lost ^referent @4015003 ^structure-type ADJ)
(@999097 ^handle negation ^modifier true)
(@999098 ^spelling not ^referent @999097 ^structure-type ADV)
(@999099 ^spelling up ^referent @999100 ^structure-type ADV)
(@999100 ^handle upwards)
(@999101 ^spelling down ^referent @999102 ^structure-type ADV)
(@999102 ^handle down1)
(@999104 ^spelling forward ^referent @999103 ^structure-type ADV)
(@999103 ^handle forward)
(@999109 ^handle careful1)
(@999110 ^spelling carefully ^referent @999109 ^structure-type ADV)
(@999106 ^handle backward)
(@999107 ^handle around)
(@999111 ^spelling slowly ^referent @999112 ^structure-type ADV)
(@999112 ^handle slow1)
(@999113 ^handle away1)
(@999114 ^spelling away ^referent @999113 ^structure-type ADV)
(@999115 ^handle previously ^modifier true)
(@999116 ^spelling previously ^referent @999115 ^structure-type ADV)
(@999117 ^structure-type S ^prior-word CP ^current-word T ^assigners @999118 @999119 ^construction CP-T ^prior-word-first true false)
(@999120 ^message-type command ^structure-type S ^prior-word VP ^current-word T ^assigners @999121 @999122 ^construction *-VP-T ^prior-word-first true)
(@999354 ^property @4010000 ^handle minute)
(@999386 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999118 ^structure-type CP ^syntactic-structure sentence ^required true ^semantic-structure *copy*)
(@999119 ^after @999118 ^structure-type T ^syntactic-structure terminator ^required true)
(@999121 ^structure-type VP ^syntactic-structure predicate ^required true ^semantic-structure *copy*)
(@999123 ^message-type command ^structure-type C ^converts-to CP ^prior-word VP ^current-word T ^assigners @999124 ^construction VP-T ^prior-word-first false)
(@999122 ^after @999121 ^structure-type T ^syntactic-structure terminator ^required true)
(@999124 ^structure-type VP ^syntactic-structure predicate ^required true ^semantic-structure *copy*)
(@999127 ^structure-type VP ^syntactic-structure predicate ^required true ^semantic-structure *copy*)
(@999125 ^message-type command ^structure-type CP ^prior-word ROSIE ^current-word V ^assigners @999126 @999127 ^construction *-Rosie-VP ^prior-word-first true)
(@999126 ^before @999127 ^structure-type ROSIE ^syntactic-structure head ^required true ^semantic-structure agent)
(@999129 ^structure-type DP ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999128 ^message-type object-definition ^structure-type S ^prior-word DP ^current-word T ^assigners @999129 @999130 ^construction *-DP-T ^prior-word-first true)
(@999130 ^after @999129 ^structure-type T ^syntactic-structure terminator ^required true)
(@999131 ^message-type object-action ^structure-type CP ^prior-word DP ^current-word V ^assigners @999132 @999133 ^construction *-DP-VP ^prior-word-first true)
(@999132 ^before @999133 ^structure-type DP ^relative-position before ^syntactic-structure head ^required true ^semantic-structure agent)
(@999134 ^message-type object-action ^structure-type CP ^prior-word PN ^current-word V ^assigners @999135 @999136 ^construction *-PN-VP ^prior-word-first true)
(@999133 ^after @999132 ^structure-type VP ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999137 ^structure-type C ^converts-to CP ^prior-word DP ^current-word V ^assigners @999138 @999139 ^construction DP-VP ^prior-word-first false)
(@999135 ^before @999136 ^structure-type NP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure agent)
(@999136 ^after @999135 ^structure-type VP ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999139 ^structure-type VP ^syntactic-structure predicate ^required true ^semantic-structure *copy*)
(@999138 ^before @999139 ^structure-type DP ^syntactic-structure head ^required true ^semantic-structure agent)
(@999143 ^after @999141 @999142 ^structure-type T ^syntactic-structure terminator ^required true)
(@999140 ^message-type command ^structure-type S ^prior-word VPING ^current-word T ^assigners @999141 @999142 @999143 ^construction *-MV-VPING-T ^prior-word-first false)
(@999141 ^structure-type MV ^syntactic-structure action ^required true ^semantic-structure *copy*)
(@999142 ^after @999141 ^structure-type VPING ^syntactic-structure nil ^required true ^semantic-structure *embed* ^embed-structure vping-clause)
(@999144 ^spelling stop ^referent @101106 ^number singular ^structure-type MV ^semantic-structure action ^tense present)
(@999146 ^spelling start ^referent @999145 ^number singular ^structure-type MV ^semantic-structure action ^tense present)
(@999145 ^handle start1 ^item-type action ^procedural @999147 ^action-type primitive)
(@999148 ^spelling following ^referent @999149 ^number singular ^structure-type VING ^converts-to VPING ^assigners @999150 @999151 @999152 @999153 @999154 @999155 ^semantic-structure action ^tense present)
(@999147 ^op_name initiate-start1)
(@999150 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999149 ^op_name follow)
(@999151 ^before @999152 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999153 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999152 ^after @999151 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999154 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement2 ^semantic-structure arg2)
(@999155 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999156 ^spelling leading ^referent @999159 ^number singular ^structure-type VING ^converts-to VPING ^assigners @999157 @999158 @999160 @999161 @999162 @999163 ^semantic-structure action ^tense present)
(@999157 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement2 ^semantic-structure arg2)
(@999160 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999158 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999159 ^op_name lead)
(@999161 ^before @999162 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999163 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999162 ^after @999161 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999164 ^message-type for-construct ^structure-type CP ^prior-word * ^current-word for ^assigners @999165 @999166 @999167 @999168 ^construction *-for-DP-semicolon-VP)
(@999167 ^before @999168 ^structure-type VP ^syntactic-structure predicate ^required true ^semantic-structure *embed* ^embed-structure for-action-subclause)
(@999165 ^before @999166 @999167 @999168 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure for-condition)
(@999166 ^before @999167 @999168 ^structure-type SEMICOLON ^syntactic-structure nil ^required true)
(@999169 ^optional true ^structure-type CP ^syntactic-structure nil ^semantic-structure *embed* ^embed-structure for-action-then-subclause)
(@999168 ^before @999169 ^optional true ^structure-type THEN ^syntactic-structure nil)
(@999170 ^message-type while-construct ^structure-type CP ^prior-word * ^current-word while ^assigners @999171 @999172 @999173 ^construction *-while-CP-semicolon-VP)
(@999171 ^before @999172 @999173 ^structure-type CP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure *embed* ^embed-structure while-condition-subclause)
(@999172 ^before @999173 ^structure-type SEMICOLON ^syntactic-structure nil ^required true)
(@999173 ^structure-type VP ^syntactic-structure predicate ^required true ^semantic-structure *embed* ^embed-structure while-action-subclause)
(@999174 ^message-type otherwise-construct ^structure-type CP ^prior-word * ^current-word otherwise ^assigners @999175 @999176 ^construction *-otherwise-colon-VP)
(@999175 ^before @999176 ^structure-type SEMICOLON ^syntactic-structure nil ^required true)
(@999176 ^structure-type VP ^syntactic-structure predicate ^required true ^semantic-structure *embed* ^embed-structure otherwise-action-subclause)
(@999177 ^spelling your ^referent @501027 ^number singular ^specifier definite ^super-type @991001 ^possessive true)
(@999178 ^spelling my ^number singular ^specifier definite ^super-type @991001 ^possessive true)
(@999179 ^spelling these ^number plural ^specifier definite ^super-type @991001)
(@999180 ^spelling |and that| ^number singular ^specifier definite ^prior-word and ^current-word that ^super-type @991001 ^attachment immediate ^consumes-prior-word false ^demonstrative true)
(@999181 ^spelling those ^number plural ^specifier definite ^super-type @991001)
(@999182 ^spelling their ^number plural ^specifier definite ^super-type @991001 ^possessive true)
(@999183 ^spelling a ^number singular ^specifier indefinite ^super-type @991001)
(@999184 ^spelling an ^number singular ^specifier indefinite ^super-type @991001)
(@999185 ^spelling any ^number singular ^specifier indefinite ^super-type @991001)
(@999186 ^spelling another ^number singular ^specifier indefinite distinct ^super-type @991001)
(@999187 ^before @999188 @999190 ^structure-type N ^relative-position after ^syntactic-structure head ^required true)
(@999189 ^before @999187 @999188 @999190 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure adjoin ^repeatable true)
(@999188 ^before @999190 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@999190 ^optional true ^structure-type RCP ^relative-position after ^syntactic-structure complement)
(@999191 ^spelling are ^number plural ^structure-type IS-V ^tense present)
(@999192 ^spelling was ^number singular ^structure-type IS-V ^tense past)
(@999193 ^spelling were ^number plural ^structure-type IS-V ^tense past)
(@999194 ^type conceptual ^handle concept)
(@999195 ^spelling game ^referent @999196 ^number singular ^structure-type N ^syntactic-referent-type DP ^object-feature handle)
(@999197 ^property @999194 ^handle time)
(@999196 ^property @999194 ^handle game1)
(@999198 ^spelling time ^referent @999197 ^number singular ^structure-type N ^syntactic-referent-type DP ^object-feature handle)
(@999201 ^spelling task ^referent @999202 ^number singular ^structure-type N ^syntactic-referent-type DP ^object-feature handle)
(@999199 ^spelling puzzle ^referent @999200 ^number singular ^structure-type N ^syntactic-referent-type DP ^object-feature handle)
(@999200 ^property @999194 ^handle puzzle1)
(@999202 ^property @999194 ^handle task1)
(@999203 ^spelling tour ^referent @999204 ^number singular ^structure-type N ^syntactic-referent-type DP ^object-feature handle)
(@999205 ^spelling name ^referent @999206 ^number singular ^structure-type N ^syntactic-referent-type N ^object-feature handle)
(@999204 ^property @999194 ^handle tour1)
(@999206 ^property @999194 ^handle name1)
(@999207 ^property @999194 ^handle number1)
(@999208 ^spelling number ^referent @999207 ^number singular ^structure-type N ^syntactic-referent-type CN ^object-feature number)
(@999210 ^property @999194 ^handle goal)
(@999209 ^spelling goal ^referent @999210 ^number singular ^structure-type N ^syntactic-referent-type DP ^object-feature handle)
(@999211 ^property @999194 ^handle failure)
(@999212 ^spelling failure ^referent @999211 ^number singular ^structure-type N ^syntactic-referent-type DP ^object-feature handle)
(@999214 ^property @999215 ^handle action)
(@999213 ^spelling action ^referent @999214 ^number singular ^structure-type N ^syntactic-referent-type V ^object-feature handle)
(@999215 ^type action ^handle action)
(@999216 ^property @999194 ^handle relation)
(@999217 ^spelling relation ^referent @999216 ^number singular ^structure-type N ^syntactic-referent-type P)
(@999221 ^spelling last-name ^referent @999222 ^number singular ^structure-type N ^syntactic-referent-type ADJ)
(@999218 ^spelling relationship ^referent @999216 ^number singular ^structure-type N ^syntactic-referent-type P)
(@999219 ^spelling color ^referent @999220 ^number singular ^structure-type N ^syntactic-referent-type ADJ)
(@999220 ^property @999194 ^handle color)
(@999223 ^spelling value ^referent @999224 ^number singular ^structure-type N ^syntactic-referent-type N)
(@999222 ^property @999194 ^handle last-name)
(@999225 ^spelling location ^referent @407002 ^number singular ^structure-type N ^syntactic-referent-type DP)
(@999224 ^property @999194 ^handle value)
(@999228 ^spelling shape ^referent @999227 ^number singular ^structure-type N ^syntactic-referent-type N)
(@999226 ^spelling locations ^referent @407005 ^number plural ^structure-type N ^syntactic-referent-type DP)
(@999227 ^property @999194 ^handle shape)
(@999231 ^property @999194 ^handle answer1)
(@999229 ^spelling size ^referent @999230 ^number singular ^structure-type N ^syntactic-referent-type ADJ)
(@999230 ^property @999194 ^handle size)
(@999232 ^spelling answer ^referent @999231 ^number singular ^structure-type N ^syntactic-referent-type N ^object-feature handle)
(@999235 ^spelling response ^referent @999236 ^number singular ^structure-type N ^syntactic-referent-type N ^object-feature handle)
(@999233 ^spelling question ^referent @999234 ^number singular ^structure-type N ^syntactic-referent-type N ^object-feature handle)
(@999234 ^property @999194 ^handle question)
(@999236 ^property @999194 ^handle response)
(@999237 ^spelling message ^referent @999238 ^number singular ^structure-type N ^syntactic-referent-type N ^object-feature handle)
(@999239 ^multiple true ^property @402000 ^handle steps1 ^item-type object)
(@999238 ^property @999194 ^handle message)
(@999240 ^spelling steps ^referent @999239 ^number plural ^structure-type N ^syntactic-referent-type N ^object-feature handle)
(@999242 ^spelling state ^referent @999241 ^number singular ^structure-type N)
(@999241 ^property @404000 ^handle state1 ^item-type object)
(@999243 ^property @402000 ^handle drink1 ^item-type object)
(@999244 ^spelling drink ^referent @999243 ^number singular ^structure-type N)
(@999245 ^property @402000 ^handle soldier1 ^item-type object)
(@999246 ^spelling soldier ^referent @999245 ^number singular ^structure-type N)
(@999247 ^spelling man ^referent @999248 ^number singular ^structure-type N)
(@999248 ^property @402000 ^handle man1 ^item-type object)
(@999249 ^spelling woman ^referent @999250 ^number singular ^structure-type N)
(@999250 ^property @402000 ^handle woman1 ^item-type object)
(@999251 ^property @402000 ^handle adult1 ^item-type object)
(@999252 ^spelling adult ^referent @999251 ^number singular ^structure-type N)
(@999253 ^spelling solution ^referent @999254 ^number singular ^structure-type N)
(@999254 ^property @404000 ^handle solution1 ^item-type object)
(@999255 ^property @402000 ^handle child1 ^item-type object)
(@999256 ^spelling child ^referent @999255 ^number singular ^structure-type N)
(@999257 ^multiple true ^spelling missionaries ^referent @999258 ^number plural ^structure-type N)
(@999258 ^multiple true ^property @402000 ^handle missionary1 ^item-type object)
(@999259 ^property @402000 ^handle missionary1 ^item-type object ^number singular)
(@999260 ^spelling missionary ^referent @999259 ^number singular ^structure-type N)
(@999261 ^multiple true ^property @402000 ^handle cannibal1 ^item-type object)
(@999262 ^spelling cannibals ^referent @999261 ^number plural ^structure-type N)
(@999263 ^property @402000 ^handle cannibal1 ^item-type object ^number singular)
(@999264 ^spelling cannibal ^referent @999263 ^number singular ^structure-type N)
(@999265 ^spelling boat ^referent @999266 ^number singular ^structure-type N)
(@999266 ^property @402000 ^handle boat1 ^item-type object)
(@999267 ^property @402000 ^handle river1 ^item-type object)
(@999268 ^spelling river ^referent @999267 ^number singular ^structure-type N)
(@999269 ^spelling side ^referent @999270 ^number singular ^structure-type N)
(@999270 ^property @402000 ^handle side1 ^item-type object)
(@999271 ^property @402000 ^handle bank1 ^item-type object)
(@999272 ^spelling bank ^referent @999271 ^number singular ^structure-type N)
(@999273 ^property @999194 ^handle rank1)
(@999274 ^spelling rank ^referent @999273 ^number singular ^structure-type N)
(@999275 ^spelling suit ^referent @999276 ^number singular ^structure-type N)
(@999276 ^property @999194 ^handle suit1)
(@999277 ^property @402000 ^handle opponent1 ^item-type object)
(@999278 ^spelling opponent ^referent @999277 ^number singular ^structure-type N)
(@999279 ^spelling people ^referent @999280 ^number singular ^structure-type N)
(@999280 ^property @402000 ^handle people1 ^item-type object)
(@999281 ^spelling person ^referent @999282 ^number singular ^structure-type N)
(@999282 ^property @402000 ^handle person1 ^item-type object)
(@999283 ^spelling hand ^referent @999284 ^number singular ^structure-type N)
(@999284 ^property @402000 ^handle hand1 ^item-type object)
(@999285 ^spelling deck ^referent @999286 ^number singular ^structure-type N)
(@999286 ^property @402000 ^handle deck ^item-type object)
(@999287 ^spelling rectangle ^referent @402008 ^number signular ^structure-type N)
(@999288 ^spelling triangle ^referent @402001 ^number singular ^structure-type N)
(@999289 ^spelling triangles ^referent @402019 ^number plural ^structure-type N)
(@999290 ^spelling arch ^referent @402002 ^number signular ^structure-type N)
(@999291 ^spelling square ^referent @402003 ^number signular ^structure-type N)
(@999292 ^spelling line ^referent @402018 ^number singular ^structure-type N)
(@999293 ^spelling row ^referent @402018 ^number singular ^structure-type N)
(@999294 ^spelling block ^referent @407001 ^number singular ^structure-type N)
(@999295 ^spelling object ^referent @407003 ^number singular ^structure-type N)
(@999296 ^spelling blocks ^referent @407004 ^number plural ^structure-type N)
(@999297 ^spelling l-block ^referent @402004 ^number singular ^structure-type N)
(@999298 ^property @402004 ^spelling t-block ^referent @402005 ^number singular ^structure-type N)
(@999299 ^spelling sphere ^referent @402006 ^number singular ^structure-type N)
(@999300 ^spelling tile ^referent @407010 ^number singular ^structure-type N)
(@999301 ^spelling tiles ^referent @407011 ^number plural ^structure-type N)
(@999302 ^spelling piece ^referent @407006 ^number singular ^structure-type N)
(@999303 ^spelling pieces ^referent @407007 ^number plural ^structure-type N)
(@999304 ^spelling card ^referent @407008 ^number singular ^structure-type N)
(@999305 ^spelling cards ^referent @407009 ^number plural ^structure-type N)
(@999306 ^spelling fridge ^referent @404043 ^number singular ^structure-type N)
(@999307 ^spelling stove ^referent @404023 ^number singular ^structure-type N ^on-off-state-change true)
(@999311 ^spelling garbage ^referent @404002 ^number singular ^structure-type N)
(@999308 ^spelling faucet ^referent @404044 ^number singular ^structure-type N ^on-off-state-change true)
(@999309 ^spelling cup ^referent @404046 ^number singular ^structure-type N ^on-off-state-change true)
(@999310 ^spelling pantry ^referent @404001 ^number singular ^structure-type N)
(@999312 ^spelling table ^referent @404003 ^number singular ^structure-type N)
(@999313 ^spelling kitchen ^referent @4013001 ^number singular ^structure-type N)
(@999314 ^spelling office ^referent @4012011 ^number singular ^structure-type N)
(@999315 ^spelling lab ^referent @4013013 ^number singular ^structure-type N)
(@999316 ^spelling bedroom ^referent @4013003 ^number singular ^structure-type N)
(@999317 ^spelling bathroom ^referent @4013004 ^number singular ^structure-type N)
(@999318 ^spelling laundry ^referent @4013005 ^number singular ^structure-type N)
(@999319 ^spelling wp47 ^referent @4013047 ^number singular ^structure-type N)
(@999320 ^spelling wp48 ^referent @4013048 ^number singular ^structure-type N)
(@999321 ^spelling wp49 ^referent @4013049 ^number singular ^structure-type N)
(@999322 ^spelling wp50 ^referent @4013050 ^number singular ^structure-type N)
(@999323 ^spelling wp51 ^referent @4013051 ^number singular ^structure-type N)
(@999324 ^spelling wp52 ^referent @4013052 ^number singular ^structure-type N)
(@999325 ^spelling wp53 ^referent @4013053 ^number singular ^structure-type N)
(@999326 ^spelling chicken ^referent @402007 ^number singular ^structure-type N)
(@999327 ^spelling steak ^referent @402012 ^number singular ^structure-type N)
(@999328 ^spelling lights ^referent @402013 ^number singular ^structure-type N ^on-off-state-change true)
(@999331 ^spelling sodas ^referent @402010 ^number plural ^structure-type N)
(@999329 ^spelling light ^referent @402013 ^number singular ^structure-type N ^on-off-state-change true)
(@999330 ^spelling soda ^referent @402010 ^number singular ^structure-type N)
(@999332 ^spelling water ^referent @404045 ^number singular ^structure-type N ^syntactic-referent-type DP)
(@999334 ^spelling stapler ^referent @402020 ^number singular ^structure-type N)
(@999333 ^spelling trash ^referent @402017 ^number singular ^structure-type N)
(@999335 ^spelling box ^referent @402011 ^number singular ^structure-type N)
(@999336 ^spelling book ^referent @402021 ^number singular ^structure-type N)
(@999337 ^spelling package ^referent @402014 ^number singular ^structure-type N)
(@999338 ^spelling papers ^referent @402015 ^number plural ^structure-type N)
(@999339 ^spelling kinect ^referent @402016 ^number singular ^structure-type N)
(@999340 ^spelling meter ^referent @4010001 ^number singular ^structure-type N)
(@999341 ^spelling meters ^referent @4010001 ^number plural ^structure-type N)
(@999342 ^spelling foot ^referent @4010002 ^number singular ^structure-type N)
(@999343 ^spelling feet ^referent @4010002 ^number plural ^structure-type N)
(@999344 ^spelling inch ^referent @4010003 ^number singular ^structure-type N)
(@999345 ^spelling inches ^referent @4010003 ^number plural ^structure-type N)
(@999346 ^spelling centimeter ^referent @4010004 ^number singular ^structure-type N)
(@999347 ^spelling centimeters ^referent @4010004 ^number plural ^structure-type N)
(@999348 ^handle middle-of1)
(@999349 ^relation @999348 ^spelling middle-noun ^number singular ^structure-type N ^prior-word D ^current-word middle ^semantic-structure predicate ^consumes-prior-word false ^semantic-entity-type relation)
(@999350 ^relation @999351 ^spelling front-noun ^number singular ^structure-type DP ^prior-word P ^current-word front ^semantic-structure predicate ^consumes-prior-word false ^semantic-entity-type relation)
(@999352 ^handle back-of1)
(@999353 ^relation @999352 ^spelling back-noun ^number singular ^structure-type DP ^prior-word P ^current-word back ^semantic-structure predicate ^consumes-prior-word false ^semantic-entity-type relation)
(@999351 ^handle front-of1)
(@999387 ^structure-type DP ^relative-position after ^syntactic-structure complement ^required true)
(@999389 ^before @999387 @999388 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999355 ^spelling minutes ^referent @999354 ^number plural ^structure-type N)
(@999356 ^spelling minute ^referent @999354 ^number singular ^structure-type N)
(@999357 ^spelling wall ^referent @4012002 ^number singular ^structure-type N)
(@999358 ^spelling end ^referent @4012001 ^number singular ^structure-type N)
(@999359 ^spelling north ^referent @408001 ^number singular ^structure-type CARDINAL)
(@999360 ^spelling south ^referent @408003 ^number singular ^structure-type CARDINAL)
(@999361 ^spelling east ^referent @408002 ^number singular ^structure-type CARDINAL)
(@999362 ^spelling west ^referent @408004 ^number singular ^structure-type CARDINAL)
(@999363 ^spelling n ^referent @408001 ^number singular ^structure-type CARDINAL)
(@999364 ^spelling s ^referent @408003 ^number singular ^structure-type CARDINAL)
(@999365 ^spelling e ^referent @408002 ^number singular ^structure-type CARDINAL)
(@999366 ^spelling w ^referent @408004 ^number singular ^structure-type CARDINAL)
(@999367 ^spelling waypoint ^referent @4012009 ^number singular ^structure-type N)
(@999368 ^spelling hall ^referent @4012003 ^number singular ^structure-type N)
(@999369 ^spelling hallway ^referent @4012003 ^number singular ^structure-type N)
(@999370 ^spelling intersection ^referent @4012005 ^number singular ^structure-type N)
(@999371 ^spelling intersections ^referent @4012005 ^number plural ^structure-type N)
(@999372 ^spelling junction ^referent @4012005 ^number singular ^structure-type N)
(@999373 ^spelling door ^referent @4012004 ^number singular ^structure-type N)
(@999374 ^spelling doors ^referent @4012014 ^number plural ^structure-type N)
(@999375 ^spelling building ^referent @4013011 ^number singular ^structure-type N)
(@999376 ^spelling doorway ^referent @4012004 ^number singular ^structure-type N)
(@999377 ^spelling doorways ^referent @4012014 ^number plural ^structure-type N)
(@999378 ^spelling opening ^referent @4012006 ^number singular ^structure-type N)
(@999379 ^spelling t-intersection ^referent @4012007 ^number singular ^structure-type N)
(@999380 ^spelling room ^referent @4012008 ^number singular ^structure-type N)
(@999381 ^spelling where ^number singular ^structure-type QP ^question true)
(@999382 ^spelling what ^number singular ^structure-type QP ^question true)
(@999383 ^spelling there ^referent @999384 ^number singular ^structure-type DPX)
(@999384 ^property @999385 ^handle there)
(@999385 ^type visual ^handle handle)
(@999394 ^handle during1)
(@999396 ^relation @999397 ^spelling by ^super-type @609000 ^attachment immediate)
(@999401 ^relation @999400 ^spelling with ^super-type @609000 ^attachment immediate)
(@999395 ^relation @999394 ^spelling during ^super-type @609000 ^attachment immediate)
(@999388 ^before @999387 ^structure-type CONJ ^syntactic-structure CONJ ^required true)
(@999391 ^optional true ^structure-type ANY ^relative-position after ^syntactic-structure head ^exclusive @999390 ^strip-assigners true)
(@999390 ^optional true ^structure-type U ^relative-position after ^syntactic-structure head ^exclusive @999391 ^strip-assigners true)
(@999392 ^relation @999393 ^spelling matched-by ^super-type @609000 ^attachment immediate)
(@999393 ^handle matched-by1)
(@999402 ^relation @999403 ^spelling about ^super-type @609000)
(@999405 ^relation @999404 ^spelling for ^super-type @609000)
(@999397 ^handle by1)
(@999398 ^handle of1)
(@999399 ^relation @999398 ^spelling of ^super-type @609000 ^attachment immediate)
(@999400 ^handle with1)
(@999406 ^relation @999407 ^spelling flank flanks ^super-type @609000 ^attachment immediate)
(@999403 ^handle about1)
(@999404 ^handle for1)
(@999409 ^handle hold1)
(@999410 ^relation @999411 ^spelling heard ^super-type @609000 ^attachment immediate)
(@999407 ^handle flank1)
(@999408 ^relation @999409 ^spelling hold ^super-type @609000 ^attachment immediate)
(@999411 ^handle heard1)
(@999412 ^relation @501002 ^spelling right-of ^structure-type P ^converts-to PP ^assigners @999413 ^relation-type binary)
(@999413 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure head)
(@999421 ^relation @999420 ^alternative-structure ADJ ^super-type @609000)
(@999437 ^structure-type CP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure *embed* ^embed-structure until-clause)
(@999448 ^relation @501026 ^spelling less-than ^structure-type C-ADJ ^converts-to C-ADJ-P ^prior-word less ^current-word than ^assigners @999447)
(@999414 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure head)
(@999415 ^relation @501003 ^spelling left-of ^structure-type P ^converts-to PP ^assigners @999414 ^relation-type binary)
(@999416 ^relation @501001 ^spelling at ^super-type @609000)
(@999417 ^relation @501032 ^spelling from ^super-type @609000 ^directional true)
(@999418 ^relation @501000 ^spelling ontop ^super-type @609000)
(@999419 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999436 ^relation @999435 ^spelling until ^structure-type P ^converts-to UNTIL-PP ^assigners @999437 ^attachment immediate)
(@999420 ^handle off1)
(@999422 ^relation @501001 ^spelling in ^super-type @609000)
(@999423 ^relation @501001 ^spelling inside ^super-type @609000)
(@999424 ^relation @501005 ^spelling below ^super-type @609000)
(@999425 ^relation @501035 ^spelling under ^super-type @609000 ^directional true)
(@999426 ^relation @501014 ^spelling behind ^super-type @609000)
(@999427 ^relation @501004 ^spelling above ^super-type @609000)
(@999428 ^relation @501001 ^spelling into ^super-type @609000 ^directional true)
(@999429 ^relation @501000 ^spelling onto ^super-type @609000 ^directional true)
(@999430 ^relation @501030 ^spelling over ^structure-type P)
(@999431 ^relation @501017 ^spelling holding ^super-type @609000 ^directional false)
(@999432 ^relation @501023 ^spelling as ^super-type @609000)
(@999433 ^relation @501021 ^spelling named ^super-type @609002 ^directional false)
(@999434 ^relation @501021 ^spelling called ^super-type @609002 ^directional false)
(@999435 ^handle until1)
(@999789 ^structure-type ROSIE ^syntactic-structure complement ^required true ^semantic-structure agent)
(@999438 ^relation @501006 ^spelling smaller ^structure-type C-ADJ ^converts-to C-ADJ-P)
(@999439 ^relation @501026 ^spelling less ^structure-type C-ADJ ^converts-to C-ADJ-P)
(@999440 ^relation @501015 ^spelling larger bigger ^structure-type C-ADJ ^converts-to C-ADJ-P)
(@999441 ^relation @501024 ^spelling greater ^structure-type C-ADJ ^converts-to C-ADJ-P)
(@999442 ^relation @501025 ^spelling more ^structure-type C-ADJ ^converts-to C-ADJ-P)
(@999443 ^relation @501028 ^spelling worse ^structure-type C-ADJ ^converts-to C-ADJ-P)
(@999444 ^relation @501029 ^spelling better ^structure-type C-ADJ ^converts-to C-ADJ-P)
(@999445 ^relation @501006 ^spelling smaller-than ^structure-type C-ADJ ^converts-to C-ADJ-P ^prior-word smaller ^current-word than ^assigners @999446)
(@999446 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999451 ^relation @501015 ^spelling larger-than ^structure-type C-ADJ ^converts-to C-ADJ-P ^prior-word larger bigger ^current-word than ^assigners @999452)
(@999447 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999449 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999454 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999450 ^relation @501028 ^spelling worse-than ^structure-type C-ADJ ^converts-to C-ADJ-P ^prior-word worse ^current-word than ^assigners @999449)
(@999452 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999456 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999453 ^relation @501024 ^spelling greater-than ^structure-type C-ADJ ^converts-to C-ADJ-P ^prior-word greater ^current-word than ^assigners @999454)
(@999458 ^relation @501029 ^spelling better-than ^structure-type C-ADJ ^converts-to C-ADJ-P ^prior-word better ^current-word than ^assigners @999457)
(@999455 ^relation @501025 ^spelling more-than ^structure-type C-ADJ ^converts-to C-ADJ-P ^prior-word more ^current-word than ^assigners @999456)
(@999462 ^relation @501011 ^spelling near ^structure-type P ^converts-to PP)
(@999457 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999459 ^relation @501011 ^spelling next ^structure-type P ^converts-to PP)
(@999460 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999465 ^relation @501012 ^spelling diagonal ^structure-type P ^converts-to PP)
(@999461 ^relation @501011 ^spelling next-to ^structure-type P ^converts-to PP ^prior-word next ^current-word to ^assigners @999460)
(@999463 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999468 ^relation @501019 ^spelling equal ^structure-type P ^converts-to PP)
(@999464 ^relation @501011 ^spelling near ^structure-type P ^converts-to PP ^prior-word near ^assigners @999463)
(@999466 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999472 ^spelling in-front ^structure-type in-front ^converts-to PP ^prior-word in ^current-word front ^can-be-part-of in-front-of)
(@999467 ^relation @501012 ^spelling diagonal ^structure-type P ^converts-to PP ^prior-word diagonal ^current-word with ^assigners @999466)
(@999469 ^relation @501019 ^spelling equal-to ^structure-type P ^converts-to PP ^prior-word equal ^current-word to ^assigners @999470)
(@999470 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999475 ^relation @501022 ^spelling between ^super-type @609001 ^attachment immediate)
(@999471 ^relation @501016 ^spelling front ^structure-type FRONT ^converts-to PP)
(@999473 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999481 ^before @999480 @999482 ^structure-type GP ^relative-position after ^syntactic-structure complement ^required true ^semantic-structure *embed* ^embed-structure subclause1)
(@999474 ^relation @501016 ^spelling in-front-of ^structure-type P ^converts-to PP ^prior-word in-front ^current-word of ^assigners @999473)
(@999476 ^spelling |.| ^structure-type T ^delay-retry true)
(@999477 ^spelling |?| ^structure-type QT ^delay-retry true)
(@999478 ^spelling |!| ^structure-type T ^delay-retry true)
(@999479 ^spelling prefer ^referent @101123 ^number singular ^structure-type V ^converts-to VP ^assigners @999480 @999481 @999482 ^semantic-structure action ^tense present)
(@999787 ^handle rosie)
(@999788 ^spelling |rosie,| ^structure-type ROSIE ^prior-word ROSIE ^current-word |,| ^assigners @999789 ^consumes-prior-word true)
(@999480 ^optional true ^structure-type GP ^syntactic-structure complement2 ^semantic-structure *embed* ^embed-structure subclause2)
(@999484 ^optional true ^structure-type GP ^syntactic-structure complement2 ^semantic-structure *embed* ^embed-structure subclause2)
(@999537 ^spelling detect ^referent @101111 ^super-type @60997)
(@999482 ^before @999480 ^optional true ^structure-type P ^syntactic-structure adjunct ^referent-type literal ^lexical-item-spelling over)
(@999483 ^spelling consider ^referent @101146 ^number singular ^structure-type V ^converts-to VP ^assigners @999484 @999485 @999486 ^semantic-structure action ^tense present)
(@999485 ^before @999484 @999486 ^structure-type GP ^relative-position after ^syntactic-structure complement ^required true ^semantic-structure *embed* ^embed-structure subclause1)
(@999486 ^before @999484 ^optional true ^structure-type P ^syntactic-structure adjunct ^referent-type literal ^lexical-item-spelling over)
(@999489 ^before @999488 @999490 ^structure-type GP ^relative-position after ^syntactic-structure complement ^required true ^semantic-structure *embed* ^embed-structure subclause1)
(@999487 ^spelling avoid ^referent @101124 ^number singular ^structure-type V ^converts-to VP ^assigners @999488 @999489 @999490 ^semantic-structure action ^tense present)
(@999488 ^optional true ^structure-type GP ^semantic-structure *embed* ^embed-structure subclause2)
(@999492 ^spelling throw ^referent @101032 ^super-type @60998 ^directional true)
(@999490 ^before @999488 ^optional true ^structure-type P ^syntactic-structure adjunct ^semantic-structure on-off-state ^referent-type literal ^lexical-item-spelling over)
(@999491 ^spelling tell ^referent @101031 ^super-type @60991)
(@999493 ^spelling move ^referent @101008 ^super-type @60987 ^directional true ^tense present)
(@999494 ^spelling set ^referent @101013 ^super-type @60997 ^directional true)
(@999495 ^spelling place ^referent @101000 ^super-type @60999 ^directional true)
(@999496 ^spelling attack ^referent @101144 ^super-type @60997 @60999 ^directional true)
(@999497 ^spelling fill ^referent @101244 ^super-type @60999 ^directional true)
(@999498 ^spelling put ^referent @101000 ^super-type @60985 ^directional true)
(@999499 ^spelling said ^referent @101116 ^super-type @60999 ^tense past)
(@999500 ^spelling discard ^referent @101010 ^super-type @60998)
(@999501 ^spelling pick ^referent @101001 ^super-type @60998 ^can-be-part-of pick-up)
(@999502 ^spelling cook ^referent @101012 ^super-type @60998)
(@999503 ^spelling open ^referent @101003 ^super-type @60997 ^can-be-part-of open-up)
(@999504 ^spelling close ^referent @101004 ^converts-to VP ^super-type @60997)
(@999505 ^spelling organize ^referent @108009 ^super-type @60997)
(@999506 ^spelling clean ^referent @101014 ^super-type @60997)
(@999507 ^spelling activate ^referent @101005 ^super-type @60997)
(@999508 ^spelling store ^referent @101009 ^super-type @60996)
(@999509 ^spelling matches ^referent @101147 ^super-type @60987 ^directional true ^tense present)
(@999510 ^spelling point ^referent @101002 ^super-type @60995)
(@999511 ^spelling check ^referent @101113 ^super-type @60990)
(@999512 ^spelling test ^referent @101113 ^super-type @60990)
(@999513 ^spelling fetch ^referent @101019 ^super-type @60999 ^directional true)
(@999514 ^spelling has ^referent @101119 ^super-type @60989)
(@999515 ^spelling have ^referent @101119 ^super-type @60989)
(@999516 ^spelling play ^referent @101120 ^super-type @60999)
(@999517 ^spelling wins ^referent @101121 ^super-type @60993)
(@999518 ^spelling win ^referent @101121 ^super-type @60993)
(@999519 ^spelling lose ^referent @101122 ^super-type @60993)
(@999520 ^spelling ignore ^referent @101118 ^super-type @60988)
(@999521 ^spelling attend ^referent @101117 ^super-type @60988)
(@999522 ^spelling attend-to ^referent @101117 ^prior-word attend ^current-word to ^super-type @60998 ^consumes-prior-word true)
(@999523 ^spelling stop ^referent @101106 ^super-type @60995)
(@999524 ^message-type command ^referent @101106 ^structure-type CP ^semantic-structure action ^spelling-single-word stop)
(@999525 ^spelling deliver ^referent @101018 ^super-type @60999 ^directional true)
(@999526 ^spelling scan ^referent @101125 ^super-type @60992)
(@999527 ^spelling give ^referent @101126 ^super-type @60999 ^directional true)
(@999528 ^spelling take ^referent @101127 ^super-type @60999)
(@999529 ^spelling guide ^referent @101128 ^super-type @60999)
(@999530 ^spelling serve ^referent @101129 ^super-type @60999)
(@999531 ^spelling perform ^referent @101131 ^super-type @60998)
(@999532 ^spelling bring ^referent @101130 ^super-type @60999)
(@999533 ^message-type command ^spelling turn-left ^referent @101100 ^structure-type CP ^prior-word turn ^current-word left ^prior-word-first true ^referent2 @409002 ^semantic-structure action ^semantic-structure2 arg1)
(@999545 ^spelling go-down ^referent @101103 ^prior-word go ^current-word down ^prior-word-first true ^super-type @60993)
(@999534 ^message-type command ^spelling turn-right ^referent @101100 ^structure-type CP ^prior-word turn ^current-word right ^prior-word-first true ^referent2 @409001 ^semantic-structure action ^semantic-structure2 arg1)
(@999535 ^message-type command ^spelling turn-around ^referent @101100 ^structure-type CP ^prior-word turn ^current-word around ^prior-word-first true ^referent2 @409003 ^semantic-structure action ^semantic-structure2 arg1)
(@999536 ^spelling see ^referent @101111 ^super-type @60997)
(@999538 ^spelling sense ^referent @101111 ^super-type @60997)
(@999539 ^spelling encounter ^referent @101111 ^super-type @60997)
(@999540 ^spelling reach ^referent @101111 ^super-type @60997)
(@999541 ^spelling explore ^referent @101110 ^super-type @60992)
(@999542 ^spelling go ^referent @101103 ^super-type @60992)
(@999543 ^message-type command ^referent @101103 ^structure-type CP ^semantic-structure action ^spelling-single-word go)
(@999552 ^structure-type DP ^relative-position after ^syntactic-structure complement ^required true ^semantic-structure arg2)
(@999544 ^message-type command ^referent @101103 ^structure-type CP ^semantic-structure action ^spelling-single-word forward)
(@999546 ^spelling drive ^referent @101103 ^super-type @60992)
(@999547 ^message-type command ^referent @101103 ^structure-type CP ^semantic-structure action ^spelling-single-word drive)
(@999548 ^spelling drive-down ^referent @101103 ^prior-word drive ^current-word down ^prior-word-first true ^super-type @60993)
(@999549 ^spelling remember ^referent @101112 ^number singular ^structure-type V ^converts-to VP ^assigners @999550 @999551 @999552 ^semantic-structure action ^tense present)
(@999550 ^before @999552 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999573 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure complement ^exclusive @999572 ^semantic-structure arg1)
(@999551 ^structure-type P ^syntactic-structure nil ^required true ^lexical-item-spelling as)
(@999553 ^spelling remember-if ^referent @101112 ^number singular ^structure-type V ^converts-to VP ^prior-word remember ^current-word if ^assigners @999554 @999555 @999556 ^semantic-structure action ^tense present)
(@999554 ^before @999555 @999556 ^structure-type CP ^relative-position after ^syntactic-structure nil ^required true ^semantic-structure *embed* ^embed-structure if-subclause)
(@999557 ^spelling heard ^referent @101115 ^number singular ^structure-type V ^converts-to VP ^assigners @999558 @999559 ^semantic-structure action ^tense present)
(@999555 ^before @999556 ^structure-type P ^syntactic-structure nil ^required true ^lexical-item-spelling as)
(@999556 ^structure-type DP ^relative-position after ^syntactic-structure complement ^required true ^semantic-structure arg2)
(@999560 ^spelling recall ^referent @101114 ^number singular ^structure-type V ^converts-to VP ^assigners @999561 @999562 ^semantic-structure action ^tense present)
(@999558 ^before @999559 ^structure-type PN ^relative-position before ^syntactic-structure head ^required true ^semantic-structure agent)
(@999559 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure complement ^semantic-structure arg1)
(@999561 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure head ^exclusive @999563 ^semantic-structure arg1)
(@999562 ^structure-type PP ^relative-position after ^syntactic-structure complement ^required true ^semantic-structure predicate)
(@999564 ^spelling think ^referent @101143 ^structure-type V ^converts-to VP ^assigners @999565 @999566 ^semantic-structure action ^tense present)
(@999565 ^before @999566 ^structure-type PP ^relative-position after ^syntactic-structure complement ^required true ^semantic-structure arg2)
(@999566 ^structure-type PP ^relative-position after ^syntactic-structure complement ^required true ^semantic-structure arg1)
(@999567 ^spelling ask ^referent @101030 ^number singular ^structure-type V ^converts-to VP ^assigners @999568 @999569 @999570 ^semantic-structure action ^tense present)
(@999568 ^optional true ^structure-type U ^relative-position after ^syntactic-structure complement ^exclusive @999569 ^semantic-structure arg1)
(@999569 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure complement ^exclusive @999568 ^semantic-structure arg1)
(@999570 ^before @999568 @999569 ^optional true ^structure-type PN ^relative-position after ^syntactic-structure head ^semantic-structure agent)
(@999571 ^spelling say ^referent @101116 ^number singular ^structure-type V ^converts-to VP ^assigners @999572 @999573 ^semantic-structure action ^tense present)
(@999577 ^spelling face ^referent @101107 ^number singular ^structure-type V ^converts-to VP ^assigners @999578 ^semantic-structure action ^tense present)
(@999572 ^optional true ^structure-type U ^relative-position after ^syntactic-structure complement ^exclusive @999573 ^semantic-structure arg1)
(@999574 ^spelling follow ^referent @101104 ^super-type @60993)
(@999575 ^spelling orient ^referent @101107 ^number singular ^structure-type V ^converts-to VP ^assigners @999576 ^semantic-structure action ^tense present)
(@999579 ^spelling load ^referent @101145 ^number singular ^structure-type V ^converts-to VP ^assigners @999580 ^semantic-structure action ^tense present)
(@999576 ^structure-type CARDINAL ^syntactic-structure head ^required true ^semantic-structure arg1 ^referent-type literal)
(@999597 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement2 ^exclusive @999593 ^semantic-structure arg2)
(@999578 ^structure-type CARDINAL ^syntactic-structure head ^required true ^semantic-structure arg1 ^referent-type literal)
(@999580 ^structure-type U ^syntactic-structure head ^required true ^semantic-structure arg1 ^referent-type literal)
(@999581 ^spelling stack ^referent @101011 ^number singular ^structure-type V ^converts-to VP ^assigners @999582 @999583 @999584 @999585 @999586 ^semantic-structure action ^tense present)
(@999582 ^before @999584 ^optional true ^structure-type DP ^syntactic-structure head ^semantic-structure arg2)
(@999583 ^optional true ^structure-type CONJ ^syntactic-structure nil)
(@999584 ^optional true ^structure-type DP ^syntactic-structure head ^semantic-structure arg3)
(@999585 ^before @999582 @999584 ^structure-type DP ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999586 ^before @999583 ^optional true ^structure-type CONJ ^syntactic-structure nil)
(@999587 ^after @999588 ^structure-type ADJ ^relative-position after ^syntactic-structure adjunct ^required true ^exclusive @999589 ^semantic-structure on-off-state ^referent-type literal ^lexical-item-spelling off)
(@999592 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999588 ^before @999587 @999589 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure complement ^semantic-structure arg1)
(@999589 ^after @999588 ^structure-type ADJ ^relative-position after ^syntactic-structure adjunct ^required true ^exclusive @999587 ^semantic-structure on-off-state ^referent-type literal ^lexical-item-spelling on)
(@999590 ^message-type wait ^structure-type CP ^spelling-single-word wait)
(@999591 ^spelling wait ^referent @101007 ^super-type @60993)
(@999593 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure head ^exclusive @999596 @999597 ^semantic-structure arg2)
(@999594 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999595 ^before @999593 @999597 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999608 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999596 ^after @999595 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure arg1 ^exclusive @999593 ^semantic-structure *copy* ^repeatable true)
(@999598 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999599 ^optional true ^structure-type DP ^relative-position before ^syntactic-structure head ^semantic-structure agent)
(@999600 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999601 ^after @999600 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999602 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999603 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999604 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999605 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999606 ^before @999607 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999634 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement2 ^semantic-structure relation)
(@999607 ^after @999606 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999609 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement2 ^semantic-structure arg2)
(@999610 ^optional true ^structure-type DP ^relative-position before ^syntactic-structure nil ^semantic-structure agent)
(@999611 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999612 ^after @999617 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999613 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement2 ^semantic-structure arg2)
(@999614 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999615 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999616 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999617 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999618 ^after @999623 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999619 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999620 ^optional true ^structure-type UNTIL-PP ^relative-position after ^syntactic-structure complement2 ^semantic-structure arg2)
(@999621 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999622 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999623 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement ^semantic-structure arg1)
(@999624 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999625 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999626 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999627 ^optional true ^structure-type UNTIL-PP ^relative-position after ^syntactic-structure complement ^semantic-structure arg2)
(@999628 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement ^semantic-structure arg1)
(@999629 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999630 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999631 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999632 ^before @999627 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure head ^semantic-structure arg1)
(@999643 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999633 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999635 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999636 ^before @999634 @999637 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure head ^semantic-structure arg1 ^referent-type literal)
(@999637 ^optional true ^structure-type UNTIL-PP ^relative-position after ^syntactic-structure complement ^semantic-structure arg2)
(@999638 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999639 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999640 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999641 ^before @999642 ^structure-type PN ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999647 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure predicate ^exclusive @999649 @999650 ^semantic-structure predicate ^referent-type literal)
(@999642 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure complement ^semantic-structure arg2 ^referent-type literal)
(@999644 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999645 ^structure-type IF-CLAUSE ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999659 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999646 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999648 ^optional true ^structure-type DP ^relative-position before ^syntactic-structure head ^semantic-structure agent)
(@999649 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure head ^exclusive @999647 @999650 ^semantic-structure arg1)
(@999650 ^optional true ^structure-type C-ADJ-P ^relative-position after ^syntactic-structure predicate ^exclusive @999647 @999649 ^semantic-structure predicate)
(@999651 ^optional true ^structure-type P ^relative-position after ^syntactic-structure head ^exclusive @999655 ^semantic-structure arg1 ^referent-type literal ^strip-assigners true)
(@999652 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999653 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999654 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999655 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure head ^exclusive @999651 ^semantic-structure arg1)
(@999656 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999657 ^after @999659 @999661 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement2 ^semantic-structure arg3)
(@999672 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement2 ^semantic-structure arg2)
(@999658 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999660 ^after @999659 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999661 ^before @999657 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement ^semantic-structure arg2)
(@999662 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999663 ^optional true ^structure-type DP ^relative-position before ^syntactic-structure head ^semantic-structure agent)
(@999664 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999665 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999666 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999667 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement ^semantic-structure arg1)
(@999668 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999669 ^optional true ^structure-type V-AUX ^relative-position before ^syntactic-structure nil ^semantic-structure action-modifier)
(@999670 ^before @999672 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999681 ^message-type yes ^structure-type CP ^spelling-single-word yeah)
(@999671 ^after @999670 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999673 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@999674 ^optional true ^structure-type DP ^relative-position before ^syntactic-structure head ^semantic-structure agent)
(@999675 ^spelling turn-on ^referent @101015 ^prior-word turn ^current-word on ^prior-word-first true ^super-type @60997)
(@999676 ^spelling turn-off ^referent @101016 ^prior-word turn ^current-word off ^prior-word-first true ^super-type @60997 ^prior-word-lti @60001)
(@999677 ^spelling clean-up ^referent @1010014 ^prior-word clean ^current-word up ^prior-word-first true ^super-type @60997 ^prior-word-lti @60001)
(@999678 ^spelling open-up ^referent @101003 ^prior-word open ^current-word up ^prior-word-first true ^super-type @60997)
(@999679 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true)
(@999778 ^message-type second-tower3 ^structure-type CP ^spelling-single-word second-tower3)
(@999680 ^relation @501000 ^spelling on-to ^structure-type P ^converts-to PP ^prior-word on ^current-word to ^assigners @999679 ^directional true)
(@999698 ^message-type init-tower3 ^structure-type CP ^spelling-single-word init-tower3)
(@999682 ^message-type yes ^structure-type CP ^spelling-single-word ok)
(@999683 ^message-type yes ^structure-type CP ^spelling-single-word yes)
(@999684 ^message-type no ^structure-type CP ^spelling-single-word no)
(@999685 ^message-type no ^structure-type CP ^spelling-single-word nope)
(@999686 ^message-type finished ^structure-type CP ^spelling-single-word go)
(@999687 ^message-type finished ^structure-type CP ^spelling-single-word done)
(@999688 ^message-type finished ^structure-type CP ^spelling-single-word finished)
(@999689 ^message-type restart ^structure-type CP ^spelling-single-word restart)
(@999690 ^message-type hello ^structure-type CP ^spelling-single-word hi)
(@999691 ^message-type hello ^structure-type CP ^spelling-single-word hello)
(@999692 ^message-type bye ^structure-type CP ^spelling-single-word bye)
(@999693 ^message-type bye ^structure-type CP ^spelling-single-word goodbye)
(@999694 ^message-type init-3mens ^structure-type CP ^spelling-single-word init-3mens)
(@999695 ^message-type init-maze ^structure-type CP ^spelling-single-word init-maze)
(@999696 ^message-type final-maze ^structure-type CP ^spelling-single-word final-maze)
(@999697 ^message-type init-tictactoe ^structure-type CP ^spelling-single-word init-tictactoe)
(@999749 ^message-type init-blocksworld ^structure-type CP ^spelling-single-word init-blocksworld)
(@999699 ^message-type init-tower4 ^structure-type CP ^spelling-single-word init-tower4)
(@999700 ^message-type fail-tower4 ^structure-type CP ^spelling-single-word fail-tower4)
(@999701 ^message-type fail-tower3 ^structure-type CP ^spelling-single-word fail-tower3)
(@999702 ^message-type fail-tower5 ^structure-type CP ^spelling-single-word fail-tower5)
(@999703 ^message-type init-tower5 ^structure-type CP ^spelling-single-word init-tower5)
(@999704 ^message-type init-8puzzle4 ^structure-type CP ^spelling-single-word init-8puzzle4)
(@999705 ^message-type init-8puzzle5 ^structure-type CP ^spelling-single-word init-8puzzle5)
(@999706 ^message-type init-8puzzle6 ^structure-type CP ^spelling-single-word init-8puzzle6)
(@999707 ^message-type init-8puzzle6alt ^structure-type CP ^spelling-single-word init-8puzzle6alt)
(@999708 ^message-type init-8puzzle ^structure-type CP ^spelling-single-word init-8puzzle)
(@999709 ^message-type init-i8puzzle ^structure-type CP ^spelling-single-word init-i8puzzle)
(@999710 ^message-type init-i15puzzle ^structure-type CP ^spelling-single-word init-i15puzzle)
(@999711 ^message-type init-5puzzle ^structure-type CP ^spelling-single-word init-5puzzle)
(@999712 ^message-type init-i5puzzle ^structure-type CP ^spelling-single-word init-i5puzzle)
(@999713 ^message-type init-husbands ^structure-type CP ^spelling-single-word init-husbands)
(@999714 ^message-type final-husbands ^structure-type CP ^spelling-single-word final-husbands)
(@999715 ^message-type fail-husbands ^structure-type CP ^spelling-single-word fail-husbands)
(@999716 ^message-type init-othello ^structure-type CP ^spelling-single-word init-othello)
(@999717 ^message-type final-othello ^structure-type CP ^spelling-single-word final-othello)
(@999718 ^message-type fail-othello ^structure-type CP ^spelling-single-word fail-othello)
(@999719 ^message-type init-risk ^structure-type CP ^spelling-single-word init-risk)
(@999720 ^message-type final-risk ^structure-type CP ^spelling-single-word final-risk)
(@999721 ^message-type fail-risk ^structure-type CP ^spelling-single-word fail-risk)
(@999722 ^message-type init-frog ^structure-type CP ^spelling-single-word init-frog)
(@999723 ^message-type init-big-frog ^structure-type CP ^spelling-single-word init-big-frog)
(@999724 ^message-type second-frog ^structure-type CP ^spelling-single-word second-frog)
(@999725 ^message-type final-frog ^structure-type CP ^spelling-single-word final-frog)
(@999726 ^message-type final-3mens ^structure-type CP ^spelling-single-word final-3mens)
(@999727 ^message-type final-tictactoe ^structure-type CP ^spelling-single-word final-tictactoe)
(@999728 ^message-type final-tower3 ^structure-type CP ^spelling-single-word final-tower3)
(@999729 ^message-type final-tower4 ^structure-type CP ^spelling-single-word final-tower4)
(@999730 ^message-type final-tower5 ^structure-type CP ^spelling-single-word final-tower5)
(@999731 ^message-type final-8puzzle ^structure-type CP ^spelling-single-word final-8puzzle)
(@999732 ^message-type final-i8puzzle ^structure-type CP ^spelling-single-word final-i8puzzle)
(@999733 ^message-type final-5puzzle ^structure-type CP ^spelling-single-word final-5puzzle)
(@999734 ^message-type final-i5puzzle ^structure-type CP ^spelling-single-word final-i5puzzle)
(@999735 ^message-type final-i15puzzle ^structure-type CP ^spelling-single-word final-i15puzzle)
(@999736 ^message-type init-mac ^structure-type CP ^spelling-single-word init-mac)
(@999737 ^message-type final-mac ^structure-type CP ^spelling-single-word final-mac)
(@999738 ^message-type second-mac ^structure-type CP ^spelling-single-word second-mac)
(@999739 ^message-type third-mac ^structure-type CP ^spelling-single-word third-mac)
(@999740 ^message-type fail-mac ^structure-type CP ^spelling-single-word fail-mac)
(@999741 ^message-type fail-fox ^structure-type CP ^spelling-single-word fail-fox)
(@999742 ^message-type fail-fox2 ^structure-type CP ^spelling-single-word fail-fox2)
(@999743 ^message-type init-fox ^structure-type CP ^spelling-single-word init-fox)
(@999744 ^message-type second-fox ^structure-type CP ^spelling-single-word second-fox)
(@999745 ^message-type final-fox ^structure-type CP ^spelling-single-word final-fox)
(@999746 ^message-type final-mahjong ^structure-type CP ^spelling-single-word final-mahjong)
(@999747 ^message-type init-mahjong ^structure-type CP ^spelling-single-word init-mahjong)
(@999748 ^message-type final-blocksworld ^structure-type CP ^spelling-single-word final-blocksworld)
(@999766 ^message-type final-sudoku4 ^structure-type CP ^spelling-single-word final-sudoku4)
(@999750 ^message-type final-blocksworld2 ^structure-type CP ^spelling-single-word final-blocksworld2)
(@999751 ^message-type init-blocksworld2 ^structure-type CP ^spelling-single-word init-blocksworld2)
(@999752 ^message-type final-peg ^structure-type CP ^spelling-single-word final-peg)
(@999753 ^message-type init-peg ^structure-type CP ^spelling-single-word init-peg)
(@999754 ^message-type init-peg2 ^structure-type CP ^spelling-single-word init-peg2)
(@999755 ^message-type fail-3mens ^structure-type CP ^spelling-single-word fail-3mens)
(@999756 ^message-type fail-tictactoe ^structure-type CP ^spelling-single-word fail-tictactoe)
(@999757 ^message-type final-sokoban ^structure-type CP ^spelling-single-word final-sokoban)
(@999758 ^message-type init-sokoban ^structure-type CP ^spelling-single-word init-sokoban)
(@999759 ^message-type fail-sokoban ^structure-type CP ^spelling-single-word fail-sokoban)
(@999760 ^message-type final-connect-3 ^structure-type CP ^spelling-single-word final-connect-3)
(@999761 ^message-type init-connect-3 ^structure-type CP ^spelling-single-word init-connect-3)
(@999762 ^message-type fail-connect-3 ^structure-type CP ^spelling-single-word fail-connect-3)
(@999763 ^message-type final-connect-4 ^structure-type CP ^spelling-single-word final-connect-4)
(@999764 ^message-type init-connect-4 ^structure-type CP ^spelling-single-word init-connect-4)
(@999765 ^message-type fail-connect-4 ^structure-type CP ^spelling-single-word fail-connect-4)
(@999785 ^handle rosie)
(@999767 ^message-type init-sudoku4 ^structure-type CP ^spelling-single-word init-sudoku4)
(@999768 ^message-type fail-sudoku4 ^structure-type CP ^spelling-single-word fail-sudoku4)
(@999769 ^message-type final-pushmaze ^structure-type CP ^spelling-single-word final-pushmaze)
(@999770 ^message-type init-pushmaze ^structure-type CP ^spelling-single-word init-pushmaze)
(@999771 ^message-type final-6mens ^structure-type CP ^spelling-single-word final-6mens)
(@999772 ^message-type init-6mens ^structure-type CP ^spelling-single-word init-6mens)
(@999773 ^message-type fail-6mens ^structure-type CP ^spelling-single-word fail-6mens)
(@999774 ^message-type final-breakthrough ^structure-type CP ^spelling-single-word final-breakthrough)
(@999775 ^message-type init-breakthrough ^structure-type CP ^spelling-single-word init-breakthrough)
(@999776 ^message-type fail-breakthrough ^structure-type CP ^spelling-single-word fail-breakthrough)
(@999777 ^message-type second-breakthrough ^structure-type CP ^spelling-single-word second-breakthrough)
(@999779 ^message-type second-tower4 ^structure-type CP ^spelling-single-word second-tower4)
(@999786 ^spelling rosie ^referent @999787 ^number singular ^structure-type ROSIE)
(@999780 ^message-type second-tower5 ^structure-type CP ^spelling-single-word second-tower5)
(@999781 ^message-type final-familycross ^structure-type CP ^spelling-single-word final-familycross)
(@999782 ^message-type init-familycross ^structure-type CP ^spelling-single-word init-familycross)
(@999783 ^message-type fail-familycross ^structure-type CP ^spelling-single-word fail-familycross)
(@999784 ^spelling Rosie ^referent @999785 ^number singular ^structure-type ROSIE)
(@1000043 ^before @1000044 @1000045 ^optional true ^structure-type ADJ ^syntactic-structure adjoin ^repeatable true)
(@1000044 ^before @1000045 ^structure-type N ^relative-position after ^syntactic-structure head ^required true)
(@999791 ^property @999792 ^handle me ^item-type object)
(@999790 ^spelling me ^referent @999791 ^number singular ^structure-type PN)
(@999792 ^type person ^handle person1 ^item-type property)
(@999793 ^spelling alice ^referent @404040 ^number singular ^structure-type PN ^converts-to DP)
(@999794 ^spelling bob ^referent @404041 ^number singular ^structure-type PN ^converts-to DP)
(@999795 ^spelling charlie ^referent @404042 ^number singular ^structure-type PN ^converts-to DP)
(@999796 ^number singular ^structure-type *-V-ADJ ^converts-to DP ^prior-word V ^current-word ADJ ^assigners @999797 @999798 @999799 ^construction *-V-ADJ ^prior-word-first true)
(@999798 ^before @999799 ^structure-type N ^syntactic-structure head ^required true)
(@999797 ^before @999798 ^optional true ^structure-type ADJ ^syntactic-structure adjoin ^repeatable true)
(@999799 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@999800 ^number singular ^structure-type V-ADJ ^converts-to DP ^prior-word V ^current-word ADJ ^assigners @999801 @999802 @999803 ^construction V-ADJ ^prior-word-first false)
(@999802 ^before @999803 ^structure-type N ^syntactic-structure head ^required true)
(@999801 ^before @999802 ^structure-type ADJ ^syntactic-structure adjoin ^required true ^repeatable true)
(@999803 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@999804 ^number singular ^structure-type |N-X| ^converts-to DP ^prior-word V ^current-word N ^assigners @999805 @999806 ^construction *-V-N ^prior-word-first true)
(@999806 ^before @999805 ^structure-type N ^syntactic-structure head ^required true)
(@999805 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@999807 ^number singular ^structure-type |N-X| ^converts-to DP ^prior-word V ^current-word N ^assigners @999808 @999809 ^construction |V-N| ^prior-word-first false)
(@999809 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@999808 ^before @999809 ^structure-type N ^syntactic-structure head ^required true)
(@999810 ^number singular ^structure-type P-N-X ^converts-to DP ^prior-word P ^current-word N ^assigners @999811 @999812 ^construction |P-N| ^prior-word-first false)
(@999812 ^before @999811 ^structure-type N ^syntactic-structure head ^required true)
(@999811 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@999813 ^number singular ^structure-type P-ADJ-X ^converts-to DP ^prior-word P ^current-word ADJ ^assigners @999814 @999815 @999816 ^construction P-ADJ ^prior-word-first false)
(@999815 ^before @999816 ^structure-type N ^syntactic-structure head ^required true)
(@999814 ^before @999815 ^structure-type ADJ ^syntactic-structure adjoin ^repeatable true)
(@999816 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@999817 ^spelling is-that ^structure-type RPN ^converts-to RC ^prior-word is ^current-word that ^assigners @999818 ^attachment immediate ^consumes-prior-word false)
(@999818 ^structure-type CP ^relative-position after ^syntactic-structure head ^required true ^delay-merge true ^semantic-structure *copy*)
(@999819 ^message-type new-verb ^structure-type UV ^converts-to VP ^prior-word U ^current-word D ^assigners @999820 @999821 @999822 ^construction *-U-D ^prior-word-first true)
(@999820 ^structure-type DP ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999822 ^structure-type U ^syntactic-structure action ^required true ^semantic-structure action ^referent-type literal ^predicted-structure-type V)
(@999821 ^optional true ^structure-type PP ^syntactic-structure complement2 ^semantic-structure arg2)
(@999823 ^message-type new-verb ^structure-type UV ^converts-to VP ^prior-word U ^current-word P ^assigners @999824 @999825 ^construction *-U-P ^prior-word-first true)
(@999824 ^structure-type U ^syntactic-structure action ^required true ^semantic-structure action ^referent-type literal ^predicted-structure-type V)
(@999825 ^optional true ^structure-type PP ^syntactic-structure complement2 ^semantic-structure arg2)
(@999826 ^message-type unknown-word ^structure-type S ^prior-word U ^current-word T ^assigners @999827 @999828 ^construction *-U-T ^prior-word-first true)
(@999827 ^structure-type T ^syntactic-structure terminator ^required true)
(@999828 ^structure-type U ^syntactic-structure head ^required true)
(@999829 ^message-type new-verb ^structure-type UV ^converts-to VP ^prior-word U ^current-word PN ^assigners @999830 @999831 ^construction *-U-PN ^prior-word-first true)
(@999830 ^structure-type PN ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999833 ^before @999834 ^structure-type U ^syntactic-structure head ^required true ^semantic-structure arg1 ^referent-type literal ^predicted-structure-type ADJ N)
(@999836 ^optional true ^structure-type N ^relative-position after ^syntactic-structure predicate ^exclusive @999835 ^semantic-structure property ^referent-type literal)
(@999831 ^structure-type U ^syntactic-structure action ^required true ^semantic-structure action ^referent-type literal ^predicted-structure-type V)
(@999832 ^message-type adjective-definition ^structure-type CP ^prior-word U ^current-word IS-V ^assigners @999833 @999834 @999835 @999836 ^construction *-U-is-DP ^prior-word-first true)
(@999834 ^before @999835 ^after @999833 ^structure-type IS-V ^syntactic-structure predicate ^required true ^lexical-item-spelling is)
(@999835 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure predicate ^exclusive @999836 ^semantic-structure property ^referent-type literal)
(@999837 ^message-type object-description ^structure-type C ^converts-to CP ^prior-word DP ^current-word IS-V ^assigners @999838 @999839 @999840 @999841 @999842 @999843 @999844 @999845 @999846 @999847 @999848 @999849 @999850 @999851 ^construction *-DP-is-ADJ/DP/PP/CONJP/RC ^prior-word-first true)
(@999838 ^structure-type DP ^relative-position before ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999839 ^optional true ^structure-type V-AUX ^relative-position after ^syntactic-structure nil ^semantic-structure modifier)
(@999840 ^before @999841 ^after @999838 ^optional true ^structure-type CONJP ^relative-position before ^syntactic-structure head ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999841 ^before @999849 ^structure-type IS-V ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999842 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier ^referent-type literal)
(@999843 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure predicate ^exclusive @999844 @999845 @999846 @999847 @999848 @999849 @999851 ^semantic-structure predicate ^referent-type literal)
(@999844 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure predicate ^exclusive @999843 @999845 @999846 @999847 @999848 @999849 @999851 ^semantic-structure predicate ^referent-type literal)
(@999845 ^optional true ^structure-type N ^relative-position after ^syntactic-structure predicate ^exclusive @999843 @999844 @999846 @999847 @999848 @999849 @999851 ^semantic-structure predicate ^referent-type literal)
(@999846 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement ^exclusive @999843 @999844 @999845 @999847 @999848 @999849 @999851 ^semantic-structure relation)
(@999847 ^optional true ^structure-type U ^relative-position after ^syntactic-structure predicate ^exclusive @999843 @999844 @999845 @999846 @999848 @999849 @999851 ^semantic-structure predicate ^referent-type literal ^predicted-structure-type ADJ)
(@999849 ^optional true ^structure-type RC ^relative-position after ^syntactic-structure predicate ^exclusive @999843 @999844 @999845 @999846 @999847 @999848 @999851 ^semantic-structure *embed* ^embed-structure subclause)
(@999848 ^optional true ^structure-type C-ADJ-P ^relative-position after ^syntactic-structure predicate ^exclusive @999843 @999844 @999845 @999846 @999847 @999849 @999851 ^semantic-structure predicate)
(@999850 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure predicate ^semantic-structure *copy* ^repeatable true)
(@999851 ^optional true ^structure-type V ^relative-position after ^syntactic-structure predicate ^exclusive @999843 @999844 @999845 @999846 @999848 @999849 ^semantic-structure predicate ^referent-type literal ^strip-assigners true)
(@999852 ^structure-type PN ^relative-position before ^syntactic-structure head ^required true ^exclusive @999852 ^semantic-structure arg1)
(@999853 ^optional true ^structure-type V-AUX ^relative-position after ^syntactic-structure nil ^semantic-structure modifier)
(@999854 ^message-type object-description ^structure-type C ^converts-to CP ^prior-word PN ^current-word IS-V ^assigners @999852 @999853 @999855 @999856 @999857 @999858 @999859 @999860 @999861 @999862 @999863 @999864 @999865 @999866 ^construction *-PN-is-ADJ/DP/PP/CONJP/RC ^prior-word-first true)
(@999855 ^before @999856 ^after @999852 ^optional true ^structure-type CONJP ^relative-position before ^syntactic-structure head ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999856 ^before @999864 ^structure-type IS-V ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999857 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier ^referent-type literal)
(@999858 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure predicate ^exclusive @999859 @999860 @999861 @999862 @999863 @999864 @999866 ^semantic-structure predicate ^referent-type literal)
(@999859 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure predicate ^exclusive @999858 @999860 @999861 @999862 @999863 @999864 @999866 ^semantic-structure predicate ^referent-type literal)
(@999860 ^optional true ^structure-type N ^relative-position after ^syntactic-structure predicate ^exclusive @999858 @999859 @999861 @999862 @999863 @999864 @999866 ^semantic-structure predicate ^referent-type literal)
(@999861 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement ^exclusive @999858 @999859 @999860 @999862 @999863 @999864 @999866 ^semantic-structure relation)
(@999862 ^optional true ^structure-type U ^relative-position after ^syntactic-structure predicate ^exclusive @999858 @999859 @999860 @999861 @999863 @999864 @999866 ^semantic-structure predicate ^referent-type literal ^predicted-structure-type ADJ)
(@999864 ^optional true ^structure-type RC ^relative-position after ^syntactic-structure predicate ^exclusive @999858 @999859 @999860 @999861 @999862 @999863 @999866 ^semantic-structure *embed* ^embed-structure subclause)
(@999863 ^optional true ^structure-type C-ADJ-P ^relative-position after ^syntactic-structure predicate ^exclusive @999858 @999859 @999860 @999861 @999862 @999864 @999866 ^semantic-structure predicate)
(@999865 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure predicate ^semantic-structure *copy* ^repeatable true)
(@999866 ^optional true ^structure-type V ^relative-position after ^syntactic-structure predicate ^exclusive @999858 @999859 @999860 @999861 @999863 @999864 ^semantic-structure predicate ^referent-type literal ^strip-assigners true)
(@999867 ^message-type object-description ^structure-type C ^converts-to CP ^prior-word CONJP ^current-word IS-V ^assigners @999868 @999869 @999870 @999871 @999872 @999873 @999874 @999875 @999876 @999877 @999878 @999879 @999880 ^construction CONJP-is-ADJ/DP/PP/CONJP/RC ^prior-word-first true false)
(@999868 ^structure-type DP ^relative-position before ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999869 ^before @999870 ^after @999868 ^optional true ^structure-type CONJP ^relative-position before ^syntactic-structure head ^copy-structure arg1 ^semantic-structure *copy* ^repeatable true)
(@999870 ^before @999878 ^structure-type IS-V ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999871 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier ^referent-type literal)
(@999872 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure predicate ^exclusive @999873 @999874 @999875 @999876 @999877 @999878 @999880 ^semantic-structure predicate ^referent-type literal)
(@999873 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure predicate ^exclusive @999872 @999874 @999875 @999876 @999877 @999878 @999880 ^semantic-structure predicate ^referent-type literal)
(@999874 ^optional true ^structure-type N ^relative-position after ^syntactic-structure predicate ^exclusive @999872 @999873 @999875 @999876 @999877 @999878 @999880 ^semantic-structure predicate ^referent-type literal)
(@999875 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement ^exclusive @999872 @999873 @999874 @999876 @999877 @999878 @999880 ^semantic-structure relation)
(@999876 ^optional true ^structure-type U ^relative-position after ^syntactic-structure predicate ^exclusive @999872 @999873 @999874 @999875 @999877 @999878 @999880 ^semantic-structure predicate ^referent-type literal ^predicted-structure-type ADJ)
(@999877 ^optional true ^structure-type C-ADJ-P ^relative-position after ^syntactic-structure predicate ^exclusive @999872 @999873 @999874 @999875 @999876 @999878 @999880 ^semantic-structure predicate)
(@999878 ^optional true ^structure-type RC ^relative-position after ^syntactic-structure predicate ^exclusive @999872 @999873 @999874 @999875 @999876 @999877 @999880 ^semantic-structure *embed* ^embed-structure subclause)
(@999879 ^optional true ^structure-type CONJP ^syntactic-structure predicate ^copy-structure predicate ^semantic-structure *copy* ^repeatable true)
(@999880 ^optional true ^structure-type V ^relative-position after ^syntactic-structure predicate ^exclusive @999872 @999873 @999874 @999875 @999877 @999878 ^semantic-structure predicate ^referent-type literal ^strip-assigners true)
(@999881 ^structure-type DP ^relative-position before ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999882 ^message-type object-description ^referent @101148 ^structure-type C ^converts-to CP ^prior-word DP ^current-word IS-V ^assigners @999881 @999883 @999884 @999885 @999886 @999887 @999888 @999889 ^construction DP-is-ADJ/DP/PP/CONJP/RP ^prior-word-first false ^semantic-structure action)
(@999884 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier ^referent-type literal)
(@999883 ^structure-type IS-V ^syntactic-structure predicate ^required true)
(@999885 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure predicate ^exclusive @999886 @999887 @999888 @999889 ^semantic-structure predicate ^referent-type literal)
(@999886 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure predicate ^exclusive @999885 @999887 @999888 ^semantic-structure predicate ^referent-type literal)
(@999887 ^optional true ^structure-type N ^relative-position after ^syntactic-structure predicate ^exclusive @999885 @999886 @999888 @999889 ^semantic-structure predicate ^referent-type literal)
(@999888 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement ^exclusive @999885 @999886 @999887 @999889 ^semantic-structure relation)
(@999889 ^optional true ^structure-type C-ADJ-P ^relative-position after ^syntactic-structure complement ^exclusive @999885 @999886 @999887 @999888 ^semantic-structure relation ^referent-type literal)
(@999890 ^structure-type C-ADJ-P ^relative-position before ^syntactic-structure head ^required true ^semantic-structure *embed* ^embed-structure arg1)
(@999891 ^referent @101148 ^structure-type C ^converts-to CP ^prior-word C-ADJ-P ^current-word IS-V ^assigners @999890 @999892 @999893 @999894 @999895 ^construction |C-ADJ-P IS /DP/PP/C-ADJP-CONJP/RP| ^prior-word-first false ^semantic-structure action)
(@999892 ^structure-type IS-V ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999893 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure adverb-modifier ^semantic-structure modifier ^referent-type literal)
(@999894 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure predicate ^exclusive @999895 ^semantic-structure predicate ^referent-type literal)
(@999895 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement ^exclusive @999894 ^semantic-structure relation)
(@999896 ^before @999897 ^structure-type ADJ ^syntactic-structure head ^required true ^semantic-structure arg1 ^referent-type literal)
(@999897 ^before @999899 ^after @999896 ^structure-type IS-V ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999898 ^message-type adjective-definition ^structure-type CP ^prior-word ADJ ^current-word IS-V ^assigners @999896 @999897 @999899 ^construction *-ADJ-is-DP ^prior-word-first true)
(@999899 ^structure-type DP ^relative-position after ^syntactic-structure predicate ^required true ^semantic-structure property ^referent-type literal)
(@999900 ^before @999901 ^structure-type N ^syntactic-structure head ^required true ^semantic-structure arg1 ^referent-type literal)
(@999901 ^before @999903 ^after @999900 ^structure-type IS-V ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999902 ^message-type adjective-definition ^structure-type CP ^prior-word N ^current-word IS-V ^assigners @999900 @999901 @999903 ^construction *-N-is-DP ^prior-word-first true)
(@999903 ^after @999901 ^structure-type DP ^syntactic-structure predicate ^required true ^semantic-structure property ^referent-type literal)
(@999904 ^message-type what-is-question ^structure-type S ^prior-word what ^current-word IS-V ^assigners @999905 @999906 @999907 @999908 ^construction *-What-is-PP/DP-QT ^prior-word-first true)
(@999905 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement2 ^exclusive @999906 ^semantic-structure relation)
(@999906 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure head ^exclusive @999905 ^semantic-structure arg1)
(@999907 ^structure-type IS-V ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999908 ^structure-type QT ^syntactic-structure terminator ^required true)
(@999909 ^before @999914 ^structure-type IS-V ^syntactic-structure nil ^required true ^semantic-structure nil)
(@999910 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure head ^exclusive @999911 ^semantic-structure arg1)
(@999911 ^optional true ^specifier definite ^structure-type THIS ^relative-position after ^syntactic-structure head ^exclusive @999910 ^semantic-structure arg1 ^demonstrative true)
(@999912 ^before @999909 @999914 ^structure-type N ^syntactic-structure predicate ^required true ^semantic-structure property ^referent-type literal)
(@999913 ^message-type predicate-question ^structure-type S ^prior-word what ^current-word N ^assigners @999909 @999910 @999911 @999912 @999914 ^construction *-What-N-is-DP-QT ^prior-word-first true)
(@999914 ^structure-type QT ^syntactic-structure terminator ^required true)
(@999915 ^message-type where-is-question ^structure-type S ^prior-word where ^current-word IS-V ^assigners @999916 @999917 @999918 ^construction *-Where-is-DP-QT ^prior-word-first true)
(@999916 ^before @999917 @999918 ^structure-type IS-V ^syntactic-structure predicate ^required true ^semantic-structure where-question)
(@999917 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@999918 ^structure-type QT ^syntactic-structure terminator ^required true)
(@999919 ^message-type object-description ^structure-type CP ^prior-word there ^current-word IS-V ^assigners @999920 @999921 @999922 @999923 @999924 ^construction *-There-is-DP/ADJ/PP ^prior-word-first true)
(@999920 ^before @999922 @999923 @999924 ^structure-type IS-V ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999921 ^structure-type ADV ^syntactic-structure adverb-modifier ^semantic-structure modifier ^referent-type literal)
(@999922 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure predicate ^exclusive @999923 @999924 ^semantic-structure predicate)
(@999923 ^optional true ^structure-type ADJ ^syntactic-structure predicate ^exclusive @999922 @999924 ^semantic-structure predicate ^referent-type literal)
(@999924 ^optional true ^syntactic-structure complement ^exclusive @999922 @999923 ^semantic-structure arg2 ^structrure P)
(@999925 ^message-type object-description ^structure-type C ^converts-to CP ^prior-word there ^current-word IS-V ^assigners @999926 @999927 @999928 @999929 @999930 @999931 ^construction There-is-ADJ/DP/PP ^prior-word-first false)
(@999926 ^before @999927 @999928 @999929 @999930 @999931 ^structure-type IS-V ^syntactic-structure predicate ^required true ^semantic-structure action)
(@999927 ^structure-type ADV ^syntactic-structure adverb-modifier ^semantic-structure modifier ^referent-type literal)
(@999928 ^optional true ^structure-type ADJ ^syntactic-structure predicate ^exclusive @999929 @999930 @999931 ^semantic-structure predicate ^referent-type literal)
(@999929 ^optional true ^structure-type DP ^syntactic-structure predicate ^exclusive @999928 @999930 @999931 ^semantic-structure predicate)
(@999930 ^optional true ^structure-type PP ^syntactic-structure complement ^exclusive @999928 @999929 @999931 ^semantic-structure arg2)
(@999931 ^optional true ^structure-type C-ADJ-P ^syntactic-structure predicate ^exclusive @999928 @999929 @999930 ^semantic-structure predicate)
(@999932 ^message-type object-question ^structure-type S ^prior-word * ^current-word is ^assigners @999933 @999934 @999935 @999936 @999937 ^construction *-Is-DP-DP/ADJ/PP?)
(@999934 ^optional true ^structure-type ADJ ^syntactic-structure predicate ^exclusive @999933 @999936 ^semantic-structure predicate ^referent-type literal)
(@999933 ^optional true ^structure-type DP ^syntactic-structure predicate ^exclusive @999934 @999936 ^semantic-structure predicate ^referent-type literal)
(@999935 ^before @999933 @999934 @999936 ^specifier definite ^structure-type DP ^syntactic-structure head ^required true ^semantic-structure arg1 ^demonstrative true)
(@999936 ^optional true ^structure-type PP ^syntactic-structure complement ^exclusive @999933 @999934 ^semantic-structure relation)
(@999937 ^structure-type QT ^syntactic-structure terminator ^required true)
(@999938 ^message-type object-question ^structure-type S ^prior-word IS-V ^current-word D ^assigners @999939 @999940 @999941 @999942 @999943 @999944 ^construction *-Is-DP-DP/ADJ/PP? ^prior-word-first true)
(@999940 ^before @999941 @999942 @999943 ^specifier definite ^structure-type DP ^syntactic-structure head ^required true ^semantic-structure arg1 ^demonstrative true)
(@999939 ^before @999940 @999941 @999942 @999945 ^structure-type IS-V ^syntactic-structure predicate ^required true)
(@999941 ^optional true ^structure-type DP ^syntactic-structure predicate ^exclusive @999942 @999943 ^semantic-structure predicate ^referent-type literal)
(@999942 ^after @999940 ^optional true ^structure-type ADJ ^syntactic-structure predicate ^exclusive @999941 @999943 ^semantic-structure predicate ^referent-type literal)
(@999943 ^optional true ^structure-type PP ^syntactic-structure complement ^exclusive @999941 @999942 ^semantic-structure relation)
(@999944 ^structure-type QT ^syntactic-structure terminator ^required true)
(@999946 ^spelling |0| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011200)
(@999947 ^spelling |1| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011201)
(@999948 ^spelling |2| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011202)
(@999949 ^spelling |3| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011203)
(@999950 ^spelling |4| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011204)
(@999951 ^spelling |5| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011205)
(@999952 ^spelling |6| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011206)
(@999953 ^spelling |7| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011207)
(@999954 ^spelling |8| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011208)
(@999955 ^spelling |9| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011209)
(@999956 ^spelling |10| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011210)
(@999957 ^spelling |11| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011211)
(@999958 ^spelling |12| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011212)
(@999959 ^spelling |13| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011213)
(@999960 ^spelling |14| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011214)
(@999961 ^spelling |15| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011215)
(@999962 ^spelling |16| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011216)
(@999963 ^spelling |17| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011217)
(@999964 ^spelling |18| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011218)
(@999965 ^spelling |19| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011219)
(@999966 ^spelling |20| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011220)
(@999967 ^spelling |30| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011230)
(@999968 ^spelling |31| ^number singular ^specifier indefinite ^structure-type DP ^constraint @4011231)
(@999969 ^before @999970 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure adjoin ^repeatable true)
(@999970 ^before @999971 ^optional true ^structure-type N ^relative-position after ^syntactic-structure head)
(@999971 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@999972 ^spelling no ^number plural ^super-type @6010000 ^constraint @4011200)
(@999973 ^spelling zero ^number plural ^super-type @6010000 ^constraint @4011200)
(@999974 ^spelling one ^number singular ^super-type @6010000 ^constraint @4011201)
(@999975 ^spelling two ^number plural ^super-type @6010000 ^constraint @4011202)
(@999976 ^spelling three ^number singular ^super-type @6010000 ^constraint @4011203)
(@999977 ^spelling four ^number singular ^super-type @6010000 ^constraint @4011204)
(@999978 ^spelling five ^number singular ^super-type @6010000 ^constraint @4011205)
(@999979 ^spelling six ^number singular ^super-type @6010000 ^constraint @4011206)
(@999980 ^spelling seven ^number singular ^super-type @6010000 ^constraint @4011207)
(@999981 ^spelling eight ^number singular ^super-type @6010000 ^constraint @4011208)
(@999982 ^spelling nine ^number singular ^super-type @6010000 ^constraint @4011209)
(@999983 ^spelling ten ^number singular ^super-type @6010000 ^constraint @4011210)
(@999984 ^spelling eleven ^number singular ^super-type @6010000 ^constraint @4011211)
(@999985 ^spelling twelve ^number plural ^super-type @6010000 ^constraint @4011212)
(@999986 ^spelling thirteen ^number singular ^super-type @6010000 ^constraint @4011213)
(@999987 ^spelling fourteen ^number singular ^super-type @6010000 ^constraint @4011214)
(@999988 ^spelling fifteen ^number singular ^super-type @6010000 ^constraint @4011215)
(@999989 ^spelling sixteen ^number singular ^super-type @6010000 ^constraint @4011216)
(@999990 ^spelling seventeen ^number singular ^super-type @6010000 ^constraint @4011217)
(@999991 ^spelling eighteen ^number singular ^super-type @6010000 ^constraint @4011218)
(@999992 ^spelling nineteen ^number singular ^super-type @6010000 ^constraint @4011219)
(@999993 ^spelling twenty ^number singular ^super-type @6010000 ^constraint @4011220)
(@999994 ^spelling thirty ^number singular ^super-type @6010000 ^constraint @4011230)
(@999995 ^spelling thirty-one ^number singular ^super-type @6010000 ^constraint @4011231)
(@999996 ^spelling D-zero ^referent @4011200 ^structure-type ADJ ^prior-word D ^current-word zero)
(@999997 ^spelling D-one ^referent @4011201 ^structure-type ADJ ^prior-word D ^current-word one)
(@999998 ^spelling D-two ^referent @4011202 ^structure-type ADJ ^prior-word D ^current-word two)
(@999999 ^spelling D-three ^referent @4011203 ^structure-type ADJ ^prior-word D ^current-word three)
(@1000000 ^spelling D-four ^referent @4011204 ^structure-type ADJ ^prior-word D ^current-word four)
(@1000001 ^spelling D-five ^referent @4011205 ^structure-type ADJ ^prior-word D ^current-word five)
(@1000002 ^spelling D-six ^referent @4011206 ^structure-type ADJ ^prior-word D ^current-word six)
(@1000003 ^spelling D-seven ^referent @4011207 ^structure-type ADJ ^prior-word D ^current-word seven)
(@1000004 ^spelling D-eight ^referent @4011208 ^structure-type ADJ ^prior-word D ^current-word eight)
(@1000005 ^spelling D-nine ^referent @4011209 ^structure-type ADJ ^prior-word D ^current-word nine)
(@1000006 ^spelling D-ten ^referent @4011210 ^structure-type ADJ ^prior-word D ^current-word ten)
(@1000007 ^spelling D-eleven ^referent @4011211 ^structure-type ADJ ^prior-word D ^current-word eleven)
(@1000008 ^spelling D-twelve ^referent @4011212 ^structure-type ADJ ^prior-word D ^current-word twelve)
(@1000009 ^spelling D-thirteen ^referent @4011213 ^structure-type ADJ ^prior-word D ^current-word thirteen)
(@1000010 ^spelling D-fourteen ^referent @4011214 ^structure-type ADJ ^prior-word D ^current-word fourteen)
(@1000011 ^spelling D-five ^referent @4011215 ^structure-type ADJ ^prior-word D ^current-word five)
(@1000012 ^spelling D-sixteen ^referent @4011216 ^structure-type ADJ ^prior-word D ^current-word sixteen)
(@1000013 ^spelling D-seventeen ^referent @4011217 ^structure-type ADJ ^prior-word D ^current-word seventeen)
(@1000014 ^spelling D-eighteen ^referent @4011218 ^structure-type ADJ ^prior-word D ^current-word eighteen)
(@1000015 ^spelling D-nineteen ^referent @4011219 ^structure-type ADJ ^prior-word D ^current-word nineteen)
(@1000016 ^spelling D-twenty ^referent @4011210 ^structure-type ADJ ^prior-word D ^current-word twenty)
(@1000017 ^spelling zeroth ^number plural ^super-type @6010000 ^constraint @4011100)
(@1000018 ^spelling first ^structure-type ADJ ^attachment immediate ^constraint @4011101)
(@1000019 ^spelling second ^structure-type ADJ ^attachment immediate ^constraint @4011102)
(@1000020 ^spelling third ^number singular ^super-type @6010000 ^constraint @4011103)
(@1000021 ^spelling fourth ^number singular ^super-type @6010000 ^constraint @4011104)
(@1000022 ^spelling fifth ^number singular ^super-type @6010000 ^constraint @4011105)
(@1000023 ^spelling sixth ^number singular ^super-type @6010000 ^constraint @4011106)
(@1000024 ^spelling seventh ^number singular ^super-type @6010000 ^constraint @4011107)
(@1000025 ^spelling eighth ^number singular ^super-type @6010000 ^constraint @4011108)
(@1000026 ^spelling ninth ^number singular ^super-type @6010000 ^constraint @4011109)
(@1000027 ^handle all)
(@1000028 ^spelling all ^referent @1000027 ^number plural ^specifier universal ^structure-type QUANT ^super-converts-to CP)
(@1000069 ^spelling they ^number plural ^specifier it ^structure-type DP ^super-converts-to CP)
(@1000071 ^spelling anyone ^referent @1000070 ^number singular ^specifier indefinite ^structure-type DP ^super-converts-to CP)
(@1000029 ^structure-type QUANT ^syntactic-structure quantifier ^required true)
(@1000030 ^spelling quant-of ^number plural ^specifier universal ^structure-type QUANT ^prior-word QUANT ^current-word of ^assigners @1000029 ^consumes-prior-word true ^super-converts-to CP)
(@1000031 ^optional true ^structure-type QUANT ^syntactic-structure quantifier)
(@1000032 ^before @1000033 @1000034 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure adjoin ^repeatable true)
(@1000033 ^before @1000034 ^structure-type N ^relative-position after ^syntactic-structure head ^required true)
(@1000035 ^number plural ^specifier universal ^structure-type D ^converts-to DP ^prior-word QUANT ^current-word the ^assigners @1000031 @1000032 @1000033 @1000034 ^construction quant-the ^prior-word-first true false ^consumes-prior-word true ^super-converts-to CP)
(@1000034 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@1000037 ^before @1000039 @1000040 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure adjoin ^repeatable true)
(@1000036 ^optional true ^structure-type QUANT ^syntactic-structure quantifier)
(@1000038 ^number plural ^specifier universal ^structure-type D ^converts-to DP ^prior-word QUANT ^current-word your ^assigners @1000036 @1000037 @1000039 @1000040 ^construction quant-your ^prior-word-first true false ^consumes-prior-word true)
(@1000039 ^before @1000040 ^structure-type N ^relative-position after ^syntactic-structure head ^required true)
(@1000041 ^number plural ^specifier universal ^structure-type D ^converts-to DP ^prior-word QUANT ^current-word ADJ ^assigners @1000042 @1000043 @1000044 @1000045 ^construction quant-ADJ ^prior-word-first true false)
(@1000040 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@1000042 ^optional true ^structure-type QUANT ^syntactic-structure quantifier)
(@1000085 ^spelling lefty ^referent @1000084 ^structure-type ADJ)
(@1000086 ^structure-type RC ^converts-to RCP ^prior-word D ^current-word that ^assigners @1000087 @1000088 @1000089 @1000090 @1000091 @1000092 @1000093 @1000094 ^construction that-is-ADJ/DP/PP/VP//C-ADJP-CONJP/RP/CP ^prior-word-first false ^attachment immediate)
(@1000046 ^number plural ^specifier universal ^structure-type D ^converts-to DP ^prior-word QUANT ^current-word N ^assigners @1000047 @1000048 @1000049 ^construction quant-N ^prior-word-first true false)
(@1000045 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@1000047 ^optional true ^structure-type QUANT ^syntactic-structure quantifier)
(@1000048 ^before @1000049 ^structure-type N ^syntactic-structure head ^required true)
(@1000049 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@1000050 ^spelling some ^referent @1000051 ^number plural ^specifier indefinite ^structure-type QUANT ^super-converts-to DP)
(@1000052 ^handle each ^spelling each ^referent @1000052 ^number singular ^specifier definite ^structure-type QUANT ^super-converts-to DP)
(@1000051 ^handle some)
(@1000054 ^spelling none ^referent @1000053 ^number plural ^specifier indefinite ^structure-type QUANT)
(@1000053 ^handle none)
(@1000055 ^spelling many ^referent @1000056 ^number plural ^specifier indefinite ^structure-type QUANT ^super-converts-to DP)
(@1000057 ^spelling few ^referent @1000058 ^number plural ^specifier indefinite ^structure-type QUANT ^super-converts-to DP)
(@1000056 ^handle many)
(@1000059 ^spelling this ^number singular ^specifier definite ^structure-type DP ^demonstrative true)
(@1000058 ^handle few)
(@1000060 ^spelling that ^number singular ^specifier definite ^structure-type DP ^demonstrative true)
(@1000061 ^number singular ^structure-type N ^prior-word D ^current-word one ^construction D-one ^demonstrative true)
(@1000062 ^number singular ^structure-type N ^prior-word ADJ ^current-word one ^construction adj-one ^demonstrative true)
(@1000063 ^number singular ^structure-type DP ^prior-word this ^current-word one ^construction adj-one ^demonstrative true)
(@1000064 ^spelling |;| ^structure-type SEMICOLON)
(@1000065 ^spelling it ^number singular ^specifier it ^structure-type DP ^super-converts-to CP)
(@1000067 ^property @1000068 ^handle rosie)
(@1000066 ^spelling you ^referent @1000067 ^number singular ^specifier personal ^structure-type DP)
(@1000068 ^type visual ^handle handle)
(@1000088 ^optional true ^structure-type ADV ^relative-position after ^syntactic-structure predicate ^referent-type literal ^repeatable true)
(@1000089 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure predicate ^exclusive @1000090 @1000091 @1000092 @1000093 ^referent-type literal)
(@1000070 ^property @1000068 ^handle anyone)
(@1000073 ^spelling someone ^referent @1000072 ^number singular ^specifier indefinite ^structure-type DP ^super-converts-to CP)
(@1000072 ^property @1000068 ^handle anyone)
(@1000076 ^relation @501003 ^spelling left ^structure-type P ^converts-to PP ^semantic-entity-type relation)
(@1000074 ^structure-type CP ^prior-word you ^current-word VP ^assigners @1000075 ^construction You-VP ^prior-word-first true false)
(@1000075 ^structure-type VP ^syntactic-structure predicate ^required true ^semantic-structure *copy*)
(@1000079 ^relation @501003 ^spelling left-noun ^number singular ^structure-type N ^prior-word the ^current-word left ^semantic-structure relation ^consumes-prior-word false ^semantic-entity-type relation)
(@1000077 ^relation @501002 ^spelling right ^structure-type P ^converts-to PP ^semantic-entity-type relation)
(@1000078 ^relation @501002 ^spelling right-noun ^number singular ^structure-type N ^prior-word the ^current-word right ^semantic-structure relation ^consumes-prior-word false ^semantic-entity-type relation)
(@1000080 ^referent @409002 ^structure-type ADJ)
(@1000081 ^referent @409001 ^structure-type ADJ)
(@1000082 ^spelling righty ^referent @1000083 ^structure-type ADJ)
(@1000117 ^spelling might ^referent @1000116 ^structure-type V-AUX)
(@1000087 ^structure-type IS-V ^syntactic-structure predicate ^required true)
(@1000118 ^handle must)
(@1000119 ^spelling must ^referent @1000118 ^structure-type V-AUX)
(@1000090 ^optional true ^structure-type DP ^relative-position after ^syntactic-structure predicate ^exclusive @1000089 @1000091 @1000092 @1000093 ^referent-type literal)
(@1000091 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure predicate ^exclusive @1000089 @1000090 @1000092 @1000093 ^attachment immediately-follow)
(@1000092 ^optional true ^structure-type C-ADJ-P ^relative-position after ^syntactic-structure predicate ^exclusive @1000089 @1000090 @1000091 @1000093)
(@1000093 ^after @1000089 @1000090 @1000091 @1000092 ^optional true ^structure-type VP ^relative-position after ^syntactic-structure complement ^exclusive @1000089 @1000090 @1000091 @1000092)
(@1000094 ^after @1000089 @1000090 @1000091 @1000092 @1000095 ^optional true ^structure-type CONJ-C-ADJ-P ^relative-position after ^syntactic-structure conj-predicate)
(@1000096 ^spelling then ^structure-type THEN)
(@1000097 ^message-type conditional ^spelling if ^structure-type C ^converts-to CP ^assigners @1000098 @1000099 @1000100 @1000101 ^current-word-first true)
(@1000099 ^before @1000100 @1000101 ^structure-type CP ^relative-position after ^syntactic-structure nil ^required true ^exclusive @1000098 ^delay-merge true ^semantic-structure *embed* ^embed-structure if-subclause)
(@1000098 ^before @1000100 @1000101 ^structure-type VP ^relative-position after ^syntactic-structure nil ^required true ^exclusive @1000099 ^delay-merge true ^semantic-structure *embed* ^embed-structure if-subclause)
(@1000100 ^before @1000101 ^structure-type THEN ^syntactic-structure nil ^required true)
(@1000101 ^structure-type CP ^syntactic-structure nil ^required true ^semantic-structure *embed* ^embed-structure then-subclause)
(@1000102 ^before @1000104 @1000105 ^structure-type CP ^relative-position after ^syntactic-structure nil ^required true ^delay-merge true ^semantic-structure *embed* ^embed-structure when-subclause)
(@1000103 ^message-type conditional ^spelling when ^structure-type C ^converts-to CP ^assigners @1000102 @1000104 @1000105 ^current-word-first true)
(@1000105 ^structure-type CP ^syntactic-structure nil ^required true ^semantic-structure *embed* ^embed-structure then-subclause)
(@1000104 ^before @1000105 ^structure-type SEMICOLON ^syntactic-structure nil ^required true)
(@1000106 ^message-type conditional ^spelling while ^structure-type C ^converts-to CP ^assigners @1000107 @1000108 @1000109 ^current-word-first true)
(@1000108 ^before @1000109 ^structure-type SEMICOLON ^syntactic-structure nil ^required true)
(@1000107 ^before @1000108 @1000109 ^structure-type CP ^relative-position after ^syntactic-structure nil ^required true ^delay-merge true ^semantic-structure *embed* ^embed-structure while-subclause)
(@1000109 ^structure-type CP ^syntactic-structure nil ^required true ^semantic-structure *embed* ^embed-structure then-subclause)
(@1000110 ^spelling V-if ^structure-type IF ^converts-to IF-CLAUSE ^prior-word V ^current-word if whether ^assigners @1000111 ^hypothetical true ^current-word-first false)
(@1000112 ^handle can)
(@1000111 ^structure-type CP ^relative-position after ^syntactic-structure nil ^required true ^semantic-structure *embed* ^embed-structure if-subclause)
(@1000113 ^spelling can ^referent @1000112 ^structure-type V-AUX)
(@1000114 ^spelling may ^referent @1000115 ^structure-type V-AUX)
(@1000115 ^handle may)
(@1000116 ^handle might)
(@1000126 ^spelling would ^referent @1000127 ^structure-type V-AUX)
(@1000129 ^spelling usually ^referent @1000128 ^structure-type V-AUX)
(@1000120 ^spelling could ^referent @1000121 ^structure-type V-AUX)
(@1000122 ^spelling should ^referent @1000123 ^structure-type V-AUX)
(@1000121 ^handle could)
(@1000123 ^handle should)
(@1000124 ^handle will)
(@1000125 ^spelling will ^referent @1000124 ^structure-type V-AUX)
(@1000130 ^optional true ^structure-type ADV ^relative-position before ^syntactic-structure adverb-modifier ^semantic-structure modifier)
(@1000127 ^handle would)
(@1000128 ^handle usually)
(@1000146 ^spelling and ^structure-type CP-CONJ ^alternative-structure CONJ ^semantic-structure conjunction)
(@1000151 ^spelling but ^structure-type CP-CONJ ^alternative-structure CONJ ^semantic-structure conjunction)
(@1000131 ^structure-type DP ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@1000132 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement2 ^semantic-structure arg2)
(@1000133 ^spelling playing ^referent @101120 ^super-type @20999)
(@1000134 ^spelling placing ^referent @101120 ^super-type @20999)
(@1000135 ^spelling moving ^referent @101008 ^super-type @20999)
(@1000136 ^spelling more ^referent @501025 ^structure-type C-ADJ ^converts-to C-ADJ-P ^assigners @1000137 @1000138 @1000139 ^semantic-structure relation)
(@1000139 ^before @1000138 ^structure-type THAN ^syntactic-structure nil ^required true)
(@1000137 ^before @1000138 @1000139 ^structure-type N ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@1000138 ^structure-type N ^relative-position after ^syntactic-structure complement ^required true ^semantic-structure arg2)
(@1000140 ^spelling fewer ^referent @501025 ^structure-type C-ADJ ^converts-to C-ADJ-P ^assigners @1000141 @1000142 @1000143 ^semantic-structure relation)
(@1000143 ^structure-type N ^relative-position after ^syntactic-structure complement ^required true ^semantic-structure arg2)
(@1000141 ^before @1000142 @1000143 ^structure-type N ^relative-position after ^syntactic-structure head ^required true ^semantic-structure arg1)
(@1000142 ^before @1000143 ^structure-type THAN ^syntactic-structure nil ^required true)
(@1000145 ^spelling and ^structure-type CONJ ^alternative-structure CP-CONJ ^semantic-structure conjunction ^super-converts-to CONJP ^merge-delay true)
(@1000144 ^spelling than ^structure-type THAN)
(@1000147 ^spelling andx ^structure-type CONJ ^semantic-structure conjunction ^super-converts-to CONJP CONJ-C-ADJ-P ^merge-delay true)
(@1000148 ^spelling andc ^structure-type CP-CONJ ^semantic-structure conjunction)
(@1000149 ^spelling plus ^structure-type CP-CONJ ^semantic-structure conjunction)
(@1000150 ^spelling but ^structure-type CONJ ^alternative-structure CP-CONJ ^semantic-structure conjunction ^super-converts-to CONJP ^merge-delay true)
(@1000152 ^spelling |, and| ^structure-type CONJ ^prior-word |,| ^current-word and ^semantic-structure conjunction ^converts-to-any true ^merge-delay true)
(@1000153 ^spelling |,| ^structure-type CONJ ^semantic-structure conjunction ^converts-to-any true ^merge-delay true)
(@1000154 ^spelling CONJ-ADJ ^structure-type CONJ-ADJ ^converts-to CONJP ^prior-word CONJ ^current-word ADJ ^assigners @1000155 @1000156 ^prior-word-first true false)
(@1000155 ^before @1000156 ^structure-type CONJ ^syntactic-structure CONJ ^required true)
(@1000158 ^before @1000159 ^structure-type CONJ ^syntactic-structure CONJ ^required true)
(@1000156 ^structure-type ADJ ^syntactic-structure predicate ^required true ^semantic-structure predicate)
(@1000161 ^before @1000162 ^structure-type CONJ ^syntactic-structure CONJ ^required true)
(@1000157 ^spelling CONJ-N ^structure-type CONJ-N ^converts-to CONJP ^prior-word CONJ ^current-word N ^assigners @1000158 @1000159 ^prior-word-first true false)
(@1000159 ^structure-type N ^syntactic-structure head ^required true ^semantic-structure predicate)
(@1000167 ^optional true ^structure-type CP ^syntactic-structure sentence ^exclusive @1000168 ^semantic-structure *embed* ^embed-structure subclause)
(@1000160 ^spelling CONJ-DP ^structure-type CONJ-DP ^converts-to CONJP ^prior-word CONJ ^current-word D ^assigners @1000161 @1000162 ^prior-word-first true false)
(@1000162 ^structure-type DP ^syntactic-structure head ^required true ^semantic-structure predicate)
(@1000163 ^spelling CONJ-PP ^structure-type CONJ-PP ^converts-to CONJP ^prior-word CONJ ^current-word P ^assigners @1000164 @1000165 ^prior-word-first true false)
(@1000164 ^before @1000165 ^structure-type CONJ ^syntactic-structure CONJ ^required true)
(@1000165 ^structure-type PP ^syntactic-structure complement ^required true ^semantic-structure predicate)
(@1000166 ^structure-type C ^converts-to CP ^prior-word CP ^current-word CP-CONJ ^assigners @1000167 @1000168 @1000169 @1000170 ^construction CP-CONJ-CP ^prior-word-first true false)
(@1000168 ^optional true ^structure-type VP ^syntactic-structure sentence ^exclusive @1000167 ^semantic-structure *embed* ^embed-structure subclause)
(@1000169 ^before @1000167 @1000168 @1000170 ^structure-type CP ^syntactic-structure sentence ^required true ^semantic-structure *embed* ^embed-structure subclause)
(@1000170 ^before @1000167 @1000168 ^structure-type CP-CONJ ^syntactic-structure CONJ ^required true)
(@1000171 ^structure-type C ^converts-to CP ^prior-word CP ^current-word CONJ ^assigners @1000172 @1000173 @1000174 ^construction CP-AND-CP ^prior-word-first true false)
(@1000172 ^structure-type CP ^syntactic-structure sentence ^required true ^semantic-structure *embed* ^embed-structure subclause)
(@1000173 ^before @1000172 @1000174 ^structure-type CP ^syntactic-structure sentence ^required true ^semantic-structure *embed* ^embed-structure subclause)
(@1000174 ^before @1000172 ^structure-type CONJ ^syntactic-structure CONJ ^required true)
(@1000175 ^structure-type C ^converts-to CP ^prior-word VP ^current-word CP-CONJ ^assigners @1000176 @1000177 @1000178 @1000179 ^construction VP-CONJ-CP ^prior-word-first true false)
(@1000176 ^optional true ^structure-type CP ^syntactic-structure sentence ^exclusive @1000177 ^semantic-structure *embed* ^embed-structure subclause)
(@1000177 ^optional true ^structure-type VP ^syntactic-structure sentence ^exclusive @1000176 ^semantic-structure *embed* ^embed-structure subclause)
(@1000178 ^before @1000176 @1000177 @1000179 ^structure-type VP ^syntactic-structure sentence ^required true ^semantic-structure *embed* ^embed-structure subclause)
(@1000179 ^before @1000176 @1000177 ^structure-type CP-CONJ ^syntactic-structure CONJ ^required true)
(@1000180 ^spelling CONJ-C-ADJ-P ^structure-type CONJ-C-ADJ ^converts-to CONJ-C-ADJ-P ^prior-word CONJ ^current-word C-ADJ ^assigners @1000181 @1000182 ^prior-word-first true false)
(@1000181 ^before @1000182 ^structure-type CONJ ^syntactic-structure CONJ ^required true)
(@1000182 ^structure-type C-ADJ-P ^syntactic-structure head ^required true)
(@1000183 ^before @1000184 @1000185 @1000186 ^optional true ^structure-type ADJ ^relative-position after ^syntactic-structure adjoin ^repeatable true)
(@1000184 ^before @1000185 @1000186 ^structure-type N ^relative-position after ^syntactic-structure head ^required true)
(@1000187 ^spelling |alice's| ^referent @4016001 ^number singular ^specifier definite ^super-type @991050)
(@1000185 ^before @1000186 ^optional true ^structure-type PP ^relative-position after ^syntactic-structure complement)
(@1000186 ^optional true ^structure-type RCP ^relative-position after ^syntactic-structure complement)
(@1000188 ^spelling |bob's| ^referent @4016002 ^number singular ^specifier definite ^super-type @991050)
(@1000189 ^spelling |charlie's| ^referent @4016003 ^number singular ^specifier definite ^super-type @991050)
(@4010000 ^type unit ^handle unit ^item-type property)
(@4010001 ^property @4010000 ^handle meters ^item-type concept)
(@4010002 ^property @4010000 ^handle feet ^item-type concept)
(@4010003 ^property @4010000 ^handle inches ^item-type concept)
(@4010004 ^property @4010000 ^handle centimeters ^item-type concept)
(@4011000 ^type number ^handle number ^item-type property)
(@4011100 ^property @4011000 ^handle zeroth1 ^item-type predicate)
(@4011101 ^property @4011000 ^handle first1 ^item-type predicate)
(@4011102 ^property @4011000 ^handle second1 ^item-type predicate)
(@4011103 ^property @4011000 ^handle third1 ^item-type predicate)
(@4011104 ^property @4011000 ^handle fourth1 ^item-type predicate)
(@4011105 ^property @4011000 ^handle fifth1 ^item-type predicate)
(@4011106 ^property @4011000 ^handle sixth1 ^item-type predicate)
(@4011107 ^property @4011000 ^handle seventh1 ^item-type predicate)
(@4011108 ^property @4011000 ^handle eighth1 ^item-type predicate)
(@4011109 ^property @4011000 ^handle ninth1 ^item-type predicate)
(@4011200 ^property @4011000 ^handle 0 ^item-type predicate)
(@4011201 ^property @4011000 ^handle 1 ^item-type predicate)
(@4011202 ^property @4011000 ^handle 2 ^item-type predicate)
(@4011203 ^property @4011000 ^handle 3 ^item-type predicate)
(@4011204 ^property @4011000 ^handle 4 ^item-type predicate)
(@4011205 ^property @4011000 ^handle 5 ^item-type predicate)
(@4011206 ^property @4011000 ^handle 6 ^item-type predicate)
(@4011207 ^property @4011000 ^handle 7 ^item-type predicate)
(@4011208 ^property @4011000 ^handle 8 ^item-type predicate)
(@4011209 ^property @4011000 ^handle 9 ^item-type predicate)
(@4011210 ^property @4011000 ^handle 10 ^item-type predicate)
(@4011211 ^property @4011000 ^handle 11 ^item-type predicate)
(@4011212 ^property @4011000 ^handle 12 ^item-type predicate)
(@4011213 ^property @4011000 ^handle 13 ^item-type predicate)
(@4011214 ^property @4011000 ^handle 14 ^item-type predicate)
(@4011215 ^property @4011000 ^handle 15 ^item-type predicate)
(@4011216 ^property @4011000 ^handle 16 ^item-type predicate)
(@4011217 ^property @4011000 ^handle 17 ^item-type predicate)
(@4011218 ^property @4011000 ^handle 18 ^item-type predicate)
(@4011219 ^property @4011000 ^handle 19 ^item-type predicate)
(@4011220 ^property @4011000 ^handle 20 ^item-type predicate)
(@4011221 ^property @4011000 ^handle 21 ^item-type predicate)
(@4011222 ^property @4011000 ^handle 22 ^item-type predicate)
(@4011223 ^property @4011000 ^handle 23 ^item-type predicate)
(@4011224 ^property @4011000 ^handle 24 ^item-type predicate)
(@4011225 ^property @4011000 ^handle 25 ^item-type predicate)
(@4011226 ^property @4011000 ^handle 26 ^item-type predicate)
(@4011227 ^property @4011000 ^handle 27 ^item-type predicate)
(@4011228 ^property @4011000 ^handle 28 ^item-type predicate)
(@4011229 ^property @4011000 ^handle 29 ^item-type predicate)
(@4011230 ^property @4011000 ^handle 30 40 ^item-type predicate)
(@4011231 ^property @4011000 ^handle 31 ^item-type predicate)
(@4011232 ^property @4011000 ^handle 32 ^item-type predicate)
(@4011233 ^property @4011000 ^handle 33 ^item-type predicate)
(@4011234 ^property @4011000 ^handle 34 ^item-type predicate)
(@4011235 ^property @4011000 ^handle 35 ^item-type predicate)
(@4011236 ^property @4011000 ^handle 36 ^item-type predicate)
(@4011237 ^property @4011000 ^handle 37 ^item-type predicate)
(@4011238 ^property @4011000 ^handle 38 ^item-type predicate)
(@4011239 ^property @4011000 ^handle 39 ^item-type predicate)
(@4012000 ^type visual ^handle spatial-shape ^item-type property)
(@4012001 ^property @4012000 ^handle end1 ^item-type predicate)
(@4012002 ^property @4012000 ^handle wall1 ^item-type predicate)
(@4012003 ^property @4012000 ^handle hall1 ^item-type predicate)
(@4012004 ^property @4012000 ^handle door ^item-type predicate ^output-word door)
(@4012005 ^property @4012000 ^handle intersection ^item-type predicate ^output-word intersection)
(@4012006 ^property @4012000 ^handle opening1 ^item-type predicate)
(@4012007 ^property @4012000 ^handle t-intersection1 ^item-type predicate)
(@4012008 ^property @4012000 ^handle room1 ^item-type predicate)
(@4012009 ^property @4012000 ^handle waypoint ^item-type predicate)
(@4012010 ^multiple true ^property @4012000 ^handle door ^item-type predicate ^output-word door)
(@4012011 ^property @4012000 ^handle office1 ^item-type predicate ^style office)
(@4014000 ^type visual ^handle property ^item-type property)
(@4014001 ^property @4014000 ^handle task-completed ^item-type predicate)
(@4014100 ^type state ^handle meat1 ^item-type property)
(@4014101 ^property @4014100 ^handle cooked1 ^item-type concept)
(@4014102 ^property @4014100 ^handle raw1 ^item-type concept)
(@4014200 ^type state ^handle door1 ^item-type property)
(@4014201 ^property @4014200 ^handle open2 ^item-type concept)
(@4014202 ^property @4014200 ^handle closed2 ^item-type concept)
(@4014300 ^type state ^handle action1 ^item-type property)
(@4014302 ^property @4014300 ^handle last-moved1 ^item-type predicate)
(@4015000 ^type visual ^handle property ^item-type property)
(@4015001 ^property @4015000 ^handle task-completed ^item-type predicate)
(@4015002 ^property @4015000 ^handle won ^item-type predicate)
(@4015003 ^property @4015000 ^handle lost ^item-type predicate)
(@4016000 ^handle possessive ^item-type property)
(@4016001 ^property @4016000 ^handle alices1 ^item-type predicate ^person-name alice1)
(@4016002 ^property @4016000 ^handle bobs1 ^item-type predicate ^person-name bob1)
(@4016003 ^property @4016000 ^handle charlies1 ^item-type predicate ^person-name charlie1)
(@4017000 ^type visual ^handle gender ^item-type property)
(@6010000 ^specifier indefinite ^structure-type CN ^converts-to DP ^assigners @999969 @999970 @999971)
}
watch 0
output agent-writes off
exp all on
time run 6000
